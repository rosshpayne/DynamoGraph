package main

import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	_ "github.com/aws/aws-lambda-go/lambdacontext"

	"github.com/aws/aws-sdk-go/aws"
	_ "github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	_ "github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/aws/aws-sdk-go/service/dynamodb/expression"
)

// Insert
// If attribute type is SS, IS, FS, BlS and its type attribute ix is set to x, expand set values to their own items
//    set SortK value to "Z%<attr>%<value>. Z attributes are never queried. A->S are shard values. A is scalar
//    set. P attribute to attribute name
func handleRequest(e events.DynamoDBEvent) {

	fmt.Printf("XXXXXXXXXXXXXXXXX events.DynamoDBEvent  %#v\n", e)

	for _, record := range e.Records {
		fmt.Printf("Processing request data for event ID %s, type %s.\n", record.EventID, record.EventName)

		// Print new values for attributes of type String
		for name, value := range record.Change.NewImage {
			if value.DataType() == events.DataTypeString {
				fmt.Printf("Attribute name: %s, value: %s\n", name, value.String())
			}
		}
	}

	keyC := expression.KeyEqual(expression.Key("PKey"), expression.Value("T#"))
	expr, err := expression.NewBuilder().WithKeyCondition(keyC).Build()
	if err != nil {
		panic(err)
	}
	fmt.Println(expr)

}

func main() {
	lambda.Start(handleRequest)
}

var dynSrv *dynamodb.DynamoDB

func init() {

	// establish dynamodb service
	dynamodbSrv := func() *dynamodb.DynamoDB {
		sess, err := session.NewSession(&aws.Config{
			Region: aws.String("us-east-1"),
		})
		if err != nil {
			log.Panic(err)
		}
		return dynamodb.New(sess, aws.NewConfig())
	}

	dynSrv = dynamodbSrv()

}

DB:2020/08/13 07:22:22 log.go:18: ===============================================================================
grmgr: 2020/08/13 07:22:22.549282 Powering on...
rdfLoader: 2020/08/13 07:22:22.549548 verify started....xx.
rdfLoader: 2020/08/13 07:22:22.549570 saveNode started......
rdfLoader: 2020/08/13 07:22:22.549574 define saveNode limiter......
rdfuuid: 2020/08/13 07:22:22.549589 Powering on...
rdfLoader: 2020/08/13 07:22:22.549596 *************** All started 
rdfLoader: 2020/08/13 07:22:22.560715 .  getType..
rdfLoader: 2020/08/13 07:22:22.560726 node.TyName : [Person]
DB: 2020/08/13 07:22:22.635695 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 74.904713ms
verify: 2020/08/13 07:22:22.635832 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:8, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:11, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 07:22:22.635840  Send Ask request to limiter.
verify: 2020/08/13 07:22:22.635844 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:22:22.635851 verify has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:22:22.635856 ACK from gcmgr....received...
rdfLoader: 2020/08/13 07:22:22.635862 .  getType..
rdfLoader: 2020/08/13 07:22:22.635866 node.TyName : [Person]
verify: 2020/08/13 07:22:22.635884 Pass to unmarshal... 1 &ds.Node{ID:"b", TyName:"Person", Lines:[]ds.Line{ds.Line{N:14, Subj:"b", Pred:"Name", Obj:"Paul Payne"}, ds.Line{N:15, Subj:"b", Pred:"DOB", Obj:"2 June 1960"}, ds.Line{N:16, Subj:"b", Pred:"Age", Obj:"58"}, ds.Line{N:17, Subj:"b", Pred:"Siblings", Obj:"abc"}, ds.Line{N:18, Subj:"b", Pred:"Siblings", Obj:"c"}, ds.Line{N:19, Subj:"b", Pred:"Cars", Obj:"Holden Commodore"}, ds.Line{N:20, Subj:"b", Pred:"Cars", Obj:"Honda"}, ds.Line{N:21, Subj:"b", Pred:"Cars", Obj:"VW Golf"}}, Err:[]error(nil)}
verify: 2020/08/13 07:22:22.635888  Send Ask request to limiter.
verify: 2020/08/13 07:22:22.635892 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:22:22.635896 verify has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:22:22.635901 ACK from gcmgr....received...
verify: 2020/08/13 07:22:22.635907 *** Verify back to waiting on veryifyCh
rdfLoader: 2020/08/13 07:22:22.635950 .  getType..
rdfLoader: 2020/08/13 07:22:22.635954 node.TyName : [Person]
verify: 2020/08/13 07:22:22.635971 Pass to unmarshal... 0 &ds.Node{ID:"c", TyName:"Person", Lines:[]ds.Line{ds.Line{N:1, Subj:"c", Pred:"Name", Obj:"Ian Payne"}, ds.Line{N:2, Subj:"c", Pred:"DOB", Obj:"29 Jan 1953"}, ds.Line{N:3, Subj:"c", Pred:"Age", Obj:"67"}, ds.Line{N:4, Subj:"c", Pred:"Siblings", Obj:"abc"}, ds.Line{N:5, Subj:"c", Pred:"Siblings", Obj:"b"}, ds.Line{N:6, Subj:"c", Pred:"Cars", Obj:"VW Passat"}, ds.Line{N:7, Subj:"c", Pred:"Cars", Obj:"Mitsubishi"}, ds.Line{N:8, Subj:"c", Pred:"Cars", Obj:"Ford Laser"}, ds.Line{N:9, Subj:"c", Pred:"Cars", Obj:"Honda"}}, Err:[]error(nil)}
verify: 2020/08/13 07:22:22.635975  Send Ask request to limiter.
verify: 2020/08/13 07:22:22.635979 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:22:22.635984 verify has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:22:22.635988 ACK from gcmgr....received...
rdfLoader: 2020/08/13 07:22:22.635993 .  getType..
rdfLoader: 2020/08/13 07:22:22.635997 node.TyName : [Person]
verify: 2020/08/13 07:22:22.636022 Pass to unmarshal... 1 &ds.Node{ID:"d", TyName:"Person", Lines:[]ds.Line{ds.Line{N:12, Subj:"d", Pred:"Name", Obj:"Phil Smith"}, ds.Line{N:13, Subj:"d", Pred:"DOB", Obj:"17 June 1976"}, ds.Line{N:14, Subj:"d", Pred:"Age", Obj:"36"}, ds.Line{N:15, Subj:"d", Pred:"Cars", Obj:"Roll Roycet"}, ds.Line{N:16, Subj:"d", Pred:"Cars", Obj:"Bentley"}}, Err:[]error(nil)}
verify: 2020/08/13 07:22:22.636035  Send Ask request to limiter.
verify: 2020/08/13 07:22:22.636039 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:22:22.636044 verify has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:22:22.636048 ACK from gcmgr....received...
verify: 2020/08/13 07:22:22.636053 *** Verify back to waiting on veryifyCh
verify: 2020/08/13 07:22:22.636057 verify at wg.Wait() .....
unmarshalRDF2020/08/13 07:22:22.636069 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:22:22.636074 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/13 07:22:22.636080 StartCh received for unmarshall. rCnt = 2 
rdfLoader: 2020/08/13 07:22:22.636084 Find Ty Address
rdfLoader: 2020/08/13 07:22:22.636089 Find Ty Age
rdfLoader: 2020/08/13 07:22:22.636094 Find Ty Cars
rdfLoader: 2020/08/13 07:22:22.636100 Add to SS . [Bentley]
rdfLoader: 2020/08/13 07:22:22.636104 Find Ty DOB
rdfLoader: 2020/08/13 07:22:22.636109 Find Ty Friends
rdfLoader: 2020/08/13 07:22:22.636113 Find Ty Jobs
rdfLoader: 2020/08/13 07:22:22.636116 Find Ty Name
rdfLoader: 2020/08/13 07:22:22.636121 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:22:22.636125 Find Ty Siblings
rdfLoader: 2020/08/13 07:22:22.636153 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:22:22.636177 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:22:22.636182 Exit  unmarshalRDF. 
grmgr: 2020/08/13 07:22:22.636188 EndCh received for unmarshall. rCnt = 1 
unmarshalRDF2020/08/13 07:22:22.636198 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:22:22.636203 StartCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/13 07:22:22.636208 StartCh received for unmarshall. rCnt = 3 
rdfLoader: 2020/08/13 07:22:22.636212 Find Ty Address
rdfLoader: 2020/08/13 07:22:22.636216 Find Ty Age
rdfLoader: 2020/08/13 07:22:22.636221 Find Ty Cars
rdfLoader: 2020/08/13 07:22:22.636226 Add to SS . [Honda]
rdfLoader: 2020/08/13 07:22:22.636230 Add to SS . [Alfa]
rdfLoader: 2020/08/13 07:22:22.636235 Find Ty DOB
rdfLoader: 2020/08/13 07:22:22.636239 Find Ty Friends
rdfLoader: 2020/08/13 07:22:22.636243 Find Ty Jobs
rdfLoader: 2020/08/13 07:22:22.636247 Find Ty Name
rdfLoader: 2020/08/13 07:22:22.636251 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:22:22.636256 Find Ty Siblings
rdfLoader: 2020/08/13 07:22:22.636268 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:22:22.636292 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:22:22.636297 Exit  unmarshalRDF. 
grmgr: 2020/08/13 07:22:22.636302 EndCh received for unmarshall. rCnt = 2 
unmarshalRDF2020/08/13 07:22:22.636311 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:22:22.636320 StartCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/13 07:22:22.636325 StartCh received for unmarshall. rCnt = 4 
rdfLoader: 2020/08/13 07:22:22.636330 Find Ty Address
rdfLoader: 2020/08/13 07:22:22.636334 Find Ty Age
rdfLoader: 2020/08/13 07:22:22.636339 Find Ty Cars
rdfLoader: 2020/08/13 07:22:22.636344 Add to SS . [Honda]
rdfLoader: 2020/08/13 07:22:22.636348 Add to SS . [VW Golf]
rdfLoader: 2020/08/13 07:22:22.636353 Find Ty DOB
rdfLoader: 2020/08/13 07:22:22.636357 Find Ty Friends
rdfLoader: 2020/08/13 07:22:22.636361 Find Ty Jobs
rdfLoader: 2020/08/13 07:22:22.636365 Find Ty Name
rdfLoader: 2020/08/13 07:22:22.636370 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:22:22.636374 Find Ty Siblings
rdfLoader: 2020/08/13 07:22:22.636385 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:22:22.636410 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:22:22.636414 Exit  unmarshalRDF. 
grmgr: 2020/08/13 07:22:22.636420 EndCh received for unmarshall. rCnt = 3 
unmarshalRDF2020/08/13 07:22:22.636429 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:22:22.636434 StartCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 07:22:22.636456 StartCh received for unmarshall. rCnt = 5 
rdfLoader: 2020/08/13 07:22:22.636460 Find Ty Address
rdfLoader: 2020/08/13 07:22:22.636477 Find Ty Age
rdfLoader: 2020/08/13 07:22:22.636481 Find Ty Cars
rdfLoader: 2020/08/13 07:22:22.636485 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/13 07:22:22.636489 Add to SS . [Ford Laser]
rdfLoader: 2020/08/13 07:22:22.636493 Add to SS . [Honda]
rdfLoader: 2020/08/13 07:22:22.636497 Find Ty DOB
rdfLoader: 2020/08/13 07:22:22.636501 Find Ty Friends
rdfLoader: 2020/08/13 07:22:22.636505 Find Ty Jobs
rdfLoader: 2020/08/13 07:22:22.636523 Find Ty Name
rdfLoader: 2020/08/13 07:22:22.636528 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:22:22.636532 Find Ty Siblings
rdfLoader: 2020/08/13 07:22:22.636542 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:22:22.636577 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:22:22.636582 Exit  unmarshalRDF. 
verify: 2020/08/13 07:22:22.636587 verify exited.....
grmgr: 2020/08/13 07:22:22.636593 EndCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 07:22:22.636598 verify has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/13 07:22:22.636620 StartCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 07:22:22.636625 verify has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
SaveRDFNode: xxx 2020/08/13 07:22:22.636642 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.636649 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.636658 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.636664 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.636670 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.636676 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.636682 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:22:22.636686 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:22:22.636696 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000016c60)}
SaveRDFNode: 2020/08/13 07:22:22.636700 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:22:22.636709 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.636714 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.636720 UID received  : b6s/uIcxQaa5nnudfAo6Jw==
grmgr: 2020/08/13 07:22:22.636934 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/13 07:22:22.636944 verify has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/13 07:22:22.636954 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.636961 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.636967 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.636989 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.637001 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.637007 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.637014 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:22:22.637018 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:22:22.637024 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017440)}
SaveRDFNode: 2020/08/13 07:22:22.637028 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:22:22.637039 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.637044 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.637049 UID received  : 3Q6rQjvkRxCSGC9bkMdvcg==
DB: 2020/08/13 07:22:22.646473 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.723381ms
DB: 2020/08/13 07:22:22.651186 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.675681ms
DB: 2020/08/13 07:22:22.655918 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.700061ms
DB: 2020/08/13 07:22:22.660945 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.83314ms
DB: 2020/08/13 07:22:22.665780 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.795177ms
SaveRDFNode: 2020/08/13 07:22:22.665794 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016c60)}
rdfUIDdb: 2020/08/13 07:22:22.665800 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.665804 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.665809 Received UID: X18=
SaveRDFNode: 2020/08/13 07:22:22.665821 a: = db.Item{PKey:[]uint8{0x6f, 0xab, 0x3f, 0xb8, 0x87, 0x31, 0x41, 0xa6, 0xb9, 0x9e, 0x7b, 0x9d, 0x7c, 0xa, 0x3a, 0x27}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:22:22.667909 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 30.831104ms
DB: 2020/08/13 07:22:22.670710 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.799839ms
SaveRDFNode: 2020/08/13 07:22:22.670740 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016c60)}
rdfUIDdb: 2020/08/13 07:22:22.670747 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.670751 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.670756 Received UID: X18=
SaveRDFNode: 2020/08/13 07:22:22.670767 a: = db.Item{PKey:[]uint8{0x6f, 0xab, 0x3f, 0xb8, 0x87, 0x31, 0x41, 0xa6, 0xb9, 0x9e, 0x7b, 0x9d, 0x7c, 0xa, 0x3a, 0x27}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:22:22.672724 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.782746ms
DB: 2020/08/13 07:22:22.675880 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.072622ms
SaveRDFNode: 2020/08/13 07:22:22.675893 Returned.+++++++++++ No error
grmgr: 2020/08/13 07:22:22.675901 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 07:22:22.675905 Send ack to waiting saveNode...
grmgr: 2020/08/13 07:22:22.675913 verify has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
SaveRDFNode: xxx 2020/08/13 07:22:22.675939 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.675948 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.675953 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.675959 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.675965 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.675970 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.675976 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:22:22.675980 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:22:22.675985 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000385440)}
SaveRDFNode: 2020/08/13 07:22:22.675989 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:22:22.675997 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.676001 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.676006 UID received  : 10jgatSUTHe5gDOnH0FKZA==
grmgr: 2020/08/13 07:22:22.676197 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/13 07:22:22.676206 StartCh received for saveNode. rCnt = 3 
SaveRDFNode: xxx 2020/08/13 07:22:22.676214 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.676220 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.676230 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.676235 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.676257 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.676266 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:22:22.676284 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:22:22.676288 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:22:22.676294 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000385800)}
SaveRDFNode: 2020/08/13 07:22:22.676298 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:22:22.676305 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.676309 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.676315 UID received  : 06/rUszcQpil9XiTivfpDQ==
DB: 2020/08/13 07:22:22.677513 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.754605ms
DB: 2020/08/13 07:22:22.680975 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.943115ms
DB: 2020/08/13 07:22:22.682529 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.183346ms
DB: 2020/08/13 07:22:22.686042 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.497172ms
DB: 2020/08/13 07:22:22.687739 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.731266ms
DB: 2020/08/13 07:22:22.692991 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.209532ms
DB: 2020/08/13 07:22:22.693366 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.284265ms
SaveRDFNode: 2020/08/13 07:22:22.693384 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/13 07:22:22.693391 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.693395 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.693400 Received UID: X18=
SaveRDFNode: 2020/08/13 07:22:22.693414 a: = db.Item{PKey:[]uint8{0xdd, 0xe, 0xab, 0x42, 0x3b, 0xe4, 0x47, 0x10, 0x92, 0x18, 0x2f, 0x5b, 0x90, 0xc7, 0x6f, 0x72}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:22:22.698050 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.899198ms
DB: 2020/08/13 07:22:22.698361 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.898152ms
SaveRDFNode: 2020/08/13 07:22:22.698373 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/13 07:22:22.698380 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.698384 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.698394 Received UID: X18=
SaveRDFNode: 2020/08/13 07:22:22.698405 a: = db.Item{PKey:[]uint8{0xdd, 0xe, 0xab, 0x42, 0x3b, 0xe4, 0x47, 0x10, 0x92, 0x18, 0x2f, 0x5b, 0x90, 0xc7, 0x6f, 0x72}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:22:22.703162 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.704868ms
SaveRDFNode: 2020/08/13 07:22:22.703173 Returned.+++++++++++ No error
grmgr: 2020/08/13 07:22:22.703182 EndCh received for saveNode. rCnt = 2 
DB: 2020/08/13 07:22:22.705055 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 22.495773ms
DB: 2020/08/13 07:22:22.709955 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.86837ms
DB: 2020/08/13 07:22:22.714927 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.830156ms
DB: 2020/08/13 07:22:22.719213 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 21.127807ms
SaveRDFNode: 2020/08/13 07:22:22.719227 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000385440)}
rdfUIDdb: 2020/08/13 07:22:22.719241 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.719245 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.719251 Received UID: X18=
SaveRDFNode: 2020/08/13 07:22:22.719262 a: = db.Item{PKey:[]uint8{0xd7, 0x48, 0xe0, 0x6a, 0xd4, 0x94, 0x4c, 0x77, 0xb9, 0x80, 0x33, 0xa7, 0x1f, 0x41, 0x4a, 0x64}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:22:22.719858 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.897973ms
SaveRDFNode: 2020/08/13 07:22:22.719871 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000385800)}
rdfUIDdb: 2020/08/13 07:22:22.719877 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.719880 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.719886 Received UID: X18=
SaveRDFNode: 2020/08/13 07:22:22.719896 a: = db.Item{PKey:[]uint8{0xd3, 0xaf, 0xeb, 0x52, 0xcc, 0xdc, 0x42, 0x98, 0xa5, 0xf5, 0x78, 0x93, 0x8a, 0xf7, 0xe9, 0xd}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:22:22.724077 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.782607ms
SaveRDFNode: 2020/08/13 07:22:22.724089 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000385440)}
rdfUIDdb: 2020/08/13 07:22:22.724095 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.724099 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.724104 Received UID: X18=
SaveRDFNode: 2020/08/13 07:22:22.724114 a: = db.Item{PKey:[]uint8{0xd7, 0x48, 0xe0, 0x6a, 0xd4, 0x94, 0x4c, 0x77, 0xb9, 0x80, 0x33, 0xa7, 0x1f, 0x41, 0x4a, 0x64}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:22:22.724944 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.017349ms
SaveRDFNode: 2020/08/13 07:22:22.724956 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000385800)}
rdfUIDdb: 2020/08/13 07:22:22.724961 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:22:22.724965 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:22:22.724971 Received UID: X18=
SaveRDFNode: 2020/08/13 07:22:22.724983 a: = db.Item{PKey:[]uint8{0xd3, 0xaf, 0xeb, 0x52, 0xcc, 0xdc, 0x42, 0x98, 0xa5, 0xf5, 0x78, 0x93, 0x8a, 0xf7, 0xe9, 0xd}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:22:22.728901 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.758578ms
SaveRDFNode: 2020/08/13 07:22:22.729002 Returned.+++++++++++ No error
grmgr: 2020/08/13 07:22:22.729015 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/13 07:22:22.730050 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.032564ms
SaveRDFNode: 2020/08/13 07:22:22.730059 Returned.+++++++++++ No error
grmgr: 2020/08/13 07:22:22.731691 EndCh received for saveNode. rCnt = 0 
DB: 2020/08/13 07:22:22.734425 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:22.737286 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:22.740847 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:22.744719 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:22.749896 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.125946ms
DB: 2020/08/13 07:22:22.757606 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.071746ms
FetchForUpdate: 2020/08/13 07:22:22.757621 ** Cache FetchForUpdate Cache Key Value: [06/rUszcQpil9XiTivfpDQ==]   sortk: A#G#:S
FetchNode: 2020/08/13 07:22:22.757627  node: 06/rUszcQpil9XiTivfpDQ== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:22:22.757841 ** Cache FetchForUpdate Cache Key Value: [3Q6rQjvkRxCSGC9bkMdvcg==]   sortk: A#
FetchNode: 2020/08/13 07:22:22.757856  node: 3Q6rQjvkRxCSGC9bkMdvcg== subKey: A#
DB: 2020/08/13 07:22:22.760812 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.140519ms
FetchForUpdate: 2020/08/13 07:22:22.760879 len(nb): 1
fetchItems: 2020/08/13 07:22:22.760887 +++  Cache FetchItems for sortk A#G#:S UID: [06/rUszcQpil9XiTivfpDQ==] 
FetchNode: 2020/08/13 07:22:22.760892  node: 06/rUszcQpil9XiTivfpDQ== subKey: A#G#:S
DB: 2020/08/13 07:22:22.764635 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.713835ms
DB: 2020/08/13 07:22:22.776979 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 11.698691ms
Unlock: 2020/08/13 07:22:22.777110 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 07:22:22.778351 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 20.455332ms
FetchForUpdate: 2020/08/13 07:22:22.778465 len(nb): 7
fetchItems: 2020/08/13 07:22:22.778473 +++  Cache FetchItems for sortk A# UID: [3Q6rQjvkRxCSGC9bkMdvcg==] 
FetchNode: 2020/08/13 07:22:22.778477  node: 3Q6rQjvkRxCSGC9bkMdvcg== subKey: A#
DB: 2020/08/13 07:22:22.782024 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.503102ms
Unlock: 2020/08/13 07:22:22.782154 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/13 07:22:22.782180 ** Cache FetchForUpdate Cache Key Value: [06/rUszcQpil9XiTivfpDQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:22.782186 +++  Cache FetchItems for sortk A#G#:S UID: [06/rUszcQpil9XiTivfpDQ==] 
FetchNode: 2020/08/13 07:22:22.782190  node: 06/rUszcQpil9XiTivfpDQ== subKey: A#G#:S
DB: 2020/08/13 07:22:22.785946 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.717595ms
DB: 2020/08/13 07:22:22.796512 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.987366ms
DB: 2020/08/13 07:22:22.801993 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.088513ms
DB: 2020/08/13 07:22:22.807838 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.338827ms
DB: 2020/08/13 07:22:22.815143 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.873212ms
DB: 2020/08/13 07:22:22.820603 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.87773ms
DB: 2020/08/13 07:22:22.826370 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.292643ms
DB: 2020/08/13 07:22:22.833802 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.980592ms
DB: 2020/08/13 07:22:22.839300 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.972872ms
DB: 2020/08/13 07:22:22.845032 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.24854ms
Unlock: 2020/08/13 07:22:22.845043 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 07:22:22.850534 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.014637ms
FetchForUpdate: 2020/08/13 07:22:22.850651 ** Cache FetchForUpdate Cache Key Value: [06/rUszcQpil9XiTivfpDQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:22.850663 +++  Cache FetchItems for sortk A#G#:S UID: [06/rUszcQpil9XiTivfpDQ==] 
FetchNode: 2020/08/13 07:22:22.850667  node: 06/rUszcQpil9XiTivfpDQ== subKey: A#G#:S
DB: 2020/08/13 07:22:22.854636 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.934443ms
AttachNode: gr1 2020/08/13 07:22:22.854753 Errored: SetUpredAvailable :for  06/rUszcQpil9XiTivfpDQ==
Cache: 2020/08/13 07:22:22.854761 In SetUpredAvailable: pUid, tUID:  06/rUszcQpil9XiTivfpDQ== 06/rUszcQpil9XiTivfpDQ== A#G#:S
Cache: 2020/08/13 07:22:22.854765 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:22:22.860030 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.232086ms
Unlock: 2020/08/13 07:22:22.860039 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:22:22.873709 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 13.268494ms
DB: 2020/08/13 07:22:22.878048 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:22.881389 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:22.887866 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:22.892014 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:22.897610 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.433737ms
DB: 2020/08/13 07:22:22.902915 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.041863ms
FetchForUpdate: 2020/08/13 07:22:22.902932 ** Cache FetchForUpdate Cache Key Value: [10jgatSUTHe5gDOnH0FKZA==]   sortk: A#G#:S
FetchNode: 2020/08/13 07:22:22.902938  node: 10jgatSUTHe5gDOnH0FKZA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:22:22.903115 ** Cache FetchForUpdate Cache Key Value: [3Q6rQjvkRxCSGC9bkMdvcg==]   sortk: A#
fetchItems: 2020/08/13 07:22:22.903125 +++  Cache FetchItems for sortk A# UID: [3Q6rQjvkRxCSGC9bkMdvcg==] 
FetchNode: 2020/08/13 07:22:22.903137  node: 3Q6rQjvkRxCSGC9bkMdvcg== subKey: A#
DB: 2020/08/13 07:22:22.906334 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.364303ms
FetchForUpdate: 2020/08/13 07:22:22.906370 len(nb): 1
fetchItems: 2020/08/13 07:22:22.906394 +++  Cache FetchItems for sortk A#G#:S UID: [10jgatSUTHe5gDOnH0FKZA==] 
FetchNode: 2020/08/13 07:22:22.906399  node: 10jgatSUTHe5gDOnH0FKZA== subKey: A#G#:S
DB: 2020/08/13 07:22:22.907215 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.994232ms
Unlock: 2020/08/13 07:22:22.908429 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:22:22.909799 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.352096ms
DB: 2020/08/13 07:22:22.915491 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.398632ms
Unlock: 2020/08/13 07:22:22.915502 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 07:22:22.915776 ** Cache FetchForUpdate Cache Key Value: [10jgatSUTHe5gDOnH0FKZA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:22.915787 +++  Cache FetchItems for sortk A#G#:S UID: [10jgatSUTHe5gDOnH0FKZA==] 
FetchNode: 2020/08/13 07:22:22.915792  node: 10jgatSUTHe5gDOnH0FKZA== subKey: A#G#:S
DB: 2020/08/13 07:22:22.919659 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.83343ms
DB: 2020/08/13 07:22:22.926794 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.58784ms
DB: 2020/08/13 07:22:22.933043 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.870082ms
DB: 2020/08/13 07:22:22.938821 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.194152ms
DB: 2020/08/13 07:22:22.946032 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.764811ms
DB: 2020/08/13 07:22:22.953177 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.994653ms
DB: 2020/08/13 07:22:22.958554 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.310648ms
DB: 2020/08/13 07:22:22.964580 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.967516ms
DB: 2020/08/13 07:22:22.969578 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.935327ms
DB: 2020/08/13 07:22:22.974844 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.199366ms
Unlock: 2020/08/13 07:22:22.974856 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 07:22:22.980972 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.609569ms
FetchForUpdate: 2020/08/13 07:22:22.980988 ** Cache FetchForUpdate Cache Key Value: [10jgatSUTHe5gDOnH0FKZA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:22.980996 +++  Cache FetchItems for sortk A#G#:S UID: [10jgatSUTHe5gDOnH0FKZA==] 
FetchNode: 2020/08/13 07:22:22.981001  node: 10jgatSUTHe5gDOnH0FKZA== subKey: A#G#:S
DB: 2020/08/13 07:22:22.985369 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.334423ms
AttachNode: gr1 2020/08/13 07:22:22.985453 Errored: SetUpredAvailable :for  10jgatSUTHe5gDOnH0FKZA==
Cache: 2020/08/13 07:22:22.985460 In SetUpredAvailable: pUid, tUID:  10jgatSUTHe5gDOnH0FKZA== 10jgatSUTHe5gDOnH0FKZA== A#G#:S
Cache: 2020/08/13 07:22:22.985464 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:22:22.990783 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.285185ms
Unlock: 2020/08/13 07:22:22.990794 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:22:22.995990 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.1132ms
DB: 2020/08/13 07:22:22.999207 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.008679 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.012206 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.016379 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.021842 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.271356ms
DB: 2020/08/13 07:22:23.027245 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.062234ms
FetchForUpdate: 2020/08/13 07:22:23.027261 ** Cache FetchForUpdate Cache Key Value: [3Q6rQjvkRxCSGC9bkMdvcg==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:23.027268 +++  Cache FetchItems for sortk A#G#:S UID: [3Q6rQjvkRxCSGC9bkMdvcg==] 
FetchNode: 2020/08/13 07:22:23.027273  node: 3Q6rQjvkRxCSGC9bkMdvcg== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:22:23.027453 ** Cache FetchForUpdate Cache Key Value: [06/rUszcQpil9XiTivfpDQ==]   sortk: A#
fetchItems: 2020/08/13 07:22:23.027462 +++  Cache FetchItems for sortk A# UID: [06/rUszcQpil9XiTivfpDQ==] 
FetchNode: 2020/08/13 07:22:23.027475  node: 06/rUszcQpil9XiTivfpDQ== subKey: A#
DB: 2020/08/13 07:22:23.031099 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.545286ms
Unlock: 2020/08/13 07:22:23.032668 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:22:23.033363 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.054584ms
DB: 2020/08/13 07:22:23.038977 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.302002ms
Unlock: 2020/08/13 07:22:23.038988 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 07:22:23.039339 ** Cache FetchForUpdate Cache Key Value: [3Q6rQjvkRxCSGC9bkMdvcg==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:23.039349 +++  Cache FetchItems for sortk A#G#:S UID: [3Q6rQjvkRxCSGC9bkMdvcg==] 
FetchNode: 2020/08/13 07:22:23.039354  node: 3Q6rQjvkRxCSGC9bkMdvcg== subKey: A#G#:S
DB: 2020/08/13 07:22:23.043732 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.343698ms
DB: 2020/08/13 07:22:23.051404 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.081519ms
DB: 2020/08/13 07:22:23.056966 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.08838ms
DB: 2020/08/13 07:22:23.062809 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.21536ms
DB: 2020/08/13 07:22:23.069975 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.689609ms
DB: 2020/08/13 07:22:23.075543 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.055238ms
DB: 2020/08/13 07:22:23.081453 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.390246ms
DB: 2020/08/13 07:22:23.088546 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.611532ms
DB: 2020/08/13 07:22:23.094138 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.037777ms
DB: 2020/08/13 07:22:23.099881 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.287062ms
Unlock: 2020/08/13 07:22:23.099893 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 07:22:23.106274 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.716586ms
FetchForUpdate: 2020/08/13 07:22:23.106290 ** Cache FetchForUpdate Cache Key Value: [3Q6rQjvkRxCSGC9bkMdvcg==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:23.106298 +++  Cache FetchItems for sortk A#G#:S UID: [3Q6rQjvkRxCSGC9bkMdvcg==] 
FetchNode: 2020/08/13 07:22:23.106303  node: 3Q6rQjvkRxCSGC9bkMdvcg== subKey: A#G#:S
DB: 2020/08/13 07:22:23.110687 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.349712ms
AttachNode: gr1 2020/08/13 07:22:23.110777 Errored: SetUpredAvailable :for  3Q6rQjvkRxCSGC9bkMdvcg==
Cache: 2020/08/13 07:22:23.110785 In SetUpredAvailable: pUid, tUID:  3Q6rQjvkRxCSGC9bkMdvcg== 3Q6rQjvkRxCSGC9bkMdvcg== A#G#:S
Cache: 2020/08/13 07:22:23.110789 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:22:23.116142 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.313332ms
Unlock: 2020/08/13 07:22:23.116152 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:22:23.121520 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.284527ms
DB: 2020/08/13 07:22:23.124731 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.130070 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.134140 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.137663 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.143562 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.831122ms
DB: 2020/08/13 07:22:23.149218 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.28038ms
FetchForUpdate: 2020/08/13 07:22:23.149233 ** Cache FetchForUpdate Cache Key Value: [10jgatSUTHe5gDOnH0FKZA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:23.149239 +++  Cache FetchItems for sortk A#G#:S UID: [10jgatSUTHe5gDOnH0FKZA==] 
FetchNode: 2020/08/13 07:22:23.149243  node: 10jgatSUTHe5gDOnH0FKZA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:22:23.149507 ** Cache FetchForUpdate Cache Key Value: [06/rUszcQpil9XiTivfpDQ==]   sortk: A#
fetchItems: 2020/08/13 07:22:23.149518 +++  Cache FetchItems for sortk A# UID: [06/rUszcQpil9XiTivfpDQ==] 
FetchNode: 2020/08/13 07:22:23.149549  node: 06/rUszcQpil9XiTivfpDQ== subKey: A#
DB: 2020/08/13 07:22:23.153151 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.55715ms
Unlock: 2020/08/13 07:22:23.154873 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:22:23.156611 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 7.331221ms
DB: 2020/08/13 07:22:23.163075 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.899013ms
DB: 2020/08/13 07:22:23.168210 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.079118ms
DB: 2020/08/13 07:22:23.168227 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.079118ms
DB: 2020/08/13 07:22:23.173406 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.147502ms
DB: 2020/08/13 07:22:23.173422 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.147502ms
DB: 2020/08/13 07:22:23.178822 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.337126ms
DB: 2020/08/13 07:22:23.184176 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.127222ms
Unlock: 2020/08/13 07:22:23.184310 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 07:22:23.193420 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.213901ms
DB: 2020/08/13 07:22:23.198797 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.116718ms
DB: 2020/08/13 07:22:23.205175 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.679484ms
DB: 2020/08/13 07:22:23.212671 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.894518ms
DB: 2020/08/13 07:22:23.218685 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.314147ms
DB: 2020/08/13 07:22:23.226567 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.814993ms
DB: 2020/08/13 07:22:23.233561 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.917731ms
DB: 2020/08/13 07:22:23.238743 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.125366ms
DB: 2020/08/13 07:22:23.243874 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.064522ms
DB: 2020/08/13 07:22:23.258469 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 14.535172ms
FetchForUpdate: 2020/08/13 07:22:23.258485 ** Cache FetchForUpdate Cache Key Value: [10jgatSUTHe5gDOnH0FKZA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:23.258493 +++  Cache FetchItems for sortk A#G#:S UID: [10jgatSUTHe5gDOnH0FKZA==] 
FetchNode: 2020/08/13 07:22:23.258498  node: 10jgatSUTHe5gDOnH0FKZA== subKey: A#G#:S
DB: 2020/08/13 07:22:23.262939 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.396153ms
AttachNode: gr1 2020/08/13 07:22:23.263031 Errored: SetUpredAvailable :for  10jgatSUTHe5gDOnH0FKZA==
Cache: 2020/08/13 07:22:23.263039 In SetUpredAvailable: pUid, tUID:  10jgatSUTHe5gDOnH0FKZA== ddi9YFtmTq+YORQaTSS+ag== A#G#:S
Cache: 2020/08/13 07:22:23.263043 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:22:23.270235 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.157115ms
Unlock: 2020/08/13 07:22:23.270250 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:22:23.275703 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.086444ms
DB: 2020/08/13 07:22:23.279917 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.283126 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.286451 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.290553 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.295746 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.116488ms
DB: 2020/08/13 07:22:23.301257 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.329851ms
FetchForUpdate: 2020/08/13 07:22:23.301276 ** Cache FetchForUpdate Cache Key Value: [3Q6rQjvkRxCSGC9bkMdvcg==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:23.301282 +++  Cache FetchItems for sortk A#G#:S UID: [3Q6rQjvkRxCSGC9bkMdvcg==] 
FetchNode: 2020/08/13 07:22:23.301287  node: 3Q6rQjvkRxCSGC9bkMdvcg== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:22:23.301468 ** Cache FetchForUpdate Cache Key Value: [10jgatSUTHe5gDOnH0FKZA==]   sortk: A#
fetchItems: 2020/08/13 07:22:23.301478 +++  Cache FetchItems for sortk A# UID: [10jgatSUTHe5gDOnH0FKZA==] 
FetchNode: 2020/08/13 07:22:23.301490  node: 10jgatSUTHe5gDOnH0FKZA== subKey: A#
DB: 2020/08/13 07:22:23.305651 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.099821ms
Unlock: 2020/08/13 07:22:23.306432 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:22:23.307007 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.686823ms
DB: 2020/08/13 07:22:23.312552 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.234326ms
DB: 2020/08/13 07:22:23.317607 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.018722ms
DB: 2020/08/13 07:22:23.317623 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.018722ms
DB: 2020/08/13 07:22:23.322714 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.049056ms
DB: 2020/08/13 07:22:23.322732 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.049056ms
DB: 2020/08/13 07:22:23.328373 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.446563ms
DB: 2020/08/13 07:22:23.333976 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.450271ms
Unlock: 2020/08/13 07:22:23.333989 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 07:22:23.342274 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.620328ms
DB: 2020/08/13 07:22:23.347504 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.046514ms
DB: 2020/08/13 07:22:23.353438 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.537135ms
DB: 2020/08/13 07:22:23.360771 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.006611ms
DB: 2020/08/13 07:22:23.366505 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.409853ms
DB: 2020/08/13 07:22:23.372452 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.61234ms
DB: 2020/08/13 07:22:23.379550 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.775885ms
DB: 2020/08/13 07:22:23.385181 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.164667ms
DB: 2020/08/13 07:22:23.391844 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.011878ms
DB: 2020/08/13 07:22:23.397272 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.110078ms
FetchForUpdate: 2020/08/13 07:22:23.397285 ** Cache FetchForUpdate Cache Key Value: [3Q6rQjvkRxCSGC9bkMdvcg==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:23.397292 +++  Cache FetchItems for sortk A#G#:S UID: [3Q6rQjvkRxCSGC9bkMdvcg==] 
FetchNode: 2020/08/13 07:22:23.397296  node: 3Q6rQjvkRxCSGC9bkMdvcg== subKey: A#G#:S
DB: 2020/08/13 07:22:23.402331 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.001922ms
AttachNode: gr1 2020/08/13 07:22:23.402556 Errored: SetUpredAvailable :for  3Q6rQjvkRxCSGC9bkMdvcg==
Cache: 2020/08/13 07:22:23.402587 In SetUpredAvailable: pUid, tUID:  3Q6rQjvkRxCSGC9bkMdvcg== 6Oz7MgY2SsqCG6qaPu1Cmg== A#G#:S
Cache: 2020/08/13 07:22:23.402592 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:22:23.407984 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.35719ms
Unlock: 2020/08/13 07:22:23.407995 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:22:23.414031 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.521893ms
DB: 2020/08/13 07:22:23.418403 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.421823 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.425617 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.429783 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:22:23.435123 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.260209ms
DB: 2020/08/13 07:22:23.440559 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.051175ms
FetchForUpdate: 2020/08/13 07:22:23.440586 ** Cache FetchForUpdate Cache Key Value: [06/rUszcQpil9XiTivfpDQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:23.440592 +++  Cache FetchItems for sortk A#G#:S UID: [06/rUszcQpil9XiTivfpDQ==] 
FetchNode: 2020/08/13 07:22:23.440598  node: 06/rUszcQpil9XiTivfpDQ== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:22:23.440768 ** Cache FetchForUpdate Cache Key Value: [10jgatSUTHe5gDOnH0FKZA==]   sortk: A#
fetchItems: 2020/08/13 07:22:23.440783 +++  Cache FetchItems for sortk A# UID: [10jgatSUTHe5gDOnH0FKZA==] 
FetchNode: 2020/08/13 07:22:23.440794  node: 10jgatSUTHe5gDOnH0FKZA== subKey: A#
DB: 2020/08/13 07:22:23.444447 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.819004ms
DB: 2020/08/13 07:22:23.445538 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.670251ms
Unlock: 2020/08/13 07:22:23.446941 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:22:23.450201 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.286328ms
DB: 2020/08/13 07:22:23.455204 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.968322ms
DB: 2020/08/13 07:22:23.455364 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.968322ms
DB: 2020/08/13 07:22:23.460513 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.068661ms
DB: 2020/08/13 07:22:23.460531 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.068661ms
DB: 2020/08/13 07:22:23.466087 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.341027ms
DB: 2020/08/13 07:22:23.471669 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.396556ms
Unlock: 2020/08/13 07:22:23.471796 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 07:22:23.479333 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.616871ms
DB: 2020/08/13 07:22:23.484639 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.00892ms
DB: 2020/08/13 07:22:23.490596 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.378357ms
DB: 2020/08/13 07:22:23.498085 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.913632ms
DB: 2020/08/13 07:22:23.503511 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.020828ms
DB: 2020/08/13 07:22:23.512541 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 8.524749ms
DB: 2020/08/13 07:22:23.520584 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.452186ms
DB: 2020/08/13 07:22:23.525848 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.208304ms
DB: 2020/08/13 07:22:23.531110 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.198901ms
DB: 2020/08/13 07:22:23.536155 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.991145ms
FetchForUpdate: 2020/08/13 07:22:23.536167 ** Cache FetchForUpdate Cache Key Value: [06/rUszcQpil9XiTivfpDQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:22:23.536173 +++  Cache FetchItems for sortk A#G#:S UID: [06/rUszcQpil9XiTivfpDQ==] 
FetchNode: 2020/08/13 07:22:23.536178  node: 06/rUszcQpil9XiTivfpDQ== subKey: A#G#:S
DB: 2020/08/13 07:22:23.540710 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.50064ms
AttachNode: gr1 2020/08/13 07:22:23.540809 Errored: SetUpredAvailable :for  06/rUszcQpil9XiTivfpDQ==
Cache: 2020/08/13 07:22:23.540817 In SetUpredAvailable: pUid, tUID:  06/rUszcQpil9XiTivfpDQ== ejUEHlMwQEGU8TSEcnyiDA== A#G#:S
Cache: 2020/08/13 07:22:23.540822 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:22:23.545904 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.048002ms
Unlock: 2020/08/13 07:22:23.545913 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:22:23.551508 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.039381ms
DB:2020/08/13 07:52:14 log.go:18: ===============================================================================
grmgr: 2020/08/13 07:52:14.168038 Powering on...
rdfLoader: 2020/08/13 07:52:14.168379 verify started....xx.
rdfLoader: 2020/08/13 07:52:14.168407 saveNode started......
rdfLoader: 2020/08/13 07:52:14.168412 define saveNode limiter......
rdfuuid: 2020/08/13 07:52:14.168427 Powering on...
rdfLoader: 2020/08/13 07:52:14.168434 *************** All started 
rdfLoader: 2020/08/13 07:52:14.176195 .  getType..
rdfLoader: 2020/08/13 07:52:14.176206 node.TyName : [Person]
DB: 2020/08/13 07:52:14.251424 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 75.158393ms
verify: 2020/08/13 07:52:14.251874 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:8, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:11, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 07:52:14.251887  Send Ask request to limiter.
verify: 2020/08/13 07:52:14.251892 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:52:14.251899 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:52:14.251905 ACK from gcmgr....received...
rdfLoader: 2020/08/13 07:52:14.251912 .  getType..
rdfLoader: 2020/08/13 07:52:14.251916 node.TyName : [Person]
verify: 2020/08/13 07:52:14.251936 Pass to unmarshal... 1 &ds.Node{ID:"b", TyName:"Person", Lines:[]ds.Line{ds.Line{N:14, Subj:"b", Pred:"Name", Obj:"Paul Payne"}, ds.Line{N:15, Subj:"b", Pred:"DOB", Obj:"2 June 1960"}, ds.Line{N:16, Subj:"b", Pred:"Age", Obj:"58"}, ds.Line{N:17, Subj:"b", Pred:"Siblings", Obj:"abc"}, ds.Line{N:18, Subj:"b", Pred:"Siblings", Obj:"c"}, ds.Line{N:19, Subj:"b", Pred:"Cars", Obj:"Holden Commodore"}, ds.Line{N:20, Subj:"b", Pred:"Cars", Obj:"Honda"}, ds.Line{N:21, Subj:"b", Pred:"Cars", Obj:"VW Golf"}}, Err:[]error(nil)}
verify: 2020/08/13 07:52:14.251940  Send Ask request to limiter.
verify: 2020/08/13 07:52:14.251943 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:52:14.251948 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:52:14.251953 ACK from gcmgr....received...
verify: 2020/08/13 07:52:14.251966 *** Verify back to waiting on veryifyCh
unmarshalRDF2020/08/13 07:52:14.252346 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:52:14.252370 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/13 07:52:14.252376 StartCh received for unmarshall. rCnt = 2 
rdfLoader: 2020/08/13 07:52:14.252381 Find Ty Address
rdfLoader: 2020/08/13 07:52:14.252385 Find Ty Age
rdfLoader: 2020/08/13 07:52:14.252391 Find Ty Cars
rdfLoader: 2020/08/13 07:52:14.252398 Add to SS . [Honda]
rdfLoader: 2020/08/13 07:52:14.252402 Add to SS . [VW Golf]
rdfLoader: 2020/08/13 07:52:14.252406 Find Ty DOB
rdfLoader: 2020/08/13 07:52:14.252412 Find Ty Friends
rdfLoader: 2020/08/13 07:52:14.252416 Find Ty Jobs
rdfLoader: 2020/08/13 07:52:14.252426 Find Ty Name
rdfLoader: 2020/08/13 07:52:14.252431 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:52:14.252435 Find Ty Siblings
rdfLoader: 2020/08/13 07:52:14.252457 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:52:14.252498 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:52:14.252514 Exit  unmarshalRDF. 
grmgr: 2020/08/13 07:52:14.252520 EndCh received for unmarshall. rCnt = 1 
unmarshalRDF2020/08/13 07:52:14.252531 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:52:14.252536 StartCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/13 07:52:14.252540 StartCh received for unmarshall. rCnt = 3 
rdfLoader: 2020/08/13 07:52:14.252545 Find Ty Address
rdfLoader: 2020/08/13 07:52:14.252549 Find Ty Age
rdfLoader: 2020/08/13 07:52:14.252553 Find Ty Cars
rdfLoader: 2020/08/13 07:52:14.252558 Add to SS . [Honda]
rdfLoader: 2020/08/13 07:52:14.252562 Add to SS . [Alfa]
rdfLoader: 2020/08/13 07:52:14.252566 Find Ty DOB
rdfLoader: 2020/08/13 07:52:14.252571 Find Ty Friends
rdfLoader: 2020/08/13 07:52:14.252574 Find Ty Jobs
rdfLoader: 2020/08/13 07:52:14.252578 Find Ty Name
rdfLoader: 2020/08/13 07:52:14.252582 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:52:14.252586 Find Ty Siblings
rdfLoader: 2020/08/13 07:52:14.252599 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:52:14.252627 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:52:14.252631 Exit  unmarshalRDF. 
grmgr: 2020/08/13 07:52:14.252636 EndCh received for unmarshall. rCnt = 2 
saveNode: 2020/08/13 07:52:14.252642 read from saveCH channel 1 
grmgr: 2020/08/13 07:52:14.252647 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 07:52:14.252651 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 07:52:14.252656 read from saveCH channel 2 
grmgr: 2020/08/13 07:52:14.252661 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 07:52:14.252665 limiter has ACK and will start goroutine...
SaveRDFNode: xxx 2020/08/13 07:52:14.252710 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.252715 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.252721 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.252726 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.252731 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.252736 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.252741 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:52:14.252745 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:52:14.252755 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0007cc1e0)}
SaveRDFNode: 2020/08/13 07:52:14.252758 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:52:14.252767 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.252771 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.252775 UID received  : vtkScEXWR5qe0hR2vqXIeA==
grmgr: 2020/08/13 07:52:14.253000 StartCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 07:52:14.253009 StartCh received for saveNode. rCnt = 2 
SaveRDFNode: xxx 2020/08/13 07:52:14.253017 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.253068 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.253078 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.253085 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.253090 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.253096 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.253102 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:52:14.253105 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:52:14.253111 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0007cc5a0)}
SaveRDFNode: 2020/08/13 07:52:14.253115 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:52:14.253122 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.253130 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.253135 UID received  : /Lfp9DAyT4eA0nNtWZB8aw==
rdfLoader: 2020/08/13 07:52:14.255428 .  getType..
rdfLoader: 2020/08/13 07:52:14.255438 node.TyName : [Person]
verify: 2020/08/13 07:52:14.255463 Pass to unmarshal... 0 &ds.Node{ID:"c", TyName:"Person", Lines:[]ds.Line{ds.Line{N:1, Subj:"c", Pred:"Name", Obj:"Ian Payne"}, ds.Line{N:2, Subj:"c", Pred:"DOB", Obj:"29 Jan 1953"}, ds.Line{N:3, Subj:"c", Pred:"Age", Obj:"67"}, ds.Line{N:4, Subj:"c", Pred:"Siblings", Obj:"abc"}, ds.Line{N:5, Subj:"c", Pred:"Siblings", Obj:"b"}, ds.Line{N:6, Subj:"c", Pred:"Cars", Obj:"VW Passat"}, ds.Line{N:7, Subj:"c", Pred:"Cars", Obj:"Mitsubishi"}, ds.Line{N:8, Subj:"c", Pred:"Cars", Obj:"Ford Laser"}, ds.Line{N:9, Subj:"c", Pred:"Cars", Obj:"Honda"}}, Err:[]error(nil)}
verify: 2020/08/13 07:52:14.255467  Send Ask request to limiter.
verify: 2020/08/13 07:52:14.255471 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:52:14.255477 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:52:14.255482 ACK from gcmgr....received...
rdfLoader: 2020/08/13 07:52:14.255486 .  getType..
rdfLoader: 2020/08/13 07:52:14.255506 node.TyName : [Person]
verify: 2020/08/13 07:52:14.255522 Pass to unmarshal... 1 &ds.Node{ID:"d", TyName:"Person", Lines:[]ds.Line{ds.Line{N:12, Subj:"d", Pred:"Name", Obj:"Phil Smith"}, ds.Line{N:13, Subj:"d", Pred:"DOB", Obj:"17 June 1976"}, ds.Line{N:14, Subj:"d", Pred:"Age", Obj:"36"}, ds.Line{N:15, Subj:"d", Pred:"Cars", Obj:"Roll Roycet"}, ds.Line{N:16, Subj:"d", Pred:"Cars", Obj:"Bentley"}}, Err:[]error(nil)}
verify: 2020/08/13 07:52:14.255526  Send Ask request to limiter.
verify: 2020/08/13 07:52:14.255530 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:52:14.255534 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:52:14.255539 ACK from gcmgr....received...
verify: 2020/08/13 07:52:14.255543 *** Verify back to waiting on veryifyCh
verify: 2020/08/13 07:52:14.255547 verify at wg.Wait() .....
unmarshalRDF2020/08/13 07:52:14.255558 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:52:14.255564 StartCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/13 07:52:14.255569 StartCh received for unmarshall. rCnt = 4 
rdfLoader: 2020/08/13 07:52:14.255577 Find Ty Address
rdfLoader: 2020/08/13 07:52:14.255581 Find Ty Age
rdfLoader: 2020/08/13 07:52:14.255587 Find Ty Cars
rdfLoader: 2020/08/13 07:52:14.255592 Add to SS . [Bentley]
rdfLoader: 2020/08/13 07:52:14.255596 Find Ty DOB
rdfLoader: 2020/08/13 07:52:14.255601 Find Ty Friends
rdfLoader: 2020/08/13 07:52:14.255604 Find Ty Jobs
rdfLoader: 2020/08/13 07:52:14.255613 Find Ty Name
rdfLoader: 2020/08/13 07:52:14.255618 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:52:14.255622 Find Ty Siblings
rdfLoader: 2020/08/13 07:52:14.255636 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:52:14.255676 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:52:14.255681 Exit  unmarshalRDF. 
grmgr: 2020/08/13 07:52:14.255688 EndCh received for unmarshall. rCnt = 3 
unmarshalRDF2020/08/13 07:52:14.255699 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:52:14.255718 StartCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 07:52:14.255723 StartCh received for unmarshall. rCnt = 5 
rdfLoader: 2020/08/13 07:52:14.255728 Find Ty Address
rdfLoader: 2020/08/13 07:52:14.255732 Find Ty Age
rdfLoader: 2020/08/13 07:52:14.255737 Find Ty Cars
rdfLoader: 2020/08/13 07:52:14.255742 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/13 07:52:14.255746 Add to SS . [Ford Laser]
rdfLoader: 2020/08/13 07:52:14.255750 Add to SS . [Honda]
rdfLoader: 2020/08/13 07:52:14.255754 Find Ty DOB
rdfLoader: 2020/08/13 07:52:14.255758 Find Ty Friends
rdfLoader: 2020/08/13 07:52:14.255762 Find Ty Jobs
rdfLoader: 2020/08/13 07:52:14.255766 Find Ty Name
rdfLoader: 2020/08/13 07:52:14.255770 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:52:14.255774 Find Ty Siblings
rdfLoader: 2020/08/13 07:52:14.255788 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:52:14.255830 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:52:14.255836 Exit  unmarshalRDF. 
verify: 2020/08/13 07:52:14.255841 verify exited.....
saveNode: 2020/08/13 07:52:14.255846 read from saveCH channel 3 
grmgr: 2020/08/13 07:52:14.255852 EndCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 07:52:14.255857 has ASKed. Cnt is above limit. Mark saveNode as waiting
DB: 2020/08/13 07:52:14.257692 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.889447ms
DB: 2020/08/13 07:52:14.261341 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.176444ms
DB: 2020/08/13 07:52:14.264783 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.057848ms
DB: 2020/08/13 07:52:14.268073 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.254228ms
DB: 2020/08/13 07:52:14.272150 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.463679ms
DB: 2020/08/13 07:52:14.282822 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 21.44097ms
DB: 2020/08/13 07:52:14.287686 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.812917ms
DB: 2020/08/13 07:52:14.291894 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 19.707883ms
SaveRDFNode: 2020/08/13 07:52:14.291911 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc1e0)}
rdfUIDdb: 2020/08/13 07:52:14.291919 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.291923 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.291929 Received UID: X18=
SaveRDFNode: 2020/08/13 07:52:14.291943 a: = db.Item{PKey:[]uint8{0xbe, 0xd9, 0x12, 0x70, 0x45, 0xd6, 0x47, 0x9a, 0x9e, 0xd2, 0x14, 0x76, 0xbe, 0xa5, 0xc8, 0x78}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:52:14.292405 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.666728ms
DB: 2020/08/13 07:52:14.296853 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.876407ms
SaveRDFNode: 2020/08/13 07:52:14.296866 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc1e0)}
rdfUIDdb: 2020/08/13 07:52:14.296871 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.296875 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.296881 Received UID: X18=
SaveRDFNode: 2020/08/13 07:52:14.296891 a: = db.Item{PKey:[]uint8{0xbe, 0xd9, 0x12, 0x70, 0x45, 0xd6, 0x47, 0x9a, 0x9e, 0xd2, 0x14, 0x76, 0xbe, 0xa5, 0xc8, 0x78}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:52:14.297166 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.729479ms
SaveRDFNode: 2020/08/13 07:52:14.297194 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc5a0)}
rdfUIDdb: 2020/08/13 07:52:14.297201 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.297209 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.297215 Received UID: X18=
SaveRDFNode: 2020/08/13 07:52:14.297228 a: = db.Item{PKey:[]uint8{0xfc, 0xb7, 0xe9, 0xf4, 0x30, 0x32, 0x4f, 0x87, 0x80, 0xd2, 0x73, 0x6d, 0x59, 0x90, 0x7c, 0x6b}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:52:14.301604 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.68424ms
SaveRDFNode: 2020/08/13 07:52:14.301614 Returned.+++++++++++ No error
grmgr: 2020/08/13 07:52:14.301624 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 07:52:14.301629 Send ack to waiting saveNode...
saveNode: 2020/08/13 07:52:14.301634 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 07:52:14.301640 read from saveCH channel 4 
grmgr: 2020/08/13 07:52:14.301645 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 07:52:14.301650 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/13 07:52:14.301654 saveNode  waiting on ASaveRDFNodettachNode to finish
SaveRDFNode: xxx 2020/08/13 07:52:14.301682 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.301688 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.301715 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.301727 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.301733 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.301739 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.301745 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:52:14.301754 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:52:14.301760 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000384060)}
SaveRDFNode: 2020/08/13 07:52:14.301764 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:52:14.301774 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.301778 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.301783 UID received  : WmyVw9PZSmepqxm9/BdLQQ==
grmgr: 2020/08/13 07:52:14.301990 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/13 07:52:14.302000 StartCh received for saveNode. rCnt = 3 
SaveRDFNode: xxx 2020/08/13 07:52:14.302008 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.302015 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.302021 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.302058 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.302066 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.302076 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:52:14.302084 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:52:14.302088 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:52:14.302094 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000384720)}
SaveRDFNode: 2020/08/13 07:52:14.302098 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:52:14.302105 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.302109 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.302114 UID received  : 0ADnceacRVCRx/XsHdSfJg==
DB: 2020/08/13 07:52:14.302349 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.091361ms
SaveRDFNode: 2020/08/13 07:52:14.302396 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc5a0)}
rdfUIDdb: 2020/08/13 07:52:14.302404 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.302412 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.302418 Received UID: X18=
SaveRDFNode: 2020/08/13 07:52:14.302428 a: = db.Item{PKey:[]uint8{0xfc, 0xb7, 0xe9, 0xf4, 0x30, 0x32, 0x4f, 0x87, 0x80, 0xd2, 0x73, 0x6d, 0x59, 0x90, 0x7c, 0x6b}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:52:14.306471 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.66164ms
DB: 2020/08/13 07:52:14.307274 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.817309ms
SaveRDFNode: 2020/08/13 07:52:14.307285 Returned.+++++++++++ No error
grmgr: 2020/08/13 07:52:14.307292 EndCh received for saveNode. rCnt = 2 
DB: 2020/08/13 07:52:14.311704 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.046117ms
DB: 2020/08/13 07:52:14.316446 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.71178ms
DB: 2020/08/13 07:52:14.321092 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.613849ms
DB: 2020/08/13 07:52:14.322154 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 20.006856ms
DB: 2020/08/13 07:52:14.325836 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.710495ms
SaveRDFNode: 2020/08/13 07:52:14.325851 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384060)}
rdfUIDdb: 2020/08/13 07:52:14.325867 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.325871 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.325877 Received UID: X18=
SaveRDFNode: 2020/08/13 07:52:14.325888 a: = db.Item{PKey:[]uint8{0x5a, 0x6c, 0x95, 0xc3, 0xd3, 0xd9, 0x4a, 0x67, 0xa9, 0xab, 0x19, 0xbd, 0xfc, 0x17, 0x4b, 0x41}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:52:14.327001 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.807476ms
DB: 2020/08/13 07:52:14.330553 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.63515ms
SaveRDFNode: 2020/08/13 07:52:14.330566 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384060)}
rdfUIDdb: 2020/08/13 07:52:14.330572 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.330576 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.330581 Received UID: X18=
SaveRDFNode: 2020/08/13 07:52:14.330591 a: = db.Item{PKey:[]uint8{0x5a, 0x6c, 0x95, 0xc3, 0xd3, 0xd9, 0x4a, 0x67, 0xa9, 0xab, 0x19, 0xbd, 0xfc, 0x17, 0x4b, 0x41}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:52:14.331815 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.783449ms
DB: 2020/08/13 07:52:14.335241 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.618697ms
SaveRDFNode: 2020/08/13 07:52:14.335251 Returned.+++++++++++ No error
grmgr: 2020/08/13 07:52:14.335259 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/13 07:52:14.341677 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.830828ms
DB: 2020/08/13 07:52:14.346547 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.83036ms
SaveRDFNode: 2020/08/13 07:52:14.346563 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384720)}
rdfUIDdb: 2020/08/13 07:52:14.346570 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.346574 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.346580 Received UID: X18=
SaveRDFNode: 2020/08/13 07:52:14.346591 a: = db.Item{PKey:[]uint8{0xd0, 0x0, 0xe7, 0x71, 0xe6, 0x9c, 0x45, 0x50, 0x91, 0xc7, 0xf5, 0xec, 0x1d, 0xd4, 0x9f, 0x26}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:52:14.351362 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.735923ms
SaveRDFNode: 2020/08/13 07:52:14.351388 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384720)}
rdfUIDdb: 2020/08/13 07:52:14.351394 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:52:14.351398 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:52:14.351422 Received UID: X18=
SaveRDFNode: 2020/08/13 07:52:14.351436 a: = db.Item{PKey:[]uint8{0xd0, 0x0, 0xe7, 0x71, 0xe6, 0x9c, 0x45, 0x50, 0x91, 0xc7, 0xf5, 0xec, 0x1d, 0xd4, 0x9f, 0x26}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:52:14.356196 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.730453ms
SaveRDFNode: 2020/08/13 07:52:14.356355 Returned.+++++++++++ No error
rdfLoader: 2020/08/13 07:52:14.356370 saveNode finished waiting...exiting
grmgr: 2020/08/13 07:52:14.356947 EndCh received for saveNode. rCnt = 0 
DB: 2020/08/13 07:52:14.361090 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.363995 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.368142 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.371899 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.378034 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.901192ms
DB: 2020/08/13 07:52:14.386729 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.967015ms
FetchForUpdate: 2020/08/13 07:52:14.386744 ** Cache FetchForUpdate Cache Key Value: [vtkScEXWR5qe0hR2vqXIeA==]   sortk: A#G#:S
FetchNode: 2020/08/13 07:52:14.386750  node: vtkScEXWR5qe0hR2vqXIeA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:52:14.386926 ** Cache FetchForUpdate Cache Key Value: [/Lfp9DAyT4eA0nNtWZB8aw==]   sortk: A#
FetchNode: 2020/08/13 07:52:14.386942  node: /Lfp9DAyT4eA0nNtWZB8aw== subKey: A#
DB: 2020/08/13 07:52:14.390321 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.322917ms
FetchForUpdate: 2020/08/13 07:52:14.390650 len(nb): 7
fetchItems: 2020/08/13 07:52:14.390663 +++  Cache FetchItems for sortk A# UID: [/Lfp9DAyT4eA0nNtWZB8aw==] 
FetchNode: 2020/08/13 07:52:14.390668  node: /Lfp9DAyT4eA0nNtWZB8aw== subKey: A#
DB: 2020/08/13 07:52:14.391916 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.126268ms
FetchForUpdate: 2020/08/13 07:52:14.391983 len(nb): 1
fetchItems: 2020/08/13 07:52:14.391996 +++  Cache FetchItems for sortk A#G#:S UID: [vtkScEXWR5qe0hR2vqXIeA==] 
FetchNode: 2020/08/13 07:52:14.392001  node: vtkScEXWR5qe0hR2vqXIeA== subKey: A#G#:S
DB: 2020/08/13 07:52:14.395132 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.152621ms
Unlock: 2020/08/13 07:52:14.397839 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:52:14.398535 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.480713ms
DB: 2020/08/13 07:52:14.404471 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.349292ms
Unlock: 2020/08/13 07:52:14.404490 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 07:52:14.404532 ** Cache FetchForUpdate Cache Key Value: [vtkScEXWR5qe0hR2vqXIeA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.404539 +++  Cache FetchItems for sortk A#G#:S UID: [vtkScEXWR5qe0hR2vqXIeA==] 
FetchNode: 2020/08/13 07:52:14.404545  node: vtkScEXWR5qe0hR2vqXIeA== subKey: A#G#:S
DB: 2020/08/13 07:52:14.408080 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.497245ms
DB: 2020/08/13 07:52:14.414822 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.382435ms
DB: 2020/08/13 07:52:14.419694 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.689038ms
DB: 2020/08/13 07:52:14.425198 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.117694ms
DB: 2020/08/13 07:52:14.432078 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.473052ms
DB: 2020/08/13 07:52:14.437383 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.886566ms
DB: 2020/08/13 07:52:14.442921 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.061907ms
DB: 2020/08/13 07:52:14.449871 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.325212ms
DB: 2020/08/13 07:52:14.454991 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.670685ms
DB: 2020/08/13 07:52:14.460463 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.974362ms
Unlock: 2020/08/13 07:52:14.460478 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 07:52:14.466166 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.926726ms
FetchForUpdate: 2020/08/13 07:52:14.466179 ** Cache FetchForUpdate Cache Key Value: [vtkScEXWR5qe0hR2vqXIeA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.466185 +++  Cache FetchItems for sortk A#G#:S UID: [vtkScEXWR5qe0hR2vqXIeA==] 
FetchNode: 2020/08/13 07:52:14.466190  node: vtkScEXWR5qe0hR2vqXIeA== subKey: A#G#:S
DB: 2020/08/13 07:52:14.470584 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.362235ms
AttachNode: gr1 2020/08/13 07:52:14.470694 Errored: SetUpredAvailable :for  vtkScEXWR5qe0hR2vqXIeA==
Cache: 2020/08/13 07:52:14.470703 In SetUpredAvailable: pUid, tUID:  vtkScEXWR5qe0hR2vqXIeA== vtkScEXWR5qe0hR2vqXIeA== A#G#:S
Cache: 2020/08/13 07:52:14.470707 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:52:14.475779 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.040085ms
Unlock: 2020/08/13 07:52:14.475793 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:52:14.481072 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.687398ms
DB: 2020/08/13 07:52:14.484331 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.488042 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.491881 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.495787 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.500674 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.832043ms
DB: 2020/08/13 07:52:14.505835 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.750124ms
FetchForUpdate: 2020/08/13 07:52:14.505852 ** Cache FetchForUpdate Cache Key Value: [WmyVw9PZSmepqxm9/BdLQQ==]   sortk: A#G#:S
FetchNode: 2020/08/13 07:52:14.505858  node: WmyVw9PZSmepqxm9/BdLQQ== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:52:14.506066 ** Cache FetchForUpdate Cache Key Value: [/Lfp9DAyT4eA0nNtWZB8aw==]   sortk: A#
fetchItems: 2020/08/13 07:52:14.506076 +++  Cache FetchItems for sortk A# UID: [/Lfp9DAyT4eA0nNtWZB8aw==] 
FetchNode: 2020/08/13 07:52:14.506088  node: /Lfp9DAyT4eA0nNtWZB8aw== subKey: A#
DB: 2020/08/13 07:52:14.509494 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.60068ms
FetchForUpdate: 2020/08/13 07:52:14.509654 len(nb): 1
fetchItems: 2020/08/13 07:52:14.509668 +++  Cache FetchItems for sortk A#G#:S UID: [WmyVw9PZSmepqxm9/BdLQQ==] 
FetchNode: 2020/08/13 07:52:14.509673  node: WmyVw9PZSmepqxm9/BdLQQ== subKey: A#G#:S
DB: 2020/08/13 07:52:14.510465 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.292961ms
Unlock: 2020/08/13 07:52:14.511233 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:52:14.513229 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.513684ms
DB: 2020/08/13 07:52:14.518565 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.02234ms
Unlock: 2020/08/13 07:52:14.518579 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 07:52:14.518938 ** Cache FetchForUpdate Cache Key Value: [WmyVw9PZSmepqxm9/BdLQQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.518966 +++  Cache FetchItems for sortk A#G#:S UID: [WmyVw9PZSmepqxm9/BdLQQ==] 
FetchNode: 2020/08/13 07:52:14.518972  node: WmyVw9PZSmepqxm9/BdLQQ== subKey: A#G#:S
DB: 2020/08/13 07:52:14.525051 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.039775ms
DB: 2020/08/13 07:52:14.533396 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.598256ms
DB: 2020/08/13 07:52:14.538663 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.96361ms
DB: 2020/08/13 07:52:14.544448 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.102888ms
DB: 2020/08/13 07:52:14.551462 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.490198ms
DB: 2020/08/13 07:52:14.556731 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.865908ms
DB: 2020/08/13 07:52:14.563734 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.122127ms
DB: 2020/08/13 07:52:14.570526 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.693722ms
DB: 2020/08/13 07:52:14.575189 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.598958ms
DB: 2020/08/13 07:52:14.580254 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.979552ms
Unlock: 2020/08/13 07:52:14.580269 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 07:52:14.585304 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.97058ms
FetchForUpdate: 2020/08/13 07:52:14.585317 ** Cache FetchForUpdate Cache Key Value: [WmyVw9PZSmepqxm9/BdLQQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.585324 +++  Cache FetchItems for sortk A#G#:S UID: [WmyVw9PZSmepqxm9/BdLQQ==] 
FetchNode: 2020/08/13 07:52:14.585329  node: WmyVw9PZSmepqxm9/BdLQQ== subKey: A#G#:S
DB: 2020/08/13 07:52:14.590227 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.864209ms
AttachNode: gr1 2020/08/13 07:52:14.590314 Errored: SetUpredAvailable :for  WmyVw9PZSmepqxm9/BdLQQ==
Cache: 2020/08/13 07:52:14.590321 In SetUpredAvailable: pUid, tUID:  WmyVw9PZSmepqxm9/BdLQQ== WmyVw9PZSmepqxm9/BdLQQ== A#G#:S
Cache: 2020/08/13 07:52:14.590326 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:52:14.595378 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.019339ms
Unlock: 2020/08/13 07:52:14.595392 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:52:14.600514 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.764655ms
DB: 2020/08/13 07:52:14.604380 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.607208 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.610271 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.613202 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.618075 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.793933ms
DB: 2020/08/13 07:52:14.622912 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.612921ms
FetchForUpdate: 2020/08/13 07:52:14.622929 ** Cache FetchForUpdate Cache Key Value: [/Lfp9DAyT4eA0nNtWZB8aw==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.622935 +++  Cache FetchItems for sortk A#G#:S UID: [/Lfp9DAyT4eA0nNtWZB8aw==] 
FetchNode: 2020/08/13 07:52:14.622939  node: /Lfp9DAyT4eA0nNtWZB8aw== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:52:14.623134 ** Cache FetchForUpdate Cache Key Value: [vtkScEXWR5qe0hR2vqXIeA==]   sortk: A#
fetchItems: 2020/08/13 07:52:14.623161 +++  Cache FetchItems for sortk A# UID: [vtkScEXWR5qe0hR2vqXIeA==] 
FetchNode: 2020/08/13 07:52:14.623183  node: vtkScEXWR5qe0hR2vqXIeA== subKey: A#
DB: 2020/08/13 07:52:14.625984 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.004125ms
DB: 2020/08/13 07:52:14.627844 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.589419ms
Unlock: 2020/08/13 07:52:14.628531 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:52:14.631245 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.002888ms
Unlock: 2020/08/13 07:52:14.631260 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 07:52:14.631578 ** Cache FetchForUpdate Cache Key Value: [/Lfp9DAyT4eA0nNtWZB8aw==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.631589 +++  Cache FetchItems for sortk A#G#:S UID: [/Lfp9DAyT4eA0nNtWZB8aw==] 
FetchNode: 2020/08/13 07:52:14.631594  node: /Lfp9DAyT4eA0nNtWZB8aw== subKey: A#G#:S
DB: 2020/08/13 07:52:14.635120 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.492393ms
DB: 2020/08/13 07:52:14.641806 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.33268ms
DB: 2020/08/13 07:52:14.646904 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.908204ms
DB: 2020/08/13 07:52:14.652309 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.024074ms
DB: 2020/08/13 07:52:14.659108 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.423644ms
DB: 2020/08/13 07:52:14.664156 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.728485ms
DB: 2020/08/13 07:52:14.669709 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.231274ms
DB: 2020/08/13 07:52:14.676759 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.600481ms
DB: 2020/08/13 07:52:14.681684 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.659116ms
DB: 2020/08/13 07:52:14.687179 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.021844ms
Unlock: 2020/08/13 07:52:14.687194 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 07:52:14.692887 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.891629ms
FetchForUpdate: 2020/08/13 07:52:14.692901 ** Cache FetchForUpdate Cache Key Value: [/Lfp9DAyT4eA0nNtWZB8aw==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.692907 +++  Cache FetchItems for sortk A#G#:S UID: [/Lfp9DAyT4eA0nNtWZB8aw==] 
FetchNode: 2020/08/13 07:52:14.692912  node: /Lfp9DAyT4eA0nNtWZB8aw== subKey: A#G#:S
DB: 2020/08/13 07:52:14.696237 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.292443ms
AttachNode: gr1 2020/08/13 07:52:14.696324 Errored: SetUpredAvailable :for  /Lfp9DAyT4eA0nNtWZB8aw==
Cache: 2020/08/13 07:52:14.696332 In SetUpredAvailable: pUid, tUID:  /Lfp9DAyT4eA0nNtWZB8aw== /Lfp9DAyT4eA0nNtWZB8aw== A#G#:S
Cache: 2020/08/13 07:52:14.696336 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:52:14.701490 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.118448ms
Unlock: 2020/08/13 07:52:14.701502 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:52:14.706468 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.876239ms
DB: 2020/08/13 07:52:14.709336 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.712690 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.716056 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.719350 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.724379 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.955657ms
DB: 2020/08/13 07:52:14.729516 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.6558ms
FetchForUpdate: 2020/08/13 07:52:14.729534 ** Cache FetchForUpdate Cache Key Value: [WmyVw9PZSmepqxm9/BdLQQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.729541 +++  Cache FetchItems for sortk A#G#:S UID: [WmyVw9PZSmepqxm9/BdLQQ==] 
FetchNode: 2020/08/13 07:52:14.729545  node: WmyVw9PZSmepqxm9/BdLQQ== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:52:14.729709 ** Cache FetchForUpdate Cache Key Value: [vtkScEXWR5qe0hR2vqXIeA==]   sortk: A#
fetchItems: 2020/08/13 07:52:14.729717 +++  Cache FetchItems for sortk A# UID: [vtkScEXWR5qe0hR2vqXIeA==] 
FetchNode: 2020/08/13 07:52:14.729729  node: vtkScEXWR5qe0hR2vqXIeA== subKey: A#
DB: 2020/08/13 07:52:14.732683 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.103488ms
DB: 2020/08/13 07:52:14.733370 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.577471ms
Unlock: 2020/08/13 07:52:14.733541 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:52:14.737955 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.125252ms
DB: 2020/08/13 07:52:14.742870 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.838969ms
DB: 2020/08/13 07:52:14.742892 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.838969ms
DB: 2020/08/13 07:52:14.747743 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.81816ms
DB: 2020/08/13 07:52:14.747762 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.81816ms
DB: 2020/08/13 07:52:14.753002 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.049954ms
DB: 2020/08/13 07:52:14.758160 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.008111ms
Unlock: 2020/08/13 07:52:14.758171 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 07:52:14.765558 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.448819ms
DB: 2020/08/13 07:52:14.770686 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.94207ms
DB: 2020/08/13 07:52:14.776080 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.022495ms
DB: 2020/08/13 07:52:14.783002 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.540988ms
DB: 2020/08/13 07:52:14.788775 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.22214ms
DB: 2020/08/13 07:52:14.794179 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.064489ms
DB: 2020/08/13 07:52:14.800977 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.489861ms
DB: 2020/08/13 07:52:14.806356 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.0492ms
DB: 2020/08/13 07:52:14.811951 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.280637ms
DB: 2020/08/13 07:52:14.817061 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.905112ms
FetchForUpdate: 2020/08/13 07:52:14.817076 ** Cache FetchForUpdate Cache Key Value: [WmyVw9PZSmepqxm9/BdLQQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.817084 +++  Cache FetchItems for sortk A#G#:S UID: [WmyVw9PZSmepqxm9/BdLQQ==] 
FetchNode: 2020/08/13 07:52:14.817089  node: WmyVw9PZSmepqxm9/BdLQQ== subKey: A#G#:S
DB: 2020/08/13 07:52:14.820475 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.35253ms
AttachNode: gr1 2020/08/13 07:52:14.820579 Errored: SetUpredAvailable :for  WmyVw9PZSmepqxm9/BdLQQ==
Cache: 2020/08/13 07:52:14.820587 In SetUpredAvailable: pUid, tUID:  WmyVw9PZSmepqxm9/BdLQQ== TJvXOO0VTVSZu0VadBvd1g== A#G#:S
Cache: 2020/08/13 07:52:14.820591 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:52:14.825422 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.799739ms
Unlock: 2020/08/13 07:52:14.825433 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:52:14.830540 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.774713ms
DB: 2020/08/13 07:52:14.834379 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.837464 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.840771 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.844573 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.849894 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.008841ms
DB: 2020/08/13 07:52:14.854914 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.6608ms
FetchForUpdate: 2020/08/13 07:52:14.854958 ** Cache FetchForUpdate Cache Key Value: [vtkScEXWR5qe0hR2vqXIeA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.854966 +++  Cache FetchItems for sortk A#G#:S UID: [vtkScEXWR5qe0hR2vqXIeA==] 
FetchNode: 2020/08/13 07:52:14.854971  node: vtkScEXWR5qe0hR2vqXIeA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:52:14.855172 ** Cache FetchForUpdate Cache Key Value: [WmyVw9PZSmepqxm9/BdLQQ==]   sortk: A#
fetchItems: 2020/08/13 07:52:14.855182 +++  Cache FetchItems for sortk A# UID: [WmyVw9PZSmepqxm9/BdLQQ==] 
FetchNode: 2020/08/13 07:52:14.855194  node: WmyVw9PZSmepqxm9/BdLQQ== subKey: A#
DB: 2020/08/13 07:52:14.859143 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.905311ms
Unlock: 2020/08/13 07:52:14.859933 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:52:14.860556 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.548691ms
DB: 2020/08/13 07:52:14.866130 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.253833ms
DB: 2020/08/13 07:52:14.870934 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.612911ms
DB: 2020/08/13 07:52:14.870952 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.612911ms
DB: 2020/08/13 07:52:14.875731 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.745372ms
DB: 2020/08/13 07:52:14.875746 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.745372ms
DB: 2020/08/13 07:52:14.881058 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.085974ms
DB: 2020/08/13 07:52:14.886646 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.387607ms
Unlock: 2020/08/13 07:52:14.886842 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 07:52:14.893993 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.497946ms
DB: 2020/08/13 07:52:14.898942 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.754064ms
DB: 2020/08/13 07:52:14.904751 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.403653ms
DB: 2020/08/13 07:52:14.911947 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.602728ms
DB: 2020/08/13 07:52:14.916830 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.807727ms
DB: 2020/08/13 07:52:14.922307 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.396426ms
DB: 2020/08/13 07:52:14.928741 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.356602ms
DB: 2020/08/13 07:52:14.933667 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.844087ms
DB: 2020/08/13 07:52:14.938916 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.144223ms
DB: 2020/08/13 07:52:14.943814 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.830673ms
FetchForUpdate: 2020/08/13 07:52:14.943826 ** Cache FetchForUpdate Cache Key Value: [vtkScEXWR5qe0hR2vqXIeA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.943832 +++  Cache FetchItems for sortk A#G#:S UID: [vtkScEXWR5qe0hR2vqXIeA==] 
FetchNode: 2020/08/13 07:52:14.943837  node: vtkScEXWR5qe0hR2vqXIeA== subKey: A#G#:S
DB: 2020/08/13 07:52:14.947397 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.5292ms
AttachNode: gr1 2020/08/13 07:52:14.947500 Errored: SetUpredAvailable :for  vtkScEXWR5qe0hR2vqXIeA==
Cache: 2020/08/13 07:52:14.947508 In SetUpredAvailable: pUid, tUID:  vtkScEXWR5qe0hR2vqXIeA== Fn50/CzBRSOHtpmzqUtcTQ== A#G#:S
Cache: 2020/08/13 07:52:14.947512 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:52:14.952485 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.941544ms
Unlock: 2020/08/13 07:52:14.952499 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:52:14.958011 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.082588ms
DB: 2020/08/13 07:52:14.962395 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.966410 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.969473 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.972357 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:52:14.978575 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.158102ms
DB: 2020/08/13 07:52:14.983290 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.63832ms
FetchForUpdate: 2020/08/13 07:52:14.983305 ** Cache FetchForUpdate Cache Key Value: [/Lfp9DAyT4eA0nNtWZB8aw==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:14.983311 +++  Cache FetchItems for sortk A#G#:S UID: [/Lfp9DAyT4eA0nNtWZB8aw==] 
FetchNode: 2020/08/13 07:52:14.983316  node: /Lfp9DAyT4eA0nNtWZB8aw== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:52:14.983503 ** Cache FetchForUpdate Cache Key Value: [WmyVw9PZSmepqxm9/BdLQQ==]   sortk: A#
fetchItems: 2020/08/13 07:52:14.983521 +++  Cache FetchItems for sortk A# UID: [WmyVw9PZSmepqxm9/BdLQQ==] 
FetchNode: 2020/08/13 07:52:14.983578  node: WmyVw9PZSmepqxm9/BdLQQ== subKey: A#
DB: 2020/08/13 07:52:14.987545 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.197251ms
DB: 2020/08/13 07:52:14.988351 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.722793ms
Unlock: 2020/08/13 07:52:14.988719 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:52:14.994197 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.494714ms
DB: 2020/08/13 07:52:14.998966 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.732128ms
DB: 2020/08/13 07:52:14.998983 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.732128ms
DB: 2020/08/13 07:52:15.003818 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.788899ms
DB: 2020/08/13 07:52:15.003848 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.788899ms
DB: 2020/08/13 07:52:15.012343 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 8.139527ms
DB: 2020/08/13 07:52:15.018336 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.890699ms
Unlock: 2020/08/13 07:52:15.018360 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 07:52:15.027871 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 9.352824ms
DB: 2020/08/13 07:52:15.033455 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.966071ms
DB: 2020/08/13 07:52:15.038615 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.035716ms
DB: 2020/08/13 07:52:15.045246 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.551557ms
DB: 2020/08/13 07:52:15.050481 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.137381ms
DB: 2020/08/13 07:52:15.055770 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.174211ms
DB: 2020/08/13 07:52:15.062636 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.670763ms
DB: 2020/08/13 07:52:15.068168 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.32351ms
DB: 2020/08/13 07:52:15.073725 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.478022ms
DB: 2020/08/13 07:52:15.079055 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.104706ms
FetchForUpdate: 2020/08/13 07:52:15.079101 ** Cache FetchForUpdate Cache Key Value: [/Lfp9DAyT4eA0nNtWZB8aw==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:52:15.079109 +++  Cache FetchItems for sortk A#G#:S UID: [/Lfp9DAyT4eA0nNtWZB8aw==] 
FetchNode: 2020/08/13 07:52:15.079114  node: /Lfp9DAyT4eA0nNtWZB8aw== subKey: A#G#:S
DB: 2020/08/13 07:52:15.082690 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.532804ms
AttachNode: gr1 2020/08/13 07:52:15.082804 Errored: SetUpredAvailable :for  /Lfp9DAyT4eA0nNtWZB8aw==
Cache: 2020/08/13 07:52:15.082813 In SetUpredAvailable: pUid, tUID:  /Lfp9DAyT4eA0nNtWZB8aw== Y8CVEnndRkKNTWd8uXR8sA== A#G#:S
Cache: 2020/08/13 07:52:15.082818 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:52:15.088307 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.451077ms
Unlock: 2020/08/13 07:52:15.088332 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:52:15.094088 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.228546ms
rdfLoader: 2020/08/13 07:52:15.094104 saveNode  waiting on AttachNode to finish
DB:2020/08/13 07:58:15 log.go:18: ===============================================================================
grmgr: 2020/08/13 07:58:15.648381 Powering on...
rdfLoader: 2020/08/13 07:58:15.648668 verify started....xx.
rdfLoader: 2020/08/13 07:58:15.648698 saveNode started......
rdfLoader: 2020/08/13 07:58:15.648703 define saveNode limiter......
rdfuuid: 2020/08/13 07:58:15.648718 Powering on...
rdfLoader: 2020/08/13 07:58:15.648725 *************** All started 
rdfLoader: 2020/08/13 07:58:15.655958 .  getType..
rdfLoader: 2020/08/13 07:58:15.655968 node.TyName : [Person]
DB: 2020/08/13 07:58:15.726504 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 70.482315ms
verify: 2020/08/13 07:58:15.726657 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:8, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:11, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 07:58:15.726667  Send Ask request to limiter.
verify: 2020/08/13 07:58:15.726673 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:58:15.726685 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:58:15.726691 ACK from gcmgr....received...
rdfLoader: 2020/08/13 07:58:15.726698 .  getType..
rdfLoader: 2020/08/13 07:58:15.726703 node.TyName : [Person]
verify: 2020/08/13 07:58:15.726724 Pass to unmarshal... 1 &ds.Node{ID:"b", TyName:"Person", Lines:[]ds.Line{ds.Line{N:14, Subj:"b", Pred:"Name", Obj:"Paul Payne"}, ds.Line{N:15, Subj:"b", Pred:"DOB", Obj:"2 June 1960"}, ds.Line{N:16, Subj:"b", Pred:"Age", Obj:"58"}, ds.Line{N:17, Subj:"b", Pred:"Siblings", Obj:"abc"}, ds.Line{N:18, Subj:"b", Pred:"Siblings", Obj:"c"}, ds.Line{N:19, Subj:"b", Pred:"Cars", Obj:"Holden Commodore"}, ds.Line{N:20, Subj:"b", Pred:"Cars", Obj:"Honda"}, ds.Line{N:21, Subj:"b", Pred:"Cars", Obj:"VW Golf"}}, Err:[]error(nil)}
verify: 2020/08/13 07:58:15.726729  Send Ask request to limiter.
verify: 2020/08/13 07:58:15.726734 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:58:15.726741 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:58:15.726747 ACK from gcmgr....received...
verify: 2020/08/13 07:58:15.726754 *** Verify back to waiting on veryifyCh
unmarshalRDF2020/08/13 07:58:15.727353 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:58:15.727370 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/13 07:58:15.727376 StartCh received for unmarshall. rCnt = 2 
rdfLoader: 2020/08/13 07:58:15.727382 Find Ty Address
rdfLoader: 2020/08/13 07:58:15.727394 Find Ty Age
rdfLoader: 2020/08/13 07:58:15.727400 Find Ty Cars
rdfLoader: 2020/08/13 07:58:15.727406 Add to SS . [Honda]
rdfLoader: 2020/08/13 07:58:15.727411 Add to SS . [VW Golf]
rdfLoader: 2020/08/13 07:58:15.727415 Find Ty DOB
rdfLoader: 2020/08/13 07:58:15.727419 Find Ty Friends
rdfLoader: 2020/08/13 07:58:15.727423 Find Ty Jobs
rdfLoader: 2020/08/13 07:58:15.727427 Find Ty Name
rdfLoader: 2020/08/13 07:58:15.727432 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:58:15.727436 Find Ty Siblings
rdfLoader: 2020/08/13 07:58:15.727458 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:58:15.727500 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:58:15.727516 Exit  unmarshalRDF. 
grmgr: 2020/08/13 07:58:15.727523 EndCh received for unmarshall. rCnt = 1 
unmarshalRDF2020/08/13 07:58:15.727534 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:58:15.727539 StartCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/13 07:58:15.727543 StartCh received for unmarshall. rCnt = 3 
rdfLoader: 2020/08/13 07:58:15.727548 Find Ty Address
rdfLoader: 2020/08/13 07:58:15.727552 Find Ty Age
rdfLoader: 2020/08/13 07:58:15.727556 Find Ty Cars
rdfLoader: 2020/08/13 07:58:15.727561 Add to SS . [Honda]
rdfLoader: 2020/08/13 07:58:15.727565 Add to SS . [Alfa]
rdfLoader: 2020/08/13 07:58:15.727569 Find Ty DOB
rdfLoader: 2020/08/13 07:58:15.727574 Find Ty Friends
rdfLoader: 2020/08/13 07:58:15.727577 Find Ty Jobs
rdfLoader: 2020/08/13 07:58:15.727581 Find Ty Name
rdfLoader: 2020/08/13 07:58:15.727585 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:58:15.727589 Find Ty Siblings
rdfLoader: 2020/08/13 07:58:15.727602 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:58:15.727641 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:58:15.727646 Exit  unmarshalRDF. 
grmgr: 2020/08/13 07:58:15.727652 EndCh received for unmarshall. rCnt = 2 
saveNode: 2020/08/13 07:58:15.727657 read from saveCH channel 1 
grmgr: 2020/08/13 07:58:15.727662 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 07:58:15.727667 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 07:58:15.727680 read from saveCH channel 2 
grmgr: 2020/08/13 07:58:15.727685 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 07:58:15.727690 limiter has ACK and will start goroutine...
SaveRDFNode: xxx 2020/08/13 07:58:15.727711 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.727718 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.727723 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.727729 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.727735 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.727752 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.727759 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:58:15.727762 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:58:15.727770 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0007cc1e0)}
SaveRDFNode: 2020/08/13 07:58:15.727779 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:58:15.727788 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.727792 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.727798 UID received  : u2z/yudJRzegUTSLLdo1fA==
grmgr: 2020/08/13 07:58:15.728036 StartCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 07:58:15.728046 StartCh received for saveNode. rCnt = 2 
SaveRDFNode: xxx 2020/08/13 07:58:15.728053 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.728059 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.728069 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.728092 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.728099 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.728109 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.728114 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:58:15.728118 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:58:15.728124 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0007cc5a0)}
SaveRDFNode: 2020/08/13 07:58:15.728128 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:58:15.728135 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.728139 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.728144 UID received  : Y3rpNExKRIW4pho/c2RPRA==
rdfLoader: 2020/08/13 07:58:15.730389 .  getType..
rdfLoader: 2020/08/13 07:58:15.730399 node.TyName : [Person]
verify: 2020/08/13 07:58:15.730429 Pass to unmarshal... 0 &ds.Node{ID:"c", TyName:"Person", Lines:[]ds.Line{ds.Line{N:1, Subj:"c", Pred:"Name", Obj:"Ian Payne"}, ds.Line{N:2, Subj:"c", Pred:"DOB", Obj:"29 Jan 1953"}, ds.Line{N:3, Subj:"c", Pred:"Age", Obj:"67"}, ds.Line{N:4, Subj:"c", Pred:"Siblings", Obj:"abc"}, ds.Line{N:5, Subj:"c", Pred:"Siblings", Obj:"b"}, ds.Line{N:6, Subj:"c", Pred:"Cars", Obj:"VW Passat"}, ds.Line{N:7, Subj:"c", Pred:"Cars", Obj:"Mitsubishi"}, ds.Line{N:8, Subj:"c", Pred:"Cars", Obj:"Ford Laser"}, ds.Line{N:9, Subj:"c", Pred:"Cars", Obj:"Honda"}}, Err:[]error(nil)}
verify: 2020/08/13 07:58:15.730434  Send Ask request to limiter.
verify: 2020/08/13 07:58:15.730438 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:58:15.730444 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:58:15.730449 ACK from gcmgr....received...
rdfLoader: 2020/08/13 07:58:15.730454 .  getType..
rdfLoader: 2020/08/13 07:58:15.730458 node.TyName : [Person]
verify: 2020/08/13 07:58:15.730473 Pass to unmarshal... 1 &ds.Node{ID:"d", TyName:"Person", Lines:[]ds.Line{ds.Line{N:12, Subj:"d", Pred:"Name", Obj:"Phil Smith"}, ds.Line{N:13, Subj:"d", Pred:"DOB", Obj:"17 June 1976"}, ds.Line{N:14, Subj:"d", Pred:"Age", Obj:"36"}, ds.Line{N:15, Subj:"d", Pred:"Cars", Obj:"Roll Roycet"}, ds.Line{N:16, Subj:"d", Pred:"Cars", Obj:"Bentley"}}, Err:[]error(nil)}
verify: 2020/08/13 07:58:15.730477  Send Ask request to limiter.
verify: 2020/08/13 07:58:15.730481 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 07:58:15.730485 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 07:58:15.730490 ACK from gcmgr....received...
verify: 2020/08/13 07:58:15.730510 *** Verify back to waiting on veryifyCh
verify: 2020/08/13 07:58:15.730515 verify at wg.Wait() .....
unmarshalRDF2020/08/13 07:58:15.730532 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:58:15.730539 StartCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/13 07:58:15.730544 StartCh received for unmarshall. rCnt = 4 
rdfLoader: 2020/08/13 07:58:15.730549 Find Ty Address
rdfLoader: 2020/08/13 07:58:15.730553 Find Ty Age
rdfLoader: 2020/08/13 07:58:15.730559 Find Ty Cars
rdfLoader: 2020/08/13 07:58:15.730564 Add to SS . [Bentley]
rdfLoader: 2020/08/13 07:58:15.730569 Find Ty DOB
rdfLoader: 2020/08/13 07:58:15.730573 Find Ty Friends
rdfLoader: 2020/08/13 07:58:15.730577 Find Ty Jobs
rdfLoader: 2020/08/13 07:58:15.730606 Find Ty Name
rdfLoader: 2020/08/13 07:58:15.730617 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:58:15.730621 Find Ty Siblings
rdfLoader: 2020/08/13 07:58:15.730636 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:58:15.730686 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:58:15.730692 Exit  unmarshalRDF. 
grmgr: 2020/08/13 07:58:15.730699 EndCh received for unmarshall. rCnt = 3 
unmarshalRDF2020/08/13 07:58:15.730710 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 07:58:15.730715 StartCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 07:58:15.730720 StartCh received for unmarshall. rCnt = 5 
rdfLoader: 2020/08/13 07:58:15.730724 Find Ty Address
rdfLoader: 2020/08/13 07:58:15.730728 Find Ty Age
rdfLoader: 2020/08/13 07:58:15.730733 Find Ty Cars
rdfLoader: 2020/08/13 07:58:15.730738 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/13 07:58:15.730743 Add to SS . [Ford Laser]
rdfLoader: 2020/08/13 07:58:15.730747 Add to SS . [Honda]
rdfLoader: 2020/08/13 07:58:15.730751 Find Ty DOB
rdfLoader: 2020/08/13 07:58:15.730755 Find Ty Friends
rdfLoader: 2020/08/13 07:58:15.730759 Find Ty Jobs
rdfLoader: 2020/08/13 07:58:15.730763 Find Ty Name
rdfLoader: 2020/08/13 07:58:15.730767 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 07:58:15.730771 Find Ty Siblings
rdfLoader: 2020/08/13 07:58:15.730784 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 07:58:15.730827 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 07:58:15.730831 Exit  unmarshalRDF. 
verify: 2020/08/13 07:58:15.730837 verify exited.....
saveNode: 2020/08/13 07:58:15.730842 read from saveCH channel 3 
grmgr: 2020/08/13 07:58:15.730847 EndCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 07:58:15.730852 has ASKed. Cnt is above limit. Mark saveNode as waiting
DB: 2020/08/13 07:58:15.735161 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.331088ms
DB: 2020/08/13 07:58:15.738584 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.404329ms
DB: 2020/08/13 07:58:15.741845 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.226103ms
DB: 2020/08/13 07:58:15.745192 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.299955ms
DB: 2020/08/13 07:58:15.748421 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.188441ms
DB: 2020/08/13 07:58:15.751615 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.157852ms
SaveRDFNode: 2020/08/13 07:58:15.751630 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc5a0)}
rdfUIDdb: 2020/08/13 07:58:15.751637 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.751642 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.751647 Received UID: X18=
SaveRDFNode: 2020/08/13 07:58:15.751661 a: = db.Item{PKey:[]uint8{0x63, 0x7a, 0xe9, 0x34, 0x4c, 0x4a, 0x44, 0x85, 0xb8, 0xa6, 0x1a, 0x3f, 0x73, 0x64, 0x4f, 0x44}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:58:15.754804 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.112943ms
SaveRDFNode: 2020/08/13 07:58:15.754817 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc5a0)}
rdfUIDdb: 2020/08/13 07:58:15.754822 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.754826 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.754832 Received UID: X18=
SaveRDFNode: 2020/08/13 07:58:15.754843 a: = db.Item{PKey:[]uint8{0x63, 0x7a, 0xe9, 0x34, 0x4c, 0x4a, 0x44, 0x85, 0xb8, 0xa6, 0x1a, 0x3f, 0x73, 0x64, 0x4f, 0x44}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:58:15.755388 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 20.192965ms
DB: 2020/08/13 07:58:15.758036 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.155489ms
SaveRDFNode: 2020/08/13 07:58:15.758047 Returned.+++++++++++ No error
grmgr: 2020/08/13 07:58:15.758058 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 07:58:15.758063 Send ack to waiting saveNode...
saveNode: 2020/08/13 07:58:15.758068 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 07:58:15.758074 read from saveCH channel 4 
grmgr: 2020/08/13 07:58:15.758079 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 07:58:15.758084 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/13 07:58:15.758089 saveNode  waiting on ASaveRDFNodettachNode to finish
SaveRDFNode: xxx 2020/08/13 07:58:15.758117 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758142 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758152 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758158 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758164 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758170 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758176 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:58:15.758180 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:58:15.758185 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000016cc0)}
SaveRDFNode: 2020/08/13 07:58:15.758190 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:58:15.758199 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.758203 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.758208 UID received  : jnzRc17QQiCsMhjklo0VJA==
grmgr: 2020/08/13 07:58:15.758410 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/13 07:58:15.758419 StartCh received for saveNode. rCnt = 3 
SaveRDFNode: xxx 2020/08/13 07:58:15.758427 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758433 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758439 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758446 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758484 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758496 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 07:58:15.758502 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 07:58:15.758506 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 07:58:15.758512 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0000175c0)}
SaveRDFNode: 2020/08/13 07:58:15.758516 Waiting for UID ......................
rdfUIDdb: 2020/08/13 07:58:15.758523 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.758527 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.758532 UID received  : dV/ErDUTSEyr/APTprQ2fQ==
DB: 2020/08/13 07:58:15.759036 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.615114ms
DB: 2020/08/13 07:58:15.761436 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.191889ms
DB: 2020/08/13 07:58:15.762516 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.44886ms
DB: 2020/08/13 07:58:15.764764 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.148399ms
DB: 2020/08/13 07:58:15.765876 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.324938ms
SaveRDFNode: 2020/08/13 07:58:15.765888 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc1e0)}
rdfUIDdb: 2020/08/13 07:58:15.765894 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.765897 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.765903 Received UID: X18=
SaveRDFNode: 2020/08/13 07:58:15.765947 a: = db.Item{PKey:[]uint8{0xbb, 0x6c, 0xff, 0xca, 0xe7, 0x49, 0x47, 0x37, 0xa0, 0x51, 0x34, 0x8b, 0x2d, 0xda, 0x35, 0x7c}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:58:15.768008 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.205476ms
DB: 2020/08/13 07:58:15.769237 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.253782ms
SaveRDFNode: 2020/08/13 07:58:15.769250 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc1e0)}
rdfUIDdb: 2020/08/13 07:58:15.769255 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.769259 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.769264 Received UID: X18=
SaveRDFNode: 2020/08/13 07:58:15.769274 a: = db.Item{PKey:[]uint8{0xbb, 0x6c, 0xff, 0xca, 0xe7, 0x49, 0x47, 0x37, 0xa0, 0x51, 0x34, 0x8b, 0x2d, 0xda, 0x35, 0x7c}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:58:15.771452 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.413352ms
DB: 2020/08/13 07:58:15.772646 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.344164ms
SaveRDFNode: 2020/08/13 07:58:15.772662 Returned.+++++++++++ No error
grmgr: 2020/08/13 07:58:15.772669 EndCh received for saveNode. rCnt = 2 
DB: 2020/08/13 07:58:15.774653 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.170775ms
SaveRDFNode: 2020/08/13 07:58:15.774666 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016cc0)}
rdfUIDdb: 2020/08/13 07:58:15.774674 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.774678 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.774683 Received UID: X18=
SaveRDFNode: 2020/08/13 07:58:15.774693 a: = db.Item{PKey:[]uint8{0x8e, 0x7c, 0xd1, 0x73, 0x5e, 0xd0, 0x42, 0x20, 0xac, 0x32, 0x18, 0xe4, 0x96, 0x8d, 0x15, 0x24}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:58:15.775059 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 16.492104ms
DB: 2020/08/13 07:58:15.777884 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.161925ms
SaveRDFNode: 2020/08/13 07:58:15.778037 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016cc0)}
rdfUIDdb: 2020/08/13 07:58:15.778049 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.778053 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.778059 Received UID: X18=
SaveRDFNode: 2020/08/13 07:58:15.778069 a: = db.Item{PKey:[]uint8{0x8e, 0x7c, 0xd1, 0x73, 0x5e, 0xd0, 0x42, 0x20, 0xac, 0x32, 0x18, 0xe4, 0x96, 0x8d, 0x15, 0x24}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:58:15.778461 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.367875ms
DB: 2020/08/13 07:58:15.781450 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.351598ms
SaveRDFNode: 2020/08/13 07:58:15.781460 Returned.+++++++++++ No error
grmgr: 2020/08/13 07:58:15.781466 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/13 07:58:15.781834 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.342816ms
DB: 2020/08/13 07:58:15.785146 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.277525ms
DB: 2020/08/13 07:58:15.788480 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.299996ms
SaveRDFNode: 2020/08/13 07:58:15.788493 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000175c0)}
rdfUIDdb: 2020/08/13 07:58:15.788499 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.788503 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.788508 Received UID: X18=
SaveRDFNode: 2020/08/13 07:58:15.788519 a: = db.Item{PKey:[]uint8{0x75, 0x5f, 0xc4, 0xac, 0x35, 0x13, 0x48, 0x4c, 0xab, 0xfc, 0x3, 0xd3, 0xa6, 0xb4, 0x36, 0x7d}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:58:15.791686 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.138863ms
SaveRDFNode: 2020/08/13 07:58:15.791699 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000175c0)}
rdfUIDdb: 2020/08/13 07:58:15.791705 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 07:58:15.791709 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 07:58:15.791714 Received UID: X18=
SaveRDFNode: 2020/08/13 07:58:15.791727 a: = db.Item{PKey:[]uint8{0x75, 0x5f, 0xc4, 0xac, 0x35, 0x13, 0x48, 0x4c, 0xab, 0xfc, 0x3, 0xd3, 0xa6, 0xb4, 0x36, 0x7d}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 07:58:15.795736 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.967006ms
SaveRDFNode: 2020/08/13 07:58:15.795904 Returned.+++++++++++ No error
rdfLoader: 2020/08/13 07:58:15.795916 saveNode finished waiting...exiting
grmgr: 2020/08/13 07:58:15.796297 EndCh received for saveNode. rCnt = 0 
DB: 2020/08/13 07:58:15.798953 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.802177 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.804669 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.807040 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.810744 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.637927ms
DB: 2020/08/13 07:58:15.819608 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.193192ms
FetchForUpdate: 2020/08/13 07:58:15.819808 ** Cache FetchForUpdate Cache Key Value: [u2z/yudJRzegUTSLLdo1fA==]   sortk: A#G#:S
FetchNode: 2020/08/13 07:58:15.819821  node: u2z/yudJRzegUTSLLdo1fA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:58:15.820011 ** Cache FetchForUpdate Cache Key Value: [Y3rpNExKRIW4pho/c2RPRA==]   sortk: A#
FetchNode: 2020/08/13 07:58:15.820028  node: Y3rpNExKRIW4pho/c2RPRA== subKey: A#
DB: 2020/08/13 07:58:15.822337 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.47871ms
FetchForUpdate: 2020/08/13 07:58:15.822401 len(nb): 1
fetchItems: 2020/08/13 07:58:15.822411 +++  Cache FetchItems for sortk A#G#:S UID: [u2z/yudJRzegUTSLLdo1fA==] 
FetchNode: 2020/08/13 07:58:15.822415  node: u2z/yudJRzegUTSLLdo1fA== subKey: A#G#:S
DB: 2020/08/13 07:58:15.824199 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.129115ms
FetchForUpdate: 2020/08/13 07:58:15.824314 len(nb): 7
fetchItems: 2020/08/13 07:58:15.824323 +++  Cache FetchItems for sortk A# UID: [Y3rpNExKRIW4pho/c2RPRA==] 
FetchNode: 2020/08/13 07:58:15.824327  node: Y3rpNExKRIW4pho/c2RPRA== subKey: A#
DB: 2020/08/13 07:58:15.825524 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.079383ms
DB: 2020/08/13 07:58:15.828414 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.055078ms
Unlock: 2020/08/13 07:58:15.828540 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:58:15.830047 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.809786ms
Unlock: 2020/08/13 07:58:15.830058 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 07:58:15.830087 ** Cache FetchForUpdate Cache Key Value: [u2z/yudJRzegUTSLLdo1fA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:15.830094 +++  Cache FetchItems for sortk A#G#:S UID: [u2z/yudJRzegUTSLLdo1fA==] 
FetchNode: 2020/08/13 07:58:15.830099  node: u2z/yudJRzegUTSLLdo1fA== subKey: A#G#:S
DB: 2020/08/13 07:58:15.832668 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.537547ms
DB: 2020/08/13 07:58:15.838155 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.393235ms
DB: 2020/08/13 07:58:15.842408 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.560604ms
DB: 2020/08/13 07:58:15.847802 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.113994ms
DB: 2020/08/13 07:58:15.853841 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.960136ms
DB: 2020/08/13 07:58:15.857175 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.267837ms
DB: 2020/08/13 07:58:15.861362 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.827637ms
DB: 2020/08/13 07:58:15.868077 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.273567ms
DB: 2020/08/13 07:58:15.871485 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.102893ms
DB: 2020/08/13 07:58:15.875569 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.676814ms
Unlock: 2020/08/13 07:58:15.875583 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 07:58:15.879473 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.379292ms
FetchForUpdate: 2020/08/13 07:58:15.879484 ** Cache FetchForUpdate Cache Key Value: [u2z/yudJRzegUTSLLdo1fA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:15.879490 +++  Cache FetchItems for sortk A#G#:S UID: [u2z/yudJRzegUTSLLdo1fA==] 
FetchNode: 2020/08/13 07:58:15.879495  node: u2z/yudJRzegUTSLLdo1fA== subKey: A#G#:S
DB: 2020/08/13 07:58:15.883373 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.846242ms
AttachNode: gr1 2020/08/13 07:58:15.883455 Errored: SetUpredAvailable :for  u2z/yudJRzegUTSLLdo1fA==
Cache: 2020/08/13 07:58:15.883478 In SetUpredAvailable: pUid, tUID:  u2z/yudJRzegUTSLLdo1fA== u2z/yudJRzegUTSLLdo1fA== A#G#:S
Cache: 2020/08/13 07:58:15.883483 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:58:15.886862 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.345287ms
Unlock: 2020/08/13 07:58:15.887041 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:58:15.891922 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.407357ms
DB: 2020/08/13 07:58:15.894547 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.896883 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.900314 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.902788 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.906875 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.865039ms
DB: 2020/08/13 07:58:15.911575 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.436459ms
FetchForUpdate: 2020/08/13 07:58:15.911590 ** Cache FetchForUpdate Cache Key Value: [jnzRc17QQiCsMhjklo0VJA==]   sortk: A#G#:S
FetchNode: 2020/08/13 07:58:15.911596  node: jnzRc17QQiCsMhjklo0VJA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:58:15.911767 ** Cache FetchForUpdate Cache Key Value: [Y3rpNExKRIW4pho/c2RPRA==]   sortk: A#
fetchItems: 2020/08/13 07:58:15.911777 +++  Cache FetchItems for sortk A# UID: [Y3rpNExKRIW4pho/c2RPRA==] 
FetchNode: 2020/08/13 07:58:15.911789  node: Y3rpNExKRIW4pho/c2RPRA== subKey: A#
DB: 2020/08/13 07:58:15.914810 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.940237ms
Unlock: 2020/08/13 07:58:15.914972 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:58:15.915099 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.473507ms
FetchForUpdate: 2020/08/13 07:58:15.915126 len(nb): 1
fetchItems: 2020/08/13 07:58:15.915132 +++  Cache FetchItems for sortk A#G#:S UID: [jnzRc17QQiCsMhjklo0VJA==] 
FetchNode: 2020/08/13 07:58:15.915137  node: jnzRc17QQiCsMhjklo0VJA== subKey: A#G#:S
DB: 2020/08/13 07:58:15.917695 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.530979ms
DB: 2020/08/13 07:58:15.921549 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.431932ms
Unlock: 2020/08/13 07:58:15.921710 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 07:58:15.922006 ** Cache FetchForUpdate Cache Key Value: [jnzRc17QQiCsMhjklo0VJA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:15.922017 +++  Cache FetchItems for sortk A#G#:S UID: [jnzRc17QQiCsMhjklo0VJA==] 
FetchNode: 2020/08/13 07:58:15.922022  node: jnzRc17QQiCsMhjklo0VJA== subKey: A#G#:S
DB: 2020/08/13 07:58:15.924617 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.563015ms
DB: 2020/08/13 07:58:15.931171 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.004669ms
DB: 2020/08/13 07:58:15.934683 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.261394ms
DB: 2020/08/13 07:58:15.938767 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.51917ms
DB: 2020/08/13 07:58:15.945275 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.893971ms
DB: 2020/08/13 07:58:15.948927 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.23784ms
DB: 2020/08/13 07:58:15.952782 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.38753ms
DB: 2020/08/13 07:58:15.959284 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.868507ms
DB: 2020/08/13 07:58:15.963210 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.314842ms
DB: 2020/08/13 07:58:15.968403 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.720801ms
Unlock: 2020/08/13 07:58:15.968415 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 07:58:15.972287 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.367457ms
FetchForUpdate: 2020/08/13 07:58:15.972301 ** Cache FetchForUpdate Cache Key Value: [jnzRc17QQiCsMhjklo0VJA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:15.972309 +++  Cache FetchItems for sortk A#G#:S UID: [jnzRc17QQiCsMhjklo0VJA==] 
FetchNode: 2020/08/13 07:58:15.972314  node: jnzRc17QQiCsMhjklo0VJA== subKey: A#G#:S
DB: 2020/08/13 07:58:15.975309 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.96004ms
AttachNode: gr1 2020/08/13 07:58:15.975553 Errored: SetUpredAvailable :for  jnzRc17QQiCsMhjklo0VJA==
Cache: 2020/08/13 07:58:15.975566 In SetUpredAvailable: pUid, tUID:  jnzRc17QQiCsMhjklo0VJA== jnzRc17QQiCsMhjklo0VJA== A#G#:S
Cache: 2020/08/13 07:58:15.975570 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:58:15.979127 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.522694ms
Unlock: 2020/08/13 07:58:15.979140 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:58:15.984191 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.608467ms
DB: 2020/08/13 07:58:15.986765 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.990039 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.992969 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.995403 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:15.998802 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.34447ms
DB: 2020/08/13 07:58:16.003669 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.578898ms
FetchForUpdate: 2020/08/13 07:58:16.003698 ** Cache FetchForUpdate Cache Key Value: [Y3rpNExKRIW4pho/c2RPRA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:16.003704 +++  Cache FetchItems for sortk A#G#:S UID: [Y3rpNExKRIW4pho/c2RPRA==] 
FetchNode: 2020/08/13 07:58:16.003709  node: Y3rpNExKRIW4pho/c2RPRA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:58:16.003937 ** Cache FetchForUpdate Cache Key Value: [u2z/yudJRzegUTSLLdo1fA==]   sortk: A#
fetchItems: 2020/08/13 07:58:16.003949 +++  Cache FetchItems for sortk A# UID: [u2z/yudJRzegUTSLLdo1fA==] 
FetchNode: 2020/08/13 07:58:16.003960  node: u2z/yudJRzegUTSLLdo1fA== subKey: A#
DB: 2020/08/13 07:58:16.007082 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.060829ms
Unlock: 2020/08/13 07:58:16.007279 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:58:16.007428 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.65969ms
DB: 2020/08/13 07:58:16.011025 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.517448ms
Unlock: 2020/08/13 07:58:16.011041 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 07:58:16.011556 ** Cache FetchForUpdate Cache Key Value: [Y3rpNExKRIW4pho/c2RPRA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:16.011569 +++  Cache FetchItems for sortk A#G#:S UID: [Y3rpNExKRIW4pho/c2RPRA==] 
FetchNode: 2020/08/13 07:58:16.011574  node: Y3rpNExKRIW4pho/c2RPRA== subKey: A#G#:S
DB: 2020/08/13 07:58:16.015345 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.738047ms
DB: 2020/08/13 07:58:16.021400 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.969136ms
DB: 2020/08/13 07:58:16.029854 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 8.401324ms
DB: 2020/08/13 07:58:16.034236 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.250674ms
DB: 2020/08/13 07:58:16.040236 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.934859ms
DB: 2020/08/13 07:58:16.044370 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.717767ms
DB: 2020/08/13 07:58:16.048446 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.583367ms
DB: 2020/08/13 07:58:16.055614 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.520321ms
DB: 2020/08/13 07:58:16.059846 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.745188ms
DB: 2020/08/13 07:58:16.065183 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.558513ms
Unlock: 2020/08/13 07:58:16.065199 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 07:58:16.069349 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.344556ms
FetchForUpdate: 2020/08/13 07:58:16.069363 ** Cache FetchForUpdate Cache Key Value: [Y3rpNExKRIW4pho/c2RPRA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:16.069369 +++  Cache FetchItems for sortk A#G#:S UID: [Y3rpNExKRIW4pho/c2RPRA==] 
FetchNode: 2020/08/13 07:58:16.069374  node: Y3rpNExKRIW4pho/c2RPRA== subKey: A#G#:S
DB: 2020/08/13 07:58:16.072607 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.202005ms
AttachNode: gr1 2020/08/13 07:58:16.072711 Errored: SetUpredAvailable :for  Y3rpNExKRIW4pho/c2RPRA==
Cache: 2020/08/13 07:58:16.072720 In SetUpredAvailable: pUid, tUID:  Y3rpNExKRIW4pho/c2RPRA== Y3rpNExKRIW4pho/c2RPRA== A#G#:S
Cache: 2020/08/13 07:58:16.072733 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:58:16.076127 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.361482ms
Unlock: 2020/08/13 07:58:16.076136 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:58:16.081137 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.462094ms
DB: 2020/08/13 07:58:16.084401 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.086849 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.090296 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.092829 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.096737 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.845135ms
DB: 2020/08/13 07:58:16.101706 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.790155ms
FetchForUpdate: 2020/08/13 07:58:16.101724 ** Cache FetchForUpdate Cache Key Value: [jnzRc17QQiCsMhjklo0VJA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:16.101730 +++  Cache FetchItems for sortk A#G#:S UID: [jnzRc17QQiCsMhjklo0VJA==] 
FetchNode: 2020/08/13 07:58:16.101735  node: jnzRc17QQiCsMhjklo0VJA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:58:16.101917 ** Cache FetchForUpdate Cache Key Value: [u2z/yudJRzegUTSLLdo1fA==]   sortk: A#
fetchItems: 2020/08/13 07:58:16.101926 +++  Cache FetchItems for sortk A# UID: [u2z/yudJRzegUTSLLdo1fA==] 
FetchNode: 2020/08/13 07:58:16.101938  node: u2z/yudJRzegUTSLLdo1fA== subKey: A#
DB: 2020/08/13 07:58:16.104637 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.867392ms
DB: 2020/08/13 07:58:16.105704 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.66623ms
Unlock: 2020/08/13 07:58:16.107082 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:58:16.108684 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.517972ms
DB: 2020/08/13 07:58:16.111910 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.195822ms
DB: 2020/08/13 07:58:16.111931 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.195822ms
DB: 2020/08/13 07:58:16.115264 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.299256ms
DB: 2020/08/13 07:58:16.115284 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.299256ms
DB: 2020/08/13 07:58:16.119366 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.718535ms
DB: 2020/08/13 07:58:16.124031 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.513678ms
Unlock: 2020/08/13 07:58:16.124043 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 07:58:16.130871 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.982748ms
DB: 2020/08/13 07:58:16.134393 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.135653ms
DB: 2020/08/13 07:58:16.138572 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.553479ms
DB: 2020/08/13 07:58:16.144396 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.352043ms
DB: 2020/08/13 07:58:16.148286 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.479078ms
DB: 2020/08/13 07:58:16.152489 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.558168ms
DB: 2020/08/13 07:58:16.158833 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.864978ms
DB: 2020/08/13 07:58:16.162450 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.190011ms
DB: 2020/08/13 07:58:16.166467 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.406921ms
DB: 2020/08/13 07:58:16.170534 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.646474ms
FetchForUpdate: 2020/08/13 07:58:16.170547 ** Cache FetchForUpdate Cache Key Value: [jnzRc17QQiCsMhjklo0VJA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:16.170554 +++  Cache FetchItems for sortk A#G#:S UID: [jnzRc17QQiCsMhjklo0VJA==] 
FetchNode: 2020/08/13 07:58:16.170559  node: jnzRc17QQiCsMhjklo0VJA== subKey: A#G#:S
DB: 2020/08/13 07:58:16.176433 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.822152ms
AttachNode: gr1 2020/08/13 07:58:16.176532 Errored: SetUpredAvailable :for  jnzRc17QQiCsMhjklo0VJA==
Cache: 2020/08/13 07:58:16.176541 In SetUpredAvailable: pUid, tUID:  jnzRc17QQiCsMhjklo0VJA== WcPMy0FfS2SqlD4EeAGnXw== A#G#:S
Cache: 2020/08/13 07:58:16.176545 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:58:16.180077 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.497315ms
Unlock: 2020/08/13 07:58:16.180086 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:58:16.185482 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.001622ms
DB: 2020/08/13 07:58:16.188085 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.190489 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.192889 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.195398 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.198731 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.281428ms
DB: 2020/08/13 07:58:16.203404 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.499147ms
FetchForUpdate: 2020/08/13 07:58:16.203422 ** Cache FetchForUpdate Cache Key Value: [u2z/yudJRzegUTSLLdo1fA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:16.203429 +++  Cache FetchItems for sortk A#G#:S UID: [u2z/yudJRzegUTSLLdo1fA==] 
FetchNode: 2020/08/13 07:58:16.203435  node: u2z/yudJRzegUTSLLdo1fA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:58:16.203780 ** Cache FetchForUpdate Cache Key Value: [jnzRc17QQiCsMhjklo0VJA==]   sortk: A#
fetchItems: 2020/08/13 07:58:16.203791 +++  Cache FetchItems for sortk A# UID: [jnzRc17QQiCsMhjklo0VJA==] 
FetchNode: 2020/08/13 07:58:16.203803  node: jnzRc17QQiCsMhjklo0VJA== subKey: A#
DB: 2020/08/13 07:58:16.207177 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.28894ms
Unlock: 2020/08/13 07:58:16.208587 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:58:16.209220 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.748075ms
DB: 2020/08/13 07:58:16.213529 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.974166ms
DB: 2020/08/13 07:58:16.216704 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.140583ms
DB: 2020/08/13 07:58:16.216728 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.140583ms
DB: 2020/08/13 07:58:16.219859 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.096292ms
DB: 2020/08/13 07:58:16.220027 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.096292ms
DB: 2020/08/13 07:58:16.223787 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.585684ms
DB: 2020/08/13 07:58:16.227250 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.308708ms
Unlock: 2020/08/13 07:58:16.227261 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 07:58:16.233938 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.99733ms
DB: 2020/08/13 07:58:16.237362 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.194947ms
DB: 2020/08/13 07:58:16.241331 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.438259ms
DB: 2020/08/13 07:58:16.247696 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.045502ms
DB: 2020/08/13 07:58:16.251211 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.232889ms
DB: 2020/08/13 07:58:16.255036 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.493204ms
DB: 2020/08/13 07:58:16.261416 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.953695ms
DB: 2020/08/13 07:58:16.265757 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.043177ms
DB: 2020/08/13 07:58:16.270455 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.355182ms
DB: 2020/08/13 07:58:16.275343 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.561156ms
FetchForUpdate: 2020/08/13 07:58:16.275368 ** Cache FetchForUpdate Cache Key Value: [u2z/yudJRzegUTSLLdo1fA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:16.275375 +++  Cache FetchItems for sortk A#G#:S UID: [u2z/yudJRzegUTSLLdo1fA==] 
FetchNode: 2020/08/13 07:58:16.275379  node: u2z/yudJRzegUTSLLdo1fA== subKey: A#G#:S
DB: 2020/08/13 07:58:16.279103 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.687993ms
AttachNode: gr1 2020/08/13 07:58:16.279214 Errored: SetUpredAvailable :for  u2z/yudJRzegUTSLLdo1fA==
Cache: 2020/08/13 07:58:16.279223 In SetUpredAvailable: pUid, tUID:  u2z/yudJRzegUTSLLdo1fA== 0obWGA/ERle6NW5tIhN5hQ== A#G#:S
Cache: 2020/08/13 07:58:16.279228 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:58:16.282749 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.48674ms
Unlock: 2020/08/13 07:58:16.282759 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:58:16.287684 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.490816ms
DB: 2020/08/13 07:58:16.291190 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.293514 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.296936 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.300216 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 07:58:16.303736 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.453071ms
DB: 2020/08/13 07:58:16.308366 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.329232ms
FetchForUpdate: 2020/08/13 07:58:16.308383 ** Cache FetchForUpdate Cache Key Value: [Y3rpNExKRIW4pho/c2RPRA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:16.308389 +++  Cache FetchItems for sortk A#G#:S UID: [Y3rpNExKRIW4pho/c2RPRA==] 
FetchNode: 2020/08/13 07:58:16.308393  node: Y3rpNExKRIW4pho/c2RPRA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 07:58:16.308585 ** Cache FetchForUpdate Cache Key Value: [jnzRc17QQiCsMhjklo0VJA==]   sortk: A#
fetchItems: 2020/08/13 07:58:16.308596 +++  Cache FetchItems for sortk A# UID: [jnzRc17QQiCsMhjklo0VJA==] 
FetchNode: 2020/08/13 07:58:16.308626  node: jnzRc17QQiCsMhjklo0VJA== subKey: A#
DB: 2020/08/13 07:58:16.312212 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.51902ms
Unlock: 2020/08/13 07:58:16.313173 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 07:58:16.314802 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 6.375444ms
DB: 2020/08/13 07:58:16.318340 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.327128ms
DB: 2020/08/13 07:58:16.321605 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.137251ms
DB: 2020/08/13 07:58:16.321727 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.137251ms
DB: 2020/08/13 07:58:16.324960 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.195652ms
DB: 2020/08/13 07:58:16.324975 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.195652ms
DB: 2020/08/13 07:58:16.328885 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.748115ms
DB: 2020/08/13 07:58:16.335267 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.233071ms
Unlock: 2020/08/13 07:58:16.335373 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 07:58:16.341985 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.920271ms
DB: 2020/08/13 07:58:16.345483 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.230327ms
DB: 2020/08/13 07:58:16.349326 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.47679ms
DB: 2020/08/13 07:58:16.355589 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.944102ms
DB: 2020/08/13 07:58:16.359119 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.208351ms
DB: 2020/08/13 07:58:16.362943 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.457623ms
DB: 2020/08/13 07:58:16.368974 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.944185ms
DB: 2020/08/13 07:58:16.372475 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.404657ms
DB: 2020/08/13 07:58:16.376099 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.519174ms
DB: 2020/08/13 07:58:16.379389 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.229981ms
FetchForUpdate: 2020/08/13 07:58:16.379405 ** Cache FetchForUpdate Cache Key Value: [Y3rpNExKRIW4pho/c2RPRA==]   sortk: A#G#:S
fetchItems: 2020/08/13 07:58:16.379411 +++  Cache FetchItems for sortk A#G#:S UID: [Y3rpNExKRIW4pho/c2RPRA==] 
FetchNode: 2020/08/13 07:58:16.379416  node: Y3rpNExKRIW4pho/c2RPRA== subKey: A#G#:S
DB: 2020/08/13 07:58:16.382375 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.900638ms
AttachNode: gr1 2020/08/13 07:58:16.382476 Errored: SetUpredAvailable :for  Y3rpNExKRIW4pho/c2RPRA==
Cache: 2020/08/13 07:58:16.382484 In SetUpredAvailable: pUid, tUID:  Y3rpNExKRIW4pho/c2RPRA== nV4bNPQ3T/aA3fTdoEtMmw== A#G#:S
Cache: 2020/08/13 07:58:16.382489 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 07:58:16.385882 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.337121ms
Unlock: 2020/08/13 07:58:16.385904 ******* IN UNLOCK NC ********************
DB: 2020/08/13 07:58:16.390546 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.557267ms
rdfLoader: 2020/08/13 07:58:16.390561 saveNode  waiting on AttachNode to finish
rdfLoader: 2020/08/13 07:58:16.390566 saveNode finished waiting...exiting
grmgr: 2020/08/13 07:58:16.390576 Powering down...
rdfuuid: 2020/08/13 07:58:16.390583 Powering down...
DB:2020/08/13 08:00:20 log.go:18: ===============================================================================
grmgr: 2020/08/13 08:00:20.193384 Powering on...
rdfLoader: 2020/08/13 08:00:20.193757 verify started....xx.
rdfLoader: 2020/08/13 08:00:20.193789 saveNode started......
rdfLoader: 2020/08/13 08:00:20.193806 define saveNode limiter......
rdfuuid: 2020/08/13 08:00:20.193817 Powering on...
rdfLoader: 2020/08/13 08:00:20.193824 *************** All started 
rdfLoader: 2020/08/13 08:00:20.204902 .  getType..
rdfLoader: 2020/08/13 08:00:20.204917 node.TyName : [Person]
DB: 2020/08/13 08:00:20.278169 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 73.193281ms
verify: 2020/08/13 08:00:20.278329 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:8, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:11, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 08:00:20.278337  Send Ask request to limiter.
verify: 2020/08/13 08:00:20.278342 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:00:20.278350 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:00:20.278357 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:00:20.278363 .  getType..
rdfLoader: 2020/08/13 08:00:20.278368 node.TyName : [Person]
verify: 2020/08/13 08:00:20.278388 Pass to unmarshal... 1 &ds.Node{ID:"b", TyName:"Person", Lines:[]ds.Line{ds.Line{N:14, Subj:"b", Pred:"Name", Obj:"Paul Payne"}, ds.Line{N:15, Subj:"b", Pred:"DOB", Obj:"2 June 1960"}, ds.Line{N:16, Subj:"b", Pred:"Age", Obj:"58"}, ds.Line{N:17, Subj:"b", Pred:"Siblings", Obj:"abc"}, ds.Line{N:18, Subj:"b", Pred:"Siblings", Obj:"c"}, ds.Line{N:19, Subj:"b", Pred:"Cars", Obj:"Holden Commodore"}, ds.Line{N:20, Subj:"b", Pred:"Cars", Obj:"Honda"}, ds.Line{N:21, Subj:"b", Pred:"Cars", Obj:"VW Golf"}}, Err:[]error(nil)}
verify: 2020/08/13 08:00:20.278393  Send Ask request to limiter.
verify: 2020/08/13 08:00:20.278397 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:00:20.278403 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:00:20.278409 ACK from gcmgr....received...
verify: 2020/08/13 08:00:20.278416 *** Verify back to waiting on veryifyCh
rdfLoader: 2020/08/13 08:00:20.278465 .  getType..
rdfLoader: 2020/08/13 08:00:20.278471 node.TyName : [Person]
verify: 2020/08/13 08:00:20.278494 Pass to unmarshal... 0 &ds.Node{ID:"c", TyName:"Person", Lines:[]ds.Line{ds.Line{N:1, Subj:"c", Pred:"Name", Obj:"Ian Payne"}, ds.Line{N:2, Subj:"c", Pred:"DOB", Obj:"29 Jan 1953"}, ds.Line{N:3, Subj:"c", Pred:"Age", Obj:"67"}, ds.Line{N:4, Subj:"c", Pred:"Siblings", Obj:"abc"}, ds.Line{N:5, Subj:"c", Pred:"Siblings", Obj:"b"}, ds.Line{N:6, Subj:"c", Pred:"Cars", Obj:"VW Passat"}, ds.Line{N:7, Subj:"c", Pred:"Cars", Obj:"Mitsubishi"}, ds.Line{N:8, Subj:"c", Pred:"Cars", Obj:"Ford Laser"}, ds.Line{N:9, Subj:"c", Pred:"Cars", Obj:"Honda"}}, Err:[]error(nil)}
verify: 2020/08/13 08:00:20.278511  Send Ask request to limiter.
verify: 2020/08/13 08:00:20.278516 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:00:20.278522 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:00:20.278527 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:00:20.278533 .  getType..
rdfLoader: 2020/08/13 08:00:20.278538 node.TyName : [Person]
verify: 2020/08/13 08:00:20.278553 Pass to unmarshal... 1 &ds.Node{ID:"d", TyName:"Person", Lines:[]ds.Line{ds.Line{N:12, Subj:"d", Pred:"Name", Obj:"Phil Smith"}, ds.Line{N:13, Subj:"d", Pred:"DOB", Obj:"17 June 1976"}, ds.Line{N:14, Subj:"d", Pred:"Age", Obj:"36"}, ds.Line{N:15, Subj:"d", Pred:"Cars", Obj:"Roll Roycet"}, ds.Line{N:16, Subj:"d", Pred:"Cars", Obj:"Bentley"}}, Err:[]error(nil)}
verify: 2020/08/13 08:00:20.278557  Send Ask request to limiter.
verify: 2020/08/13 08:00:20.278562 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:00:20.278567 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:00:20.278573 ACK from gcmgr....received...
verify: 2020/08/13 08:00:20.278578 *** Verify back to waiting on veryifyCh
verify: 2020/08/13 08:00:20.278583 verify at wg.Wait() .....
unmarshalRDF2020/08/13 08:00:20.278596 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:00:20.278603 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/13 08:00:20.278609 StartCh received for unmarshall. rCnt = 2 
rdfLoader: 2020/08/13 08:00:20.278615 Find Ty Address
rdfLoader: 2020/08/13 08:00:20.278619 Find Ty Age
rdfLoader: 2020/08/13 08:00:20.278626 Find Ty Cars
rdfLoader: 2020/08/13 08:00:20.278632 Add to SS . [Bentley]
rdfLoader: 2020/08/13 08:00:20.278637 Find Ty DOB
rdfLoader: 2020/08/13 08:00:20.278642 Find Ty Friends
rdfLoader: 2020/08/13 08:00:20.278646 Find Ty Jobs
rdfLoader: 2020/08/13 08:00:20.278651 Find Ty Name
rdfLoader: 2020/08/13 08:00:20.278656 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:00:20.278660 Find Ty Siblings
rdfLoader: 2020/08/13 08:00:20.278679 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:00:20.278703 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:00:20.278709 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:00:20.278716 EndCh received for unmarshall. rCnt = 1 
unmarshalRDF2020/08/13 08:00:20.278726 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:00:20.278732 StartCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/13 08:00:20.278737 StartCh received for unmarshall. rCnt = 3 
rdfLoader: 2020/08/13 08:00:20.278742 Find Ty Address
rdfLoader: 2020/08/13 08:00:20.278747 Find Ty Age
rdfLoader: 2020/08/13 08:00:20.278752 Find Ty Cars
rdfLoader: 2020/08/13 08:00:20.278757 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:00:20.278762 Add to SS . [Alfa]
rdfLoader: 2020/08/13 08:00:20.278767 Find Ty DOB
rdfLoader: 2020/08/13 08:00:20.278772 Find Ty Friends
rdfLoader: 2020/08/13 08:00:20.278777 Find Ty Jobs
rdfLoader: 2020/08/13 08:00:20.278785 Find Ty Name
rdfLoader: 2020/08/13 08:00:20.278790 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:00:20.278795 Find Ty Siblings
rdfLoader: 2020/08/13 08:00:20.278808 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:00:20.278845 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:00:20.278863 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:00:20.278869 EndCh received for unmarshall. rCnt = 2 
unmarshalRDF2020/08/13 08:00:20.278879 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:00:20.278884 StartCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/13 08:00:20.278889 StartCh received for unmarshall. rCnt = 4 
rdfLoader: 2020/08/13 08:00:20.278894 Find Ty Address
rdfLoader: 2020/08/13 08:00:20.278899 Find Ty Age
rdfLoader: 2020/08/13 08:00:20.278904 Find Ty Cars
rdfLoader: 2020/08/13 08:00:20.278909 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:00:20.278914 Add to SS . [VW Golf]
rdfLoader: 2020/08/13 08:00:20.278919 Find Ty DOB
rdfLoader: 2020/08/13 08:00:20.278923 Find Ty Friends
rdfLoader: 2020/08/13 08:00:20.278928 Find Ty Jobs
rdfLoader: 2020/08/13 08:00:20.278932 Find Ty Name
rdfLoader: 2020/08/13 08:00:20.278938 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:00:20.278942 Find Ty Siblings
rdfLoader: 2020/08/13 08:00:20.278954 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:00:20.278979 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:00:20.278983 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:00:20.278989 EndCh received for unmarshall. rCnt = 3 
unmarshalRDF2020/08/13 08:00:20.278999 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:00:20.279004 StartCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:00:20.279009 StartCh received for unmarshall. rCnt = 5 
rdfLoader: 2020/08/13 08:00:20.279015 Find Ty Address
rdfLoader: 2020/08/13 08:00:20.279019 Find Ty Age
rdfLoader: 2020/08/13 08:00:20.279024 Find Ty Cars
rdfLoader: 2020/08/13 08:00:20.279029 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/13 08:00:20.279035 Add to SS . [Ford Laser]
rdfLoader: 2020/08/13 08:00:20.279040 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:00:20.279045 Find Ty DOB
rdfLoader: 2020/08/13 08:00:20.279050 Find Ty Friends
rdfLoader: 2020/08/13 08:00:20.279054 Find Ty Jobs
rdfLoader: 2020/08/13 08:00:20.279059 Find Ty Name
rdfLoader: 2020/08/13 08:00:20.279064 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:00:20.279068 Find Ty Siblings
rdfLoader: 2020/08/13 08:00:20.279080 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:00:20.279105 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:00:20.279113 Exit  unmarshalRDF. 
verify: 2020/08/13 08:00:20.279119 verify exited.....
saveNode: 2020/08/13 08:00:20.279125 read from saveCH channel 1 
grmgr: 2020/08/13 08:00:20.279131 EndCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:00:20.279137 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
DB:2020/08/13 08:00:54 log.go:18: ===============================================================================
grmgr: 2020/08/13 08:00:54.688256 Powering on...
rdfLoader: 2020/08/13 08:00:54.688683 verify started....xx.
rdfLoader: 2020/08/13 08:00:54.688706 saveNode started......
rdfLoader: 2020/08/13 08:00:54.688711 define saveNode limiter......
rdfuuid: 2020/08/13 08:00:54.688727 Powering on...
rdfLoader: 2020/08/13 08:00:54.688734 *************** All started 
rdfLoader: 2020/08/13 08:00:54.700673 .  getType..
rdfLoader: 2020/08/13 08:00:54.700689 node.TyName : [Person]
DB: 2020/08/13 08:00:54.773194 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 72.428452ms
verify: 2020/08/13 08:00:54.773360 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:8, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:11, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 08:00:54.773367  Send Ask request to limiter.
verify: 2020/08/13 08:00:54.773372 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:00:54.773379 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:00:54.773385 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:00:54.773391 .  getType..
rdfLoader: 2020/08/13 08:00:54.773396 node.TyName : [Person]
verify: 2020/08/13 08:00:54.773414 Pass to unmarshal... 1 &ds.Node{ID:"b", TyName:"Person", Lines:[]ds.Line{ds.Line{N:14, Subj:"b", Pred:"Name", Obj:"Paul Payne"}, ds.Line{N:15, Subj:"b", Pred:"DOB", Obj:"2 June 1960"}, ds.Line{N:16, Subj:"b", Pred:"Age", Obj:"58"}, ds.Line{N:17, Subj:"b", Pred:"Siblings", Obj:"abc"}, ds.Line{N:18, Subj:"b", Pred:"Siblings", Obj:"c"}, ds.Line{N:19, Subj:"b", Pred:"Cars", Obj:"Holden Commodore"}, ds.Line{N:20, Subj:"b", Pred:"Cars", Obj:"Honda"}, ds.Line{N:21, Subj:"b", Pred:"Cars", Obj:"VW Golf"}}, Err:[]error(nil)}
verify: 2020/08/13 08:00:54.773419  Send Ask request to limiter.
verify: 2020/08/13 08:00:54.773423 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:00:54.773428 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:00:54.773434 ACK from gcmgr....received...
verify: 2020/08/13 08:00:54.773442 *** Verify back to waiting on veryifyCh
rdfLoader: 2020/08/13 08:00:54.773500 .  getType..
rdfLoader: 2020/08/13 08:00:54.773506 node.TyName : [Person]
verify: 2020/08/13 08:00:54.773528 Pass to unmarshal... 0 &ds.Node{ID:"c", TyName:"Person", Lines:[]ds.Line{ds.Line{N:1, Subj:"c", Pred:"Name", Obj:"Ian Payne"}, ds.Line{N:2, Subj:"c", Pred:"DOB", Obj:"29 Jan 1953"}, ds.Line{N:3, Subj:"c", Pred:"Age", Obj:"67"}, ds.Line{N:4, Subj:"c", Pred:"Siblings", Obj:"abc"}, ds.Line{N:5, Subj:"c", Pred:"Siblings", Obj:"b"}, ds.Line{N:6, Subj:"c", Pred:"Cars", Obj:"VW Passat"}, ds.Line{N:7, Subj:"c", Pred:"Cars", Obj:"Mitsubishi"}, ds.Line{N:8, Subj:"c", Pred:"Cars", Obj:"Ford Laser"}, ds.Line{N:9, Subj:"c", Pred:"Cars", Obj:"Honda"}}, Err:[]error(nil)}
verify: 2020/08/13 08:00:54.773544  Send Ask request to limiter.
verify: 2020/08/13 08:00:54.773549 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:00:54.773555 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:00:54.773561 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:00:54.773566 .  getType..
rdfLoader: 2020/08/13 08:00:54.773570 node.TyName : [Person]
verify: 2020/08/13 08:00:54.773585 Pass to unmarshal... 1 &ds.Node{ID:"d", TyName:"Person", Lines:[]ds.Line{ds.Line{N:12, Subj:"d", Pred:"Name", Obj:"Phil Smith"}, ds.Line{N:13, Subj:"d", Pred:"DOB", Obj:"17 June 1976"}, ds.Line{N:14, Subj:"d", Pred:"Age", Obj:"36"}, ds.Line{N:15, Subj:"d", Pred:"Cars", Obj:"Roll Roycet"}, ds.Line{N:16, Subj:"d", Pred:"Cars", Obj:"Bentley"}}, Err:[]error(nil)}
verify: 2020/08/13 08:00:54.773589  Send Ask request to limiter.
verify: 2020/08/13 08:00:54.773594 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:00:54.773599 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:00:54.773604 ACK from gcmgr....received...
verify: 2020/08/13 08:00:54.773609 *** Verify back to waiting on veryifyCh
verify: 2020/08/13 08:00:54.773613 verify at wg.Wait() .....
unmarshalRDF2020/08/13 08:00:54.773626 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:00:54.773632 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/13 08:00:54.773637 StartCh received for unmarshall. rCnt = 2 
rdfLoader: 2020/08/13 08:00:54.773643 Find Ty Address
rdfLoader: 2020/08/13 08:00:54.773647 Find Ty Age
rdfLoader: 2020/08/13 08:00:54.773653 Find Ty Cars
rdfLoader: 2020/08/13 08:00:54.773659 Add to SS . [Bentley]
rdfLoader: 2020/08/13 08:00:54.773664 Find Ty DOB
rdfLoader: 2020/08/13 08:00:54.773668 Find Ty Friends
rdfLoader: 2020/08/13 08:00:54.773673 Find Ty Jobs
rdfLoader: 2020/08/13 08:00:54.773677 Find Ty Name
rdfLoader: 2020/08/13 08:00:54.773682 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:00:54.773686 Find Ty Siblings
rdfLoader: 2020/08/13 08:00:54.773704 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:00:54.773728 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:00:54.773746 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:00:54.773753 EndCh received for unmarshall. rCnt = 1 
unmarshalRDF2020/08/13 08:00:54.773763 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:00:54.773769 StartCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/13 08:00:54.773774 StartCh received for unmarshall. rCnt = 3 
rdfLoader: 2020/08/13 08:00:54.773779 Find Ty Address
rdfLoader: 2020/08/13 08:00:54.773784 Find Ty Age
rdfLoader: 2020/08/13 08:00:54.773788 Find Ty Cars
rdfLoader: 2020/08/13 08:00:54.773794 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:00:54.773799 Add to SS . [Alfa]
rdfLoader: 2020/08/13 08:00:54.773803 Find Ty DOB
rdfLoader: 2020/08/13 08:00:54.773808 Find Ty Friends
rdfLoader: 2020/08/13 08:00:54.773813 Find Ty Jobs
rdfLoader: 2020/08/13 08:00:54.773817 Find Ty Name
rdfLoader: 2020/08/13 08:00:54.773823 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:00:54.773827 Find Ty Siblings
rdfLoader: 2020/08/13 08:00:54.773840 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:00:54.773865 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:00:54.773874 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:00:54.773880 EndCh received for unmarshall. rCnt = 2 
unmarshalRDF2020/08/13 08:00:54.773906 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:00:54.773914 StartCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/13 08:00:54.773920 StartCh received for unmarshall. rCnt = 4 
rdfLoader: 2020/08/13 08:00:54.773925 Find Ty Address
rdfLoader: 2020/08/13 08:00:54.773930 Find Ty Age
rdfLoader: 2020/08/13 08:00:54.773935 Find Ty Cars
rdfLoader: 2020/08/13 08:00:54.773940 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:00:54.773945 Add to SS . [VW Golf]
rdfLoader: 2020/08/13 08:00:54.773950 Find Ty DOB
rdfLoader: 2020/08/13 08:00:54.773954 Find Ty Friends
rdfLoader: 2020/08/13 08:00:54.773959 Find Ty Jobs
rdfLoader: 2020/08/13 08:00:54.773963 Find Ty Name
rdfLoader: 2020/08/13 08:00:54.773969 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:00:54.773973 Find Ty Siblings
rdfLoader: 2020/08/13 08:00:54.773987 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:00:54.774012 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:00:54.774017 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:00:54.774023 EndCh received for unmarshall. rCnt = 3 
unmarshalRDF2020/08/13 08:00:54.774032 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:00:54.774038 StartCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:00:54.774043 StartCh received for unmarshall. rCnt = 5 
rdfLoader: 2020/08/13 08:00:54.774048 Find Ty Address
rdfLoader: 2020/08/13 08:00:54.774053 Find Ty Age
rdfLoader: 2020/08/13 08:00:54.774058 Find Ty Cars
rdfLoader: 2020/08/13 08:00:54.774063 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/13 08:00:54.774068 Add to SS . [Ford Laser]
rdfLoader: 2020/08/13 08:00:54.774073 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:00:54.774078 Find Ty DOB
rdfLoader: 2020/08/13 08:00:54.774083 Find Ty Friends
rdfLoader: 2020/08/13 08:00:54.774087 Find Ty Jobs
rdfLoader: 2020/08/13 08:00:54.774091 Find Ty Name
rdfLoader: 2020/08/13 08:00:54.774096 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:00:54.774101 Find Ty Siblings
rdfLoader: 2020/08/13 08:00:54.774112 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:00:54.774137 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:00:54.774142 Exit  unmarshalRDF. 
verify: 2020/08/13 08:00:54.774147 verify exited.....
saveNode: 2020/08/13 08:00:54.774157 read from saveCH channel 1 
grmgr: 2020/08/13 08:00:54.774164 EndCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:00:54.774169 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:00:54.774174 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:00:54.774180 read from saveCH channel 2 
grmgr: 2020/08/13 08:00:54.774199 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:00:54.774206 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:00:54.774211 read from saveCH channel 3 
grmgr: 2020/08/13 08:00:54.774227 StartCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 08:00:54.774233 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/13 08:00:54.774238 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/13 08:00:54.774246 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774253 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774260 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774266 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774272 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774278 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774284 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:00:54.774289 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:00:54.774299 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0000175c0)}
SaveRDFNode: 2020/08/13 08:00:54.774304 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:00:54.774313 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.774318 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.774324 UID received  : 4s4HtRUJTWae33mpLvK5zA==
SaveRDFNode: xxx 2020/08/13 08:00:54.774520 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774531 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774539 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774545 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774551 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774558 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.774564 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:00:54.774569 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:00:54.774575 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017c20)}
SaveRDFNode: 2020/08/13 08:00:54.774579 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:00:54.774604 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.774610 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.774620 UID received  : qWFQf8S0Syyrvndf4ohWtw==
DB: 2020/08/13 08:00:54.785612 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 11.257448ms
DB: 2020/08/13 08:00:54.791655 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.000225ms
DB: 2020/08/13 08:00:54.796600 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.753373ms
DB: 2020/08/13 08:00:54.801488 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.855686ms
DB: 2020/08/13 08:00:54.805061 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 30.401839ms
DB: 2020/08/13 08:00:54.806499 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.974424ms
SaveRDFNode: 2020/08/13 08:00:54.806513 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000175c0)}
rdfUIDdb: 2020/08/13 08:00:54.806519 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.806523 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.806529 Received UID: X18=
SaveRDFNode: 2020/08/13 08:00:54.806542 a: = db.Item{PKey:[]uint8{0xe2, 0xce, 0x7, 0xb5, 0x15, 0x9, 0x4d, 0x66, 0x9e, 0xdf, 0x79, 0xa9, 0x2e, 0xf2, 0xb9, 0xcc}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:00:54.809941 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.849775ms
DB: 2020/08/13 08:00:54.811523 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.952138ms
SaveRDFNode: 2020/08/13 08:00:54.811537 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000175c0)}
rdfUIDdb: 2020/08/13 08:00:54.811543 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.811547 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.811552 Received UID: X18=
SaveRDFNode: 2020/08/13 08:00:54.811562 a: = db.Item{PKey:[]uint8{0xe2, 0xce, 0x7, 0xb5, 0x15, 0x9, 0x4d, 0x66, 0x9e, 0xdf, 0x79, 0xa9, 0x2e, 0xf2, 0xb9, 0xcc}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:00:54.814629 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.514748ms
DB: 2020/08/13 08:00:54.816568 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.976886ms
SaveRDFNode: 2020/08/13 08:00:54.816579 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:00:54.816587 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 08:00:54.816592 Send ack to waiting saveNode...
saveNode: 2020/08/13 08:00:54.816597 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:00:54.816603 read from saveCH channel 4 
grmgr: 2020/08/13 08:00:54.816608 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:00:54.816613 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/13 08:00:54.816618 saveNode  waiting on ASaveRDFNodettachNode to finish
SaveRDFNode: xxx 2020/08/13 08:00:54.816644 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.816651 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.816677 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.816685 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.816691 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.816697 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.816703 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:00:54.816713 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:00:54.816720 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000384de0)}
SaveRDFNode: 2020/08/13 08:00:54.816724 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:00:54.816732 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.816736 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.816742 UID received  : Y5PzsCrKQ4ivqMaGMitaew==
grmgr: 2020/08/13 08:00:54.816941 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/13 08:00:54.816950 StartCh received for saveNode. rCnt = 3 
SaveRDFNode: xxx 2020/08/13 08:00:54.816959 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.816966 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.816972 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.816978 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.817001 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.817008 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:00:54.817013 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:00:54.817032 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:00:54.817039 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0003851a0)}
SaveRDFNode: 2020/08/13 08:00:54.817043 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:00:54.817054 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.817058 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.817064 UID received  : 9pSX7aA2R7iGKZQE2MnF2w==
DB: 2020/08/13 08:00:54.819430 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.76345ms
DB: 2020/08/13 08:00:54.823534 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.764176ms
DB: 2020/08/13 08:00:54.825776 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.669592ms
DB: 2020/08/13 08:00:54.828814 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.34813ms
SaveRDFNode: 2020/08/13 08:00:54.828830 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017c20)}
rdfUIDdb: 2020/08/13 08:00:54.828836 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.828840 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.828845 Received UID: X18=
SaveRDFNode: 2020/08/13 08:00:54.828856 a: = db.Item{PKey:[]uint8{0xa9, 0x61, 0x50, 0x7f, 0xc4, 0xb4, 0x4b, 0x2c, 0xab, 0xbe, 0x77, 0x5f, 0xe2, 0x88, 0x56, 0xb7}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:00:54.830489 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.907642ms
DB: 2020/08/13 08:00:54.833888 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.002106ms
SaveRDFNode: 2020/08/13 08:00:54.833938 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017c20)}
rdfUIDdb: 2020/08/13 08:00:54.833944 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.833948 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.833953 Received UID: X18=
SaveRDFNode: 2020/08/13 08:00:54.833964 a: = db.Item{PKey:[]uint8{0xa9, 0x61, 0x50, 0x7f, 0xc4, 0xb4, 0x4b, 0x2c, 0xab, 0xbe, 0x77, 0x5f, 0xe2, 0x88, 0x56, 0xb7}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:00:54.835057 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.515542ms
DB: 2020/08/13 08:00:54.847393 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 21.580351ms
DB: 2020/08/13 08:00:54.852475 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.871184ms
DB: 2020/08/13 08:00:54.854266 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 19.172774ms
DB: 2020/08/13 08:00:54.854575 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 20.573883ms
SaveRDFNode: 2020/08/13 08:00:54.854585 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:00:54.854595 EndCh received for saveNode. rCnt = 2 
DB: 2020/08/13 08:00:54.857161 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.653046ms
DB: 2020/08/13 08:00:54.858850 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.552204ms
SaveRDFNode: 2020/08/13 08:00:54.858864 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384de0)}
rdfUIDdb: 2020/08/13 08:00:54.858871 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.858875 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.858880 Received UID: X18=
SaveRDFNode: 2020/08/13 08:00:54.858892 a: = db.Item{PKey:[]uint8{0x63, 0x93, 0xf3, 0xb0, 0x2a, 0xca, 0x43, 0x88, 0xaf, 0xa8, 0xc6, 0x86, 0x32, 0x2b, 0x5a, 0x7b}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:00:54.862168 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.970479ms
SaveRDFNode: 2020/08/13 08:00:54.862181 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003851a0)}
rdfUIDdb: 2020/08/13 08:00:54.862187 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.862191 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.862197 Received UID: X18=
SaveRDFNode: 2020/08/13 08:00:54.862207 a: = db.Item{PKey:[]uint8{0xf6, 0x94, 0x97, 0xed, 0xa0, 0x36, 0x47, 0xb8, 0x86, 0x29, 0x94, 0x4, 0xd8, 0xc9, 0xc5, 0xdb}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:00:54.863411 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.490078ms
SaveRDFNode: 2020/08/13 08:00:54.863579 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384de0)}
rdfUIDdb: 2020/08/13 08:00:54.863591 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.863595 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.863601 Received UID: X18=
SaveRDFNode: 2020/08/13 08:00:54.863612 a: = db.Item{PKey:[]uint8{0x63, 0x93, 0xf3, 0xb0, 0x2a, 0xca, 0x43, 0x88, 0xaf, 0xa8, 0xc6, 0x86, 0x32, 0x2b, 0x5a, 0x7b}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:00:54.867205 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.950024ms
SaveRDFNode: 2020/08/13 08:00:54.867219 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003851a0)}
rdfUIDdb: 2020/08/13 08:00:54.867224 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:00:54.867228 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:00:54.867234 Received UID: X18=
SaveRDFNode: 2020/08/13 08:00:54.867244 a: = db.Item{PKey:[]uint8{0xf6, 0x94, 0x97, 0xed, 0xa0, 0x36, 0x47, 0xb8, 0x86, 0x29, 0x94, 0x4, 0xd8, 0xc9, 0xc5, 0xdb}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:00:54.868223 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.561354ms
SaveRDFNode: 2020/08/13 08:00:54.868233 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:00:54.868251 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/13 08:00:54.872226 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.930657ms
SaveRDFNode: 2020/08/13 08:00:54.872237 Returned.+++++++++++ No error
rdfLoader: 2020/08/13 08:00:54.872246 saveNode finished waiting...exiting
grmgr: 2020/08/13 08:00:54.872805 EndCh received for saveNode. rCnt = 0 
rdfLoader: 2020/08/13 08:00:54.873123 saveNode  waiting on AttachNode to finish
DB: 2020/08/13 08:00:54.875653 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.878883 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.886931 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.890472 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.892666 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.895663 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.897755 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.899216 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.900816 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.906235 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.908045 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.908858 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.909716 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.911053 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.911475 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.913264 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.913511 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.914828 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.915291 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.917242 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.919013 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.437699ms
DB: 2020/08/13 08:00:54.919656 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.919972 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.920794 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.920414ms
DB: 2020/08/13 08:00:54.922877 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.923814 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.523289ms
DB: 2020/08/13 08:00:54.925188 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.483325ms
DB: 2020/08/13 08:00:54.926328 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.963646ms
FetchForUpdate: 2020/08/13 08:00:54.926353 ** Cache FetchForUpdate Cache Key Value: [qWFQf8S0Syyrvndf4ohWtw==]   sortk: A#G#:S
FetchNode: 2020/08/13 08:00:54.926360  node: qWFQf8S0Syyrvndf4ohWtw== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:00:54.926532 ** Cache FetchForUpdate Cache Key Value: [9pSX7aA2R7iGKZQE2MnF2w==]   sortk: A#
FetchNode: 2020/08/13 08:00:54.926547  node: 9pSX7aA2R7iGKZQE2MnF2w== subKey: A#
DB: 2020/08/13 08:00:54.928730 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.804224ms
DB: 2020/08/13 08:00:54.929504 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:00:54.930184 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.787582ms
FetchForUpdate: 2020/08/13 08:00:54.930248 len(nb): 1
fetchItems: 2020/08/13 08:00:54.930256 +++  Cache FetchItems for sortk A#G#:S UID: [qWFQf8S0Syyrvndf4ohWtw==] 
FetchNode: 2020/08/13 08:00:54.930261  node: qWFQf8S0Syyrvndf4ohWtw== subKey: A#G#:S
DB: 2020/08/13 08:00:54.930992 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 9.931444ms
FetchForUpdate: 2020/08/13 08:00:54.931004 ** Cache FetchForUpdate Cache Key Value: [Y5PzsCrKQ4ivqMaGMitaew==]   sortk: A#G#:S
FetchNode: 2020/08/13 08:00:54.931010  node: Y5PzsCrKQ4ivqMaGMitaew== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:00:54.931179 ** Cache FetchForUpdate Cache Key Value: [qWFQf8S0Syyrvndf4ohWtw==]   sortk: A#
DB: 2020/08/13 08:00:54.933298 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 9.218844ms
FetchForUpdate: 2020/08/13 08:00:54.933310 ** Cache FetchForUpdate Cache Key Value: [Y5PzsCrKQ4ivqMaGMitaew==]   sortk: A#G#:S
FetchForUpdate: 2020/08/13 08:00:54.933320 ** Cache FetchForUpdate Cache Key Value: [9pSX7aA2R7iGKZQE2MnF2w==]   sortk: A#
DB: 2020/08/13 08:00:54.933697 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.887965ms
FetchForUpdate: 2020/08/13 08:00:54.933708 ** Cache FetchForUpdate Cache Key Value: [9pSX7aA2R7iGKZQE2MnF2w==]   sortk: A#G#:S
FetchForUpdate: 2020/08/13 08:00:54.933720 ** Cache FetchForUpdate Cache Key Value: [qWFQf8S0Syyrvndf4ohWtw==]   sortk: A#
DB: 2020/08/13 08:00:54.934009 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.970468ms
FetchForUpdate: 2020/08/13 08:00:54.934041 len(nb): 1
fetchItems: 2020/08/13 08:00:54.934048 +++  Cache FetchItems for sortk A#G#:S UID: [Y5PzsCrKQ4ivqMaGMitaew==] 
FetchNode: 2020/08/13 08:00:54.934053  node: Y5PzsCrKQ4ivqMaGMitaew== subKey: A#G#:S
DB: 2020/08/13 08:00:54.934361 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.067826ms
DB: 2020/08/13 08:00:54.935292 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.736151ms
DB: 2020/08/13 08:00:54.936664 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.519736ms
FetchForUpdate: 2020/08/13 08:00:54.936676 ** Cache FetchForUpdate Cache Key Value: [qWFQf8S0Syyrvndf4ohWtw==]   sortk: A#G#:S
FetchForUpdate: 2020/08/13 08:00:54.936688 ** Cache FetchForUpdate Cache Key Value: [Y5PzsCrKQ4ivqMaGMitaew==]   sortk: A#
DB: 2020/08/13 08:00:54.937585 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.505519ms
DB: 2020/08/13 08:00:54.939583 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.897312ms
Unlock: 2020/08/13 08:00:54.939594 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
fetchItems: 2020/08/13 08:00:54.939870 +++  Cache FetchItems for sortk A# UID: [qWFQf8S0Syyrvndf4ohWtw==] 
FetchNode: 2020/08/13 08:00:54.939889  node: qWFQf8S0Syyrvndf4ohWtw== subKey: A#
DB: 2020/08/13 08:00:54.942757 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.86019ms
Unlock: 2020/08/13 08:00:54.942767 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
fetchItems: 2020/08/13 08:00:54.943037 +++  Cache FetchItems for sortk A#G#:S UID: [Y5PzsCrKQ4ivqMaGMitaew==] 
FetchNode: 2020/08/13 08:00:54.943046  node: Y5PzsCrKQ4ivqMaGMitaew== subKey: A#G#:S
DB: 2020/08/13 08:00:54.943707 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 17.092597ms
FetchForUpdate: 2020/08/13 08:00:54.943844 len(nb): 7
fetchItems: 2020/08/13 08:00:54.943854 +++  Cache FetchItems for sortk A# UID: [9pSX7aA2R7iGKZQE2MnF2w==] 
FetchNode: 2020/08/13 08:00:54.943858  node: 9pSX7aA2R7iGKZQE2MnF2w== subKey: A#
DB: 2020/08/13 08:00:54.944486 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.544489ms
fetchItems: 2020/08/13 08:00:54.944761 +++  Cache FetchItems for sortk A# UID: [qWFQf8S0Syyrvndf4ohWtw==] 
FetchNode: 2020/08/13 08:00:54.944773  node: qWFQf8S0Syyrvndf4ohWtw== subKey: A#
DB: 2020/08/13 08:00:54.945040 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 9.481341ms
FetchForUpdate: 2020/08/13 08:00:54.945052 ** Cache FetchForUpdate Cache Key Value: [9pSX7aA2R7iGKZQE2MnF2w==]   sortk: A#G#:S
FetchForUpdate: 2020/08/13 08:00:54.945069 ** Cache FetchForUpdate Cache Key Value: [Y5PzsCrKQ4ivqMaGMitaew==]   sortk: A#
DB: 2020/08/13 08:00:54.947108 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.026301ms
DB: 2020/08/13 08:00:54.948025 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.204189ms
Unlock: 2020/08/13 08:00:54.949541 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 08:00:54.951222 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 7.313041ms
FetchForUpdate: 2020/08/13 08:00:54.952313 ** Cache FetchForUpdate Cache Key Value: [Y5PzsCrKQ4ivqMaGMitaew==]   sortk: A#G#:S
Unlock: 2020/08/13 08:00:54.953338 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/13 08:00:54.953711 ** Cache FetchForUpdate Cache Key Value: [qWFQf8S0Syyrvndf4ohWtw==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:00:54.953721 +++  Cache FetchItems for sortk A#G#:S UID: [qWFQf8S0Syyrvndf4ohWtw==] 
FetchNode: 2020/08/13 08:00:54.953726  node: qWFQf8S0Syyrvndf4ohWtw== subKey: A#G#:S
fetchItems: 2020/08/13 08:00:54.953905 +++  Cache FetchItems for sortk A#G#:S UID: [9pSX7aA2R7iGKZQE2MnF2w==] 
FetchNode: 2020/08/13 08:00:54.953913  node: 9pSX7aA2R7iGKZQE2MnF2w== subKey: A#G#:S
DB: 2020/08/13 08:00:54.954219 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.67385ms
DB: 2020/08/13 08:00:54.957355 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.399586ms
DB: 2020/08/13 08:00:54.958027 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.253789ms
DB: 2020/08/13 08:00:54.959022 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.768181ms
DB: 2020/08/13 08:00:54.959036 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.768181ms
DB: 2020/08/13 08:00:54.962895 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.185107ms
Unlock: 2020/08/13 08:00:54.963075 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
fetchItems: 2020/08/13 08:00:54.963430 +++  Cache FetchItems for sortk A# UID: [9pSX7aA2R7iGKZQE2MnF2w==] 
FetchNode: 2020/08/13 08:00:54.963446  node: 9pSX7aA2R7iGKZQE2MnF2w== subKey: A#
DB: 2020/08/13 08:00:54.965012 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.421406ms
DB: 2020/08/13 08:00:54.965530 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.44275ms
DB: 2020/08/13 08:00:54.965545 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.44275ms
DB: 2020/08/13 08:00:54.967535 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.039707ms
Unlock: 2020/08/13 08:00:54.968643 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/13 08:00:54.969003 +++  Cache FetchItems for sortk A#G#:S UID: [9pSX7aA2R7iGKZQE2MnF2w==] 
FetchNode: 2020/08/13 08:00:54.969013  node: 9pSX7aA2R7iGKZQE2MnF2w== subKey: A#G#:S
DB: 2020/08/13 08:00:54.969804 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.516652ms
DB: 2020/08/13 08:00:54.971015 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.269465ms
DB: 2020/08/13 08:00:54.972382 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.305284ms
DB: 2020/08/13 08:00:54.975282 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.735439ms
DB: 2020/08/13 08:00:54.976097 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.893232ms
Unlock: 2020/08/13 08:00:54.976108 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
fetchItems: 2020/08/13 08:00:54.977076 +++  Cache FetchItems for sortk A# UID: [Y5PzsCrKQ4ivqMaGMitaew==] 
FetchNode: 2020/08/13 08:00:54.977094  node: Y5PzsCrKQ4ivqMaGMitaew== subKey: A#
DB: 2020/08/13 08:00:54.978176 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.364567ms
DB: 2020/08/13 08:00:54.981296 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.554264ms
DB: 2020/08/13 08:00:54.982470 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.297946ms
fetchItems: 2020/08/13 08:00:54.982603 +++  Cache FetchItems for sortk A# UID: [Y5PzsCrKQ4ivqMaGMitaew==] 
FetchNode: 2020/08/13 08:00:54.982611  node: Y5PzsCrKQ4ivqMaGMitaew== subKey: A#
DB: 2020/08/13 08:00:54.985796 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.901424ms
DB: 2020/08/13 08:00:54.986981 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 8.595286ms
DB: 2020/08/13 08:00:54.986997 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 8.595286ms
DB: 2020/08/13 08:00:54.988182 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.391968ms
DB: 2020/08/13 08:00:54.990168 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 7.52666ms
Unlock: 2020/08/13 08:00:54.991325 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/13 08:00:54.991696 +++  Cache FetchItems for sortk A# UID: [Y5PzsCrKQ4ivqMaGMitaew==] 
FetchNode: 2020/08/13 08:00:54.991716  node: Y5PzsCrKQ4ivqMaGMitaew== subKey: A#
DB: 2020/08/13 08:00:54.991996 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.963535ms
DB: 2020/08/13 08:00:54.992010 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.963535ms
DB: 2020/08/13 08:00:54.995361 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.688397ms
DB: 2020/08/13 08:00:54.997184 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.424183ms
Unlock: 2020/08/13 08:00:54.997581 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/13 08:00:54.997879 +++  Cache FetchItems for sortk A#G#:S UID: [Y5PzsCrKQ4ivqMaGMitaew==] 
FetchNode: 2020/08/13 08:00:54.998634  node: Y5PzsCrKQ4ivqMaGMitaew== subKey: A#G#:S
DB: 2020/08/13 08:00:54.999830 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.594119ms
DB: 2020/08/13 08:00:55.001955 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.504071ms
DB: 2020/08/13 08:00:55.007671 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.273169ms
DB: 2020/08/13 08:00:55.009696 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 23.61344ms
DB: 2020/08/13 08:00:55.012084 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 13.387381ms
DB: 2020/08/13 08:00:55.013664 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.441709ms
Unlock: 2020/08/13 08:00:55.013675 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
fetchItems: 2020/08/13 08:00:55.014641 +++  Cache FetchItems for sortk A# UID: [qWFQf8S0Syyrvndf4ohWtw==] 
FetchNode: 2020/08/13 08:00:55.014855  node: qWFQf8S0Syyrvndf4ohWtw== subKey: A#
DB: 2020/08/13 08:00:55.015806 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.488916ms
DB: 2020/08/13 08:00:55.019012 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.351062ms
DB: 2020/08/13 08:00:55.020519 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.025667ms
FetchForUpdate: 2020/08/13 08:00:55.020530 ** Cache FetchForUpdate Cache Key Value: [qWFQf8S0Syyrvndf4ohWtw==]   sortk: A#G#:S
DB: 2020/08/13 08:00:55.020591 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 20.528404ms
Unlock: 2020/08/13 08:00:55.020598 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:00:55.021786 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.918ms
DB: 2020/08/13 08:00:55.023676 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.613178ms
DB: 2020/08/13 08:00:55.026527 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.686052ms
DB: 2020/08/13 08:00:55.027351 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.649483ms
DB: 2020/08/13 08:00:55.028786 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.958723ms
DB: 2020/08/13 08:00:55.032409 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.322248ms
DB: 2020/08/13 08:00:55.034007 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 19.099268ms
Unlock: 2020/08/13 08:00:55.035416 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 08:00:55.035890 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.41902ms
FetchForUpdate: 2020/08/13 08:00:55.036056 ** Cache FetchForUpdate Cache Key Value: [9pSX7aA2R7iGKZQE2MnF2w==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:00:55.036067 +++  Cache FetchItems for sortk A#G#:S UID: [9pSX7aA2R7iGKZQE2MnF2w==] 
FetchNode: 2020/08/13 08:00:55.036072  node: 9pSX7aA2R7iGKZQE2MnF2w== subKey: A#G#:S
fetchItems: 2020/08/13 08:00:55.036843 +++  Cache FetchItems for sortk A#G#:S UID: [qWFQf8S0Syyrvndf4ohWtw==] 
FetchNode: 2020/08/13 08:00:55.036926  node: qWFQf8S0Syyrvndf4ohWtw== subKey: A#G#:S
DB: 2020/08/13 08:00:55.037851 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 10.243085ms
DB: 2020/08/13 08:00:55.038788 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.713546ms
DB: 2020/08/13 08:00:55.039619 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.512249ms
DB: 2020/08/13 08:00:55.041924 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.910918ms
DB: 2020/08/13 08:00:55.042933 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.243015ms
DB: 2020/08/13 08:00:55.050067 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 12.06409ms
DB: 2020/08/13 08:00:55.051406 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 11.233553ms
DB: 2020/08/13 08:00:55.051985 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 9.50269ms
DB: 2020/08/13 08:00:55.052374 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 13.248812ms
DB: 2020/08/13 08:00:55.057209 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.188836ms
DB: 2020/08/13 08:00:55.057234 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.188836ms
DB: 2020/08/13 08:00:55.057611 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 14.144678ms
DB: 2020/08/13 08:00:55.059259 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.490715ms
DB: 2020/08/13 08:00:55.063370 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.091528ms
DB: 2020/08/13 08:00:55.063390 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.091528ms
DB: 2020/08/13 08:00:55.067306 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 9.164167ms
DB: 2020/08/13 08:00:55.068514 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 17.770666ms
DB: 2020/08/13 08:00:55.070015 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 17.15338ms
DB: 2020/08/13 08:00:55.072231 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.429467ms
DB: 2020/08/13 08:00:55.074047 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.874639ms
FetchForUpdate: 2020/08/13 08:00:55.074059 ** Cache FetchForUpdate Cache Key Value: [Y5PzsCrKQ4ivqMaGMitaew==]   sortk: A#G#:S
DB: 2020/08/13 08:00:55.076338 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.845121ms
DB: 2020/08/13 08:00:55.078003 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 18.221362ms
DB: 2020/08/13 08:00:55.084291 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.645062ms
DB: 2020/08/13 08:00:55.085273 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.977405ms
DB: 2020/08/13 08:00:55.085840 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 22.253842ms
DB: 2020/08/13 08:00:55.086292 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 18.55349ms
DB: 2020/08/13 08:00:55.088597 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.545996ms
DB: 2020/08/13 08:00:55.089150 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.53783ms
DB: 2020/08/13 08:00:55.089698 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.689828ms
Unlock: 2020/08/13 08:00:55.089710 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
fetchItems: 2020/08/13 08:00:55.090658 +++  Cache FetchItems for sortk A#G#:S UID: [qWFQf8S0Syyrvndf4ohWtw==] 
FetchNode: 2020/08/13 08:00:55.090686  node: qWFQf8S0Syyrvndf4ohWtw== subKey: A#G#:S
DB: 2020/08/13 08:00:55.090983 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.356599ms
Unlock: 2020/08/13 08:00:55.091010 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
fetchItems: 2020/08/13 08:00:55.091618 +++  Cache FetchItems for sortk A#G#:S UID: [Y5PzsCrKQ4ivqMaGMitaew==] 
FetchNode: 2020/08/13 08:00:55.091644  node: Y5PzsCrKQ4ivqMaGMitaew== subKey: A#G#:S
DB: 2020/08/13 08:00:55.092955 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.053034ms
DB: 2020/08/13 08:00:55.093587 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.139368ms
DB: 2020/08/13 08:00:55.096489 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.995839ms
FetchForUpdate: 2020/08/13 08:00:55.096501 ** Cache FetchForUpdate Cache Key Value: [Y5PzsCrKQ4ivqMaGMitaew==]   sortk: A#G#:S
DB: 2020/08/13 08:00:55.096653 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.146588ms
DB: 2020/08/13 08:00:55.101487 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 8.34083ms
FetchForUpdate: 2020/08/13 08:00:55.101666 ** Cache FetchForUpdate Cache Key Value: [9pSX7aA2R7iGKZQE2MnF2w==]   sortk: A#G#:S
DB: 2020/08/13 08:00:55.101909 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 10.233179ms
AttachNode: gr1 2020/08/13 08:00:55.102044 Errored: SetUpredAvailable :for  Y5PzsCrKQ4ivqMaGMitaew==
Cache: 2020/08/13 08:00:55.102056 In SetUpredAvailable: pUid, tUID:  Y5PzsCrKQ4ivqMaGMitaew== qHPO6aEBSSWwu5Gt0jUS8g== A#G#:S
Cache: 2020/08/13 08:00:55.102060 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:00:55.102477 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.644535ms
DB: 2020/08/13 08:00:55.102779 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.834773ms
DB: 2020/08/13 08:00:55.105312 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 14.590858ms
AttachNode: gr1 2020/08/13 08:00:55.105385 Errored: SetUpredAvailable :for  qWFQf8S0Syyrvndf4ohWtw==
Cache: 2020/08/13 08:00:55.105392 In SetUpredAvailable: pUid, tUID:  qWFQf8S0Syyrvndf4ohWtw== qWFQf8S0Syyrvndf4ohWtw== A#G#:S
Cache: 2020/08/13 08:00:55.105397 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:00:55.105954 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.860159ms
Unlock: 2020/08/13 08:00:55.105965 ******* IN UNLOCK NC ********************
fetchItems: 2020/08/13 08:00:55.106567 +++  Cache FetchItems for sortk A#G#:S UID: [Y5PzsCrKQ4ivqMaGMitaew==] 
FetchNode: 2020/08/13 08:00:55.106577  node: Y5PzsCrKQ4ivqMaGMitaew== subKey: A#G#:S
DB: 2020/08/13 08:00:55.106815 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.957614ms
DB: 2020/08/13 08:00:55.109671 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.051737ms
AttachNode: gr1 2020/08/13 08:00:55.109782 Errored: SetUpredAvailable :for  Y5PzsCrKQ4ivqMaGMitaew==
Cache: 2020/08/13 08:00:55.109800 In SetUpredAvailable: pUid, tUID:  Y5PzsCrKQ4ivqMaGMitaew== Y5PzsCrKQ4ivqMaGMitaew== A#G#:S
Cache: 2020/08/13 08:00:55.109804 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:00:55.110947 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.806996ms
Unlock: 2020/08/13 08:00:55.110959 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
fetchItems: 2020/08/13 08:00:55.111554 +++  Cache FetchItems for sortk A#G#:S UID: [9pSX7aA2R7iGKZQE2MnF2w==] 
FetchNode: 2020/08/13 08:00:55.111563  node: 9pSX7aA2R7iGKZQE2MnF2w== subKey: A#G#:S
DB: 2020/08/13 08:00:55.113421 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.577164ms
Unlock: 2020/08/13 08:00:55.113430 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:00:55.114633 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.938458ms
DB: 2020/08/13 08:00:55.115460 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.049723ms
FetchForUpdate: 2020/08/13 08:00:55.115479 ** Cache FetchForUpdate Cache Key Value: [9pSX7aA2R7iGKZQE2MnF2w==]   sortk: A#G#:S
DB: 2020/08/13 08:00:55.118965 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 7.352245ms
AttachNode: gr1 2020/08/13 08:00:55.119248 Errored: SetUpredAvailable :for  9pSX7aA2R7iGKZQE2MnF2w==
Cache: 2020/08/13 08:00:55.119262 In SetUpredAvailable: pUid, tUID:  9pSX7aA2R7iGKZQE2MnF2w== qUccDl8LRbyNKS8NDnX7HA== A#G#:S
Cache: 2020/08/13 08:00:55.119266 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:00:55.119922 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.028013ms
DB: 2020/08/13 08:00:55.122690 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 17.261908ms
Unlock: 2020/08/13 08:00:55.122704 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:00:55.124791 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.49343ms
Unlock: 2020/08/13 08:00:55.124800 ******* IN UNLOCK NC ********************
fetchItems: 2020/08/13 08:00:55.125388 +++  Cache FetchItems for sortk A#G#:S UID: [9pSX7aA2R7iGKZQE2MnF2w==] 
FetchNode: 2020/08/13 08:00:55.125397  node: 9pSX7aA2R7iGKZQE2MnF2w== subKey: A#G#:S
DB: 2020/08/13 08:00:55.125679 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 23.096215ms
DB: 2020/08/13 08:00:55.128452 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.024654ms
AttachNode: gr1 2020/08/13 08:00:55.128543 Errored: SetUpredAvailable :for  9pSX7aA2R7iGKZQE2MnF2w==
Cache: 2020/08/13 08:00:55.128551 In SetUpredAvailable: pUid, tUID:  9pSX7aA2R7iGKZQE2MnF2w== 9pSX7aA2R7iGKZQE2MnF2w== A#G#:S
Cache: 2020/08/13 08:00:55.128555 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:00:55.131961 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.993544ms
DB: 2020/08/13 08:00:55.132500 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.907058ms
Unlock: 2020/08/13 08:00:55.132509 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:00:55.133169 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.929043ms
DB: 2020/08/13 08:00:55.135451 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.170643ms
DB: 2020/08/13 08:00:55.138394 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.443874ms
DB: 2020/08/13 08:00:55.139559 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.671524ms
DB: 2020/08/13 08:00:55.141105 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 17.926684ms
DB: 2020/08/13 08:00:55.145998 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.135938ms
DB: 2020/08/13 08:00:55.152244 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.933152ms
DB: 2020/08/13 08:00:55.156428 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.748628ms
DB: 2020/08/13 08:00:55.160176 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.557747ms
FetchForUpdate: 2020/08/13 08:00:55.160189 ** Cache FetchForUpdate Cache Key Value: [qWFQf8S0Syyrvndf4ohWtw==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:00:55.160196 +++  Cache FetchItems for sortk A#G#:S UID: [qWFQf8S0Syyrvndf4ohWtw==] 
FetchNode: 2020/08/13 08:00:55.160200  node: qWFQf8S0Syyrvndf4ohWtw== subKey: A#G#:S
DB: 2020/08/13 08:00:55.165369 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.137567ms
AttachNode: gr1 2020/08/13 08:00:55.165473 Errored: SetUpredAvailable :for  qWFQf8S0Syyrvndf4ohWtw==
Cache: 2020/08/13 08:00:55.165481 In SetUpredAvailable: pUid, tUID:  qWFQf8S0Syyrvndf4ohWtw== +yq1paPsQj+zHWqhQo+0mg== A#G#:S
Cache: 2020/08/13 08:00:55.165486 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:00:55.169639 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.120413ms
Unlock: 2020/08/13 08:00:55.169803 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:00:55.175350 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.0358ms
rdfLoader: 2020/08/13 08:00:55.175366 saveNode finished waiting...exiting
grmgr: 2020/08/13 08:00:55.175375 Powering down...
rdfuuid: 2020/08/13 08:00:55.175383 Powering down...
DB:2020/08/13 08:06:07 log.go:18: ===============================================================================
grmgr: 2020/08/13 08:06:07.135522 Powering on...
rdfLoader: 2020/08/13 08:06:07.135549 verify started....xx.
rdfLoader: 2020/08/13 08:06:07.135563 saveNode started......
rdfLoader: 2020/08/13 08:06:07.135567 define saveNode limiter......
rdfuuid: 2020/08/13 08:06:07.135577 Powering on...
rdfLoader: 2020/08/13 08:06:07.135583 *************** All started 
rdfLoader: 2020/08/13 08:06:07.144330 .  getType..
rdfLoader: 2020/08/13 08:06:07.144345 node.TyName : [Person]
DB: 2020/08/13 08:06:07.215097 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 70.68076ms
verify: 2020/08/13 08:06:07.215259 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:8, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:11, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 08:06:07.215267  Send Ask request to limiter.
verify: 2020/08/13 08:06:07.215272 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:06:07.215280 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:06:07.215287 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:06:07.215294 .  getType..
rdfLoader: 2020/08/13 08:06:07.215298 node.TyName : [Person]
verify: 2020/08/13 08:06:07.215318 Pass to unmarshal... 1 &ds.Node{ID:"b", TyName:"Person", Lines:[]ds.Line{ds.Line{N:14, Subj:"b", Pred:"Name", Obj:"Paul Payne"}, ds.Line{N:15, Subj:"b", Pred:"DOB", Obj:"2 June 1960"}, ds.Line{N:16, Subj:"b", Pred:"Age", Obj:"58"}, ds.Line{N:17, Subj:"b", Pred:"Siblings", Obj:"abc"}, ds.Line{N:18, Subj:"b", Pred:"Siblings", Obj:"c"}, ds.Line{N:19, Subj:"b", Pred:"Cars", Obj:"Holden Commodore"}, ds.Line{N:20, Subj:"b", Pred:"Cars", Obj:"Honda"}, ds.Line{N:21, Subj:"b", Pred:"Cars", Obj:"VW Golf"}}, Err:[]error(nil)}
verify: 2020/08/13 08:06:07.215333  Send Ask request to limiter.
verify: 2020/08/13 08:06:07.215338 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:06:07.215343 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:06:07.215348 ACK from gcmgr....received...
verify: 2020/08/13 08:06:07.215355 *** Verify back to waiting on veryifyCh
rdfLoader: 2020/08/13 08:06:07.215402 .  getType..
rdfLoader: 2020/08/13 08:06:07.215406 node.TyName : [Person]
verify: 2020/08/13 08:06:07.215443 Pass to unmarshal... 0 &ds.Node{ID:"c", TyName:"Person", Lines:[]ds.Line{ds.Line{N:1, Subj:"c", Pred:"Name", Obj:"Ian Payne"}, ds.Line{N:2, Subj:"c", Pred:"DOB", Obj:"29 Jan 1953"}, ds.Line{N:3, Subj:"c", Pred:"Age", Obj:"67"}, ds.Line{N:4, Subj:"c", Pred:"Siblings", Obj:"abc"}, ds.Line{N:5, Subj:"c", Pred:"Siblings", Obj:"b"}, ds.Line{N:6, Subj:"c", Pred:"Cars", Obj:"VW Passat"}, ds.Line{N:7, Subj:"c", Pred:"Cars", Obj:"Mitsubishi"}, ds.Line{N:8, Subj:"c", Pred:"Cars", Obj:"Ford Laser"}, ds.Line{N:9, Subj:"c", Pred:"Cars", Obj:"Honda"}}, Err:[]error(nil)}
verify: 2020/08/13 08:06:07.215450  Send Ask request to limiter.
verify: 2020/08/13 08:06:07.215454 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:06:07.215459 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:06:07.215465 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:06:07.215469 .  getType..
rdfLoader: 2020/08/13 08:06:07.215473 node.TyName : [Person]
verify: 2020/08/13 08:06:07.215487 Pass to unmarshal... 1 &ds.Node{ID:"d", TyName:"Person", Lines:[]ds.Line{ds.Line{N:12, Subj:"d", Pred:"Name", Obj:"Phil Smith"}, ds.Line{N:13, Subj:"d", Pred:"DOB", Obj:"17 June 1976"}, ds.Line{N:14, Subj:"d", Pred:"Age", Obj:"36"}, ds.Line{N:15, Subj:"d", Pred:"Cars", Obj:"Roll Roycet"}, ds.Line{N:16, Subj:"d", Pred:"Cars", Obj:"Bentley"}}, Err:[]error(nil)}
verify: 2020/08/13 08:06:07.215491  Send Ask request to limiter.
verify: 2020/08/13 08:06:07.215495 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:06:07.215500 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:06:07.215505 ACK from gcmgr....received...
verify: 2020/08/13 08:06:07.215509 *** Verify back to waiting on veryifyCh
verify: 2020/08/13 08:06:07.215513 verify at wg.Wait() .....
unmarshalRDF2020/08/13 08:06:07.215525 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:06:07.215531 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/13 08:06:07.215536 StartCh received for unmarshall. rCnt = 2 
rdfLoader: 2020/08/13 08:06:07.215541 Find Ty Address
rdfLoader: 2020/08/13 08:06:07.215545 Find Ty Age
rdfLoader: 2020/08/13 08:06:07.215551 Find Ty Cars
rdfLoader: 2020/08/13 08:06:07.215556 Add to SS . [Bentley]
rdfLoader: 2020/08/13 08:06:07.215561 Find Ty DOB
rdfLoader: 2020/08/13 08:06:07.215566 Find Ty Friends
rdfLoader: 2020/08/13 08:06:07.215581 Find Ty Jobs
rdfLoader: 2020/08/13 08:06:07.215586 Find Ty Name
rdfLoader: 2020/08/13 08:06:07.215591 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:06:07.215595 Find Ty Siblings
rdfLoader: 2020/08/13 08:06:07.215618 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:06:07.215641 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:06:07.215650 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:06:07.215657 EndCh received for unmarshall. rCnt = 1 
unmarshalRDF2020/08/13 08:06:07.215667 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:06:07.215673 StartCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/13 08:06:07.215678 StartCh received for unmarshall. rCnt = 3 
rdfLoader: 2020/08/13 08:06:07.215683 Find Ty Address
rdfLoader: 2020/08/13 08:06:07.215688 Find Ty Age
rdfLoader: 2020/08/13 08:06:07.215693 Find Ty Cars
rdfLoader: 2020/08/13 08:06:07.215698 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:06:07.215703 Add to SS . [Alfa]
rdfLoader: 2020/08/13 08:06:07.215707 Find Ty DOB
rdfLoader: 2020/08/13 08:06:07.215712 Find Ty Friends
rdfLoader: 2020/08/13 08:06:07.215716 Find Ty Jobs
rdfLoader: 2020/08/13 08:06:07.215720 Find Ty Name
rdfLoader: 2020/08/13 08:06:07.215725 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:06:07.215730 Find Ty Siblings
rdfLoader: 2020/08/13 08:06:07.215742 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:06:07.215767 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:06:07.215771 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:06:07.215777 EndCh received for unmarshall. rCnt = 2 
unmarshalRDF2020/08/13 08:06:07.215787 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:06:07.215792 StartCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/13 08:06:07.215797 StartCh received for unmarshall. rCnt = 4 
rdfLoader: 2020/08/13 08:06:07.215802 Find Ty Address
rdfLoader: 2020/08/13 08:06:07.215806 Find Ty Age
rdfLoader: 2020/08/13 08:06:07.215811 Find Ty Cars
rdfLoader: 2020/08/13 08:06:07.215816 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:06:07.215821 Add to SS . [VW Golf]
rdfLoader: 2020/08/13 08:06:07.215837 Find Ty DOB
rdfLoader: 2020/08/13 08:06:07.215842 Find Ty Friends
rdfLoader: 2020/08/13 08:06:07.215846 Find Ty Jobs
rdfLoader: 2020/08/13 08:06:07.215850 Find Ty Name
rdfLoader: 2020/08/13 08:06:07.215856 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:06:07.215861 Find Ty Siblings
rdfLoader: 2020/08/13 08:06:07.215876 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:06:07.215912 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:06:07.215917 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:06:07.215922 EndCh received for unmarshall. rCnt = 3 
unmarshalRDF2020/08/13 08:06:07.215931 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:06:07.215937 StartCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:06:07.215941 StartCh received for unmarshall. rCnt = 5 
rdfLoader: 2020/08/13 08:06:07.215946 Find Ty Address
rdfLoader: 2020/08/13 08:06:07.215954 Find Ty Age
rdfLoader: 2020/08/13 08:06:07.215959 Find Ty Cars
rdfLoader: 2020/08/13 08:06:07.215965 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/13 08:06:07.215970 Add to SS . [Ford Laser]
rdfLoader: 2020/08/13 08:06:07.215975 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:06:07.215979 Find Ty DOB
rdfLoader: 2020/08/13 08:06:07.215996 Find Ty Friends
rdfLoader: 2020/08/13 08:06:07.216001 Find Ty Jobs
rdfLoader: 2020/08/13 08:06:07.216006 Find Ty Name
rdfLoader: 2020/08/13 08:06:07.216011 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:06:07.216015 Find Ty Siblings
rdfLoader: 2020/08/13 08:06:07.216027 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:06:07.216052 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:06:07.216057 Exit  unmarshalRDF. 
verify: 2020/08/13 08:06:07.216063 verify exited.....
saveNode: 2020/08/13 08:06:07.216069 read from saveCH channel 1 
grmgr: 2020/08/13 08:06:07.216075 EndCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:06:07.216081 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
DB:2020/08/13 08:21:37 log.go:18: ===============================================================================
grmgr: 2020/08/13 08:21:37.557300 Powering on...
rdfLoader: 2020/08/13 08:21:37.557942 verify started....xx.
rdfLoader: 2020/08/13 08:21:37.557966 saveNode started......
rdfLoader: 2020/08/13 08:21:37.557970 define saveNode limiter......
rdfuuid: 2020/08/13 08:21:37.557986 Powering on...
rdfLoader: 2020/08/13 08:21:37.557993 *************** All started 
rdfLoader: 2020/08/13 08:21:37.563942 .  getType..
rdfLoader: 2020/08/13 08:21:37.563952 node.TyName : [Person]
DB: 2020/08/13 08:21:37.638411 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 74.394332ms
verify: 2020/08/13 08:21:37.638593 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:8, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:11, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 08:21:37.638601  Send Ask request to limiter.
verify: 2020/08/13 08:21:37.638606 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:21:37.638614 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:21:37.638620 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:21:37.638627 .  getType..
rdfLoader: 2020/08/13 08:21:37.638631 node.TyName : [Person]
verify: 2020/08/13 08:21:37.638650 Pass to unmarshal... 1 &ds.Node{ID:"b", TyName:"Person", Lines:[]ds.Line{ds.Line{N:14, Subj:"b", Pred:"Name", Obj:"Paul Payne"}, ds.Line{N:15, Subj:"b", Pred:"DOB", Obj:"2 June 1960"}, ds.Line{N:16, Subj:"b", Pred:"Age", Obj:"58"}, ds.Line{N:17, Subj:"b", Pred:"Siblings", Obj:"abc"}, ds.Line{N:18, Subj:"b", Pred:"Siblings", Obj:"c"}, ds.Line{N:19, Subj:"b", Pred:"Cars", Obj:"Holden Commodore"}, ds.Line{N:20, Subj:"b", Pred:"Cars", Obj:"Honda"}, ds.Line{N:21, Subj:"b", Pred:"Cars", Obj:"VW Golf"}}, Err:[]error(nil)}
verify: 2020/08/13 08:21:37.638655  Send Ask request to limiter.
verify: 2020/08/13 08:21:37.638670 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:21:37.638675 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:21:37.638681 ACK from gcmgr....received...
verify: 2020/08/13 08:21:37.638689 *** Verify back to waiting on veryifyCh
rdfLoader: 2020/08/13 08:21:37.638736 .  getType..
rdfLoader: 2020/08/13 08:21:37.638741 node.TyName : [Person]
verify: 2020/08/13 08:21:37.638760 Pass to unmarshal... 0 &ds.Node{ID:"c", TyName:"Person", Lines:[]ds.Line{ds.Line{N:1, Subj:"c", Pred:"Name", Obj:"Ian Payne"}, ds.Line{N:2, Subj:"c", Pred:"DOB", Obj:"29 Jan 1953"}, ds.Line{N:3, Subj:"c", Pred:"Age", Obj:"67"}, ds.Line{N:4, Subj:"c", Pred:"Siblings", Obj:"abc"}, ds.Line{N:5, Subj:"c", Pred:"Siblings", Obj:"b"}, ds.Line{N:6, Subj:"c", Pred:"Cars", Obj:"VW Passat"}, ds.Line{N:7, Subj:"c", Pred:"Cars", Obj:"Mitsubishi"}, ds.Line{N:8, Subj:"c", Pred:"Cars", Obj:"Ford Laser"}, ds.Line{N:9, Subj:"c", Pred:"Cars", Obj:"Honda"}}, Err:[]error(nil)}
verify: 2020/08/13 08:21:37.638765  Send Ask request to limiter.
verify: 2020/08/13 08:21:37.638770 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:21:37.638776 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:21:37.638781 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:21:37.638790 .  getType..
rdfLoader: 2020/08/13 08:21:37.638794 node.TyName : [Person]
verify: 2020/08/13 08:21:37.638809 Pass to unmarshal... 1 &ds.Node{ID:"d", TyName:"Person", Lines:[]ds.Line{ds.Line{N:12, Subj:"d", Pred:"Name", Obj:"Phil Smith"}, ds.Line{N:13, Subj:"d", Pred:"DOB", Obj:"17 June 1976"}, ds.Line{N:14, Subj:"d", Pred:"Age", Obj:"36"}, ds.Line{N:15, Subj:"d", Pred:"Cars", Obj:"Roll Roycet"}, ds.Line{N:16, Subj:"d", Pred:"Cars", Obj:"Bentley"}}, Err:[]error(nil)}
verify: 2020/08/13 08:21:37.638814  Send Ask request to limiter.
verify: 2020/08/13 08:21:37.638818 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:21:37.638823 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:21:37.638829 ACK from gcmgr....received...
verify: 2020/08/13 08:21:37.638846 *** Verify back to waiting on veryifyCh
verify: 2020/08/13 08:21:37.638850 verify at wg.Wait() .....
unmarshalRDF2020/08/13 08:21:37.638874 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:21:37.638880 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/13 08:21:37.638885 StartCh received for unmarshall. rCnt = 2 
rdfLoader: 2020/08/13 08:21:37.638890 Find Ty Address
rdfLoader: 2020/08/13 08:21:37.638895 Find Ty Age
rdfLoader: 2020/08/13 08:21:37.638900 Find Ty Cars
rdfLoader: 2020/08/13 08:21:37.638906 Add to SS . [Bentley]
rdfLoader: 2020/08/13 08:21:37.638910 Find Ty DOB
rdfLoader: 2020/08/13 08:21:37.638915 Find Ty Friends
rdfLoader: 2020/08/13 08:21:37.638919 Find Ty Jobs
rdfLoader: 2020/08/13 08:21:37.638923 Find Ty Name
rdfLoader: 2020/08/13 08:21:37.638927 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:21:37.638931 Find Ty Siblings
rdfLoader: 2020/08/13 08:21:37.638947 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:21:37.638968 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:21:37.638973 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:21:37.638978 EndCh received for unmarshall. rCnt = 1 
unmarshalRDF2020/08/13 08:21:37.638988 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:21:37.638998 StartCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/13 08:21:37.639002 StartCh received for unmarshall. rCnt = 3 
rdfLoader: 2020/08/13 08:21:37.639007 Find Ty Address
rdfLoader: 2020/08/13 08:21:37.639011 Find Ty Age
rdfLoader: 2020/08/13 08:21:37.639016 Find Ty Cars
rdfLoader: 2020/08/13 08:21:37.639020 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:21:37.639025 Add to SS . [Alfa]
rdfLoader: 2020/08/13 08:21:37.639029 Find Ty DOB
rdfLoader: 2020/08/13 08:21:37.639033 Find Ty Friends
rdfLoader: 2020/08/13 08:21:37.639037 Find Ty Jobs
rdfLoader: 2020/08/13 08:21:37.639041 Find Ty Name
rdfLoader: 2020/08/13 08:21:37.639046 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:21:37.639050 Find Ty Siblings
rdfLoader: 2020/08/13 08:21:37.639062 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:21:37.639085 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:21:37.639090 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:21:37.639095 EndCh received for unmarshall. rCnt = 2 
unmarshalRDF2020/08/13 08:21:37.639104 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:21:37.639109 StartCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/13 08:21:37.639113 StartCh received for unmarshall. rCnt = 4 
rdfLoader: 2020/08/13 08:21:37.639118 Find Ty Address
rdfLoader: 2020/08/13 08:21:37.639122 Find Ty Age
rdfLoader: 2020/08/13 08:21:37.639126 Find Ty Cars
rdfLoader: 2020/08/13 08:21:37.639131 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:21:37.639135 Add to SS . [VW Golf]
rdfLoader: 2020/08/13 08:21:37.639140 Find Ty DOB
rdfLoader: 2020/08/13 08:21:37.639145 Find Ty Friends
rdfLoader: 2020/08/13 08:21:37.639149 Find Ty Jobs
rdfLoader: 2020/08/13 08:21:37.639153 Find Ty Name
rdfLoader: 2020/08/13 08:21:37.639157 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:21:37.639161 Find Ty Siblings
rdfLoader: 2020/08/13 08:21:37.639171 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:21:37.639194 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:21:37.639199 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:21:37.639204 EndCh received for unmarshall. rCnt = 3 
unmarshalRDF2020/08/13 08:21:37.639212 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:21:37.639218 StartCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:21:37.639222 StartCh received for unmarshall. rCnt = 5 
rdfLoader: 2020/08/13 08:21:37.639227 Find Ty Address
rdfLoader: 2020/08/13 08:21:37.639231 Find Ty Age
rdfLoader: 2020/08/13 08:21:37.639235 Find Ty Cars
rdfLoader: 2020/08/13 08:21:37.639240 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/13 08:21:37.639244 Add to SS . [Ford Laser]
rdfLoader: 2020/08/13 08:21:37.639248 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:21:37.639252 Find Ty DOB
rdfLoader: 2020/08/13 08:21:37.639257 Find Ty Friends
rdfLoader: 2020/08/13 08:21:37.639261 Find Ty Jobs
rdfLoader: 2020/08/13 08:21:37.639268 Find Ty Name
rdfLoader: 2020/08/13 08:21:37.639273 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:21:37.639277 Find Ty Siblings
rdfLoader: 2020/08/13 08:21:37.639290 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:21:37.639312 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:21:37.639316 Exit  unmarshalRDF. 
verify: 2020/08/13 08:21:37.639321 verify exited.....
saveNode: 2020/08/13 08:21:37.639327 read from saveCH channel 1 
grmgr: 2020/08/13 08:21:37.639333 EndCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:21:37.639338 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:21:37.639342 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:21:37.639359 read from saveCH channel 2 
grmgr: 2020/08/13 08:21:37.639379 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:21:37.639384 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:21:37.639388 read from saveCH channel 3 
grmgr: 2020/08/13 08:21:37.639403 StartCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 08:21:37.639408 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:21:37.639412 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:21:37.639416 read from saveCH channel 4 
SaveRDFNode: xxx 2020/08/13 08:21:37.639432 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639437 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639444 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639449 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639454 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639460 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639465 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:21:37.639469 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:21:37.639479 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000384660)}
SaveRDFNode: 2020/08/13 08:21:37.639483 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:21:37.639491 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.639495 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.639501 UID received  : 0Iv4wni/SH20Je3INtL2lA==
grmgr: 2020/08/13 08:21:37.639683 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:21:37.639693 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/13 08:21:37.639698 saveNode  waiting on ASaveRDFNodettachNode to finish
grmgr: 2020/08/13 08:21:37.639716 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/13 08:21:37.639721 StartCh received for saveNode. rCnt = 3 
grmgr: 2020/08/13 08:21:37.639726 StartCh received for saveNode. rCnt = 4 
SaveRDFNode: xxx 2020/08/13 08:21:37.639734 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639746 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639752 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639757 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639765 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639788 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.639801 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:21:37.639806 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:21:37.639812 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000384ba0)}
SaveRDFNode: 2020/08/13 08:21:37.639817 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:21:37.639825 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.639829 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.639835 UID received  : 5B5fMLeZSJKDt4Ge5pKmKQ==
SaveRDFNode: xxx 2020/08/13 08:21:37.640114 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640125 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640131 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640137 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640142 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640148 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640153 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:21:37.640158 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:21:37.640163 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000384fc0)}
SaveRDFNode: 2020/08/13 08:21:37.640168 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:21:37.640179 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.640184 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.640189 UID received  : vvuEhvzDQvq+dEbNW8j9KA==
SaveRDFNode: xxx 2020/08/13 08:21:37.640338 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640348 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640354 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640362 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640368 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640373 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:21:37.640380 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:21:37.640389 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:21:37.640396 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0003853e0)}
SaveRDFNode: 2020/08/13 08:21:37.640400 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:21:37.640408 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.640412 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.640426 UID received  : Hh8H6rX0TA+P2uPZmdjUMA==
DB: 2020/08/13 08:21:37.650970 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 11.440891ms
DB: 2020/08/13 08:21:37.656016 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 15.557915ms
DB: 2020/08/13 08:21:37.660864 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.81086ms
DB: 2020/08/13 08:21:37.665744 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.845252ms
DB: 2020/08/13 08:21:37.670193 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 29.97806ms
DB: 2020/08/13 08:21:37.670500 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 30.635753ms
DB: 2020/08/13 08:21:37.670750 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.960396ms
DB: 2020/08/13 08:21:37.673129 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 22.117557ms
DB: 2020/08/13 08:21:37.675186 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.959908ms
DB: 2020/08/13 08:21:37.675601 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.802109ms
SaveRDFNode: 2020/08/13 08:21:37.675615 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003853e0)}
rdfUIDdb: 2020/08/13 08:21:37.675622 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.675626 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.675632 Received UID: X18=
SaveRDFNode: 2020/08/13 08:21:37.675645 a: = db.Item{PKey:[]uint8{0x1e, 0x1f, 0x7, 0xea, 0xb5, 0xf4, 0x4c, 0xf, 0x8f, 0xda, 0xe3, 0xd9, 0x99, 0xd8, 0xd4, 0x30}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:21:37.677175 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.645272ms
DB: 2020/08/13 08:21:37.678158 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.837017ms
DB: 2020/08/13 08:21:37.679962 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.742548ms
DB: 2020/08/13 08:21:37.680440 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.765652ms
SaveRDFNode: 2020/08/13 08:21:37.680452 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003853e0)}
rdfUIDdb: 2020/08/13 08:21:37.680458 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.680462 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.680468 Received UID: X18=
SaveRDFNode: 2020/08/13 08:21:37.680478 a: = db.Item{PKey:[]uint8{0x1e, 0x1f, 0x7, 0xea, 0xb5, 0xf4, 0x4c, 0xf, 0x8f, 0xda, 0xe3, 0xd9, 0x99, 0xd8, 0xd4, 0x30}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:21:37.682206 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.987357ms
DB: 2020/08/13 08:21:37.683132 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.914954ms
DB: 2020/08/13 08:21:37.684865 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.874905ms
DB: 2020/08/13 08:21:37.685273 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.765769ms
SaveRDFNode: 2020/08/13 08:21:37.685292 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:21:37.685301 EndCh received for saveNode. rCnt = 3 
DB: 2020/08/13 08:21:37.687148 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.881514ms
DB: 2020/08/13 08:21:37.688992 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.773029ms
SaveRDFNode: 2020/08/13 08:21:37.689160 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384660)}
rdfUIDdb: 2020/08/13 08:21:37.689172 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.689176 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.689182 Received UID: X18=
SaveRDFNode: 2020/08/13 08:21:37.689196 a: = db.Item{PKey:[]uint8{0xd0, 0x8b, 0xf8, 0xc2, 0x78, 0xbf, 0x48, 0x7d, 0xb4, 0x25, 0xed, 0xc8, 0x36, 0xd2, 0xf6, 0x94}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:21:37.690348 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.453779ms
SaveRDFNode: 2020/08/13 08:21:37.690361 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384fc0)}
rdfUIDdb: 2020/08/13 08:21:37.690366 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.690370 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.690375 Received UID: X18=
SaveRDFNode: 2020/08/13 08:21:37.690385 a: = db.Item{PKey:[]uint8{0xbe, 0xfb, 0x84, 0x86, 0xfc, 0xc3, 0x42, 0xfa, 0xbe, 0x74, 0x46, 0xcd, 0x5b, 0xc8, 0xfd, 0x28}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:21:37.691943 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.735985ms
SaveRDFNode: 2020/08/13 08:21:37.691955 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384ba0)}
rdfUIDdb: 2020/08/13 08:21:37.691975 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.691980 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.691985 Received UID: X18=
SaveRDFNode: 2020/08/13 08:21:37.691997 a: = db.Item{PKey:[]uint8{0xe4, 0x1e, 0x5f, 0x30, 0xb7, 0x99, 0x48, 0x92, 0x83, 0xb7, 0x81, 0x9e, 0xe6, 0x92, 0xa6, 0x29}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:21:37.694411 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.173291ms
SaveRDFNode: 2020/08/13 08:21:37.694425 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384660)}
rdfUIDdb: 2020/08/13 08:21:37.694430 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.694434 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.694439 Received UID: X18=
SaveRDFNode: 2020/08/13 08:21:37.694449 a: = db.Item{PKey:[]uint8{0xd0, 0x8b, 0xf8, 0xc2, 0x78, 0xbf, 0x48, 0x7d, 0xb4, 0x25, 0xed, 0xc8, 0x36, 0xd2, 0xf6, 0x94}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:21:37.695880 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.456574ms
SaveRDFNode: 2020/08/13 08:21:37.695904 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384fc0)}
rdfUIDdb: 2020/08/13 08:21:37.695909 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.695913 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.695919 Received UID: X18=
SaveRDFNode: 2020/08/13 08:21:37.695928 a: = db.Item{PKey:[]uint8{0xbe, 0xfb, 0x84, 0x86, 0xfc, 0xc3, 0x42, 0xfa, 0xbe, 0x74, 0x46, 0xcd, 0x5b, 0xc8, 0xfd, 0x28}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:21:37.696869 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.832227ms
SaveRDFNode: 2020/08/13 08:21:37.696881 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384ba0)}
rdfUIDdb: 2020/08/13 08:21:37.696903 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:21:37.696907 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:21:37.696912 Received UID: X18=
SaveRDFNode: 2020/08/13 08:21:37.696924 a: = db.Item{PKey:[]uint8{0xe4, 0x1e, 0x5f, 0x30, 0xb7, 0x99, 0x48, 0x92, 0x83, 0xb7, 0x81, 0x9e, 0xe6, 0x92, 0xa6, 0x29}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:21:37.699454 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.970521ms
SaveRDFNode: 2020/08/13 08:21:37.699465 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:21:37.699473 EndCh received for saveNode. rCnt = 2 
DB: 2020/08/13 08:21:37.700837 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.844215ms
SaveRDFNode: 2020/08/13 08:21:37.700846 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:21:37.700852 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/13 08:21:37.701932 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.911542ms
SaveRDFNode: 2020/08/13 08:21:37.701942 Returned.+++++++++++ No error
rdfLoader: 2020/08/13 08:21:37.701949 saveNode finished waiting...exiting
AttachNode: 2020/08/13 08:21:37.701956 goroutine about to start 1 
grmgr: 2020/08/13 08:21:37.702491 EndCh received for saveNode. rCnt = 0 
DB: 2020/08/13 08:21:37.706020 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.709843 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.713205 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.716396 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.721614 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.133782ms
DB: 2020/08/13 08:21:37.730485 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.791063ms
FetchForUpdate: 2020/08/13 08:21:37.730500 ** Cache FetchForUpdate Cache Key Value: [Hh8H6rX0TA+P2uPZmdjUMA==]   sortk: A#G#:S
FetchNode: 2020/08/13 08:21:37.730506  node: Hh8H6rX0TA+P2uPZmdjUMA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:21:37.730681 ** Cache FetchForUpdate Cache Key Value: [vvuEhvzDQvq+dEbNW8j9KA==]   sortk: A#
FetchNode: 2020/08/13 08:21:37.730696  node: vvuEhvzDQvq+dEbNW8j9KA== subKey: A#
DB: 2020/08/13 08:21:37.734882 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.330644ms
FetchForUpdate: 2020/08/13 08:21:37.734942 len(nb): 1
fetchItems: 2020/08/13 08:21:37.734951 +++  Cache FetchItems for sortk A#G#:S UID: [Hh8H6rX0TA+P2uPZmdjUMA==] 
FetchNode: 2020/08/13 08:21:37.734956  node: Hh8H6rX0TA+P2uPZmdjUMA== subKey: A#G#:S
DB: 2020/08/13 08:21:37.738867 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.885031ms
DB: 2020/08/13 08:21:37.745183 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 14.403273ms
FetchForUpdate: 2020/08/13 08:21:37.745429 len(nb): 7
fetchItems: 2020/08/13 08:21:37.745439 +++  Cache FetchItems for sortk A# UID: [vvuEhvzDQvq+dEbNW8j9KA==] 
FetchNode: 2020/08/13 08:21:37.745443  node: vvuEhvzDQvq+dEbNW8j9KA== subKey: A#
DB: 2020/08/13 08:21:37.746379 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.901991ms
Unlock: 2020/08/13 08:21:37.746396 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:21:37.750845 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.362182ms
Unlock: 2020/08/13 08:21:37.754342 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/13 08:21:37.755111 ** Cache FetchForUpdate Cache Key Value: [Hh8H6rX0TA+P2uPZmdjUMA==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:37.755123 +++  Cache FetchItems for sortk A#G#:S UID: [Hh8H6rX0TA+P2uPZmdjUMA==] 
FetchNode: 2020/08/13 08:21:37.755127  node: Hh8H6rX0TA+P2uPZmdjUMA== subKey: A#G#:S
DB: 2020/08/13 08:21:37.762422 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 7.262732ms
DB: 2020/08/13 08:21:37.769588 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.818546ms
DB: 2020/08/13 08:21:37.774727 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.96179ms
DB: 2020/08/13 08:21:37.780037 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.927608ms
DB: 2020/08/13 08:21:37.787208 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.871207ms
DB: 2020/08/13 08:21:37.793410 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.892001ms
DB: 2020/08/13 08:21:37.799486 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.687849ms
DB: 2020/08/13 08:21:37.806950 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.843816ms
DB: 2020/08/13 08:21:37.812239 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.003963ms
DB: 2020/08/13 08:21:37.817765 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.193192ms
Unlock: 2020/08/13 08:21:37.817776 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 08:21:37.823173 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.003198ms
FetchForUpdate: 2020/08/13 08:21:37.823188 ** Cache FetchForUpdate Cache Key Value: [Hh8H6rX0TA+P2uPZmdjUMA==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:37.823195 +++  Cache FetchItems for sortk A#G#:S UID: [Hh8H6rX0TA+P2uPZmdjUMA==] 
FetchNode: 2020/08/13 08:21:37.823200  node: Hh8H6rX0TA+P2uPZmdjUMA== subKey: A#G#:S
DB: 2020/08/13 08:21:37.826516 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.281498ms
AttachNode: gr1 2020/08/13 08:21:37.826635 Errored: SetUpredAvailable :for  Hh8H6rX0TA+P2uPZmdjUMA==
Cache: 2020/08/13 08:21:37.826644 In SetUpredAvailable: pUid, tUID:  Hh8H6rX0TA+P2uPZmdjUMA== Hh8H6rX0TA+P2uPZmdjUMA== A#G#:S
Cache: 2020/08/13 08:21:37.826648 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:21:37.831563 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.88219ms
Unlock: 2020/08/13 08:21:37.831575 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:21:37.839922 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.009712ms
AttachNode: 2020/08/13 08:21:37.839938 goroutine about to start 2 
DB: 2020/08/13 08:21:37.844011 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.847461 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.850934 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.854981 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.860357 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.321161ms
DB: 2020/08/13 08:21:37.865494 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.948243ms
FetchForUpdate: 2020/08/13 08:21:37.865531 ** Cache FetchForUpdate Cache Key Value: [5B5fMLeZSJKDt4Ge5pKmKQ==]   sortk: A#G#:S
FetchNode: 2020/08/13 08:21:37.865537  node: 5B5fMLeZSJKDt4Ge5pKmKQ== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:21:37.865713 ** Cache FetchForUpdate Cache Key Value: [vvuEhvzDQvq+dEbNW8j9KA==]   sortk: A#
fetchItems: 2020/08/13 08:21:37.865723 +++  Cache FetchItems for sortk A# UID: [vvuEhvzDQvq+dEbNW8j9KA==] 
FetchNode: 2020/08/13 08:21:37.865770  node: vvuEhvzDQvq+dEbNW8j9KA== subKey: A#
DB: 2020/08/13 08:21:37.869804 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.982666ms
Unlock: 2020/08/13 08:21:37.870357 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 08:21:37.870806 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.237613ms
FetchForUpdate: 2020/08/13 08:21:37.870867 len(nb): 1
fetchItems: 2020/08/13 08:21:37.870875 +++  Cache FetchItems for sortk A#G#:S UID: [5B5fMLeZSJKDt4Ge5pKmKQ==] 
FetchNode: 2020/08/13 08:21:37.870881  node: 5B5fMLeZSJKDt4Ge5pKmKQ== subKey: A#G#:S
DB: 2020/08/13 08:21:37.875129 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.217501ms
DB: 2020/08/13 08:21:37.880433 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.075626ms
Unlock: 2020/08/13 08:21:37.880447 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 08:21:37.880653 ** Cache FetchForUpdate Cache Key Value: [5B5fMLeZSJKDt4Ge5pKmKQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:37.880663 +++  Cache FetchItems for sortk A#G#:S UID: [5B5fMLeZSJKDt4Ge5pKmKQ==] 
FetchNode: 2020/08/13 08:21:37.880668  node: 5B5fMLeZSJKDt4Ge5pKmKQ== subKey: A#G#:S
DB: 2020/08/13 08:21:37.883923 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.220979ms
DB: 2020/08/13 08:21:37.890943 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.611418ms
DB: 2020/08/13 08:21:37.896122 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.970632ms
DB: 2020/08/13 08:21:37.901468 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.976346ms
DB: 2020/08/13 08:21:37.908470 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.677488ms
DB: 2020/08/13 08:21:37.913742 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.991701ms
DB: 2020/08/13 08:21:37.919349 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.299038ms
DB: 2020/08/13 08:21:37.926156 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.492042ms
DB: 2020/08/13 08:21:37.931671 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.152221ms
DB: 2020/08/13 08:21:37.937203 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.200368ms
Unlock: 2020/08/13 08:21:37.937218 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 08:21:37.942601 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.029308ms
FetchForUpdate: 2020/08/13 08:21:37.942617 ** Cache FetchForUpdate Cache Key Value: [5B5fMLeZSJKDt4Ge5pKmKQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:37.942624 +++  Cache FetchItems for sortk A#G#:S UID: [5B5fMLeZSJKDt4Ge5pKmKQ==] 
FetchNode: 2020/08/13 08:21:37.942629  node: 5B5fMLeZSJKDt4Ge5pKmKQ== subKey: A#G#:S
DB: 2020/08/13 08:21:37.946010 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.348951ms
AttachNode: gr1 2020/08/13 08:21:37.946125 Errored: SetUpredAvailable :for  5B5fMLeZSJKDt4Ge5pKmKQ==
Cache: 2020/08/13 08:21:37.946134 In SetUpredAvailable: pUid, tUID:  5B5fMLeZSJKDt4Ge5pKmKQ== 5B5fMLeZSJKDt4Ge5pKmKQ== A#G#:S
Cache: 2020/08/13 08:21:37.946138 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:21:37.951309 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.139695ms
Unlock: 2020/08/13 08:21:37.951318 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:21:37.956885 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.23486ms
AttachNode: 2020/08/13 08:21:37.956901 goroutine about to start 3 
DB: 2020/08/13 08:21:37.961053 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.964554 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.967972 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.972140 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:37.977841 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.619103ms
DB: 2020/08/13 08:21:37.986865 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.728974ms
FetchForUpdate: 2020/08/13 08:21:37.986880 ** Cache FetchForUpdate Cache Key Value: [vvuEhvzDQvq+dEbNW8j9KA==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:37.986887 +++  Cache FetchItems for sortk A#G#:S UID: [vvuEhvzDQvq+dEbNW8j9KA==] 
FetchNode: 2020/08/13 08:21:37.986891  node: vvuEhvzDQvq+dEbNW8j9KA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:21:37.987104 ** Cache FetchForUpdate Cache Key Value: [Hh8H6rX0TA+P2uPZmdjUMA==]   sortk: A#
fetchItems: 2020/08/13 08:21:37.987142 +++  Cache FetchItems for sortk A# UID: [Hh8H6rX0TA+P2uPZmdjUMA==] 
FetchNode: 2020/08/13 08:21:37.987166  node: Hh8H6rX0TA+P2uPZmdjUMA== subKey: A#
DB: 2020/08/13 08:21:37.990871 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.644356ms
Unlock: 2020/08/13 08:21:37.991549 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 08:21:37.992087 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.163025ms
DB: 2020/08/13 08:21:37.997320 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.033677ms
Unlock: 2020/08/13 08:21:37.997334 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 08:21:37.997660 ** Cache FetchForUpdate Cache Key Value: [vvuEhvzDQvq+dEbNW8j9KA==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:37.997671 +++  Cache FetchItems for sortk A#G#:S UID: [vvuEhvzDQvq+dEbNW8j9KA==] 
FetchNode: 2020/08/13 08:21:37.997676  node: vvuEhvzDQvq+dEbNW8j9KA== subKey: A#G#:S
DB: 2020/08/13 08:21:38.001442 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.729862ms
DB: 2020/08/13 08:21:38.008635 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.793715ms
DB: 2020/08/13 08:21:38.013731 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.891704ms
DB: 2020/08/13 08:21:38.019403 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.283972ms
DB: 2020/08/13 08:21:38.026383 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.667761ms
DB: 2020/08/13 08:21:38.031534 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.84758ms
DB: 2020/08/13 08:21:38.037182 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.304712ms
DB: 2020/08/13 08:21:38.044254 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.661805ms
DB: 2020/08/13 08:21:38.051855 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.330862ms
DB: 2020/08/13 08:21:38.057483 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.021154ms
Unlock: 2020/08/13 08:21:38.057500 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 08:21:38.063276 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.697779ms
FetchForUpdate: 2020/08/13 08:21:38.063290 ** Cache FetchForUpdate Cache Key Value: [vvuEhvzDQvq+dEbNW8j9KA==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:38.063298 +++  Cache FetchItems for sortk A#G#:S UID: [vvuEhvzDQvq+dEbNW8j9KA==] 
FetchNode: 2020/08/13 08:21:38.063303  node: vvuEhvzDQvq+dEbNW8j9KA== subKey: A#G#:S
DB: 2020/08/13 08:21:38.067057 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.716247ms
AttachNode: gr1 2020/08/13 08:21:38.067151 Errored: SetUpredAvailable :for  vvuEhvzDQvq+dEbNW8j9KA==
Cache: 2020/08/13 08:21:38.067158 In SetUpredAvailable: pUid, tUID:  vvuEhvzDQvq+dEbNW8j9KA== vvuEhvzDQvq+dEbNW8j9KA== A#G#:S
Cache: 2020/08/13 08:21:38.067163 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:21:38.072399 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.202157ms
Unlock: 2020/08/13 08:21:38.072413 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:21:38.077994 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.122482ms
AttachNode: 2020/08/13 08:21:38.078008 goroutine about to start 4 
DB: 2020/08/13 08:21:38.082059 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.085220 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.088924 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.092145 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.097420 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.189958ms
DB: 2020/08/13 08:21:38.102274 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.746255ms
FetchForUpdate: 2020/08/13 08:21:38.102288 ** Cache FetchForUpdate Cache Key Value: [5B5fMLeZSJKDt4Ge5pKmKQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:38.102294 +++  Cache FetchItems for sortk A#G#:S UID: [5B5fMLeZSJKDt4Ge5pKmKQ==] 
FetchNode: 2020/08/13 08:21:38.102299  node: 5B5fMLeZSJKDt4Ge5pKmKQ== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:21:38.102465 ** Cache FetchForUpdate Cache Key Value: [Hh8H6rX0TA+P2uPZmdjUMA==]   sortk: A#
fetchItems: 2020/08/13 08:21:38.102474 +++  Cache FetchItems for sortk A# UID: [Hh8H6rX0TA+P2uPZmdjUMA==] 
FetchNode: 2020/08/13 08:21:38.102485  node: Hh8H6rX0TA+P2uPZmdjUMA== subKey: A#
DB: 2020/08/13 08:21:38.105603 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.273019ms
DB: 2020/08/13 08:21:38.106772 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.199501ms
Unlock: 2020/08/13 08:21:38.109041 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 08:21:38.111353 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.153395ms
DB: 2020/08/13 08:21:38.116261 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.875972ms
DB: 2020/08/13 08:21:38.116286 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.875972ms
DB: 2020/08/13 08:21:38.121365 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.048939ms
DB: 2020/08/13 08:21:38.121384 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.048939ms
DB: 2020/08/13 08:21:38.126974 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.51261ms
DB: 2020/08/13 08:21:38.132261 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.22186ms
Unlock: 2020/08/13 08:21:38.132272 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:21:38.139909 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.75599ms
DB: 2020/08/13 08:21:38.147004 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.127575ms
DB: 2020/08/13 08:21:38.152351 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.242872ms
DB: 2020/08/13 08:21:38.158925 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.501007ms
DB: 2020/08/13 08:21:38.164709 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.548471ms
DB: 2020/08/13 08:21:38.170214 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.165236ms
DB: 2020/08/13 08:21:38.177103 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.581886ms
DB: 2020/08/13 08:21:38.182388 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.997241ms
DB: 2020/08/13 08:21:38.187821 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.135594ms
DB: 2020/08/13 08:21:38.193068 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.0619ms
FetchForUpdate: 2020/08/13 08:21:38.193082 ** Cache FetchForUpdate Cache Key Value: [5B5fMLeZSJKDt4Ge5pKmKQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:38.193090 +++  Cache FetchItems for sortk A#G#:S UID: [5B5fMLeZSJKDt4Ge5pKmKQ==] 
FetchNode: 2020/08/13 08:21:38.193095  node: 5B5fMLeZSJKDt4Ge5pKmKQ== subKey: A#G#:S
DB: 2020/08/13 08:21:38.197516 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.376882ms
AttachNode: gr1 2020/08/13 08:21:38.197617 Errored: SetUpredAvailable :for  5B5fMLeZSJKDt4Ge5pKmKQ==
Cache: 2020/08/13 08:21:38.197626 In SetUpredAvailable: pUid, tUID:  5B5fMLeZSJKDt4Ge5pKmKQ== 7blRe5cET1iKyWRfSNOBwA== A#G#:S
Cache: 2020/08/13 08:21:38.197630 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:21:38.202733 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.073137ms
Unlock: 2020/08/13 08:21:38.202746 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:21:38.208234 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.127874ms
AttachNode: 2020/08/13 08:21:38.208255 goroutine about to start 5 
DB: 2020/08/13 08:21:38.211530 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.215367 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.218771 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.222210 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.227837 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.537579ms
DB: 2020/08/13 08:21:38.234339 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.311115ms
FetchForUpdate: 2020/08/13 08:21:38.234355 ** Cache FetchForUpdate Cache Key Value: [vvuEhvzDQvq+dEbNW8j9KA==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:38.234361 +++  Cache FetchItems for sortk A#G#:S UID: [vvuEhvzDQvq+dEbNW8j9KA==] 
FetchNode: 2020/08/13 08:21:38.234366  node: vvuEhvzDQvq+dEbNW8j9KA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:21:38.234571 ** Cache FetchForUpdate Cache Key Value: [5B5fMLeZSJKDt4Ge5pKmKQ==]   sortk: A#
fetchItems: 2020/08/13 08:21:38.234580 +++  Cache FetchItems for sortk A# UID: [5B5fMLeZSJKDt4Ge5pKmKQ==] 
FetchNode: 2020/08/13 08:21:38.234610  node: 5B5fMLeZSJKDt4Ge5pKmKQ== subKey: A#
DB: 2020/08/13 08:21:38.238198 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.801485ms
DB: 2020/08/13 08:21:38.239316 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.635593ms
Unlock: 2020/08/13 08:21:38.241792 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 08:21:38.243881 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.144312ms
DB: 2020/08/13 08:21:38.249059 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.142366ms
DB: 2020/08/13 08:21:38.249074 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.142366ms
DB: 2020/08/13 08:21:38.254718 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.612607ms
DB: 2020/08/13 08:21:38.254744 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.612607ms
DB: 2020/08/13 08:21:38.260675 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.838961ms
DB: 2020/08/13 08:21:38.267007 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.240246ms
Unlock: 2020/08/13 08:21:38.267024 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:21:38.273712 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.589807ms
DB: 2020/08/13 08:21:38.279805 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.040818ms
DB: 2020/08/13 08:21:38.285077 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.167681ms
DB: 2020/08/13 08:21:38.291813 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.673636ms
DB: 2020/08/13 08:21:38.296960 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.088265ms
DB: 2020/08/13 08:21:38.302834 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.581675ms
DB: 2020/08/13 08:21:38.310216 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.091123ms
DB: 2020/08/13 08:21:38.315638 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.08897ms
DB: 2020/08/13 08:21:38.321571 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.602334ms
DB: 2020/08/13 08:21:38.327242 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.44429ms
FetchForUpdate: 2020/08/13 08:21:38.327254 ** Cache FetchForUpdate Cache Key Value: [vvuEhvzDQvq+dEbNW8j9KA==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:38.327261 +++  Cache FetchItems for sortk A#G#:S UID: [vvuEhvzDQvq+dEbNW8j9KA==] 
FetchNode: 2020/08/13 08:21:38.327277  node: vvuEhvzDQvq+dEbNW8j9KA== subKey: A#G#:S
DB: 2020/08/13 08:21:38.331691 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.376772ms
AttachNode: gr1 2020/08/13 08:21:38.331802 Errored: SetUpredAvailable :for  vvuEhvzDQvq+dEbNW8j9KA==
Cache: 2020/08/13 08:21:38.331812 In SetUpredAvailable: pUid, tUID:  vvuEhvzDQvq+dEbNW8j9KA== 7ltfdvlwSO2/bF02gXYNqw== A#G#:S
Cache: 2020/08/13 08:21:38.331817 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:21:38.337033 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.184217ms
Unlock: 2020/08/13 08:21:38.337045 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:21:38.342643 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.143816ms
AttachNode: 2020/08/13 08:21:38.342655 goroutine about to start 6 
DB: 2020/08/13 08:21:38.346089 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.349637 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.353763 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.357106 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:21:38.362215 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.048702ms
DB: 2020/08/13 08:21:38.367081 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.798549ms
FetchForUpdate: 2020/08/13 08:21:38.367098 ** Cache FetchForUpdate Cache Key Value: [Hh8H6rX0TA+P2uPZmdjUMA==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:38.367105 +++  Cache FetchItems for sortk A#G#:S UID: [Hh8H6rX0TA+P2uPZmdjUMA==] 
FetchNode: 2020/08/13 08:21:38.367110  node: Hh8H6rX0TA+P2uPZmdjUMA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:21:38.367277 ** Cache FetchForUpdate Cache Key Value: [5B5fMLeZSJKDt4Ge5pKmKQ==]   sortk: A#
fetchItems: 2020/08/13 08:21:38.367287 +++  Cache FetchItems for sortk A# UID: [5B5fMLeZSJKDt4Ge5pKmKQ==] 
FetchNode: 2020/08/13 08:21:38.367299  node: 5B5fMLeZSJKDt4Ge5pKmKQ== subKey: A#
DB: 2020/08/13 08:21:38.370632 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.489065ms
DB: 2020/08/13 08:21:38.371549 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.188903ms
Unlock: 2020/08/13 08:21:38.372229 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 08:21:38.376157 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.177292ms
DB: 2020/08/13 08:21:38.381118 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.929167ms
DB: 2020/08/13 08:21:38.381132 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.929167ms
DB: 2020/08/13 08:21:38.386417 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.255189ms
DB: 2020/08/13 08:21:38.386434 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.255189ms
DB: 2020/08/13 08:21:38.392579 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.952375ms
DB: 2020/08/13 08:21:38.397807 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.15817ms
Unlock: 2020/08/13 08:21:38.397819 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:21:38.404462 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.5001ms
DB: 2020/08/13 08:21:38.409330 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.814707ms
DB: 2020/08/13 08:21:38.414801 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.100315ms
DB: 2020/08/13 08:21:38.421821 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.734395ms
DB: 2020/08/13 08:21:38.427145 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.991172ms
DB: 2020/08/13 08:21:38.432948 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.451035ms
DB: 2020/08/13 08:21:38.439315 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.034063ms
DB: 2020/08/13 08:21:38.444636 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.85309ms
DB: 2020/08/13 08:21:38.450500 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.262777ms
DB: 2020/08/13 08:21:38.455933 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.147504ms
FetchForUpdate: 2020/08/13 08:21:38.455953 ** Cache FetchForUpdate Cache Key Value: [Hh8H6rX0TA+P2uPZmdjUMA==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:21:38.455961 +++  Cache FetchItems for sortk A#G#:S UID: [Hh8H6rX0TA+P2uPZmdjUMA==] 
FetchNode: 2020/08/13 08:21:38.455966  node: Hh8H6rX0TA+P2uPZmdjUMA== subKey: A#G#:S
DB: 2020/08/13 08:21:38.459570 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.56923ms
AttachNode: gr1 2020/08/13 08:21:38.459766 Errored: SetUpredAvailable :for  Hh8H6rX0TA+P2uPZmdjUMA==
Cache: 2020/08/13 08:21:38.459777 In SetUpredAvailable: pUid, tUID:  Hh8H6rX0TA+P2uPZmdjUMA== oceKn666TISTwNdlbqgvmw== A#G#:S
Cache: 2020/08/13 08:21:38.459782 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:21:38.465263 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.428491ms
Unlock: 2020/08/13 08:21:38.465273 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:21:38.470892 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.0915ms
rdfLoader: 2020/08/13 08:21:38.470905 saveNode  waiting on AttachNode to finish
rdfLoader: 2020/08/13 08:21:38.470909 saveNode finished waiting...exiting
grmgr: 2020/08/13 08:21:38.470919 Powering down...
rdfuuid: 2020/08/13 08:21:38.470925 Powering down...
DB:2020/08/13 08:37:54 log.go:18: ===============================================================================
grmgr: 2020/08/13 08:37:54.994774 Powering on...
rdfLoader: 2020/08/13 08:37:54.994803 verify started....xx.
rdfLoader: 2020/08/13 08:37:54.994819 saveNode started......
rdfLoader: 2020/08/13 08:37:54.994823 define saveNode limiter......
rdfuuid: 2020/08/13 08:37:54.994832 Powering on...
rdfLoader: 2020/08/13 08:37:54.994838 *************** All started 
rdfLoader: 2020/08/13 08:37:55.002371 .  getType..
rdfLoader: 2020/08/13 08:37:55.002387 node.TyName : [Person]
DB: 2020/08/13 08:37:55.079440 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 76.993761ms
verify: 2020/08/13 08:37:55.079607 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:8, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:11, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 08:37:55.079627  Send Ask request to limiter.
verify: 2020/08/13 08:37:55.079632 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:37:55.079640 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:37:55.079646 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:37:55.079653 .  getType..
rdfLoader: 2020/08/13 08:37:55.079658 node.TyName : [Person]
verify: 2020/08/13 08:37:55.079680 Pass to unmarshal... 1 &ds.Node{ID:"b", TyName:"Person", Lines:[]ds.Line{ds.Line{N:14, Subj:"b", Pred:"Name", Obj:"Paul Payne"}, ds.Line{N:15, Subj:"b", Pred:"DOB", Obj:"2 June 1960"}, ds.Line{N:16, Subj:"b", Pred:"Age", Obj:"58"}, ds.Line{N:17, Subj:"b", Pred:"Siblings", Obj:"abc"}, ds.Line{N:18, Subj:"b", Pred:"Siblings", Obj:"c"}, ds.Line{N:19, Subj:"b", Pred:"Cars", Obj:"Holden Commodore"}, ds.Line{N:20, Subj:"b", Pred:"Cars", Obj:"Honda"}, ds.Line{N:21, Subj:"b", Pred:"Cars", Obj:"VW Golf"}}, Err:[]error(nil)}
verify: 2020/08/13 08:37:55.079685  Send Ask request to limiter.
verify: 2020/08/13 08:37:55.079689 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:37:55.079695 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:37:55.079700 ACK from gcmgr....received...
verify: 2020/08/13 08:37:55.079707 *** Verify back to waiting on veryifyCh
rdfLoader: 2020/08/13 08:37:55.079755 .  getType..
rdfLoader: 2020/08/13 08:37:55.079760 node.TyName : [Person]
verify: 2020/08/13 08:37:55.079780 Pass to unmarshal... 0 &ds.Node{ID:"c", TyName:"Person", Lines:[]ds.Line{ds.Line{N:1, Subj:"c", Pred:"Name", Obj:"Ian Payne"}, ds.Line{N:2, Subj:"c", Pred:"DOB", Obj:"29 Jan 1953"}, ds.Line{N:3, Subj:"c", Pred:"Age", Obj:"67"}, ds.Line{N:4, Subj:"c", Pred:"Siblings", Obj:"abc"}, ds.Line{N:5, Subj:"c", Pred:"Siblings", Obj:"b"}, ds.Line{N:6, Subj:"c", Pred:"Cars", Obj:"VW Passat"}, ds.Line{N:7, Subj:"c", Pred:"Cars", Obj:"Mitsubishi"}, ds.Line{N:8, Subj:"c", Pred:"Cars", Obj:"Ford Laser"}, ds.Line{N:9, Subj:"c", Pred:"Cars", Obj:"Honda"}}, Err:[]error(nil)}
verify: 2020/08/13 08:37:55.079785  Send Ask request to limiter.
verify: 2020/08/13 08:37:55.079790 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:37:55.079795 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:37:55.079800 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:37:55.079806 .  getType..
rdfLoader: 2020/08/13 08:37:55.079811 node.TyName : [Person]
verify: 2020/08/13 08:37:55.079825 Pass to unmarshal... 1 &ds.Node{ID:"d", TyName:"Person", Lines:[]ds.Line{ds.Line{N:12, Subj:"d", Pred:"Name", Obj:"Phil Smith"}, ds.Line{N:13, Subj:"d", Pred:"DOB", Obj:"17 June 1976"}, ds.Line{N:14, Subj:"d", Pred:"Age", Obj:"36"}, ds.Line{N:15, Subj:"d", Pred:"Cars", Obj:"Roll Roycet"}, ds.Line{N:16, Subj:"d", Pred:"Cars", Obj:"Bentley"}}, Err:[]error(nil)}
verify: 2020/08/13 08:37:55.079830  Send Ask request to limiter.
verify: 2020/08/13 08:37:55.079834 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:37:55.079839 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:37:55.079844 ACK from gcmgr....received...
verify: 2020/08/13 08:37:55.079850 *** Verify back to waiting on veryifyCh
verify: 2020/08/13 08:37:55.079854 verify at wg.Wait() .....
unmarshalRDF2020/08/13 08:37:55.079867 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:37:55.079874 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/13 08:37:55.079879 StartCh received for unmarshall. rCnt = 2 
rdfLoader: 2020/08/13 08:37:55.079885 Find Ty Address
rdfLoader: 2020/08/13 08:37:55.079890 Find Ty Age
rdfLoader: 2020/08/13 08:37:55.079896 Find Ty Cars
rdfLoader: 2020/08/13 08:37:55.079902 Add to SS . [Bentley]
rdfLoader: 2020/08/13 08:37:55.079907 Find Ty DOB
rdfLoader: 2020/08/13 08:37:55.079912 Find Ty Friends
rdfLoader: 2020/08/13 08:37:55.079917 Find Ty Jobs
rdfLoader: 2020/08/13 08:37:55.079921 Find Ty Name
rdfLoader: 2020/08/13 08:37:55.079930 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:37:55.079934 Find Ty Siblings
rdfLoader: 2020/08/13 08:37:55.079954 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:37:55.079982 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:37:55.079988 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:37:55.079995 EndCh received for unmarshall. rCnt = 1 
unmarshalRDF2020/08/13 08:37:55.080006 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:37:55.080011 StartCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/13 08:37:55.080016 StartCh received for unmarshall. rCnt = 3 
rdfLoader: 2020/08/13 08:37:55.080022 Find Ty Address
rdfLoader: 2020/08/13 08:37:55.080026 Find Ty Age
rdfLoader: 2020/08/13 08:37:55.080032 Find Ty Cars
rdfLoader: 2020/08/13 08:37:55.080037 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:37:55.080042 Add to SS . [Alfa]
rdfLoader: 2020/08/13 08:37:55.080046 Find Ty DOB
rdfLoader: 2020/08/13 08:37:55.080051 Find Ty Friends
rdfLoader: 2020/08/13 08:37:55.080056 Find Ty Jobs
rdfLoader: 2020/08/13 08:37:55.080060 Find Ty Name
rdfLoader: 2020/08/13 08:37:55.080065 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:37:55.080069 Find Ty Siblings
rdfLoader: 2020/08/13 08:37:55.080083 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:37:55.080108 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:37:55.080113 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:37:55.080119 EndCh received for unmarshall. rCnt = 2 
unmarshalRDF2020/08/13 08:37:55.080128 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:37:55.080134 StartCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/13 08:37:55.080139 StartCh received for unmarshall. rCnt = 4 
rdfLoader: 2020/08/13 08:37:55.080144 Find Ty Address
rdfLoader: 2020/08/13 08:37:55.080149 Find Ty Age
rdfLoader: 2020/08/13 08:37:55.080154 Find Ty Cars
rdfLoader: 2020/08/13 08:37:55.080159 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:37:55.080164 Add to SS . [VW Golf]
rdfLoader: 2020/08/13 08:37:55.080169 Find Ty DOB
rdfLoader: 2020/08/13 08:37:55.080174 Find Ty Friends
rdfLoader: 2020/08/13 08:37:55.080179 Find Ty Jobs
rdfLoader: 2020/08/13 08:37:55.080183 Find Ty Name
rdfLoader: 2020/08/13 08:37:55.080187 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:37:55.080192 Find Ty Siblings
rdfLoader: 2020/08/13 08:37:55.080204 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:37:55.080230 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:37:55.080239 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:37:55.080246 EndCh received for unmarshall. rCnt = 3 
unmarshalRDF2020/08/13 08:37:55.080255 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:37:55.080261 StartCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:37:55.080267 StartCh received for unmarshall. rCnt = 5 
rdfLoader: 2020/08/13 08:37:55.080273 Find Ty Address
rdfLoader: 2020/08/13 08:37:55.080277 Find Ty Age
rdfLoader: 2020/08/13 08:37:55.080282 Find Ty Cars
rdfLoader: 2020/08/13 08:37:55.080287 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/13 08:37:55.080292 Add to SS . [Ford Laser]
rdfLoader: 2020/08/13 08:37:55.080297 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:37:55.080301 Find Ty DOB
rdfLoader: 2020/08/13 08:37:55.080306 Find Ty Friends
rdfLoader: 2020/08/13 08:37:55.080311 Find Ty Jobs
rdfLoader: 2020/08/13 08:37:55.080316 Find Ty Name
rdfLoader: 2020/08/13 08:37:55.080320 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:37:55.080325 Find Ty Siblings
rdfLoader: 2020/08/13 08:37:55.080337 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:37:55.080362 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:37:55.080367 Exit  unmarshalRDF. 
verify: 2020/08/13 08:37:55.080373 verify exited.....
saveNode: 2020/08/13 08:37:55.080379 read from saveCH channel 1 
grmgr: 2020/08/13 08:37:55.080385 EndCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:37:55.080391 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:37:55.080396 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:37:55.080402 read from saveCH channel 2 
grmgr: 2020/08/13 08:37:55.080422 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:37:55.080427 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:37:55.080432 read from saveCH channel 3 
grmgr: 2020/08/13 08:37:55.080447 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:37:55.080453 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:37:55.080457 read from saveCH channel 4 
grmgr: 2020/08/13 08:37:55.080473 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:37:55.080478 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/13 08:37:55.080483 saveNode  waiting on ASaveRDFNodettachNode to finish
grmgr: 2020/08/13 08:37:55.080499 StartCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 08:37:55.080504 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/13 08:37:55.080509 StartCh received for saveNode. rCnt = 3 
grmgr: 2020/08/13 08:37:55.080514 StartCh received for saveNode. rCnt = 4 
SaveRDFNode: xxx 2020/08/13 08:37:55.080522 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080528 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080536 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080546 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080552 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080558 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080565 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:37:55.080570 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:37:55.080580 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0003845a0)}
SaveRDFNode: 2020/08/13 08:37:55.080585 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:37:55.080595 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.080599 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.080606 UID received  : 2EJrdQ7nR7qpckAoBNl9Ww==
SaveRDFNode: xxx 2020/08/13 08:37:55.080810 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080822 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080829 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080835 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080841 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080847 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.080854 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:37:55.080858 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:37:55.080882 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000384ae0)}
SaveRDFNode: 2020/08/13 08:37:55.080889 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:37:55.080901 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.080906 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.080912 UID received  : TXeouPP2SUauXKf/Rgh6Ig==
SaveRDFNode: xxx 2020/08/13 08:37:55.081219 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081236 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081243 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081249 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081256 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081263 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081270 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:37:55.081275 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:37:55.081282 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000384f00)}
SaveRDFNode: 2020/08/13 08:37:55.081287 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:37:55.081295 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.081300 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.081306 UID received  : 6mGNOvFJQK28tZmyQ89U/A==
SaveRDFNode: xxx 2020/08/13 08:37:55.081458 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081469 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081477 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081484 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081490 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081497 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:37:55.081503 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:37:55.081508 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:37:55.081514 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000385320)}
SaveRDFNode: 2020/08/13 08:37:55.081519 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:37:55.081527 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.081531 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.081538 UID received  : YKUK4WqbSkaUeF//Prft8A==
DB: 2020/08/13 08:37:55.088784 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.146771ms
DB: 2020/08/13 08:37:55.092620 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 11.677451ms
DB: 2020/08/13 08:37:55.095971 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.317375ms
DB: 2020/08/13 08:37:55.099448 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.441125ms
DB: 2020/08/13 08:37:55.103260 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.551963ms
DB: 2020/08/13 08:37:55.103770 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 22.432173ms
DB: 2020/08/13 08:37:55.106466 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 24.881426ms
DB: 2020/08/13 08:37:55.106838 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.529827ms
SaveRDFNode: 2020/08/13 08:37:55.106852 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384ae0)}
rdfUIDdb: 2020/08/13 08:37:55.106859 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.106864 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.106870 Received UID: X18=
SaveRDFNode: 2020/08/13 08:37:55.106883 a: = db.Item{PKey:[]uint8{0x4d, 0x77, 0xa8, 0xb8, 0xf3, 0xf6, 0x49, 0x46, 0xae, 0x5c, 0xa7, 0xff, 0x46, 0x8, 0x7a, 0x22}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:37:55.107409 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.607584ms
DB: 2020/08/13 08:37:55.109295 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 20.439544ms
DB: 2020/08/13 08:37:55.110251 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.751914ms
DB: 2020/08/13 08:37:55.110528 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.616723ms
SaveRDFNode: 2020/08/13 08:37:55.110540 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384ae0)}
rdfUIDdb: 2020/08/13 08:37:55.110546 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.110555 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.110570 Received UID: X18=
SaveRDFNode: 2020/08/13 08:37:55.110581 a: = db.Item{PKey:[]uint8{0x4d, 0x77, 0xa8, 0xb8, 0xf3, 0xf6, 0x49, 0x46, 0xae, 0x5c, 0xa7, 0xff, 0x46, 0x8, 0x7a, 0x22}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:37:55.111369 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.931012ms
DB: 2020/08/13 08:37:55.112696 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.364707ms
DB: 2020/08/13 08:37:55.113559 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.256007ms
DB: 2020/08/13 08:37:55.114096 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.464942ms
SaveRDFNode: 2020/08/13 08:37:55.114109 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:37:55.114117 EndCh received for saveNode. rCnt = 3 
DB: 2020/08/13 08:37:55.114787 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.382179ms
DB: 2020/08/13 08:37:55.115916 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.188642ms
DB: 2020/08/13 08:37:55.116854 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.26239ms
DB: 2020/08/13 08:37:55.118281 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.456224ms
SaveRDFNode: 2020/08/13 08:37:55.118296 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384f00)}
rdfUIDdb: 2020/08/13 08:37:55.118303 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.118307 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.118313 Received UID: X18=
SaveRDFNode: 2020/08/13 08:37:55.118324 a: = db.Item{PKey:[]uint8{0xea, 0x61, 0x8d, 0x3a, 0xf1, 0x49, 0x40, 0xad, 0xbc, 0xb5, 0x99, 0xb2, 0x43, 0xcf, 0x54, 0xfc}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:37:55.119399 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.44741ms
SaveRDFNode: 2020/08/13 08:37:55.119411 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003845a0)}
rdfUIDdb: 2020/08/13 08:37:55.119417 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.119420 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.119426 Received UID: X18=
SaveRDFNode: 2020/08/13 08:37:55.119437 a: = db.Item{PKey:[]uint8{0xd8, 0x42, 0x6b, 0x75, 0xe, 0xe7, 0x47, 0xba, 0xa9, 0x72, 0x40, 0x28, 0x4, 0xd9, 0x7d, 0x5b}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:37:55.120136 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.24904ms
SaveRDFNode: 2020/08/13 08:37:55.120148 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000385320)}
rdfUIDdb: 2020/08/13 08:37:55.120154 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.120172 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.120178 Received UID: X18=
SaveRDFNode: 2020/08/13 08:37:55.120206 a: = db.Item{PKey:[]uint8{0x60, 0xa5, 0xa, 0xe1, 0x6a, 0x9b, 0x4a, 0x46, 0x94, 0x78, 0x5f, 0xff, 0x3e, 0xb7, 0xed, 0xf0}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:37:55.121717 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.36126ms
SaveRDFNode: 2020/08/13 08:37:55.121729 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000384f00)}
rdfUIDdb: 2020/08/13 08:37:55.121734 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.121738 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.121744 Received UID: X18=
SaveRDFNode: 2020/08/13 08:37:55.121753 a: = db.Item{PKey:[]uint8{0xea, 0x61, 0x8d, 0x3a, 0xf1, 0x49, 0x40, 0xad, 0xbc, 0xb5, 0x99, 0xb2, 0x43, 0xcf, 0x54, 0xfc}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:37:55.122714 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.247753ms
SaveRDFNode: 2020/08/13 08:37:55.122726 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003845a0)}
rdfUIDdb: 2020/08/13 08:37:55.122732 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.122735 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.122741 Received UID: X18=
SaveRDFNode: 2020/08/13 08:37:55.122750 a: = db.Item{PKey:[]uint8{0xd8, 0x42, 0x6b, 0x75, 0xe, 0xe7, 0x47, 0xba, 0xa9, 0x72, 0x40, 0x28, 0x4, 0xd9, 0x7d, 0x5b}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:37:55.123437 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.199053ms
SaveRDFNode: 2020/08/13 08:37:55.123449 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000385320)}
rdfUIDdb: 2020/08/13 08:37:55.123454 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:37:55.123458 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:37:55.123464 Received UID: X18=
SaveRDFNode: 2020/08/13 08:37:55.123474 a: = db.Item{PKey:[]uint8{0x60, 0xa5, 0xa, 0xe1, 0x6a, 0x9b, 0x4a, 0x46, 0x94, 0x78, 0x5f, 0xff, 0x3e, 0xb7, 0xed, 0xf0}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:37:55.125142 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.348342ms
SaveRDFNode: 2020/08/13 08:37:55.125151 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:37:55.125158 EndCh received for saveNode. rCnt = 2 
DB: 2020/08/13 08:37:55.126037 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.257448ms
SaveRDFNode: 2020/08/13 08:37:55.126051 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:37:55.126081 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/13 08:37:55.126746 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.244695ms
SaveRDFNode: 2020/08/13 08:37:55.126760 Returned.+++++++++++ No error
rdfLoader: 2020/08/13 08:37:55.126768 saveNode finished waiting...exiting
grmgr: 2020/08/13 08:37:55.126775 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/13 08:37:55.126784 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/13 08:37:55.126789 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 08:37:55.126794 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:37:55.126799 goroutine about to start 1 
attachNode: 2020/08/13 08:37:55.126805 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/13 08:37:55.126827 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 08:37:55.126833 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:37:55.126837 goroutine about to start 2 
attachNode: 2020/08/13 08:37:55.127414 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/13 08:37:55.127425 StartCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/13 08:37:55.127430 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 08:37:55.127434 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:37:55.127438 goroutine about to start 3 
attachNode: 2020/08/13 08:37:55.127443 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/13 08:37:55.127449 StartCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/13 08:37:55.127453 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
grmgr: 2020/08/13 08:37:55.128464 StartCh received for nodeAttach. rCnt = 3 
DB: 2020/08/13 08:37:55.129782 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.133465 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.136293 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.140180 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.142536 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.142821 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.145837 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.148954 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.151496 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.152157 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.154213 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.156053 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.82166ms
DB: 2020/08/13 08:37:55.157119 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.160549 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.38425ms
DB: 2020/08/13 08:37:55.161664 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 19.077028ms
DB: 2020/08/13 08:37:55.162422 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.306603ms
FetchForUpdate: 2020/08/13 08:37:55.162435 ** Cache FetchForUpdate Cache Key Value: [6mGNOvFJQK28tZmyQ89U/A==]   sortk: A#G#:S
FetchNode: 2020/08/13 08:37:55.162442  node: 6mGNOvFJQK28tZmyQ89U/A== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:37:55.162632 ** Cache FetchForUpdate Cache Key Value: [YKUK4WqbSkaUeF//Prft8A==]   sortk: A#
FetchNode: 2020/08/13 08:37:55.162647  node: YKUK4WqbSkaUeF//Prft8A== subKey: A#
DB: 2020/08/13 08:37:55.165329 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.855569ms
FetchForUpdate: 2020/08/13 08:37:55.165530 len(nb): 1
fetchItems: 2020/08/13 08:37:55.165543 +++  Cache FetchItems for sortk A#G#:S UID: [6mGNOvFJQK28tZmyQ89U/A==] 
FetchNode: 2020/08/13 08:37:55.165548  node: 6mGNOvFJQK28tZmyQ89U/A== subKey: A#G#:S
DB: 2020/08/13 08:37:55.166930 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.324898ms
FetchForUpdate: 2020/08/13 08:37:55.166945 ** Cache FetchForUpdate Cache Key Value: [YKUK4WqbSkaUeF//Prft8A==]   sortk: A#G#:S
FetchForUpdate: 2020/08/13 08:37:55.166956 ** Cache FetchForUpdate Cache Key Value: [6mGNOvFJQK28tZmyQ89U/A==]   sortk: A#
DB: 2020/08/13 08:37:55.167649 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.936666ms
FetchForUpdate: 2020/08/13 08:37:55.167768 len(nb): 7
fetchItems: 2020/08/13 08:37:55.167777 +++  Cache FetchItems for sortk A# UID: [YKUK4WqbSkaUeF//Prft8A==] 
FetchNode: 2020/08/13 08:37:55.167782  node: YKUK4WqbSkaUeF//Prft8A== subKey: A#
DB: 2020/08/13 08:37:55.168086 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.510932ms
DB: 2020/08/13 08:37:55.169090 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.365334ms
FetchForUpdate: 2020/08/13 08:37:55.169102 ** Cache FetchForUpdate Cache Key Value: [2EJrdQ7nR7qpckAoBNl9Ww==]   sortk: A#G#:S
FetchNode: 2020/08/13 08:37:55.169111  node: 2EJrdQ7nR7qpckAoBNl9Ww== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:37:55.169295 ** Cache FetchForUpdate Cache Key Value: [6mGNOvFJQK28tZmyQ89U/A==]   sortk: A#
DB: 2020/08/13 08:37:55.172423 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.790223ms
Unlock: 2020/08/13 08:37:55.172433 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:37:55.173047 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.903922ms
FetchForUpdate: 2020/08/13 08:37:55.173081 len(nb): 1
fetchItems: 2020/08/13 08:37:55.173088 +++  Cache FetchItems for sortk A#G#:S UID: [2EJrdQ7nR7qpckAoBNl9Ww==] 
FetchNode: 2020/08/13 08:37:55.173092  node: 2EJrdQ7nR7qpckAoBNl9Ww== subKey: A#G#:S
fetchItems: 2020/08/13 08:37:55.173264 +++  Cache FetchItems for sortk A# UID: [6mGNOvFJQK28tZmyQ89U/A==] 
FetchNode: 2020/08/13 08:37:55.173281  node: 6mGNOvFJQK28tZmyQ89U/A== subKey: A#
DB: 2020/08/13 08:37:55.175804 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.683373ms
DB: 2020/08/13 08:37:55.176902 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.576113ms
fetchItems: 2020/08/13 08:37:55.177065 +++  Cache FetchItems for sortk A# UID: [6mGNOvFJQK28tZmyQ89U/A==] 
FetchNode: 2020/08/13 08:37:55.177074  node: 6mGNOvFJQK28tZmyQ89U/A== subKey: A#
DB: 2020/08/13 08:37:55.179679 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.573312ms
DB: 2020/08/13 08:37:55.183060 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.637744ms
Unlock: 2020/08/13 08:37:55.183073 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
Unlock: 2020/08/13 08:37:55.184170 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/13 08:37:55.184730 +++  Cache FetchItems for sortk A# UID: [6mGNOvFJQK28tZmyQ89U/A==] 
FetchNode: 2020/08/13 08:37:55.184761  node: 6mGNOvFJQK28tZmyQ89U/A== subKey: A#
DB: 2020/08/13 08:37:55.186447 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 18.636449ms
Unlock: 2020/08/13 08:37:55.187324 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/13 08:37:55.187677 ** Cache FetchForUpdate Cache Key Value: [6mGNOvFJQK28tZmyQ89U/A==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:37:55.188364 +++  Cache FetchItems for sortk A#G#:S UID: [YKUK4WqbSkaUeF//Prft8A==] 
FetchNode: 2020/08/13 08:37:55.188375  node: YKUK4WqbSkaUeF//Prft8A== subKey: A#G#:S
DB: 2020/08/13 08:37:55.189953 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.136698ms
Unlock: 2020/08/13 08:37:55.191315 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/13 08:37:55.191712 ** Cache FetchForUpdate Cache Key Value: [2EJrdQ7nR7qpckAoBNl9Ww==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:37:55.191723 +++  Cache FetchItems for sortk A#G#:S UID: [2EJrdQ7nR7qpckAoBNl9Ww==] 
FetchNode: 2020/08/13 08:37:55.191729  node: 2EJrdQ7nR7qpckAoBNl9Ww== subKey: A#G#:S
fetchItems: 2020/08/13 08:37:55.192658 +++  Cache FetchItems for sortk A#G#:S UID: [6mGNOvFJQK28tZmyQ89U/A==] 
FetchNode: 2020/08/13 08:37:55.192669  node: 6mGNOvFJQK28tZmyQ89U/A== subKey: A#G#:S
DB: 2020/08/13 08:37:55.193042 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.601519ms
DB: 2020/08/13 08:37:55.195003 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.287987ms
DB: 2020/08/13 08:37:55.195361 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.588786ms
DB: 2020/08/13 08:37:55.197129 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.745593ms
Unlock: 2020/08/13 08:37:55.197148 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 08:37:55.197182 ** Cache FetchForUpdate Cache Key Value: [YKUK4WqbSkaUeF//Prft8A==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:37:55.197189 +++  Cache FetchItems for sortk A#G#:S UID: [YKUK4WqbSkaUeF//Prft8A==] 
FetchNode: 2020/08/13 08:37:55.197194  node: YKUK4WqbSkaUeF//Prft8A== subKey: A#G#:S
DB: 2020/08/13 08:37:55.199737 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.500052ms
DB: 2020/08/13 08:37:55.200730 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.627965ms
DB: 2020/08/13 08:37:55.201438 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.998577ms
DB: 2020/08/13 08:37:55.204477 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.493536ms
DB: 2020/08/13 08:37:55.205110 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.421868ms
DB: 2020/08/13 08:37:55.206779 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.318082ms
DB: 2020/08/13 08:37:55.211076 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.816575ms
DB: 2020/08/13 08:37:55.211735 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.624282ms
DB: 2020/08/13 08:37:55.216697 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 8.094111ms
DB: 2020/08/13 08:37:55.218107 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.967746ms
DB: 2020/08/13 08:37:55.221931 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.424513ms
DB: 2020/08/13 08:37:55.224551 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 12.719139ms
DB: 2020/08/13 08:37:55.228585 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.576315ms
DB: 2020/08/13 08:37:55.232898 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 15.430131ms
DB: 2020/08/13 08:37:55.233784 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 11.314347ms
DB: 2020/08/13 08:37:55.239790 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.288726ms
DB: 2020/08/13 08:37:55.240425 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.186001ms
DB: 2020/08/13 08:37:55.243776 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.584743ms
DB: 2020/08/13 08:37:55.244232 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.360335ms
DB: 2020/08/13 08:37:55.247197 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 18.177004ms
DB: 2020/08/13 08:37:55.247496 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.637193ms
DB: 2020/08/13 08:37:55.248208 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.909942ms
Unlock: 2020/08/13 08:37:55.248223 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 08:37:55.252584 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.594485ms
FetchForUpdate: 2020/08/13 08:37:55.252597 ** Cache FetchForUpdate Cache Key Value: [6mGNOvFJQK28tZmyQ89U/A==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:37:55.252603 +++  Cache FetchItems for sortk A#G#:S UID: [6mGNOvFJQK28tZmyQ89U/A==] 
FetchNode: 2020/08/13 08:37:55.252617  node: 6mGNOvFJQK28tZmyQ89U/A== subKey: A#G#:S
DB: 2020/08/13 08:37:55.253363 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.101893ms
DB: 2020/08/13 08:37:55.253629 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.070823ms
DB: 2020/08/13 08:37:55.256118 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.465621ms
AttachNode: gr1 2020/08/13 08:37:55.256200 Errored: SetUpredAvailable :for  6mGNOvFJQK28tZmyQ89U/A==
Cache: 2020/08/13 08:37:55.256208 In SetUpredAvailable: pUid, tUID:  6mGNOvFJQK28tZmyQ89U/A== 6mGNOvFJQK28tZmyQ89U/A== A#G#:S
Cache: 2020/08/13 08:37:55.256212 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:37:55.256924 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.508732ms
DB: 2020/08/13 08:37:55.257656 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.935768ms
DB: 2020/08/13 08:37:55.259730 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.486392ms
Unlock: 2020/08/13 08:37:55.259740 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:37:55.261260 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.825265ms
Unlock: 2020/08/13 08:37:55.261271 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 08:37:55.261875 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.721399ms
Unlock: 2020/08/13 08:37:55.261886 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 08:37:55.264889 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.529172ms
FetchForUpdate: 2020/08/13 08:37:55.264904 ** Cache FetchForUpdate Cache Key Value: [2EJrdQ7nR7qpckAoBNl9Ww==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:37:55.264911 +++  Cache FetchItems for sortk A#G#:S UID: [2EJrdQ7nR7qpckAoBNl9Ww==] 
FetchNode: 2020/08/13 08:37:55.264917  node: 2EJrdQ7nR7qpckAoBNl9Ww== subKey: A#G#:S
DB: 2020/08/13 08:37:55.265391 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.391219ms
FetchForUpdate: 2020/08/13 08:37:55.265423 ** Cache FetchForUpdate Cache Key Value: [YKUK4WqbSkaUeF//Prft8A==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:37:55.265430 +++  Cache FetchItems for sortk A#G#:S UID: [YKUK4WqbSkaUeF//Prft8A==] 
FetchNode: 2020/08/13 08:37:55.265435  node: YKUK4WqbSkaUeF//Prft8A== subKey: A#G#:S
DB: 2020/08/13 08:37:55.267950 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.997314ms
AttachNode: gr1 2020/08/13 08:37:55.268028 Errored: SetUpredAvailable :for  2EJrdQ7nR7qpckAoBNl9Ww==
Cache: 2020/08/13 08:37:55.268051 In SetUpredAvailable: pUid, tUID:  2EJrdQ7nR7qpckAoBNl9Ww== 2EJrdQ7nR7qpckAoBNl9Ww== A#G#:S
Cache: 2020/08/13 08:37:55.268055 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:37:55.268596 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.330218ms
grmgr: 2020/08/13 08:37:55.268614 EndCh received for nodeAttach. rCnt = 2 
DB: 2020/08/13 08:37:55.269022 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.549981ms
AttachNode: gr1 2020/08/13 08:37:55.269115 Errored: SetUpredAvailable :for  YKUK4WqbSkaUeF//Prft8A==
Cache: 2020/08/13 08:37:55.269123 In SetUpredAvailable: pUid, tUID:  YKUK4WqbSkaUeF//Prft8A== YKUK4WqbSkaUeF//Prft8A== A#G#:S
Cache: 2020/08/13 08:37:55.269127 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:37:55.271972 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.85746ms
Unlock: 2020/08/13 08:37:55.271991 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:37:55.273644 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.450538ms
Unlock: 2020/08/13 08:37:55.273654 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:37:55.282045 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.624847ms
grmgr: 2020/08/13 08:37:55.284588 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/13 08:37:55.284600 Send ack to waiting nodeAttach...
attachNode: 2020/08/13 08:37:55.284607 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:37:55.284612 goroutine about to start 4 
attachNode: 2020/08/13 08:37:55.284617 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/13 08:37:55.284623 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 08:37:55.284628 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:37:55.284632 goroutine about to start 5 
attachNode: 2020/08/13 08:37:55.284956 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/13 08:37:55.284967 StartCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/13 08:37:55.284994 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
grmgr: 2020/08/13 08:37:55.284999 StartCh received for nodeAttach. rCnt = 3 
DB: 2020/08/13 08:37:55.287855 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.291832 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 16.745808ms
grmgr: 2020/08/13 08:37:55.291846 EndCh received for nodeAttach. rCnt = 2 
DB: 2020/08/13 08:37:55.293366 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.295776 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.307063 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.309802 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.311457 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.312568 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.314493 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.316797 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.157912ms
DB: 2020/08/13 08:37:55.319837 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.292306ms
DB: 2020/08/13 08:37:55.323205 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.085126ms
FetchForUpdate: 2020/08/13 08:37:55.323224 ** Cache FetchForUpdate Cache Key Value: [6mGNOvFJQK28tZmyQ89U/A==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:37:55.323232 +++  Cache FetchItems for sortk A#G#:S UID: [6mGNOvFJQK28tZmyQ89U/A==] 
FetchNode: 2020/08/13 08:37:55.323237  node: 6mGNOvFJQK28tZmyQ89U/A== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:37:55.323404 ** Cache FetchForUpdate Cache Key Value: [2EJrdQ7nR7qpckAoBNl9Ww==]   sortk: A#
fetchItems: 2020/08/13 08:37:55.323415 +++  Cache FetchItems for sortk A# UID: [2EJrdQ7nR7qpckAoBNl9Ww==] 
FetchNode: 2020/08/13 08:37:55.323428  node: 2EJrdQ7nR7qpckAoBNl9Ww== subKey: A#
DB: 2020/08/13 08:37:55.326042 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.957643ms
FetchForUpdate: 2020/08/13 08:37:55.326071 ** Cache FetchForUpdate Cache Key Value: [2EJrdQ7nR7qpckAoBNl9Ww==]   sortk: A#G#:S
FetchForUpdate: 2020/08/13 08:37:55.326084 ** Cache FetchForUpdate Cache Key Value: [YKUK4WqbSkaUeF//Prft8A==]   sortk: A#
fetchItems: 2020/08/13 08:37:55.326099 +++  Cache FetchItems for sortk A# UID: [YKUK4WqbSkaUeF//Prft8A==] 
FetchNode: 2020/08/13 08:37:55.326109  node: YKUK4WqbSkaUeF//Prft8A== subKey: A#
DB: 2020/08/13 08:37:55.326543 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.271601ms
DB: 2020/08/13 08:37:55.329383 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.215811ms
Unlock: 2020/08/13 08:37:55.330722 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 08:37:55.331187 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.142765ms
DB: 2020/08/13 08:37:55.333938 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 10.449852ms
Unlock: 2020/08/13 08:37:55.335230 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/13 08:37:55.335636 +++  Cache FetchItems for sortk A#G#:S UID: [2EJrdQ7nR7qpckAoBNl9Ww==] 
FetchNode: 2020/08/13 08:37:55.335644  node: 2EJrdQ7nR7qpckAoBNl9Ww== subKey: A#G#:S
DB: 2020/08/13 08:37:55.335938 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.718047ms
DB: 2020/08/13 08:37:55.335953 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.718047ms
DB: 2020/08/13 08:37:55.338226 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.548889ms
DB: 2020/08/13 08:37:55.339261 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.273393ms
DB: 2020/08/13 08:37:55.339280 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.273393ms
DB: 2020/08/13 08:37:55.342924 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.579012ms
DB: 2020/08/13 08:37:55.343213 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.356744ms
DB: 2020/08/13 08:37:55.346216 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.950082ms
DB: 2020/08/13 08:37:55.346233 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 2.950082ms
DB: 2020/08/13 08:37:55.346545 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.557272ms
Unlock: 2020/08/13 08:37:55.346554 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:37:55.349341 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.07186ms
DB: 2020/08/13 08:37:55.349356 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.07186ms
DB: 2020/08/13 08:37:55.352952 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.406698ms
DB: 2020/08/13 08:37:55.353442 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.114383ms
DB: 2020/08/13 08:37:55.356613 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.479116ms
Unlock: 2020/08/13 08:37:55.356816 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:37:55.358153 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.442026ms
DB: 2020/08/13 08:37:55.362601 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.069231ms
DB: 2020/08/13 08:37:55.363764 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.844698ms
DB: 2020/08/13 08:37:55.366929 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.988864ms
DB: 2020/08/13 08:37:55.368728 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.833154ms
DB: 2020/08/13 08:37:55.371593 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.303646ms
DB: 2020/08/13 08:37:55.372266 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.234206ms
DB: 2020/08/13 08:37:55.376104 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.524662ms
DB: 2020/08/13 08:37:55.377821 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.816341ms
DB: 2020/08/13 08:37:55.381501 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.339504ms
DB: 2020/08/13 08:37:55.382287 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.874056ms
DB: 2020/08/13 08:37:55.385203 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.393517ms
DB: 2020/08/13 08:37:55.385745 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.17212ms
DB: 2020/08/13 08:37:55.389501 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.447556ms
DB: 2020/08/13 08:37:55.391438 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.942996ms
DB: 2020/08/13 08:37:55.393364 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.565143ms
FetchForUpdate: 2020/08/13 08:37:55.393375 ** Cache FetchForUpdate Cache Key Value: [6mGNOvFJQK28tZmyQ89U/A==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:37:55.393382 +++  Cache FetchItems for sortk A#G#:S UID: [6mGNOvFJQK28tZmyQ89U/A==] 
FetchNode: 2020/08/13 08:37:55.393387  node: 6mGNOvFJQK28tZmyQ89U/A== subKey: A#G#:S
DB: 2020/08/13 08:37:55.394754 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.014703ms
DB: 2020/08/13 08:37:55.396203 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.783608ms
AttachNode: gr1 2020/08/13 08:37:55.396300 Errored: SetUpredAvailable :for  6mGNOvFJQK28tZmyQ89U/A==
Cache: 2020/08/13 08:37:55.396308 In SetUpredAvailable: pUid, tUID:  6mGNOvFJQK28tZmyQ89U/A== gy9DqNokTWmOTALrqJxPxQ== A#G#:S
Cache: 2020/08/13 08:37:55.396312 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:37:55.399793 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.447283ms
Unlock: 2020/08/13 08:37:55.399804 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:37:55.402771 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.715463ms
DB: 2020/08/13 08:37:55.404121 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.858702ms
grmgr: 2020/08/13 08:37:55.404137 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/13 08:37:55.404142 Send ack to waiting nodeAttach...
attachNode: 2020/08/13 08:37:55.404148 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:37:55.404153 goroutine about to start 6 
rdfLoader: 2020/08/13 08:37:55.404171 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/13 08:37:55.405008 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/13 08:37:55.406596 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.77179ms
FetchForUpdate: 2020/08/13 08:37:55.406743 ** Cache FetchForUpdate Cache Key Value: [2EJrdQ7nR7qpckAoBNl9Ww==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:37:55.406765 +++  Cache FetchItems for sortk A#G#:S UID: [2EJrdQ7nR7qpckAoBNl9Ww==] 
FetchNode: 2020/08/13 08:37:55.406770  node: 2EJrdQ7nR7qpckAoBNl9Ww== subKey: A#G#:S
DB: 2020/08/13 08:37:55.407092 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.409456 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.652842ms
AttachNode: gr1 2020/08/13 08:37:55.409551 Errored: SetUpredAvailable :for  2EJrdQ7nR7qpckAoBNl9Ww==
Cache: 2020/08/13 08:37:55.409559 In SetUpredAvailable: pUid, tUID:  2EJrdQ7nR7qpckAoBNl9Ww== HY7ixWNPQ3SKH9uM3ZVM7Q== A#G#:S
Cache: 2020/08/13 08:37:55.409563 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:37:55.409918 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.412891 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.413111 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.517664ms
Unlock: 2020/08/13 08:37:55.413151 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:37:55.415601 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:37:55.417426 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.841384ms
grmgr: 2020/08/13 08:37:55.417439 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/13 08:37:55.419198 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.52603ms
DB: 2020/08/13 08:37:55.423095 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.727968ms
FetchForUpdate: 2020/08/13 08:37:55.423252 ** Cache FetchForUpdate Cache Key Value: [YKUK4WqbSkaUeF//Prft8A==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:37:55.423277 +++  Cache FetchItems for sortk A#G#:S UID: [YKUK4WqbSkaUeF//Prft8A==] 
FetchNode: 2020/08/13 08:37:55.423282  node: YKUK4WqbSkaUeF//Prft8A== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:37:55.423458 ** Cache FetchForUpdate Cache Key Value: [2EJrdQ7nR7qpckAoBNl9Ww==]   sortk: A#
fetchItems: 2020/08/13 08:37:55.423466 +++  Cache FetchItems for sortk A# UID: [2EJrdQ7nR7qpckAoBNl9Ww==] 
FetchNode: 2020/08/13 08:37:55.423477  node: 2EJrdQ7nR7qpckAoBNl9Ww== subKey: A#
DB: 2020/08/13 08:37:55.426204 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.68585ms
Unlock: 2020/08/13 08:37:55.426875 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 08:37:55.427450 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.138755ms
DB: 2020/08/13 08:37:55.430978 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.396497ms
DB: 2020/08/13 08:37:55.434241 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.226662ms
DB: 2020/08/13 08:37:55.434256 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.226662ms
DB: 2020/08/13 08:37:55.437339 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.052076ms
DB: 2020/08/13 08:37:55.437354 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.052076ms
DB: 2020/08/13 08:37:55.441003 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.50064ms
DB: 2020/08/13 08:37:55.444584 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.333177ms
Unlock: 2020/08/13 08:37:55.444597 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:37:55.451279 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.012587ms
DB: 2020/08/13 08:37:55.454618 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.174505ms
DB: 2020/08/13 08:37:55.458460 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.477465ms
DB: 2020/08/13 08:37:55.464558 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.69279ms
DB: 2020/08/13 08:37:55.470446 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.600012ms
DB: 2020/08/13 08:37:55.474206 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.462417ms
DB: 2020/08/13 08:37:55.480430 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.814077ms
DB: 2020/08/13 08:37:55.483973 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.24623ms
DB: 2020/08/13 08:37:55.487711 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.42746ms
DB: 2020/08/13 08:37:55.491248 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.309389ms
FetchForUpdate: 2020/08/13 08:37:55.491411 ** Cache FetchForUpdate Cache Key Value: [YKUK4WqbSkaUeF//Prft8A==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:37:55.491423 +++  Cache FetchItems for sortk A#G#:S UID: [YKUK4WqbSkaUeF//Prft8A==] 
FetchNode: 2020/08/13 08:37:55.491428  node: YKUK4WqbSkaUeF//Prft8A== subKey: A#G#:S
DB: 2020/08/13 08:37:55.493790 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.329212ms
AttachNode: gr1 2020/08/13 08:37:55.493896 Errored: SetUpredAvailable :for  YKUK4WqbSkaUeF//Prft8A==
Cache: 2020/08/13 08:37:55.493905 In SetUpredAvailable: pUid, tUID:  YKUK4WqbSkaUeF//Prft8A== 6VnfcbF3ScO7/Em04n8mhA== A#G#:S
Cache: 2020/08/13 08:37:55.493909 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:37:55.497517 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.575417ms
Unlock: 2020/08/13 08:37:55.497527 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:37:55.502069 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.952151ms
rdfLoader: 2020/08/13 08:37:55.502083 saveNode finished waiting...exiting
rdfuuid: 2020/08/13 08:37:55.502093 Powering down...
grmgr: 2020/08/13 08:37:55.502100 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/13 08:37:55.502105 Powering down...
DB:2020/08/13 08:42:05 log.go:18: ===============================================================================
grmgr: 2020/08/13 08:42:05.801540 Powering on...
rdfLoader: 2020/08/13 08:42:05.801831 verify started....xx.
rdfLoader: 2020/08/13 08:42:05.801857 saveNode started......
rdfLoader: 2020/08/13 08:42:05.801861 define saveNode limiter......
rdfuuid: 2020/08/13 08:42:05.801872 Powering on...
rdfLoader: 2020/08/13 08:42:05.801878 *************** All started 
rdfLoader: 2020/08/13 08:42:05.808190 .  getType..
rdfLoader: 2020/08/13 08:42:05.808205 node.TyName : [Person]
DB: 2020/08/13 08:42:05.879151 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 70.8929ms
verify: 2020/08/13 08:42:05.879308 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:7, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:8, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 08:42:05.879325  Send Ask request to limiter.
verify: 2020/08/13 08:42:05.879331 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:42:05.879338 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:42:05.879345 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:42:05.879352 .  getType..
rdfLoader: 2020/08/13 08:42:05.879356 node.TyName : [Person]
verify: 2020/08/13 08:42:05.879379 Pass to unmarshal... 1 &ds.Node{ID:"b", TyName:"Person", Lines:[]ds.Line{ds.Line{N:13, Subj:"b", Pred:"Name", Obj:"Paul Payne"}, ds.Line{N:14, Subj:"b", Pred:"DOB", Obj:"2 June 1960"}, ds.Line{N:15, Subj:"b", Pred:"Age", Obj:"58"}, ds.Line{N:16, Subj:"b", Pred:"Siblings", Obj:"abc"}, ds.Line{N:17, Subj:"b", Pred:"Siblings", Obj:"c"}, ds.Line{N:18, Subj:"b", Pred:"Cars", Obj:"Holden Commodore"}, ds.Line{N:19, Subj:"b", Pred:"Cars", Obj:"Honda"}, ds.Line{N:20, Subj:"b", Pred:"Cars", Obj:"VW Golf"}}, Err:[]error(nil)}
verify: 2020/08/13 08:42:05.879383  Send Ask request to limiter.
verify: 2020/08/13 08:42:05.879388 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:42:05.879394 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:42:05.879399 ACK from gcmgr....received...
verify: 2020/08/13 08:42:05.879406 *** Verify back to waiting on veryifyCh
rdfLoader: 2020/08/13 08:42:05.879454 .  getType..
rdfLoader: 2020/08/13 08:42:05.879459 node.TyName : [Person]
verify: 2020/08/13 08:42:05.879479 Pass to unmarshal... 0 &ds.Node{ID:"c", TyName:"Person", Lines:[]ds.Line{ds.Line{N:1, Subj:"c", Pred:"Name", Obj:"Ian Payne"}, ds.Line{N:2, Subj:"c", Pred:"DOB", Obj:"29 Jan 1953"}, ds.Line{N:3, Subj:"c", Pred:"Age", Obj:"67"}, ds.Line{N:4, Subj:"c", Pred:"Siblings", Obj:"abc"}, ds.Line{N:5, Subj:"c", Pred:"Siblings", Obj:"b"}, ds.Line{N:6, Subj:"c", Pred:"Cars", Obj:"VW Passat"}, ds.Line{N:7, Subj:"c", Pred:"Cars", Obj:"Mitsubishi"}, ds.Line{N:8, Subj:"c", Pred:"Cars", Obj:"Ford Laser"}, ds.Line{N:9, Subj:"c", Pred:"Cars", Obj:"Honda"}}, Err:[]error(nil)}
verify: 2020/08/13 08:42:05.879484  Send Ask request to limiter.
verify: 2020/08/13 08:42:05.879488 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:42:05.879494 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:42:05.879499 ACK from gcmgr....received...
rdfLoader: 2020/08/13 08:42:05.879506 .  getType..
rdfLoader: 2020/08/13 08:42:05.879510 node.TyName : [Person]
verify: 2020/08/13 08:42:05.879525 Pass to unmarshal... 1 &ds.Node{ID:"d", TyName:"Person", Lines:[]ds.Line{ds.Line{N:12, Subj:"d", Pred:"Name", Obj:"Phil Smith"}, ds.Line{N:13, Subj:"d", Pred:"DOB", Obj:"17 June 1976"}, ds.Line{N:14, Subj:"d", Pred:"Age", Obj:"36"}, ds.Line{N:15, Subj:"d", Pred:"Cars", Obj:"Roll Roycet"}, ds.Line{N:16, Subj:"d", Pred:"Cars", Obj:"Bentley"}}, Err:[]error(nil)}
verify: 2020/08/13 08:42:05.879529  Send Ask request to limiter.
verify: 2020/08/13 08:42:05.879534 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 08:42:05.879539 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 08:42:05.879544 ACK from gcmgr....received...
verify: 2020/08/13 08:42:05.879549 *** Verify back to waiting on veryifyCh
verify: 2020/08/13 08:42:05.879553 verify at wg.Wait() .....
unmarshalRDF2020/08/13 08:42:05.879567 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:42:05.879573 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/13 08:42:05.879579 StartCh received for unmarshall. rCnt = 2 
rdfLoader: 2020/08/13 08:42:05.879585 Find Ty Address
rdfLoader: 2020/08/13 08:42:05.879590 Find Ty Age
rdfLoader: 2020/08/13 08:42:05.879596 Find Ty Cars
rdfLoader: 2020/08/13 08:42:05.879602 Add to SS . [Bentley]
rdfLoader: 2020/08/13 08:42:05.879606 Find Ty DOB
rdfLoader: 2020/08/13 08:42:05.879611 Find Ty Friends
rdfLoader: 2020/08/13 08:42:05.879616 Find Ty Jobs
rdfLoader: 2020/08/13 08:42:05.879624 Find Ty Name
rdfLoader: 2020/08/13 08:42:05.879629 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:42:05.879634 Find Ty Siblings
rdfLoader: 2020/08/13 08:42:05.879652 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:42:05.879677 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:42:05.879682 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:42:05.879689 EndCh received for unmarshall. rCnt = 1 
unmarshalRDF2020/08/13 08:42:05.879700 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:42:05.879706 StartCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/13 08:42:05.879711 StartCh received for unmarshall. rCnt = 3 
rdfLoader: 2020/08/13 08:42:05.879716 Find Ty Address
rdfLoader: 2020/08/13 08:42:05.879721 Find Ty Age
rdfLoader: 2020/08/13 08:42:05.879726 Find Ty Cars
rdfLoader: 2020/08/13 08:42:05.879731 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:42:05.879736 Add to SS . [Alfa]
rdfLoader: 2020/08/13 08:42:05.879741 Find Ty DOB
rdfLoader: 2020/08/13 08:42:05.879746 Find Ty Friends
rdfLoader: 2020/08/13 08:42:05.879751 Find Ty Jobs
rdfLoader: 2020/08/13 08:42:05.879755 Find Ty Name
rdfLoader: 2020/08/13 08:42:05.879760 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:42:05.879764 Find Ty Siblings
rdfLoader: 2020/08/13 08:42:05.879778 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:42:05.879803 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:42:05.879820 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:42:05.879826 EndCh received for unmarshall. rCnt = 2 
unmarshalRDF2020/08/13 08:42:05.879836 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:42:05.879841 StartCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/13 08:42:05.879847 StartCh received for unmarshall. rCnt = 4 
rdfLoader: 2020/08/13 08:42:05.879851 Find Ty Address
rdfLoader: 2020/08/13 08:42:05.879856 Find Ty Age
rdfLoader: 2020/08/13 08:42:05.879861 Find Ty Cars
rdfLoader: 2020/08/13 08:42:05.879866 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:42:05.879871 Add to SS . [VW Golf]
rdfLoader: 2020/08/13 08:42:05.879875 Find Ty DOB
rdfLoader: 2020/08/13 08:42:05.879879 Find Ty Friends
rdfLoader: 2020/08/13 08:42:05.879884 Find Ty Jobs
rdfLoader: 2020/08/13 08:42:05.879888 Find Ty Name
rdfLoader: 2020/08/13 08:42:05.879893 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:42:05.879897 Find Ty Siblings
rdfLoader: 2020/08/13 08:42:05.879908 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:42:05.879933 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:42:05.879942 Exit  unmarshalRDF. 
grmgr: 2020/08/13 08:42:05.879948 EndCh received for unmarshall. rCnt = 3 
unmarshalRDF2020/08/13 08:42:05.879957 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 08:42:05.879963 StartCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:42:05.879968 StartCh received for unmarshall. rCnt = 5 
rdfLoader: 2020/08/13 08:42:05.879973 Find Ty Address
rdfLoader: 2020/08/13 08:42:05.879977 Find Ty Age
rdfLoader: 2020/08/13 08:42:05.879982 Find Ty Cars
rdfLoader: 2020/08/13 08:42:05.879988 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/13 08:42:05.879993 Add to SS . [Ford Laser]
rdfLoader: 2020/08/13 08:42:05.879998 Add to SS . [Honda]
rdfLoader: 2020/08/13 08:42:05.880002 Find Ty DOB
rdfLoader: 2020/08/13 08:42:05.880007 Find Ty Friends
rdfLoader: 2020/08/13 08:42:05.880011 Find Ty Jobs
rdfLoader: 2020/08/13 08:42:05.880015 Find Ty Name
rdfLoader: 2020/08/13 08:42:05.880020 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 08:42:05.880025 Find Ty Siblings
rdfLoader: 2020/08/13 08:42:05.880036 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 08:42:05.880072 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 08:42:05.880077 Exit  unmarshalRDF. 
verify: 2020/08/13 08:42:05.880083 verify exited.....
saveNode: 2020/08/13 08:42:05.880089 read from saveCH channel 1 
grmgr: 2020/08/13 08:42:05.880094 EndCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 08:42:05.880100 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:42:05.880105 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:42:05.880111 read from saveCH channel 2 
grmgr: 2020/08/13 08:42:05.880131 StartCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 08:42:05.880139 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:42:05.880144 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:42:05.880149 read from saveCH channel 3 
SaveRDFNode: xxx 2020/08/13 08:42:05.880167 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880173 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880180 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880187 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880193 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880199 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880211 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:42:05.880216 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:42:05.880226 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0003825a0)}
SaveRDFNode: 2020/08/13 08:42:05.880235 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:42:05.880245 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.880250 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.880256 UID received  : 8ZM+s6RSRMq1la5bHZnAvg==
grmgr: 2020/08/13 08:42:05.880460 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/13 08:42:05.880469 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/13 08:42:05.880479 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880485 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880493 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880500 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880506 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880512 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.880534 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:42:05.880540 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:42:05.880549 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000382ae0)}
SaveRDFNode: 2020/08/13 08:42:05.880566 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:42:05.880573 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.880578 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.880584 UID received  : AbkHex0hRDOKSAhP/03Hrw==
DB: 2020/08/13 08:42:05.888808 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.52151ms
DB: 2020/08/13 08:42:05.892539 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.693884ms
DB: 2020/08/13 08:42:05.896230 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.654525ms
DB: 2020/08/13 08:42:05.899984 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.570642ms
DB: 2020/08/13 08:42:05.903380 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 22.76267ms
DB: 2020/08/13 08:42:05.903645 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.590772ms
SaveRDFNode: 2020/08/13 08:42:05.903659 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003825a0)}
rdfUIDdb: 2020/08/13 08:42:05.903667 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.903671 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.903676 Received UID: X18=
SaveRDFNode: 2020/08/13 08:42:05.903695 a: = db.Item{PKey:[]uint8{0xf1, 0x93, 0x3e, 0xb3, 0xa4, 0x52, 0x44, 0xca, 0xb5, 0x95, 0xae, 0x5b, 0x1d, 0x99, 0xc0, 0xbe}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:42:05.906986 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.57426ms
DB: 2020/08/13 08:42:05.907700 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.976894ms
SaveRDFNode: 2020/08/13 08:42:05.907713 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003825a0)}
rdfUIDdb: 2020/08/13 08:42:05.907719 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.907723 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.907728 Received UID: X18=
SaveRDFNode: 2020/08/13 08:42:05.907754 a: = db.Item{PKey:[]uint8{0xf1, 0x93, 0x3e, 0xb3, 0xa4, 0x52, 0x44, 0xca, 0xb5, 0x95, 0xae, 0x5b, 0x1d, 0x99, 0xc0, 0xbe}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:42:05.910396 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.378289ms
DB: 2020/08/13 08:42:05.911227 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.435885ms
SaveRDFNode: 2020/08/13 08:42:05.911251 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:42:05.911261 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 08:42:05.911266 Send ack to waiting saveNode...
saveNode: 2020/08/13 08:42:05.911272 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 08:42:05.911277 read from saveCH channel 4 
grmgr: 2020/08/13 08:42:05.911283 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 08:42:05.911287 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/13 08:42:05.911291 saveNode  waiting on ASaveRDFNodettachNode to finish
SaveRDFNode: xxx 2020/08/13 08:42:05.911335 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.911343 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.911348 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.911354 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.911362 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.911368 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.911374 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:42:05.911377 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:42:05.911383 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000017380)}
SaveRDFNode: 2020/08/13 08:42:05.911387 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:42:05.911396 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.911400 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.911405 UID received  : vbgmu5ysRQivhGtQ1XlV6g==
grmgr: 2020/08/13 08:42:05.911785 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/13 08:42:05.911968 StartCh received for saveNode. rCnt = 3 
SaveRDFNode: xxx 2020/08/13 08:42:05.911983 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.911991 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.911997 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.912003 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.912008 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.912014 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 08:42:05.912020 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 08:42:05.912023 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 08:42:05.912029 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017800)}
SaveRDFNode: 2020/08/13 08:42:05.912033 Waiting for UID ......................
rdfUIDdb: 2020/08/13 08:42:05.912048 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.912053 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.912058 UID received  : p1GXcHhhTYCofVpT4XEGtw==
DB: 2020/08/13 08:42:05.914312 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.884238ms
DB: 2020/08/13 08:42:05.915138 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.706975ms
DB: 2020/08/13 08:42:05.918101 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.016055ms
DB: 2020/08/13 08:42:05.918983 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.638653ms
SaveRDFNode: 2020/08/13 08:42:05.918996 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000382ae0)}
rdfUIDdb: 2020/08/13 08:42:05.919002 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.919006 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.919011 Received UID: X18=
SaveRDFNode: 2020/08/13 08:42:05.919026 a: = db.Item{PKey:[]uint8{0x1, 0xb9, 0x7, 0x7b, 0x1d, 0x21, 0x44, 0x33, 0x8a, 0x48, 0x8, 0x4f, 0xff, 0x4d, 0xc7, 0xaf}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:42:05.922392 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.222465ms
DB: 2020/08/13 08:42:05.922658 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.598569ms
SaveRDFNode: 2020/08/13 08:42:05.922675 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000382ae0)}
rdfUIDdb: 2020/08/13 08:42:05.922682 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.922686 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.922691 Received UID: X18=
SaveRDFNode: 2020/08/13 08:42:05.922702 a: = db.Item{PKey:[]uint8{0x1, 0xb9, 0x7, 0x7b, 0x1d, 0x21, 0x44, 0x33, 0x8a, 0x48, 0x8, 0x4f, 0xff, 0x4d, 0xc7, 0xaf}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:42:05.925872 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.443137ms
DB: 2020/08/13 08:42:05.926426 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.693622ms
SaveRDFNode: 2020/08/13 08:42:05.926437 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:42:05.926445 EndCh received for saveNode. rCnt = 2 
DB: 2020/08/13 08:42:05.934034 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 15.892366ms
DB: 2020/08/13 08:42:05.937657 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.437447ms
DB: 2020/08/13 08:42:05.941395 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.705608ms
DB: 2020/08/13 08:42:05.944356 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 18.423096ms
DB: 2020/08/13 08:42:05.944937 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.508012ms
SaveRDFNode: 2020/08/13 08:42:05.944964 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017800)}
rdfUIDdb: 2020/08/13 08:42:05.944971 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.944975 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.944981 Received UID: X18=
SaveRDFNode: 2020/08/13 08:42:05.944992 a: = db.Item{PKey:[]uint8{0xa7, 0x51, 0x97, 0x70, 0x78, 0x61, 0x4d, 0x80, 0xa8, 0x7d, 0x5a, 0x53, 0xe1, 0x71, 0x6, 0xb7}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:42:05.947562 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.16235ms
SaveRDFNode: 2020/08/13 08:42:05.947575 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017380)}
rdfUIDdb: 2020/08/13 08:42:05.947589 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.947593 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.947598 Received UID: X18=
SaveRDFNode: 2020/08/13 08:42:05.947609 a: = db.Item{PKey:[]uint8{0xbd, 0xb8, 0x26, 0xbb, 0x9c, 0xac, 0x45, 0x8, 0xaf, 0x84, 0x6b, 0x50, 0xd5, 0x79, 0x55, 0xea}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:42:05.948602 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.579911ms
SaveRDFNode: 2020/08/13 08:42:05.948613 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017800)}
rdfUIDdb: 2020/08/13 08:42:05.948619 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.948623 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.948628 Received UID: X18=
SaveRDFNode: 2020/08/13 08:42:05.948638 a: = db.Item{PKey:[]uint8{0xa7, 0x51, 0x97, 0x70, 0x78, 0x61, 0x4d, 0x80, 0xa8, 0x7d, 0x5a, 0x53, 0xe1, 0x71, 0x6, 0xb7}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:42:05.950828 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.191183ms
SaveRDFNode: 2020/08/13 08:42:05.950999 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017380)}
rdfUIDdb: 2020/08/13 08:42:05.951011 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 08:42:05.951015 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 08:42:05.951021 Received UID: X18=
SaveRDFNode: 2020/08/13 08:42:05.951035 a: = db.Item{PKey:[]uint8{0xbd, 0xb8, 0x26, 0xbb, 0x9c, 0xac, 0x45, 0x8, 0xaf, 0x84, 0x6b, 0x50, 0xd5, 0x79, 0x55, 0xea}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 08:42:05.952900 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.233804ms
SaveRDFNode: 2020/08/13 08:42:05.952911 Returned.+++++++++++ No error
grmgr: 2020/08/13 08:42:05.952919 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/13 08:42:05.954649 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.580818ms
SaveRDFNode: 2020/08/13 08:42:05.954660 Returned.+++++++++++ No error
rdfLoader: 2020/08/13 08:42:05.954668 saveNode finished waiting...exiting
grmgr: 2020/08/13 08:42:05.954674 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/13 08:42:05.954684 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/13 08:42:05.954689 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 08:42:05.954694 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:42:05.954698 goroutine about to start 1 
attachNode: 2020/08/13 08:42:05.954731 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/13 08:42:05.954736 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 08:42:05.954740 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:42:05.954744 goroutine about to start 2 
attachNode: 2020/08/13 08:42:05.956083 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/13 08:42:05.956164 StartCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/13 08:42:05.956178 StartCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/13 08:42:05.956184 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/13 08:42:05.958637 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:05.961598 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:05.964191 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:05.967219 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:05.971344 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.899041ms
DB: 2020/08/13 08:42:05.972984 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:05.975318 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:05.977579 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:05.977782 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.870606ms
FetchForUpdate: 2020/08/13 08:42:05.977795 ** Cache FetchForUpdate Cache Key Value: [vbgmu5ysRQivhGtQ1XlV6g==]   sortk: A#G#:S
FetchNode: 2020/08/13 08:42:05.977812  node: vbgmu5ysRQivhGtQ1XlV6g== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:42:05.978001 ** Cache FetchForUpdate Cache Key Value: [AbkHex0hRDOKSAhP/03Hrw==]   sortk: A#
FetchNode: 2020/08/13 08:42:05.978017  node: AbkHex0hRDOKSAhP/03Hrw== subKey: A#
DB: 2020/08/13 08:42:05.980273 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:05.981015 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.147943ms
FetchForUpdate: 2020/08/13 08:42:05.981094 len(nb): 1
fetchItems: 2020/08/13 08:42:05.981103 +++  Cache FetchItems for sortk A#G#:S UID: [vbgmu5ysRQivhGtQ1XlV6g==] 
FetchNode: 2020/08/13 08:42:05.981108  node: vbgmu5ysRQivhGtQ1XlV6g== subKey: A#G#:S
DB: 2020/08/13 08:42:05.983965 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.906172ms
FetchForUpdate: 2020/08/13 08:42:05.984218 len(nb): 7
fetchItems: 2020/08/13 08:42:05.984232 +++  Cache FetchItems for sortk A# UID: [AbkHex0hRDOKSAhP/03Hrw==] 
FetchNode: 2020/08/13 08:42:05.984236  node: AbkHex0hRDOKSAhP/03Hrw== subKey: A#
DB: 2020/08/13 08:42:05.987687 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.550055ms
DB: 2020/08/13 08:42:05.988017 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.692293ms
DB: 2020/08/13 08:42:05.991846 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.054947ms
Unlock: 2020/08/13 08:42:05.991857 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:42:05.992436 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.351893ms
FetchForUpdate: 2020/08/13 08:42:05.992448 ** Cache FetchForUpdate Cache Key Value: [p1GXcHhhTYCofVpT4XEGtw==]   sortk: A#G#:S
FetchNode: 2020/08/13 08:42:05.992454  node: p1GXcHhhTYCofVpT4XEGtw== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:42:05.992626 ** Cache FetchForUpdate Cache Key Value: [AbkHex0hRDOKSAhP/03Hrw==]   sortk: A#
DB: 2020/08/13 08:42:06.000593 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 16.326943ms
Unlock: 2020/08/13 08:42:06.004123 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/13 08:42:06.004618 ** Cache FetchForUpdate Cache Key Value: [vbgmu5ysRQivhGtQ1XlV6g==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.004643 +++  Cache FetchItems for sortk A#G#:S UID: [vbgmu5ysRQivhGtQ1XlV6g==] 
FetchNode: 2020/08/13 08:42:06.004650  node: vbgmu5ysRQivhGtQ1XlV6g== subKey: A#G#:S
fetchItems: 2020/08/13 08:42:06.005009 +++  Cache FetchItems for sortk A# UID: [AbkHex0hRDOKSAhP/03Hrw==] 
FetchNode: 2020/08/13 08:42:06.005026  node: AbkHex0hRDOKSAhP/03Hrw== subKey: A#
DB: 2020/08/13 08:42:06.007235 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 14.736388ms
FetchForUpdate: 2020/08/13 08:42:06.007299 len(nb): 1
fetchItems: 2020/08/13 08:42:06.007307 +++  Cache FetchItems for sortk A#G#:S UID: [p1GXcHhhTYCofVpT4XEGtw==] 
FetchNode: 2020/08/13 08:42:06.007321  node: p1GXcHhhTYCofVpT4XEGtw== subKey: A#G#:S
DB: 2020/08/13 08:42:06.009541 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.186907ms
DB: 2020/08/13 08:42:06.014302 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.955846ms
Unlock: 2020/08/13 08:42:06.014314 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:42:06.020251 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 15.416ms
DB: 2020/08/13 08:42:06.021521 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 16.418275ms
Unlock: 2020/08/13 08:42:06.022316 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/13 08:42:06.022843 ** Cache FetchForUpdate Cache Key Value: [p1GXcHhhTYCofVpT4XEGtw==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.022855 +++  Cache FetchItems for sortk A#G#:S UID: [p1GXcHhhTYCofVpT4XEGtw==] 
FetchNode: 2020/08/13 08:42:06.022861  node: p1GXcHhhTYCofVpT4XEGtw== subKey: A#G#:S
DB: 2020/08/13 08:42:06.025348 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.454026ms
DB: 2020/08/13 08:42:06.026014 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.372993ms
DB: 2020/08/13 08:42:06.029294 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.103507ms
DB: 2020/08/13 08:42:06.031176 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.440776ms
DB: 2020/08/13 08:42:06.033174 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.512773ms
DB: 2020/08/13 08:42:06.034894 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.54072ms
DB: 2020/08/13 08:42:06.038568 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.567833ms
DB: 2020/08/13 08:42:06.039302 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.82231ms
DB: 2020/08/13 08:42:06.042402 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.027445ms
DB: 2020/08/13 08:42:06.044513 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.879619ms
DB: 2020/08/13 08:42:06.045846 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.373812ms
DB: 2020/08/13 08:42:06.047904 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.337486ms
DB: 2020/08/13 08:42:06.051718 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.742116ms
DB: 2020/08/13 08:42:06.052212 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.309833ms
DB: 2020/08/13 08:42:06.055724 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.198502ms
DB: 2020/08/13 08:42:06.058107 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.097838ms
DB: 2020/08/13 08:42:06.059491 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.453721ms
Unlock: 2020/08/13 08:42:06.059502 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 08:42:06.061905 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.464715ms
DB: 2020/08/13 08:42:06.063593 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.697221ms
FetchForUpdate: 2020/08/13 08:42:06.063614 ** Cache FetchForUpdate Cache Key Value: [vbgmu5ysRQivhGtQ1XlV6g==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.063620 +++  Cache FetchItems for sortk A#G#:S UID: [vbgmu5ysRQivhGtQ1XlV6g==] 
FetchNode: 2020/08/13 08:42:06.063624  node: vbgmu5ysRQivhGtQ1XlV6g== subKey: A#G#:S
DB: 2020/08/13 08:42:06.065618 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.619226ms
Unlock: 2020/08/13 08:42:06.065628 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 08:42:06.067209 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.539334ms
AttachNode: gr1 2020/08/13 08:42:06.067364 Errored: SetUpredAvailable :for  vbgmu5ysRQivhGtQ1XlV6g==
Cache: 2020/08/13 08:42:06.067373 In SetUpredAvailable: pUid, tUID:  vbgmu5ysRQivhGtQ1XlV6g== vbgmu5ysRQivhGtQ1XlV6g== A#G#:S
Cache: 2020/08/13 08:42:06.067383 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:42:06.069340 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.645424ms
FetchForUpdate: 2020/08/13 08:42:06.069351 ** Cache FetchForUpdate Cache Key Value: [p1GXcHhhTYCofVpT4XEGtw==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.069357 +++  Cache FetchItems for sortk A#G#:S UID: [p1GXcHhhTYCofVpT4XEGtw==] 
FetchNode: 2020/08/13 08:42:06.069361  node: p1GXcHhhTYCofVpT4XEGtw== subKey: A#G#:S
DB: 2020/08/13 08:42:06.071549 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.130929ms
Unlock: 2020/08/13 08:42:06.071563 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:42:06.072492 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.097486ms
AttachNode: gr1 2020/08/13 08:42:06.072586 Errored: SetUpredAvailable :for  p1GXcHhhTYCofVpT4XEGtw==
Cache: 2020/08/13 08:42:06.072595 In SetUpredAvailable: pUid, tUID:  p1GXcHhhTYCofVpT4XEGtw== p1GXcHhhTYCofVpT4XEGtw== A#G#:S
Cache: 2020/08/13 08:42:06.072599 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:42:06.075999 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.367763ms
Unlock: 2020/08/13 08:42:06.076122 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:42:06.079062 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.963517ms
grmgr: 2020/08/13 08:42:06.079077 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/13 08:42:06.083304 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.776278ms
grmgr: 2020/08/13 08:42:06.083323 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/13 08:42:06.083328 Send ack to waiting nodeAttach...
attachNode: 2020/08/13 08:42:06.083334 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:42:06.083338 goroutine about to start 3 
attachNode: 2020/08/13 08:42:06.083363 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/13 08:42:06.083369 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 08:42:06.083374 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:42:06.083378 goroutine about to start 4 
attachNode: 2020/08/13 08:42:06.083701 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/13 08:42:06.083711 StartCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/13 08:42:06.083717 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
grmgr: 2020/08/13 08:42:06.083722 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/13 08:42:06.085733 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.086018 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.088556 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.089134 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.091417 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.091619 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.093465 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.094391 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.096932 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.413459ms
DB: 2020/08/13 08:42:06.097622 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.183932ms
DB: 2020/08/13 08:42:06.102098 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.522884ms
FetchForUpdate: 2020/08/13 08:42:06.102112 ** Cache FetchForUpdate Cache Key Value: [vbgmu5ysRQivhGtQ1XlV6g==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.102118 +++  Cache FetchItems for sortk A#G#:S UID: [vbgmu5ysRQivhGtQ1XlV6g==] 
FetchNode: 2020/08/13 08:42:06.102122  node: vbgmu5ysRQivhGtQ1XlV6g== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:42:06.102302 ** Cache FetchForUpdate Cache Key Value: [p1GXcHhhTYCofVpT4XEGtw==]   sortk: A#
fetchItems: 2020/08/13 08:42:06.102311 +++  Cache FetchItems for sortk A# UID: [p1GXcHhhTYCofVpT4XEGtw==] 
FetchNode: 2020/08/13 08:42:06.102324  node: p1GXcHhhTYCofVpT4XEGtw== subKey: A#
DB: 2020/08/13 08:42:06.104336 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.111758ms
FetchForUpdate: 2020/08/13 08:42:06.104421 ** Cache FetchForUpdate Cache Key Value: [AbkHex0hRDOKSAhP/03Hrw==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.104432 +++  Cache FetchItems for sortk A#G#:S UID: [AbkHex0hRDOKSAhP/03Hrw==] 
FetchNode: 2020/08/13 08:42:06.104455  node: AbkHex0hRDOKSAhP/03Hrw== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:42:06.104684 ** Cache FetchForUpdate Cache Key Value: [p1GXcHhhTYCofVpT4XEGtw==]   sortk: A#
DB: 2020/08/13 08:42:06.104945 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.775016ms
DB: 2020/08/13 08:42:06.108698 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 6.294418ms
DB: 2020/08/13 08:42:06.109094 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.595817ms
Unlock: 2020/08/13 08:42:06.112093 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/13 08:42:06.112621 +++  Cache FetchItems for sortk A# UID: [p1GXcHhhTYCofVpT4XEGtw==] 
FetchNode: 2020/08/13 08:42:06.112640  node: p1GXcHhhTYCofVpT4XEGtw== subKey: A#
DB: 2020/08/13 08:42:06.115162 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.014836ms
DB: 2020/08/13 08:42:06.117161 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.457267ms
Unlock: 2020/08/13 08:42:06.118608 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 08:42:06.119364 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.622733ms
Unlock: 2020/08/13 08:42:06.119457 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 08:42:06.119900 ** Cache FetchForUpdate Cache Key Value: [AbkHex0hRDOKSAhP/03Hrw==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.119911 +++  Cache FetchItems for sortk A#G#:S UID: [AbkHex0hRDOKSAhP/03Hrw==] 
FetchNode: 2020/08/13 08:42:06.119916  node: AbkHex0hRDOKSAhP/03Hrw== subKey: A#G#:S
DB: 2020/08/13 08:42:06.122994 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.020307ms
DB: 2020/08/13 08:42:06.138300 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 23.103747ms
DB: 2020/08/13 08:42:06.138322 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 23.103747ms
DB: 2020/08/13 08:42:06.144037 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 20.362917ms
DB: 2020/08/13 08:42:06.147961 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.611715ms
DB: 2020/08/13 08:42:06.152349 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.803322ms
DB: 2020/08/13 08:42:06.156296 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 17.937999ms
DB: 2020/08/13 08:42:06.156465 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 17.937999ms
DB: 2020/08/13 08:42:06.158873 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.03971ms
DB: 2020/08/13 08:42:06.160430 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.725557ms
DB: 2020/08/13 08:42:06.164206 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.566532ms
Unlock: 2020/08/13 08:42:06.164218 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:42:06.169299 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 9.953914ms
DB: 2020/08/13 08:42:06.171031 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.938293ms
DB: 2020/08/13 08:42:06.175381 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.887616ms
DB: 2020/08/13 08:42:06.176323 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.510518ms
DB: 2020/08/13 08:42:06.178923 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.438227ms
DB: 2020/08/13 08:42:06.182626 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.241553ms
DB: 2020/08/13 08:42:06.184953 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.970855ms
DB: 2020/08/13 08:42:06.186274 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.589374ms
DB: 2020/08/13 08:42:06.188594 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.21368ms
DB: 2020/08/13 08:42:06.191132 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.818341ms
Unlock: 2020/08/13 08:42:06.191148 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 08:42:06.193123 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.909727ms
DB: 2020/08/13 08:42:06.195589 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.684967ms
FetchForUpdate: 2020/08/13 08:42:06.195601 ** Cache FetchForUpdate Cache Key Value: [AbkHex0hRDOKSAhP/03Hrw==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.195607 +++  Cache FetchItems for sortk A#G#:S UID: [AbkHex0hRDOKSAhP/03Hrw==] 
FetchNode: 2020/08/13 08:42:06.195612  node: AbkHex0hRDOKSAhP/03Hrw== subKey: A#G#:S
DB: 2020/08/13 08:42:06.199281 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.626095ms
AttachNode: gr1 2020/08/13 08:42:06.199383 Errored: SetUpredAvailable :for  AbkHex0hRDOKSAhP/03Hrw==
Cache: 2020/08/13 08:42:06.199391 In SetUpredAvailable: pUid, tUID:  AbkHex0hRDOKSAhP/03Hrw== AbkHex0hRDOKSAhP/03Hrw== A#G#:S
Cache: 2020/08/13 08:42:06.199395 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:42:06.199600 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.416839ms
DB: 2020/08/13 08:42:06.203212 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.783318ms
Unlock: 2020/08/13 08:42:06.203224 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:42:06.204033 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.225498ms
DB: 2020/08/13 08:42:06.208513 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.45951ms
DB: 2020/08/13 08:42:06.211741 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.15138ms
FetchForUpdate: 2020/08/13 08:42:06.211753 ** Cache FetchForUpdate Cache Key Value: [vbgmu5ysRQivhGtQ1XlV6g==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.211759 +++  Cache FetchItems for sortk A#G#:S UID: [vbgmu5ysRQivhGtQ1XlV6g==] 
FetchNode: 2020/08/13 08:42:06.211764  node: vbgmu5ysRQivhGtQ1XlV6g== subKey: A#G#:S
DB: 2020/08/13 08:42:06.212727 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.933198ms
grmgr: 2020/08/13 08:42:06.212741 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/13 08:42:06.214675 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.881205ms
AttachNode: gr1 2020/08/13 08:42:06.214772 Errored: SetUpredAvailable :for  vbgmu5ysRQivhGtQ1XlV6g==
Cache: 2020/08/13 08:42:06.214781 In SetUpredAvailable: pUid, tUID:  vbgmu5ysRQivhGtQ1XlV6g== 4FeNJx7vQJ6/W38lPOHmaQ== A#G#:S
Cache: 2020/08/13 08:42:06.214785 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:42:06.218482 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.653835ms
Unlock: 2020/08/13 08:42:06.218492 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:42:06.222823 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.8678ms
grmgr: 2020/08/13 08:42:06.222839 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/13 08:42:06.222844 Send ack to waiting nodeAttach...
attachNode: 2020/08/13 08:42:06.222850 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:42:06.222855 goroutine about to start 5 
attachNode: 2020/08/13 08:42:06.222863 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/13 08:42:06.222868 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 08:42:06.222873 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 08:42:06.222877 goroutine about to start 6 
grmgr: 2020/08/13 08:42:06.223596 StartCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/13 08:42:06.223619 StartCh received for nodeAttach. rCnt = 2 
rdfLoader: 2020/08/13 08:42:06.223628 saveNode  waiting on AttachNode to finish
DB: 2020/08/13 08:42:06.226542 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.226948 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.228874 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.229943 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.231573 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.232876 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.233924 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.235206 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 08:42:06.237357 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.35672ms
DB: 2020/08/13 08:42:06.238846 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.59457ms
DB: 2020/08/13 08:42:06.242437 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.034809ms
FetchForUpdate: 2020/08/13 08:42:06.242455 ** Cache FetchForUpdate Cache Key Value: [AbkHex0hRDOKSAhP/03Hrw==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.242461 +++  Cache FetchItems for sortk A#G#:S UID: [AbkHex0hRDOKSAhP/03Hrw==] 
FetchNode: 2020/08/13 08:42:06.242467  node: AbkHex0hRDOKSAhP/03Hrw== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:42:06.242660 ** Cache FetchForUpdate Cache Key Value: [vbgmu5ysRQivhGtQ1XlV6g==]   sortk: A#
fetchItems: 2020/08/13 08:42:06.242670 +++  Cache FetchItems for sortk A# UID: [vbgmu5ysRQivhGtQ1XlV6g==] 
FetchNode: 2020/08/13 08:42:06.242680  node: vbgmu5ysRQivhGtQ1XlV6g== subKey: A#
DB: 2020/08/13 08:42:06.243307 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.288847ms
FetchForUpdate: 2020/08/13 08:42:06.243318 ** Cache FetchForUpdate Cache Key Value: [p1GXcHhhTYCofVpT4XEGtw==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.243324 +++  Cache FetchItems for sortk A#G#:S UID: [p1GXcHhhTYCofVpT4XEGtw==] 
FetchNode: 2020/08/13 08:42:06.243328  node: p1GXcHhhTYCofVpT4XEGtw== subKey: A#G#:S
FetchForUpdate: 2020/08/13 08:42:06.243531 ** Cache FetchForUpdate Cache Key Value: [vbgmu5ysRQivhGtQ1XlV6g==]   sortk: A#
DB: 2020/08/13 08:42:06.246723 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.82812ms
Unlock: 2020/08/13 08:42:06.248315 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/13 08:42:06.248779 +++  Cache FetchItems for sortk A# UID: [vbgmu5ysRQivhGtQ1XlV6g==] 
FetchNode: 2020/08/13 08:42:06.248796  node: vbgmu5ysRQivhGtQ1XlV6g== subKey: A#
DB: 2020/08/13 08:42:06.249460 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 6.945359ms
DB: 2020/08/13 08:42:06.253201 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 9.827875ms
DB: 2020/08/13 08:42:06.254222 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 5.382549ms
DB: 2020/08/13 08:42:06.258165 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.460724ms
Unlock: 2020/08/13 08:42:06.260540 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 08:42:06.270558 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 20.594589ms
DB: 2020/08/13 08:42:06.271021 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 12.81742ms
DB: 2020/08/13 08:42:06.271035 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 12.81742ms
DB: 2020/08/13 08:42:06.274575 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.471664ms
DB: 2020/08/13 08:42:06.274590 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.471664ms
DB: 2020/08/13 08:42:06.278868 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.061091ms
DB: 2020/08/13 08:42:06.282910 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.718556ms
Unlock: 2020/08/13 08:42:06.282931 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:42:06.287080 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 16.487973ms
DB: 2020/08/13 08:42:06.287095 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 16.487973ms
DB: 2020/08/13 08:42:06.289374 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.627017ms
DB: 2020/08/13 08:42:06.290943 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.816639ms
DB: 2020/08/13 08:42:06.290980 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.816639ms
DB: 2020/08/13 08:42:06.292879 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.330934ms
DB: 2020/08/13 08:42:06.294854 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.738543ms
DB: 2020/08/13 08:42:06.297120 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.870402ms
DB: 2020/08/13 08:42:06.298776 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.65796ms
Unlock: 2020/08/13 08:42:06.298787 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 08:42:06.303957 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.558878ms
DB: 2020/08/13 08:42:06.304772 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.328829ms
DB: 2020/08/13 08:42:06.307596 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.357347ms
DB: 2020/08/13 08:42:06.308284 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.31548ms
DB: 2020/08/13 08:42:06.311409 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.521189ms
DB: 2020/08/13 08:42:06.312689 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.047747ms
DB: 2020/08/13 08:42:06.317421 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.57846ms
DB: 2020/08/13 08:42:06.318177 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.170179ms
DB: 2020/08/13 08:42:06.321309 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.588201ms
DB: 2020/08/13 08:42:06.321846 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.400621ms
DB: 2020/08/13 08:42:06.325254 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.636985ms
DB: 2020/08/13 08:42:06.325669 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.503857ms
DB: 2020/08/13 08:42:06.328902 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.461736ms
FetchForUpdate: 2020/08/13 08:42:06.329196 ** Cache FetchForUpdate Cache Key Value: [p1GXcHhhTYCofVpT4XEGtw==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.329208 +++  Cache FetchItems for sortk A#G#:S UID: [p1GXcHhhTYCofVpT4XEGtw==] 
FetchNode: 2020/08/13 08:42:06.329213  node: p1GXcHhhTYCofVpT4XEGtw== subKey: A#G#:S
DB: 2020/08/13 08:42:06.331107 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.14727ms
DB: 2020/08/13 08:42:06.332739 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.479924ms
AttachNode: gr1 2020/08/13 08:42:06.332855 Errored: SetUpredAvailable :for  p1GXcHhhTYCofVpT4XEGtw==
Cache: 2020/08/13 08:42:06.332872 In SetUpredAvailable: pUid, tUID:  p1GXcHhhTYCofVpT4XEGtw== +n0sBIEyT3ujGtmve7I2Xw== A#G#:S
Cache: 2020/08/13 08:42:06.332877 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:42:06.334648 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.257494ms
DB: 2020/08/13 08:42:06.336415 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.506041ms
Unlock: 2020/08/13 08:42:06.336425 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:42:06.338327 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.313087ms
DB: 2020/08/13 08:42:06.342449 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.944865ms
FetchForUpdate: 2020/08/13 08:42:06.342461 ** Cache FetchForUpdate Cache Key Value: [AbkHex0hRDOKSAhP/03Hrw==]   sortk: A#G#:S
fetchItems: 2020/08/13 08:42:06.342467 +++  Cache FetchItems for sortk A#G#:S UID: [AbkHex0hRDOKSAhP/03Hrw==] 
FetchNode: 2020/08/13 08:42:06.342471  node: AbkHex0hRDOKSAhP/03Hrw== subKey: A#G#:S
DB: 2020/08/13 08:42:06.343311 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.401221ms
grmgr: 2020/08/13 08:42:06.343325 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/13 08:42:06.345825 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.323712ms
AttachNode: gr1 2020/08/13 08:42:06.346058 Errored: SetUpredAvailable :for  AbkHex0hRDOKSAhP/03Hrw==
Cache: 2020/08/13 08:42:06.346071 In SetUpredAvailable: pUid, tUID:  AbkHex0hRDOKSAhP/03Hrw== OPB8JX4aTL6nD/mgrGAeQw== A#G#:S
Cache: 2020/08/13 08:42:06.346075 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 08:42:06.350433 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.303117ms
Unlock: 2020/08/13 08:42:06.350446 ******* IN UNLOCK NC ********************
DB: 2020/08/13 08:42:06.355746 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.757925ms
rdfLoader: 2020/08/13 08:42:06.355772 saveNode finished waiting...exiting
rdfuuid: 2020/08/13 08:42:06.355781 Powering down...
grmgr: 2020/08/13 08:42:06.355788 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/13 08:42:06.355792 Powering down...
DB:2020/08/13 09:08:22 log.go:18: ===============================================================================
grmgr: 2020/08/13 09:08:22.844409 Powering on...
rdfLoader: 2020/08/13 09:08:22.844710 verify started....xx.
rdfLoader: 2020/08/13 09:08:22.844736 saveNode started......
rdfLoader: 2020/08/13 09:08:22.844741 define saveNode limiter......
rdfuuid: 2020/08/13 09:08:22.844751 Powering on...
rdfLoader: 2020/08/13 09:08:22.844758 *************** All started 
rdfLoader: 2020/08/13 09:08:22.852743 .  getType..
rdfLoader: 2020/08/13 09:08:22.852754 node.TyName : [Person]
DB: 2020/08/13 09:08:22.923605 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 70.795277ms
verify: 2020/08/13 09:08:22.923757 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:7, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:8, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 09:08:22.923764  Send Ask request to limiter.
verify: 2020/08/13 09:08:22.923770 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 09:08:22.923778 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
DB:2020/08/13 09:09:11 log.go:18: ===============================================================================
grmgr: 2020/08/13 09:09:11.677254 Powering on...
rdfLoader: 2020/08/13 09:09:11.677700 verify started....xx.
rdfLoader: 2020/08/13 09:09:11.677727 saveNode started......
rdfLoader: 2020/08/13 09:09:11.677732 define saveNode limiter......
rdfuuid: 2020/08/13 09:09:11.677742 Powering on...
rdfLoader: 2020/08/13 09:09:11.677748 *************** All started 
rdfLoader: 2020/08/13 09:09:11.687076 .  getType..
rdfLoader: 2020/08/13 09:09:11.687086 node.TyName : [Person]
DB: 2020/08/13 09:09:11.758129 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 70.992564ms
verify: 2020/08/13 09:09:11.758265 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:7, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:8, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 09:09:11.758273  Send Ask request to limiter.
verify: 2020/08/13 09:09:11.758278 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 09:09:11.758284 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 09:09:11.758293 ACK from gcmgr....received...
rdfLoader: 2020/08/13 09:09:11.758299 .  getType..
rdfLoader: 2020/08/13 09:09:11.758304 node.TyName : [Person]
verify: 2020/08/13 09:09:11.758321 Pass to unmarshal... 1 &ds.Node{ID:"b", TyName:"Person", Lines:[]ds.Line{ds.Line{N:13, Subj:"b", Pred:"Name", Obj:"Paul Payne"}, ds.Line{N:14, Subj:"b", Pred:"DOB", Obj:"2 June 1960"}, ds.Line{N:15, Subj:"b", Pred:"Age", Obj:"58"}, ds.Line{N:16, Subj:"b", Pred:"Siblings", Obj:"abc"}, ds.Line{N:17, Subj:"b", Pred:"Siblings", Obj:"c"}, ds.Line{N:18, Subj:"b", Pred:"Cars", Obj:"Holden Commodore"}, ds.Line{N:19, Subj:"b", Pred:"Cars", Obj:"Honda"}, ds.Line{N:20, Subj:"b", Pred:"Cars", Obj:"VW Golf"}}, Err:[]error(nil)}
verify: 2020/08/13 09:09:11.758325  Send Ask request to limiter.
verify: 2020/08/13 09:09:11.758329 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 09:09:11.758335 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 09:09:11.758339 ACK from gcmgr....received...
verify: 2020/08/13 09:09:11.758346 *** Verify back to waiting on veryifyCh
unmarshalRDF2020/08/13 09:09:11.759060 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 09:09:11.759077 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/13 09:09:11.759083 StartCh received for unmarshall. rCnt = 2 
rdfLoader: 2020/08/13 09:09:11.759089 Find Ty Address
rdfLoader: 2020/08/13 09:09:11.759093 Find Ty Age
rdfLoader: 2020/08/13 09:09:11.759100 Find Ty Cars
rdfLoader: 2020/08/13 09:09:11.759123 Add to SS . [Honda]
rdfLoader: 2020/08/13 09:09:11.759128 Add to SS . [VW Golf]
rdfLoader: 2020/08/13 09:09:11.759132 Find Ty DOB
rdfLoader: 2020/08/13 09:09:11.759137 Find Ty Friends
rdfLoader: 2020/08/13 09:09:11.759141 Find Ty Jobs
rdfLoader: 2020/08/13 09:09:11.759145 Find Ty Name
rdfLoader: 2020/08/13 09:09:11.759149 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 09:09:11.759154 Find Ty Siblings
rdfLoader: 2020/08/13 09:09:11.759174 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 09:09:11.759203 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 09:09:11.759218 Exit  unmarshalRDF. 
grmgr: 2020/08/13 09:09:11.759225 EndCh received for unmarshall. rCnt = 1 
unmarshalRDF2020/08/13 09:09:11.759246 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 09:09:11.759250 StartCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/13 09:09:11.759254 StartCh received for unmarshall. rCnt = 3 
rdfLoader: 2020/08/13 09:09:11.759259 Find Ty Address
rdfLoader: 2020/08/13 09:09:11.759262 Find Ty Age
rdfLoader: 2020/08/13 09:09:11.759267 Find Ty Cars
rdfLoader: 2020/08/13 09:09:11.759271 Add to SS . [Honda]
rdfLoader: 2020/08/13 09:09:11.759275 Add to SS . [Alfa]
rdfLoader: 2020/08/13 09:09:11.759279 Find Ty DOB
rdfLoader: 2020/08/13 09:09:11.759283 Find Ty Friends
rdfLoader: 2020/08/13 09:09:11.759287 Find Ty Jobs
rdfLoader: 2020/08/13 09:09:11.759290 Find Ty Name
rdfLoader: 2020/08/13 09:09:11.759294 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 09:09:11.759298 Find Ty Siblings
rdfLoader: 2020/08/13 09:09:11.759310 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 09:09:11.759335 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 09:09:11.759339 Exit  unmarshalRDF. 
grmgr: 2020/08/13 09:09:11.759344 EndCh received for unmarshall. rCnt = 2 
saveNode: 2020/08/13 09:09:11.759349 read from saveCH channel 1 
grmgr: 2020/08/13 09:09:11.759354 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 09:09:11.759371 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 09:09:11.759376 read from saveCH channel 2 
grmgr: 2020/08/13 09:09:11.759380 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 09:09:11.759383 limiter has ACK and will start goroutine...
SaveRDFNode: xxx 2020/08/13 09:09:11.759402 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759407 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759413 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759418 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759423 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759428 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759434 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 09:09:11.759437 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 09:09:11.759447 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0007cc1e0)}
SaveRDFNode: 2020/08/13 09:09:11.759451 Waiting for UID ......................
rdfUIDdb: 2020/08/13 09:09:11.759459 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.759462 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.759467 UID received  : taFjk4PbR4iVBO9dFTIGXQ==
grmgr: 2020/08/13 09:09:11.759710 StartCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 09:09:11.759718 StartCh received for saveNode. rCnt = 2 
SaveRDFNode: xxx 2020/08/13 09:09:11.759726 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759732 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759738 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759745 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759751 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759756 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.759762 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 09:09:11.759766 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 09:09:11.759788 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0007cc5a0)}
SaveRDFNode: 2020/08/13 09:09:11.759792 Waiting for UID ......................
rdfUIDdb: 2020/08/13 09:09:11.759802 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.759806 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.759811 UID received  : 3p502LTaRHC5k4XnTigEuA==
rdfLoader: 2020/08/13 09:09:11.762503 .  getType..
rdfLoader: 2020/08/13 09:09:11.762514 node.TyName : [Person]
verify: 2020/08/13 09:09:11.762539 Pass to unmarshal... 0 &ds.Node{ID:"c", TyName:"Person", Lines:[]ds.Line{ds.Line{N:1, Subj:"c", Pred:"Name", Obj:"Ian Payne"}, ds.Line{N:2, Subj:"c", Pred:"DOB", Obj:"29 Jan 1953"}, ds.Line{N:3, Subj:"c", Pred:"Age", Obj:"67"}, ds.Line{N:4, Subj:"c", Pred:"Siblings", Obj:"abc"}, ds.Line{N:5, Subj:"c", Pred:"Siblings", Obj:"b"}, ds.Line{N:6, Subj:"c", Pred:"Cars", Obj:"VW Passat"}, ds.Line{N:7, Subj:"c", Pred:"Cars", Obj:"Mitsubishi"}, ds.Line{N:8, Subj:"c", Pred:"Cars", Obj:"Ford Laser"}, ds.Line{N:9, Subj:"c", Pred:"Cars", Obj:"Honda"}}, Err:[]error(nil)}
verify: 2020/08/13 09:09:11.762543  Send Ask request to limiter.
verify: 2020/08/13 09:09:11.762548 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 09:09:11.762553 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 09:09:11.762558 ACK from gcmgr....received...
rdfLoader: 2020/08/13 09:09:11.762563 .  getType..
rdfLoader: 2020/08/13 09:09:11.762567 node.TyName : [Person]
verify: 2020/08/13 09:09:11.762581 Pass to unmarshal... 1 &ds.Node{ID:"d", TyName:"Person", Lines:[]ds.Line{ds.Line{N:12, Subj:"d", Pred:"Name", Obj:"Phil Smith"}, ds.Line{N:13, Subj:"d", Pred:"DOB", Obj:"17 June 1976"}, ds.Line{N:14, Subj:"d", Pred:"Age", Obj:"36"}, ds.Line{N:15, Subj:"d", Pred:"Cars", Obj:"Roll Roycet"}, ds.Line{N:16, Subj:"d", Pred:"Cars", Obj:"Bentley"}}, Err:[]error(nil)}
verify: 2020/08/13 09:09:11.762585  Send Ask request to limiter.
verify: 2020/08/13 09:09:11.762600 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 09:09:11.762605 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 09:09:11.762609 ACK from gcmgr....received...
verify: 2020/08/13 09:09:11.762613 *** Verify back to waiting on veryifyCh
verify: 2020/08/13 09:09:11.762617 verify at wg.Wait() .....
unmarshalRDF2020/08/13 09:09:11.762627 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 09:09:11.762632 StartCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/13 09:09:11.762638 StartCh received for unmarshall. rCnt = 4 
rdfLoader: 2020/08/13 09:09:11.762642 Find Ty Address
rdfLoader: 2020/08/13 09:09:11.762889 Find Ty Age
rdfLoader: 2020/08/13 09:09:11.762922 Find Ty Cars
rdfLoader: 2020/08/13 09:09:11.762928 Add to SS . [Bentley]
rdfLoader: 2020/08/13 09:09:11.762932 Find Ty DOB
rdfLoader: 2020/08/13 09:09:11.762953 Find Ty Friends
rdfLoader: 2020/08/13 09:09:11.762958 Find Ty Jobs
rdfLoader: 2020/08/13 09:09:11.762962 Find Ty Name
rdfLoader: 2020/08/13 09:09:11.762966 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 09:09:11.762970 Find Ty Siblings
rdfLoader: 2020/08/13 09:09:11.763002 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 09:09:11.763027 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 09:09:11.763032 Exit  unmarshalRDF. 
grmgr: 2020/08/13 09:09:11.763039 EndCh received for unmarshall. rCnt = 3 
unmarshalRDF2020/08/13 09:09:11.763045 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 09:09:11.763050 StartCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 09:09:11.763055 StartCh received for unmarshall. rCnt = 5 
rdfLoader: 2020/08/13 09:09:11.763060 Find Ty Address
rdfLoader: 2020/08/13 09:09:11.763064 Find Ty Age
rdfLoader: 2020/08/13 09:09:11.763068 Find Ty Cars
rdfLoader: 2020/08/13 09:09:11.763073 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/13 09:09:11.763077 Add to SS . [Ford Laser]
rdfLoader: 2020/08/13 09:09:11.763081 Add to SS . [Honda]
rdfLoader: 2020/08/13 09:09:11.763085 Find Ty DOB
rdfLoader: 2020/08/13 09:09:11.763090 Find Ty Friends
rdfLoader: 2020/08/13 09:09:11.763094 Find Ty Jobs
rdfLoader: 2020/08/13 09:09:11.763097 Find Ty Name
rdfLoader: 2020/08/13 09:09:11.763101 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 09:09:11.763105 Find Ty Siblings
rdfLoader: 2020/08/13 09:09:11.763118 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 09:09:11.763157 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 09:09:11.763163 Exit  unmarshalRDF. 
verify: 2020/08/13 09:09:11.763168 verify exited.....
saveNode: 2020/08/13 09:09:11.763173 read from saveCH channel 3 
grmgr: 2020/08/13 09:09:11.763179 EndCh received for unmarshall. rCnt = 4 
grmgr: 2020/08/13 09:09:11.763184 has ASKed. Cnt is above limit. Mark saveNode as waiting
DB: 2020/08/13 09:09:11.766159 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.662293ms
DB: 2020/08/13 09:09:11.770245 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.404782ms
DB: 2020/08/13 09:09:11.773792 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.514652ms
DB: 2020/08/13 09:09:11.777463 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.501596ms
DB: 2020/08/13 09:09:11.781011 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.515781ms
DB: 2020/08/13 09:09:11.784548 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.507171ms
SaveRDFNode: 2020/08/13 09:09:11.784566 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc5a0)}
rdfUIDdb: 2020/08/13 09:09:11.784572 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.784576 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.784581 Received UID: X18=
SaveRDFNode: 2020/08/13 09:09:11.784593 a: = db.Item{PKey:[]uint8{0xde, 0x9e, 0x74, 0xd8, 0xb4, 0xda, 0x44, 0x70, 0xb9, 0x93, 0x85, 0xe7, 0x4e, 0x28, 0x4, 0xb8}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 09:09:11.786803 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 20.594159ms
DB: 2020/08/13 09:09:11.788613 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.978319ms
SaveRDFNode: 2020/08/13 09:09:11.788718 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc5a0)}
rdfUIDdb: 2020/08/13 09:09:11.788729 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.788733 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.788739 Received UID: X18=
SaveRDFNode: 2020/08/13 09:09:11.788750 a: = db.Item{PKey:[]uint8{0xde, 0x9e, 0x74, 0xd8, 0xb4, 0xda, 0x44, 0x70, 0xb9, 0x93, 0x85, 0xe7, 0x4e, 0x28, 0x4, 0xb8}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 09:09:11.790360 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.520572ms
DB: 2020/08/13 09:09:11.792292 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.509869ms
SaveRDFNode: 2020/08/13 09:09:11.792302 Returned.+++++++++++ No error
grmgr: 2020/08/13 09:09:11.792310 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 09:09:11.792315 Send ack to waiting saveNode...
saveNode: 2020/08/13 09:09:11.792331 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 09:09:11.792337 read from saveCH channel 4 
grmgr: 2020/08/13 09:09:11.792341 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 09:09:11.792346 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/13 09:09:11.792350 saveNode  waiting on ASaveRDFNodettachNode to finish
SaveRDFNode: xxx 2020/08/13 09:09:11.792401 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792409 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792414 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792419 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792424 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792429 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792435 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 09:09:11.792438 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 09:09:11.792443 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0000173e0)}
SaveRDFNode: 2020/08/13 09:09:11.792447 Waiting for UID ......................
rdfUIDdb: 2020/08/13 09:09:11.792454 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.792458 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.792462 UID received  : 97XhWBF0QSaSAeAAkikyow==
grmgr: 2020/08/13 09:09:11.792664 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/13 09:09:11.792673 StartCh received for saveNode. rCnt = 3 
SaveRDFNode: xxx 2020/08/13 09:09:11.792687 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792693 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792700 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792746 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792756 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792763 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 09:09:11.792768 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 09:09:11.792772 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 09:09:11.792778 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0000178c0)}
SaveRDFNode: 2020/08/13 09:09:11.792782 Waiting for UID ......................
rdfUIDdb: 2020/08/13 09:09:11.792789 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.792793 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.792814 UID received  : bSlLj6pXQ0e8BR3wBn26PQ==
DB: 2020/08/13 09:09:11.794082 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.583743ms
DB: 2020/08/13 09:09:11.796179 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.692961ms
DB: 2020/08/13 09:09:11.797807 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.69578ms
SaveRDFNode: 2020/08/13 09:09:11.797819 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc1e0)}
rdfUIDdb: 2020/08/13 09:09:11.797825 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.797829 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.797834 Received UID: X18=
SaveRDFNode: 2020/08/13 09:09:11.797848 a: = db.Item{PKey:[]uint8{0xb5, 0xa1, 0x63, 0x93, 0x83, 0xdb, 0x47, 0x88, 0x95, 0x4, 0xef, 0x5d, 0x15, 0x32, 0x6, 0x5d}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 09:09:11.799851 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.635634ms
DB: 2020/08/13 09:09:11.801501 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.620562ms
SaveRDFNode: 2020/08/13 09:09:11.801512 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007cc1e0)}
rdfUIDdb: 2020/08/13 09:09:11.801517 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.801521 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.801526 Received UID: X18=
SaveRDFNode: 2020/08/13 09:09:11.801535 a: = db.Item{PKey:[]uint8{0xb5, 0xa1, 0x63, 0x93, 0x83, 0xdb, 0x47, 0x88, 0x95, 0x4, 0xef, 0x5d, 0x15, 0x32, 0x6, 0x5d}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 09:09:11.803355 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.474475ms
DB: 2020/08/13 09:09:11.805199 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.637862ms
SaveRDFNode: 2020/08/13 09:09:11.805388 Returned.+++++++++++ No error
grmgr: 2020/08/13 09:09:11.805465 EndCh received for saveNode. rCnt = 2 
DB: 2020/08/13 09:09:11.806809 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.425984ms
DB: 2020/08/13 09:09:11.809870 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 17.019758ms
DB: 2020/08/13 09:09:11.810529 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.690466ms
SaveRDFNode: 2020/08/13 09:09:11.810542 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000173e0)}
rdfUIDdb: 2020/08/13 09:09:11.810547 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.810551 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.810556 Received UID: X18=
SaveRDFNode: 2020/08/13 09:09:11.810567 a: = db.Item{PKey:[]uint8{0xf7, 0xb5, 0xe1, 0x58, 0x11, 0x74, 0x41, 0x26, 0x92, 0x1, 0xe0, 0x0, 0x92, 0x29, 0x32, 0xa3}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 09:09:11.813559 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.627526ms
DB: 2020/08/13 09:09:11.814135 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.538387ms
SaveRDFNode: 2020/08/13 09:09:11.814148 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000173e0)}
rdfUIDdb: 2020/08/13 09:09:11.814154 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.814158 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.814163 Received UID: X18=
SaveRDFNode: 2020/08/13 09:09:11.814173 a: = db.Item{PKey:[]uint8{0xf7, 0xb5, 0xe1, 0x58, 0x11, 0x74, 0x41, 0x26, 0x92, 0x1, 0xe0, 0x0, 0x92, 0x29, 0x32, 0xa3}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 09:09:11.817211 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.621281ms
DB: 2020/08/13 09:09:11.817921 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.719199ms
SaveRDFNode: 2020/08/13 09:09:11.817930 Returned.+++++++++++ No error
grmgr: 2020/08/13 09:09:11.817937 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/13 09:09:11.820835 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.595624ms
DB: 2020/08/13 09:09:11.824751 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.732102ms
SaveRDFNode: 2020/08/13 09:09:11.824766 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000178c0)}
rdfUIDdb: 2020/08/13 09:09:11.824772 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.824776 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.824781 Received UID: X18=
SaveRDFNode: 2020/08/13 09:09:11.824804 a: = db.Item{PKey:[]uint8{0x6d, 0x29, 0x4b, 0x8f, 0xaa, 0x57, 0x43, 0x47, 0xbc, 0x5, 0x1d, 0xf0, 0x6, 0x7d, 0xba, 0x3d}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 09:09:11.828467 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.633505ms
SaveRDFNode: 2020/08/13 09:09:11.828479 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000178c0)}
rdfUIDdb: 2020/08/13 09:09:11.828485 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 09:09:11.828489 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 09:09:11.828495 Received UID: X18=
SaveRDFNode: 2020/08/13 09:09:11.828506 a: = db.Item{PKey:[]uint8{0x6d, 0x29, 0x4b, 0x8f, 0xaa, 0x57, 0x43, 0x47, 0xbc, 0x5, 0x1d, 0xf0, 0x6, 0x7d, 0xba, 0x3d}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 09:09:11.832195 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.661752ms
SaveRDFNode: 2020/08/13 09:09:11.832205 Returned.+++++++++++ No error
rdfLoader: 2020/08/13 09:09:11.832211 saveNode finished waiting...exiting
grmgr: 2020/08/13 09:09:11.832217 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/13 09:09:11.832226 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/13 09:09:11.832230 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 09:09:11.832235 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 09:09:11.832245 goroutine about to start 1 
attachNode: 2020/08/13 09:09:11.832250 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/13 09:09:11.832255 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 09:09:11.832259 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 09:09:11.832262 goroutine about to start 2 
attachNode: 2020/08/13 09:09:11.832418 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/13 09:09:11.832428 StartCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/13 09:09:11.832433 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
grmgr: 2020/08/13 09:09:11.832437 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/13 09:09:11.835447 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.836349 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.838890 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.839329 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.841938 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.843201 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.844802 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.846698 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.848694 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.832415ms
DB: 2020/08/13 09:09:11.850613 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.871389ms
DB: 2020/08/13 09:09:11.855782 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.433282ms
FetchForUpdate: 2020/08/13 09:09:11.855800 ** Cache FetchForUpdate Cache Key Value: [97XhWBF0QSaSAeAAkikyow==]   sortk: A#G#:S
FetchNode: 2020/08/13 09:09:11.855808  node: 97XhWBF0QSaSAeAAkikyow== subKey: A#G#:S
FetchForUpdate: 2020/08/13 09:09:11.857761 ** Cache FetchForUpdate Cache Key Value: [3p502LTaRHC5k4XnTigEuA==]   sortk: A#
FetchNode: 2020/08/13 09:09:11.857779  node: 3p502LTaRHC5k4XnTigEuA== subKey: A#
DB: 2020/08/13 09:09:11.858997 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.592412ms
FetchForUpdate: 2020/08/13 09:09:11.859009 ** Cache FetchForUpdate Cache Key Value: [taFjk4PbR4iVBO9dFTIGXQ==]   sortk: A#G#:S
FetchNode: 2020/08/13 09:09:11.859014  node: taFjk4PbR4iVBO9dFTIGXQ== subKey: A#G#:S
FetchForUpdate: 2020/08/13 09:09:11.859348 ** Cache FetchForUpdate Cache Key Value: [3p502LTaRHC5k4XnTigEuA==]   sortk: A#
DB: 2020/08/13 09:09:11.860594 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.752059ms
FetchForUpdate: 2020/08/13 09:09:11.860654 len(nb): 1
fetchItems: 2020/08/13 09:09:11.860663 +++  Cache FetchItems for sortk A#G#:S UID: [97XhWBF0QSaSAeAAkikyow==] 
FetchNode: 2020/08/13 09:09:11.860667  node: 97XhWBF0QSaSAeAAkikyow== subKey: A#G#:S
DB: 2020/08/13 09:09:11.863104 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.235038ms
FetchForUpdate: 2020/08/13 09:09:11.863660 len(nb): 7
fetchItems: 2020/08/13 09:09:11.863692 +++  Cache FetchItems for sortk A# UID: [3p502LTaRHC5k4XnTigEuA==] 
FetchNode: 2020/08/13 09:09:11.863697  node: 3p502LTaRHC5k4XnTigEuA== subKey: A#
DB: 2020/08/13 09:09:11.867500 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 8.440945ms
FetchForUpdate: 2020/08/13 09:09:11.867565 len(nb): 1
fetchItems: 2020/08/13 09:09:11.867573 +++  Cache FetchItems for sortk A#G#:S UID: [taFjk4PbR4iVBO9dFTIGXQ==] 
FetchNode: 2020/08/13 09:09:11.867577  node: taFjk4PbR4iVBO9dFTIGXQ== subKey: A#G#:S
DB: 2020/08/13 09:09:11.871082 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 10.385467ms
DB: 2020/08/13 09:09:11.873199 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 9.436886ms
Unlock: 2020/08/13 09:09:11.873342 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/13 09:09:11.873379 +++  Cache FetchItems for sortk A# UID: [3p502LTaRHC5k4XnTigEuA==] 
FetchNode: 2020/08/13 09:09:11.873397  node: 3p502LTaRHC5k4XnTigEuA== subKey: A#
DB: 2020/08/13 09:09:11.876990 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.553037ms
DB: 2020/08/13 09:09:11.877375 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.194502ms
Unlock: 2020/08/13 09:09:11.877385 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
Unlock: 2020/08/13 09:09:11.880142 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/13 09:09:11.881166 ** Cache FetchForUpdate Cache Key Value: [97XhWBF0QSaSAeAAkikyow==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:11.881177 +++  Cache FetchItems for sortk A#G#:S UID: [97XhWBF0QSaSAeAAkikyow==] 
FetchNode: 2020/08/13 09:09:11.881208  node: 97XhWBF0QSaSAeAAkikyow== subKey: A#G#:S
DB: 2020/08/13 09:09:11.883414 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 15.792741ms
DB: 2020/08/13 09:09:11.887577 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.067107ms
Unlock: 2020/08/13 09:09:11.887587 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 09:09:11.887624 ** Cache FetchForUpdate Cache Key Value: [taFjk4PbR4iVBO9dFTIGXQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:11.887631 +++  Cache FetchItems for sortk A#G#:S UID: [taFjk4PbR4iVBO9dFTIGXQ==] 
FetchNode: 2020/08/13 09:09:11.887636  node: taFjk4PbR4iVBO9dFTIGXQ== subKey: A#G#:S
DB: 2020/08/13 09:09:11.891453 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.787417ms
DB: 2020/08/13 09:09:11.897132 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 15.890155ms
DB: 2020/08/13 09:09:11.898418 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.558731ms
DB: 2020/08/13 09:09:11.902399 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.804938ms
DB: 2020/08/13 09:09:11.903776 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.269705ms
DB: 2020/08/13 09:09:11.906583 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.787366ms
DB: 2020/08/13 09:09:11.908450 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.434054ms
DB: 2020/08/13 09:09:11.912555 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.779165ms
DB: 2020/08/13 09:09:11.913078 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.162272ms
DB: 2020/08/13 09:09:11.918937 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.541418ms
DB: 2020/08/13 09:09:11.919646 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.792434ms
DB: 2020/08/13 09:09:11.923313 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.871017ms
DB: 2020/08/13 09:09:11.924172 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.77555ms
DB: 2020/08/13 09:09:11.928241 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.769618ms
DB: 2020/08/13 09:09:11.929931 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.292184ms
DB: 2020/08/13 09:09:11.933617 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.40443ms
DB: 2020/08/13 09:09:11.934767 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.240605ms
DB: 2020/08/13 09:09:11.937412 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.72168ms
Unlock: 2020/08/13 09:09:11.937423 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 09:09:11.938579 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.762708ms
DB: 2020/08/13 09:09:11.941290 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.776435ms
FetchForUpdate: 2020/08/13 09:09:11.941379 ** Cache FetchForUpdate Cache Key Value: [taFjk4PbR4iVBO9dFTIGXQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:11.941389 +++  Cache FetchItems for sortk A#G#:S UID: [taFjk4PbR4iVBO9dFTIGXQ==] 
FetchNode: 2020/08/13 09:09:11.941394  node: taFjk4PbR4iVBO9dFTIGXQ== subKey: A#G#:S
DB: 2020/08/13 09:09:11.942628 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.727698ms
Unlock: 2020/08/13 09:09:11.942640 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 09:09:11.945417 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.990015ms
Cache: 2020/08/13 09:09:11.945517 In SetUpredAvailable: pUid, tUID:  taFjk4PbR4iVBO9dFTIGXQ== taFjk4PbR4iVBO9dFTIGXQ== A#G#:S
Cache: 2020/08/13 09:09:11.945524 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 09:09:11.947371 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.296849ms
FetchForUpdate: 2020/08/13 09:09:11.947383 ** Cache FetchForUpdate Cache Key Value: [97XhWBF0QSaSAeAAkikyow==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:11.947389 +++  Cache FetchItems for sortk A#G#:S UID: [97XhWBF0QSaSAeAAkikyow==] 
FetchNode: 2020/08/13 09:09:11.947394  node: 97XhWBF0QSaSAeAAkikyow== subKey: A#G#:S
DB: 2020/08/13 09:09:11.949096 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.540809ms
Unlock: 2020/08/13 09:09:11.949105 ******* IN UNLOCK NC ********************
DB: 2020/08/13 09:09:11.950460 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.036805ms
Cache: 2020/08/13 09:09:11.950543 In SetUpredAvailable: pUid, tUID:  97XhWBF0QSaSAeAAkikyow== 97XhWBF0QSaSAeAAkikyow== A#G#:S
Cache: 2020/08/13 09:09:11.950549 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 09:09:11.957100 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.613445ms
grmgr: 2020/08/13 09:09:11.957125 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/13 09:09:11.958110 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.5195ms
Unlock: 2020/08/13 09:09:11.958129 ******* IN UNLOCK NC ********************
DB: 2020/08/13 09:09:11.963153 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.91279ms
grmgr: 2020/08/13 09:09:11.963167 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/13 09:09:11.963172 Send ack to waiting nodeAttach...
attachNode: 2020/08/13 09:09:11.963178 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 09:09:11.963191 goroutine about to start 3 
attachNode: 2020/08/13 09:09:11.963200 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/13 09:09:11.963205 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 09:09:11.963209 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 09:09:11.963213 goroutine about to start 4 
attachNode: 2020/08/13 09:09:11.963576 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/13 09:09:11.963585 StartCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/13 09:09:11.963590 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
grmgr: 2020/08/13 09:09:11.963594 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/13 09:09:11.966732 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.967062 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.969580 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.970524 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.973356 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.973709 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.976478 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.976966 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:11.980896 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.872179ms
DB: 2020/08/13 09:09:11.981197 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.650799ms
DB: 2020/08/13 09:09:11.984948 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.960628ms
FetchForUpdate: 2020/08/13 09:09:11.984994 ** Cache FetchForUpdate Cache Key Value: [97XhWBF0QSaSAeAAkikyow==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:11.985002 +++  Cache FetchItems for sortk A#G#:S UID: [97XhWBF0QSaSAeAAkikyow==] 
FetchNode: 2020/08/13 09:09:11.985006  node: 97XhWBF0QSaSAeAAkikyow== subKey: A#G#:S
FetchForUpdate: 2020/08/13 09:09:11.985181 ** Cache FetchForUpdate Cache Key Value: [taFjk4PbR4iVBO9dFTIGXQ==]   sortk: A#
fetchItems: 2020/08/13 09:09:11.985190 +++  Cache FetchItems for sortk A# UID: [taFjk4PbR4iVBO9dFTIGXQ==] 
FetchNode: 2020/08/13 09:09:11.985201  node: taFjk4PbR4iVBO9dFTIGXQ== subKey: A#
DB: 2020/08/13 09:09:11.987107 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.803057ms
FetchForUpdate: 2020/08/13 09:09:11.987120 ** Cache FetchForUpdate Cache Key Value: [3p502LTaRHC5k4XnTigEuA==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:11.987125 +++  Cache FetchItems for sortk A#G#:S UID: [3p502LTaRHC5k4XnTigEuA==] 
FetchNode: 2020/08/13 09:09:11.987129  node: 3p502LTaRHC5k4XnTigEuA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 09:09:11.987461 ** Cache FetchForUpdate Cache Key Value: [taFjk4PbR4iVBO9dFTIGXQ==]   sortk: A#
DB: 2020/08/13 09:09:11.988175 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.134877ms
DB: 2020/08/13 09:09:11.990760 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 5.47512ms
Unlock: 2020/08/13 09:09:11.992362 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/13 09:09:11.992817 +++  Cache FetchItems for sortk A# UID: [taFjk4PbR4iVBO9dFTIGXQ==] 
FetchNode: 2020/08/13 09:09:11.992835  node: taFjk4PbR4iVBO9dFTIGXQ== subKey: A#
DB: 2020/08/13 09:09:11.994839 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 7.678168ms
DB: 2020/08/13 09:09:11.998390 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 9.585492ms
DB: 2020/08/13 09:09:12.001582 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 8.705341ms
Unlock: 2020/08/13 09:09:12.003113 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 09:09:12.006479 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 8.032282ms
DB: 2020/08/13 09:09:12.006614 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 8.032282ms
DB: 2020/08/13 09:09:12.013832 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 18.657429ms
Unlock: 2020/08/13 09:09:12.013966 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/13 09:09:12.014369 ** Cache FetchForUpdate Cache Key Value: [3p502LTaRHC5k4XnTigEuA==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:12.014379 +++  Cache FetchItems for sortk A#G#:S UID: [3p502LTaRHC5k4XnTigEuA==] 
FetchNode: 2020/08/13 09:09:12.014384  node: 3p502LTaRHC5k4XnTigEuA== subKey: A#G#:S
DB: 2020/08/13 09:09:12.023386 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 16.725151ms
DB: 2020/08/13 09:09:12.023500 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 16.725151ms
DB: 2020/08/13 09:09:12.028345 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.606975ms
DB: 2020/08/13 09:09:12.029515 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 15.091665ms
DB: 2020/08/13 09:09:12.032459 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.91533ms
Unlock: 2020/08/13 09:09:12.032575 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 09:09:12.035735 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.489416ms
DB: 2020/08/13 09:09:12.039651 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.246065ms
DB: 2020/08/13 09:09:12.040211 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.049761ms
DB: 2020/08/13 09:09:12.043492 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.484344ms
DB: 2020/08/13 09:09:12.044845 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.032809ms
DB: 2020/08/13 09:09:12.047958 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.807522ms
DB: 2020/08/13 09:09:12.051747 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.400628ms
DB: 2020/08/13 09:09:12.054711 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.197598ms
DB: 2020/08/13 09:09:12.055929 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.775228ms
DB: 2020/08/13 09:09:12.058806 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.590973ms
DB: 2020/08/13 09:09:12.060488 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.248803ms
DB: 2020/08/13 09:09:12.062999 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.712491ms
DB: 2020/08/13 09:09:12.067145 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.20976ms
DB: 2020/08/13 09:09:12.069876 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.188068ms
DB: 2020/08/13 09:09:12.070742 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.529759ms
DB: 2020/08/13 09:09:12.073381 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.451185ms
DB: 2020/08/13 09:09:12.074578 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.770381ms
Unlock: 2020/08/13 09:09:12.074590 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/13 09:09:12.077256 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.808601ms
DB: 2020/08/13 09:09:12.078965 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.764798ms
FetchForUpdate: 2020/08/13 09:09:12.078976 ** Cache FetchForUpdate Cache Key Value: [3p502LTaRHC5k4XnTigEuA==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:12.078982 +++  Cache FetchItems for sortk A#G#:S UID: [3p502LTaRHC5k4XnTigEuA==] 
FetchNode: 2020/08/13 09:09:12.078987  node: 3p502LTaRHC5k4XnTigEuA== subKey: A#G#:S
DB: 2020/08/13 09:09:12.081691 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.170667ms
FetchForUpdate: 2020/08/13 09:09:12.081703 ** Cache FetchForUpdate Cache Key Value: [97XhWBF0QSaSAeAAkikyow==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:12.081708 +++  Cache FetchItems for sortk A#G#:S UID: [97XhWBF0QSaSAeAAkikyow==] 
FetchNode: 2020/08/13 09:09:12.081713  node: 97XhWBF0QSaSAeAAkikyow== subKey: A#G#:S
DB: 2020/08/13 09:09:12.082167 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.146611ms
Cache: 2020/08/13 09:09:12.082257 In SetUpredAvailable: pUid, tUID:  3p502LTaRHC5k4XnTigEuA== 3p502LTaRHC5k4XnTigEuA== A#G#:S
Cache: 2020/08/13 09:09:12.082263 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 09:09:12.085246 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.500881ms
Cache: 2020/08/13 09:09:12.085455 In SetUpredAvailable: pUid, tUID:  97XhWBF0QSaSAeAAkikyow== vLmAInG5SxC5HdZaR39gtQ== A#G#:S
Cache: 2020/08/13 09:09:12.085463 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 09:09:12.086001 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.689284ms
Unlock: 2020/08/13 09:09:12.086011 ******* IN UNLOCK NC ********************
DB: 2020/08/13 09:09:12.089547 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.049755ms
Unlock: 2020/08/13 09:09:12.089861 ******* IN UNLOCK NC ********************
DB: 2020/08/13 09:09:12.095373 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.764437ms
grmgr: 2020/08/13 09:09:12.095389 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/13 09:09:12.096275 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.936214ms
grmgr: 2020/08/13 09:09:12.096287 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/13 09:09:12.096292 Send ack to waiting nodeAttach...
attachNode: 2020/08/13 09:09:12.096298 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 09:09:12.096302 goroutine about to start 5 
attachNode: 2020/08/13 09:09:12.096309 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/13 09:09:12.096317 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/13 09:09:12.096334 limiter has ACK and will start goroutine...
AttachNode: 2020/08/13 09:09:12.096339 goroutine about to start 6 
rdfLoader: 2020/08/13 09:09:12.096511 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/13 09:09:12.096521 StartCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/13 09:09:12.096536 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/13 09:09:12.099554 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:12.102881 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:12.106357 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:12.109092 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:12.111436 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:12.112839 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.677314ms
DB: 2020/08/13 09:09:12.115108 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:12.117212 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.103553ms
FetchForUpdate: 2020/08/13 09:09:12.117224 ** Cache FetchForUpdate Cache Key Value: [3p502LTaRHC5k4XnTigEuA==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:12.117230 +++  Cache FetchItems for sortk A#G#:S UID: [3p502LTaRHC5k4XnTigEuA==] 
FetchNode: 2020/08/13 09:09:12.117235  node: 3p502LTaRHC5k4XnTigEuA== subKey: A#G#:S
FetchForUpdate: 2020/08/13 09:09:12.117408 ** Cache FetchForUpdate Cache Key Value: [97XhWBF0QSaSAeAAkikyow==]   sortk: A#
fetchItems: 2020/08/13 09:09:12.117418 +++  Cache FetchItems for sortk A# UID: [97XhWBF0QSaSAeAAkikyow==] 
FetchNode: 2020/08/13 09:09:12.117429  node: 97XhWBF0QSaSAeAAkikyow== subKey: A#
DB: 2020/08/13 09:09:12.118018 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:12.120337 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.063763ms
DB: 2020/08/13 09:09:12.121865 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.393041ms
Unlock: 2020/08/13 09:09:12.123984 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 09:09:12.124607 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
} 
DB: 2020/08/13 09:09:12.128487 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.831902ms
DB: 2020/08/13 09:09:12.128849 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.801476ms
DB: 2020/08/13 09:09:12.133127 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.558717ms
FetchForUpdate: 2020/08/13 09:09:12.133142 ** Cache FetchForUpdate Cache Key Value: [taFjk4PbR4iVBO9dFTIGXQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:12.133149 +++  Cache FetchItems for sortk A#G#:S UID: [taFjk4PbR4iVBO9dFTIGXQ==] 
FetchNode: 2020/08/13 09:09:12.133154  node: taFjk4PbR4iVBO9dFTIGXQ== subKey: A#G#:S
FetchForUpdate: 2020/08/13 09:09:12.133334 ** Cache FetchForUpdate Cache Key Value: [97XhWBF0QSaSAeAAkikyow==]   sortk: A#
fetchItems: 2020/08/13 09:09:12.133344 +++  Cache FetchItems for sortk A# UID: [97XhWBF0QSaSAeAAkikyow==] 
FetchNode: 2020/08/13 09:09:12.133355  node: 97XhWBF0QSaSAeAAkikyow== subKey: A#
DB: 2020/08/13 09:09:12.136275 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.087761ms
DB: 2020/08/13 09:09:12.140745 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.993538ms
DB: 2020/08/13 09:09:12.144586 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.711761ms
DB: 2020/08/13 09:09:12.144605 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.711761ms
DB: 2020/08/13 09:09:12.146920 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 18.033703ms
DB: 2020/08/13 09:09:12.146936 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 18.033703ms
DB: 2020/08/13 09:09:12.148172 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.52226ms
DB: 2020/08/13 09:09:12.148188 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.52226ms
DB: 2020/08/13 09:09:12.150068 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 16.672705ms
Unlock: 2020/08/13 09:09:12.150804 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/13 09:09:12.151295 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.324013ms
DB: 2020/08/13 09:09:12.151309 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.324013ms
DB: 2020/08/13 09:09:12.152542 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.163133ms
DB: 2020/08/13 09:09:12.156092 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.28457ms
DB: 2020/08/13 09:09:12.157233 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.402081ms
Unlock: 2020/08/13 09:09:12.157245 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 09:09:12.161068 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.745704ms
Unlock: 2020/08/13 09:09:12.161079 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/13 09:09:12.164891 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.488734ms
DB: 2020/08/13 09:09:12.168234 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.431701ms
DB: 2020/08/13 09:09:12.170317 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.845335ms
DB: 2020/08/13 09:09:12.174130 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.971802ms
DB: 2020/08/13 09:09:12.174739 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.027713ms
DB: 2020/08/13 09:09:12.178158 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.930252ms
DB: 2020/08/13 09:09:12.180435 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.635758ms
DB: 2020/08/13 09:09:12.184077 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.589484ms
DB: 2020/08/13 09:09:12.184586 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.367569ms
DB: 2020/08/13 09:09:12.188102 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.712242ms
DB: 2020/08/13 09:09:12.188774 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.760352ms
DB: 2020/08/13 09:09:12.192925 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.842739ms
DB: 2020/08/13 09:09:12.194213 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.697427ms
DB: 2020/08/13 09:09:12.198299 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.774597ms
DB: 2020/08/13 09:09:12.199005 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.729429ms
DB: 2020/08/13 09:09:12.202662 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.039092ms
DB: 2020/08/13 09:09:12.203072 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.762112ms
DB: 2020/08/13 09:09:12.206637 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.789652ms
FetchForUpdate: 2020/08/13 09:09:12.206650 ** Cache FetchForUpdate Cache Key Value: [taFjk4PbR4iVBO9dFTIGXQ==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:12.206656 +++  Cache FetchItems for sortk A#G#:S UID: [taFjk4PbR4iVBO9dFTIGXQ==] 
FetchNode: 2020/08/13 09:09:12.206661  node: taFjk4PbR4iVBO9dFTIGXQ== subKey: A#G#:S
DB: 2020/08/13 09:09:12.207941 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.042017ms
DB: 2020/08/13 09:09:12.209560 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.866708ms
Cache: 2020/08/13 09:09:12.209779 In SetUpredAvailable: pUid, tUID:  taFjk4PbR4iVBO9dFTIGXQ== XErqgQTWRSSxwfpwRGC0PQ== A#G#:S
Cache: 2020/08/13 09:09:12.209791 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 09:09:12.211777 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.653335ms
FetchForUpdate: 2020/08/13 09:09:12.211814 ** Cache FetchForUpdate Cache Key Value: [3p502LTaRHC5k4XnTigEuA==]   sortk: A#G#:S
fetchItems: 2020/08/13 09:09:12.211821 +++  Cache FetchItems for sortk A#G#:S UID: [3p502LTaRHC5k4XnTigEuA==] 
FetchNode: 2020/08/13 09:09:12.211825  node: 3p502LTaRHC5k4XnTigEuA== subKey: A#G#:S
DB: 2020/08/13 09:09:12.213560 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.711164ms
Unlock: 2020/08/13 09:09:12.213571 ******* IN UNLOCK NC ********************
DB: 2020/08/13 09:09:12.214871 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.01444ms
Cache: 2020/08/13 09:09:12.214950 In SetUpredAvailable: pUid, tUID:  3p502LTaRHC5k4XnTigEuA== OiC6rFtKS4qfLlknwQXxgQ== A#G#:S
Cache: 2020/08/13 09:09:12.214973 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/13 09:09:12.218721 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.715564ms
Unlock: 2020/08/13 09:09:12.218731 ******* IN UNLOCK NC ********************
DB: 2020/08/13 09:09:12.220143 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.055256ms
grmgr: 2020/08/13 09:09:12.220268 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/13 09:09:12.225492 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.190765ms
rdfLoader: 2020/08/13 09:09:12.225578 saveNode finished waiting...exiting
rdfuuid: 2020/08/13 09:09:12.225591 Powering down...
grmgr: 2020/08/13 09:09:12.225653 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/13 09:09:12.225660 Powering down...
DB:2020/08/13 10:05:00 log.go:18: ===============================================================================
grmgr: 2020/08/13 10:05:00.817646 Powering on...
rdfLoader: 2020/08/13 10:05:00.818322 verify started....xx.
rdfLoader: 2020/08/13 10:05:00.818345 saveNode started......
rdfLoader: 2020/08/13 10:05:00.818350 define saveNode limiter......
rdfuuid: 2020/08/13 10:05:00.818360 Powering on...
rdfLoader: 2020/08/13 10:05:00.818367 *************** All started 
rdfLoader: 2020/08/13 10:05:00.826140 .  getType..
rdfLoader: 2020/08/13 10:05:00.826151 node.TyName : [Person]
DB: 2020/08/13 10:05:00.902418 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 76.216496ms
verify: 2020/08/13 10:05:00.902578 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:7, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:8, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 10:05:00.902595  Send Ask request to limiter.
verify: 2020/08/13 10:05:00.902600 Verify is waiting from ACK from gcmgr....to proceed to run go routine
DB:2020/08/13 10:05:36 log.go:18: ===============================================================================
grmgr: 2020/08/13 10:05:36.136985 Powering on...
rdfLoader: 2020/08/13 10:05:36.138799 verify started....xx.
rdfLoader: 2020/08/13 10:05:36.138823 saveNode started......
rdfLoader: 2020/08/13 10:05:36.138828 define saveNode limiter......
rdfuuid: 2020/08/13 10:05:36.138838 Powering on...
rdfLoader: 2020/08/13 10:05:36.138845 *************** All started 
rdfLoader: 2020/08/13 10:05:36.143393 .  getType..
rdfLoader: 2020/08/13 10:05:36.143404 node.TyName : [Person]
DB: 2020/08/13 10:05:36.215884 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 72.425053ms
verify: 2020/08/13 10:05:36.216150 Pass to unmarshal... 0 &ds.Node{ID:"abc", TyName:"Person", Lines:[]ds.Line{ds.Line{N:2, Subj:"abc", Pred:"Name", Obj:"Ross Payne"}, ds.Line{N:3, Subj:"abc", Pred:"DOB", Obj:"13 March 1958"}, ds.Line{N:4, Subj:"abc", Pred:"Age", Obj:"62"}, ds.Line{N:5, Subj:"abc", Pred:"Siblings", Obj:"b"}, ds.Line{N:7, Subj:"abc", Pred:"Siblings", Obj:"c"}, ds.Line{N:8, Subj:"abc", Pred:"Cars", Obj:"Fiat"}, ds.Line{N:9, Subj:"abc", Pred:"Cars", Obj:"Honda"}, ds.Line{N:10, Subj:"abc", Pred:"Cars", Obj:"Alfa"}}, Err:[]error(nil)}
verify: 2020/08/13 10:05:36.216239  Send Ask request to limiter.
verify: 2020/08/13 10:05:36.216244 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 10:05:36.216782 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
verify: 2020/08/13 10:05:36.216792 ACK from gcmgr....received...
rdfLoader: 2020/08/13 10:05:36.216798 .  getType..
rdfLoader: 2020/08/13 10:05:36.216803 node.TyName : [Person]
verify: 2020/08/13 10:05:36.216842 Pass to unmarshal... 1 &ds.Node{ID:"b", TyName:"Person", Lines:[]ds.Line{ds.Line{N:13, Subj:"b", Pred:"Name", Obj:"Paul Payne"}, ds.Line{N:14, Subj:"b", Pred:"DOB", Obj:"2 June 1960"}, ds.Line{N:15, Subj:"b", Pred:"Age", Obj:"58"}, ds.Line{N:16, Subj:"b", Pred:"Siblings", Obj:"abc"}, ds.Line{N:17, Subj:"b", Pred:"Siblings", Obj:"c"}, ds.Line{N:18, Subj:"b", Pred:"Cars", Obj:"Holden Commodore"}, ds.Line{N:19, Subj:"b", Pred:"Cars", Obj:"Honda"}, ds.Line{N:20, Subj:"b", Pred:"Cars", Obj:"VW Golf"}}, Err:[]error(nil)}
verify: 2020/08/13 10:05:36.216847  Send Ask request to limiter.
verify: 2020/08/13 10:05:36.216852 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 10:05:36.216864 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
unmarshalRDF2020/08/13 10:05:36.216878 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 10:05:36.216886 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/13 10:05:36.216896 Send ack to waiting unmarshall...
grmgr: 2020/08/13 10:05:36.216902 StartCh received for unmarshall. rCnt = 2 
rdfLoader: 2020/08/13 10:05:36.216909 Find Ty Address
rdfLoader: 2020/08/13 10:05:36.216914 Find Ty Age
rdfLoader: 2020/08/13 10:05:36.216920 Find Ty Cars
rdfLoader: 2020/08/13 10:05:36.216931 Add to SS . [Honda]
rdfLoader: 2020/08/13 10:05:36.216936 Add to SS . [Alfa]
rdfLoader: 2020/08/13 10:05:36.216941 Find Ty DOB
rdfLoader: 2020/08/13 10:05:36.216946 Find Ty Friends
rdfLoader: 2020/08/13 10:05:36.216951 Find Ty Jobs
rdfLoader: 2020/08/13 10:05:36.216960 Find Ty Name
rdfLoader: 2020/08/13 10:05:36.216965 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 10:05:36.216969 Find Ty Siblings
rdfLoader: 2020/08/13 10:05:36.216999 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 10:05:36.217051 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 10:05:36.217057 Exit  unmarshalRDF. 
grmgr: 2020/08/13 10:05:36.217065 EndCh received for unmarshall. rCnt = 1 
verify: 2020/08/13 10:05:36.217076 ACK from gcmgr....received...
verify: 2020/08/13 10:05:36.217082 *** Verify back to waiting on veryifyCh
unmarshalRDF2020/08/13 10:05:36.217622 Entered unmarshalRDF. About to lmtr.StartR()
grmgr: 2020/08/13 10:05:36.217966 StartCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/13 10:05:36.217975 StartCh received for unmarshall. rCnt = 3 
rdfLoader: 2020/08/13 10:05:36.217982 Find Ty Address
rdfLoader: 2020/08/13 10:05:36.217986 Find Ty Age
rdfLoader: 2020/08/13 10:05:36.217992 Find Ty Cars
rdfLoader: 2020/08/13 10:05:36.218002 Add to SS . [Honda]
rdfLoader: 2020/08/13 10:05:36.218007 Add to SS . [VW Golf]
rdfLoader: 2020/08/13 10:05:36.218012 Find Ty DOB
rdfLoader: 2020/08/13 10:05:36.218017 Find Ty Friends
rdfLoader: 2020/08/13 10:05:36.218021 Find Ty Jobs
rdfLoader: 2020/08/13 10:05:36.218029 Find Ty Name
rdfLoader: 2020/08/13 10:05:36.218034 Find Ty SalaryLast3Year
rdfLoader: 2020/08/13 10:05:36.218038 Find Ty Siblings
rdfLoader: 2020/08/13 10:05:36.218056 Add Type to NV........................... ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
rdfLoader: 2020/08/13 10:05:36.218107 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/13 10:05:36.218112 Exit  unmarshalRDF. 
grmgr: 2020/08/13 10:05:36.218120 EndCh received for unmarshall. rCnt = 2 
saveNode: 2020/08/13 10:05:36.218132 read from saveCH channel 1 
grmgr: 2020/08/13 10:05:36.218138 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
saveNode: 2020/08/13 10:05:36.218144 limiter has ACK and will start goroutine...
saveNode: 2020/08/13 10:05:36.218154 read from saveCH channel 2 
grmgr: 2020/08/13 10:05:36.218160 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
SaveRDFNode: xxx 2020/08/13 10:05:36.218188 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218210 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218219 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218230 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218237 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218243 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218254 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 10:05:36.218264 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 10:05:36.218279 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017500)}
SaveRDFNode: 2020/08/13 10:05:36.218283 Waiting for UID ......................
rdfUIDdb: 2020/08/13 10:05:36.218299 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 10:05:36.218304 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 10:05:36.218311 UID received  : lsyMZTYaS9iKT5KGa2CvQg==
grmgr: 2020/08/13 10:05:36.218555 StartCh received for saveNode. rCnt = 1 
grmgr: 2020/08/13 10:05:36.218563 Send ack to waiting saveNode...
saveNode: 2020/08/13 10:05:36.218575 limiter has ACK and will start goroutine...
SaveRDFNode: xxx 2020/08/13 10:05:36.218621 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218635 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218641 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218647 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218663 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218670 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/13 10:05:36.218676 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/13 10:05:36.218685 SaveRDFNode : 7 
SaveRDFNode: 2020/08/13 10:05:36.218691 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017c20)}
SaveRDFNode: 2020/08/13 10:05:36.218696 Waiting for UID ......................
rdfUIDdb: 2020/08/13 10:05:36.218704 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 10:05:36.218708 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 10:05:36.219011 UID received  : fOV7LDNMT9+FeQws3HqOeQ==
grmgr: 2020/08/13 10:05:36.219361 StartCh received for saveNode. rCnt = 2 
rdfLoader: 2020/08/13 10:05:36.221734 .  getType..
rdfLoader: 2020/08/13 10:05:36.221744 node.TyName : [Person]
verify: 2020/08/13 10:05:36.221768 Pass to unmarshal... 0 &ds.Node{ID:"c", TyName:"Person", Lines:[]ds.Line{ds.Line{N:1, Subj:"c", Pred:"Name", Obj:"Ian Payne"}, ds.Line{N:2, Subj:"c", Pred:"DOB", Obj:"29 Jan 1953"}, ds.Line{N:3, Subj:"c", Pred:"Age", Obj:"67"}, ds.Line{N:4, Subj:"c", Pred:"Siblings", Obj:"abc"}, ds.Line{N:5, Subj:"c", Pred:"Siblings", Obj:"b"}, ds.Line{N:6, Subj:"c", Pred:"Cars", Obj:"VW Passat"}, ds.Line{N:7, Subj:"c", Pred:"Cars", Obj:"Mitsubishi"}, ds.Line{N:8, Subj:"c", Pred:"Cars", Obj:"Ford Laser"}, ds.Line{N:9, Subj:"c", Pred:"Cars", Obj:"Honda"}}, Err:[]error(nil)}
verify: 2020/08/13 10:05:36.221773  Send Ask request to limiter.
verify: 2020/08/13 10:05:36.221777 Verify is waiting from ACK from gcmgr....to proceed to run go routine
grmgr: 2020/08/13 10:05:36.221788 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
DB: 2020/08/13 10:05:36.225966 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.616383ms
DB: 2020/08/13 10:05:36.229595 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.544056ms
DB: 2020/08/13 10:05:36.233061 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.431459ms
DB: 2020/08/13 10:05:36.236499 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.274389ms
DB: 2020/08/13 10:05:36.239368 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 13.369494ms
DB: 2020/08/13 10:05:36.239784 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.243471ms
DB: 2020/08/13 10:05:36.242860 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.448154ms
DB: 2020/08/13 10:05:36.243227 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.413138ms
SaveRDFNode: 2020/08/13 10:05:36.243245 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017c20)}
rdfUIDdb: 2020/08/13 10:05:36.243252 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 10:05:36.243256 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 10:05:36.243262 Received UID: X18=
SaveRDFNode: 2020/08/13 10:05:36.243275 a: = db.Item{PKey:[]uint8{0x7c, 0xe5, 0x7b, 0x2c, 0x33, 0x4c, 0x4f, 0xdf, 0x85, 0x79, 0xc, 0x2c, 0xdc, 0x7a, 0x8e, 0x79}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 10:05:36.246357 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.053521ms
SaveRDFNode: 2020/08/13 10:05:36.246369 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017c20)}
rdfUIDdb: 2020/08/13 10:05:36.246374 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 10:05:36.246378 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 10:05:36.246383 Received UID: X18=
SaveRDFNode: 2020/08/13 10:05:36.246395 a: = db.Item{PKey:[]uint8{0x7c, 0xe5, 0x7b, 0x2c, 0x33, 0x4c, 0x4f, 0xdf, 0x85, 0x79, 0xc, 0x2c, 0xdc, 0x7a, 0x8e, 0x79}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 10:05:36.246633 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.726454ms
DB: 2020/08/13 10:05:36.249734 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.30803ms
SaveRDFNode: 2020/08/13 10:05:36.249852 Returned.+++++++++++ No error
grmgr: 2020/08/13 10:05:36.249867 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/13 10:05:36.250111 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.449805ms
SaveRDFNode: 2020/08/13 10:05:36.250123 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017500)}
rdfUIDdb: 2020/08/13 10:05:36.250129 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 10:05:36.250133 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 10:05:36.250138 Received UID: X18=
SaveRDFNode: 2020/08/13 10:05:36.250149 a: = db.Item{PKey:[]uint8{0x96, 0xcc, 0x8c, 0x65, 0x36, 0x1a, 0x4b, 0xd8, 0x8a, 0x4f, 0x92, 0x86, 0x6b, 0x60, 0xaf, 0x42}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 10:05:36.253392 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.202853ms
SaveRDFNode: 2020/08/13 10:05:36.253404 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017500)}
rdfUIDdb: 2020/08/13 10:05:36.253409 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/13 10:05:36.253413 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/13 10:05:36.253419 Received UID: X18=
SaveRDFNode: 2020/08/13 10:05:36.253428 a: = db.Item{PKey:[]uint8{0x96, 0xcc, 0x8c, 0x65, 0x36, 0x1a, 0x4b, 0xd8, 0x8a, 0x4f, 0x92, 0x86, 0x6b, 0x60, 0xaf, 0x42}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/13 10:05:36.256639 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.18292ms
SaveRDFNode: 2020/08/13 10:05:36.256650 Returned.+++++++++++ No error
grmgr: 2020/08/13 10:05:36.256658 EndCh received for saveNode. rCnt = 0 

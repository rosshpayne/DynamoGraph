DB:2020/08/14 05:41:25 log.go:18: ===============================================================================
errlog: 2020/08/14 05:41:25.149512 Powering on...
rdfLoader: 2020/08/14 05:41:25.149550 saveNode started......
rdfLoader: 2020/08/14 05:41:25.149556 define saveNode limiter......
rdfuuid: 2020/08/14 05:41:25.149564 Powering on...
rdfLoader: 2020/08/14 05:41:25.149570  principle goroutines started 
RDFreader: 2020/08/14 05:41:25.149597 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 05:41:25.149611 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 05:41:25.149617 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 05:41:25.149623 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 05:41:25.149629 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 05:41:25.149634 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 05:41:25.149638 spo read:      
RDFreader: 2020/08/14 05:41:25.149643 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 05:41:25.149649 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 05:41:25.149654 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 05:41:25.149659 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 05:41:25.149663 spo read:      
RDFreader: 2020/08/14 05:41:25.149668 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 05:41:25.149673 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 05:41:25.149678 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 05:41:25.149683 spo read:  b  Age  "58"
RDFreader: 2020/08/14 05:41:25.149688 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 05:41:25.149693 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 05:41:25.149699 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 05:41:25.149704 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 05:41:25.149709 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 05:41:25.149713 spo read:      
RDFreader: 2020/08/14 05:41:25.149718 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 05:41:25.149721 Send node batch on channel verifyCh
RDFreader: 2020/08/14 05:41:25.149726 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 05:41:25.149730 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 05:41:25.149735 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 05:41:25.149742 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 05:41:25.149748 spo read:  c  Age  "67"
RDFreader: 2020/08/14 05:41:25.149753 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 05:41:25.149757 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 05:41:25.149762 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 05:41:25.149767 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 05:41:25.149774 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 05:41:25.149779 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 05:41:25.149784 spo read:      
RDFreader: 2020/08/14 05:41:25.149789 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 05:41:25.149793 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 05:41:25.149798 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 05:41:25.149803 spo read:  d  Age  "36"
RDFreader: 2020/08/14 05:41:25.149808 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 05:41:25.149815 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 05:41:25.149819 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 05:41:25.149822 close verify channel
rdfLoader: 2020/08/14 05:41:25.149826 wait for goroutines to end
grmgr: 2020/08/14 05:41:25.149842 Powering on...
DB:2020/08/14 05:41:47 log.go:18: ===============================================================================
errlog: 2020/08/14 05:41:47.125984 Powering on...
rdfLoader: 2020/08/14 05:41:47.127130 saveNode started......
rdfLoader: 2020/08/14 05:41:47.127146 define saveNode limiter......
rdfuuid: 2020/08/14 05:41:47.127156 Powering on...
rdfLoader: 2020/08/14 05:41:47.127163  principle goroutines started 
RDFreader: 2020/08/14 05:41:47.127194 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 05:41:47.127210 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 05:41:47.127216 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 05:41:47.127230 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 05:41:47.127236 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 05:41:47.127241 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 05:41:47.127246 spo read:      
RDFreader: 2020/08/14 05:41:47.127251 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 05:41:47.127256 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 05:41:47.127261 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 05:41:47.127267 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 05:41:47.127271 spo read:      
RDFreader: 2020/08/14 05:41:47.127276 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 05:41:47.127282 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 05:41:47.127287 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 05:41:47.127292 spo read:  b  Age  "58"
RDFreader: 2020/08/14 05:41:47.127297 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 05:41:47.127302 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 05:41:47.127308 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 05:41:47.127313 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 05:41:47.127317 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 05:41:47.127321 spo read:      
RDFreader: 2020/08/14 05:41:47.127327 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 05:41:47.127330 Send node batch on channel verifyCh
RDFreader: 2020/08/14 05:41:47.127336 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 05:41:47.127340 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 05:41:47.127345 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 05:41:47.127352 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 05:41:47.127358 spo read:  c  Age  "67"
RDFreader: 2020/08/14 05:41:47.127363 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 05:41:47.127368 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 05:41:47.127373 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 05:41:47.127378 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 05:41:47.127385 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 05:41:47.127390 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 05:41:47.127394 spo read:      
RDFreader: 2020/08/14 05:41:47.127399 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 05:41:47.127404 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 05:41:47.127409 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 05:41:47.127414 spo read:  d  Age  "36"
RDFreader: 2020/08/14 05:41:47.127419 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 05:41:47.127426 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 05:41:47.127430 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 05:41:47.127434 close verify channel
rdfLoader: 2020/08/14 05:41:47.127437 wait for goroutines to end
grmgr: 2020/08/14 05:41:47.127455 Powering on...
DB:2020/08/14 05:42:06 log.go:18: ===============================================================================
errlog: 2020/08/14 05:42:06.077932 Powering on...
rdfLoader: 2020/08/14 05:42:06.077972 saveNode started......
rdfLoader: 2020/08/14 05:42:06.077978 define saveNode limiter......
rdfuuid: 2020/08/14 05:42:06.077986 Powering on...
grmgr: 2020/08/14 05:42:06.078003 Powering on...
rdfLoader: 2020/08/14 05:42:06.078013  principle goroutines started 
RDFreader: 2020/08/14 05:42:06.078040 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 05:42:06.078054 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 05:42:06.078061 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 05:42:06.078067 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 05:42:06.078073 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 05:42:06.078078 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 05:42:06.078083 spo read:      
RDFreader: 2020/08/14 05:42:06.078088 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 05:42:06.078093 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 05:42:06.078099 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 05:42:06.078104 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 05:42:06.078114 spo read:      
RDFreader: 2020/08/14 05:42:06.078119 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 05:42:06.078124 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 05:42:06.078130 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 05:42:06.078135 spo read:  b  Age  "58"
RDFreader: 2020/08/14 05:42:06.078140 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 05:42:06.078145 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 05:42:06.078150 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 05:42:06.078155 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 05:42:06.078159 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 05:42:06.078164 spo read:      
RDFreader: 2020/08/14 05:42:06.078169 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 05:42:06.078172 Send node batch on channel verifyCh
RDFreader: 2020/08/14 05:42:06.078178 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 05:42:06.078182 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 05:42:06.078187 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 05:42:06.078194 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 05:42:06.078199 spo read:  c  Age  "67"
RDFreader: 2020/08/14 05:42:06.078204 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 05:42:06.078209 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 05:42:06.078216 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 05:42:06.078221 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 05:42:06.078225 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 05:42:06.078230 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 05:42:06.078235 spo read:      
RDFreader: 2020/08/14 05:42:06.078240 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 05:42:06.078245 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 05:42:06.078250 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 05:42:06.078255 spo read:  d  Age  "36"
RDFreader: 2020/08/14 05:42:06.078260 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 05:42:06.078270 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 05:42:06.078275 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 05:42:06.078279 close verify channel
rdfLoader: 2020/08/14 05:42:06.078282 wait for goroutines to end
rdfLoader: 2020/08/14 05:42:06.078287 verify started....
rdfLoader: 2020/08/14 05:42:06.078291 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 05:42:06.078295 .  getType..
rdfLoader: 2020/08/14 05:42:06.078299 node.TyName : [Person]
DB: 2020/08/14 05:42:06.195926 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 117.560575ms
grmgr: 2020/08/14 05:42:06.196086 Looping..... 0
grmgr: 2020/08/14 05:42:06.196410 Looping..... 1
grmgr: 2020/08/14 05:42:06.196435 Looping..... 2
grmgr: 2020/08/14 05:42:06.196597 Looping..... 3
grmgr: 2020/08/14 05:42:06.196778 Looping..... 4
grmgr: 2020/08/14 05:42:06.196961 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 05:42:06.196973 .  getType..
rdfLoader: 2020/08/14 05:42:06.196978 node.TyName : [Person]
grmgr: 2020/08/14 05:42:06.196984 Looping..... 0
unmarshalRDF2020/08/14 05:42:06.196997 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:42:06.197007 Looping..... 1
grmgr: 2020/08/14 05:42:06.197013 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 05:42:06.197017 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 05:42:06.197025 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 05:42:06.197029 .  getType..
rdfLoader: 2020/08/14 05:42:06.197033 node.TyName : [Person]
grmgr: 2020/08/14 05:42:06.197038 Looping..... 0
rdfLoader: 2020/08/14 05:42:06.197048 Add to SS . [Honda]
rdfLoader: 2020/08/14 05:42:06.197053 Add to SS . [Alfa]
unmarshalRDF2020/08/14 05:42:06.197120 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:42:06.197138 Exit  unmarshalRDF. 
saveNode: 2020/08/14 05:42:06.197144 read from saveCH channel 1 
unmarshalRDF2020/08/14 05:42:06.197154 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:42:06.197180 Looping..... 1
grmgr: 2020/08/14 05:42:06.197186 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 05:42:06.197191 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 05:42:06.197196 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 05:42:06.197201 Looping..... 0
rdfLoader: 2020/08/14 05:42:06.197210 Add to SS . [Honda]
rdfLoader: 2020/08/14 05:42:06.197215 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 05:42:06.197253 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:42:06.197258 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 05:42:06.197264 .  getType..
rdfLoader: 2020/08/14 05:42:06.197268 node.TyName : [Person]
unmarshalRDF2020/08/14 05:42:06.197277 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:42:06.197288 Looping..... 1
rdfLoader: 2020/08/14 05:42:06.197297 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 05:42:06.197302 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 05:42:06.197306 Add to SS . [Honda]
unmarshalRDF2020/08/14 05:42:06.197351 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:42:06.197356 Exit  unmarshalRDF. 
grmgr: 2020/08/14 05:42:06.197381 Looping..... 2
grmgr: 2020/08/14 05:42:06.197568 Looping..... 3
grmgr: 2020/08/14 05:42:06.197749 Looping..... 4
grmgr: 2020/08/14 05:42:06.197940 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 05:42:06.197950 Looping..... 0
saveNode: 2020/08/14 05:42:06.197956 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 05:42:06.197963 read from saveCH channel 2 
grmgr: 2020/08/14 05:42:06.197989 Looping..... 1
SaveRDFNode: xxx 2020/08/14 05:42:06.198000 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.198006 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.198013 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.198019 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.198024 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.198030 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.198042 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:42:06.198046 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:42:06.198059 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017680)}
SaveRDFNode: 2020/08/14 05:42:06.198063 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:42:06.198074 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.198078 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.198094 UID received  : hxq7CIfpScOaBg0v1EhG6g==
grmgr: 2020/08/14 05:42:06.198357 Looping..... 2
grmgr: 2020/08/14 05:42:06.198542 Looping..... 3
grmgr: 2020/08/14 05:42:06.198724 Looping..... 4
grmgr: 2020/08/14 05:42:06.198906 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 05:42:06.198916 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 05:42:06.198921 Looping..... 0
unmarshalRDF2020/08/14 05:42:06.198936 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:42:06.198947 Looping..... 1
rdfLoader: 2020/08/14 05:42:06.198956 Add to SS . [Bentley]
unmarshalRDF2020/08/14 05:42:06.198992 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:42:06.198997 Exit  unmarshalRDF. 
grmgr: 2020/08/14 05:42:06.199007 Looping..... 2
grmgr: 2020/08/14 05:42:06.199091 Looping..... 3
grmgr: 2020/08/14 05:42:06.199272 Looping..... 4
grmgr: 2020/08/14 05:42:06.199454 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 05:42:06.199464 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 05:42:06.199469 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 05:42:06.199475 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 05:42:06.199481 read from saveCH channel 3 
grmgr: 2020/08/14 05:42:06.199486 Looping..... 0
grmgr: 2020/08/14 05:42:06.199512 Looping..... 1
grmgr: 2020/08/14 05:42:06.199517 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 05:42:06.199522 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 05:42:06.199532 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.199538 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.199545 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.199551 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.199556 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.199562 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.199568 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:42:06.199572 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:42:06.199609 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017da0)}
SaveRDFNode: 2020/08/14 05:42:06.199616 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:42:06.199630 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.199634 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.199640 UID received  : XX1fpDZ3Rl2fzIkduBLj/A==
DB: 2020/08/14 05:42:06.209416 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 11.286525ms
DB: 2020/08/14 05:42:06.214470 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.994596ms
DB: 2020/08/14 05:42:06.219582 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.881779ms
DB: 2020/08/14 05:42:06.224519 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.899034ms
DB: 2020/08/14 05:42:06.225657 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 25.98918ms
DB: 2020/08/14 05:42:06.229947 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.188853ms
SaveRDFNode: 2020/08/14 05:42:06.230124 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 05:42:06.230140 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.230145 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.230151 Received UID: X18=
SaveRDFNode: 2020/08/14 05:42:06.230165 a: = db.Item{PKey:[]uint8{0x87, 0x1a, 0xbb, 0x8, 0x87, 0xe9, 0x49, 0xc3, 0x9a, 0x6, 0xd, 0x2f, 0xd4, 0x48, 0x46, 0xea}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:42:06.230510 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.819367ms
DB: 2020/08/14 05:42:06.235349 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.799727ms
DB: 2020/08/14 05:42:06.235649 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.450266ms
SaveRDFNode: 2020/08/14 05:42:06.235663 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 05:42:06.235669 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.235673 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.235679 Received UID: X18=
SaveRDFNode: 2020/08/14 05:42:06.235691 a: = db.Item{PKey:[]uint8{0x87, 0x1a, 0xbb, 0x8, 0x87, 0xe9, 0x49, 0xc3, 0x9a, 0x6, 0xd, 0x2f, 0xd4, 0x48, 0x46, 0xea}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:42:06.240057 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.667301ms
DB: 2020/08/14 05:42:06.240723 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.999409ms
SaveRDFNode: 2020/08/14 05:42:06.240735 Returned.+++++++++++ No error
grmgr: 2020/08/14 05:42:06.240745 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 05:42:06.240750 Send ack to waiting saveNode...
saveNode: 2020/08/14 05:42:06.240756 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 05:42:06.240762 read from saveCH channel 4 
grmgr: 2020/08/14 05:42:06.240768 Looping..... 0
grmgr: 2020/08/14 05:42:06.240816 Looping..... 1
grmgr: 2020/08/14 05:42:06.240823 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 05:42:06.240828 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 05:42:06.240838 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.240846 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.240853 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.240862 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.240879 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.240885 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.240891 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:42:06.240895 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:42:06.240900 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000383440)}
SaveRDFNode: 2020/08/14 05:42:06.240905 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:42:06.240914 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.240919 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.240925 UID received  : PWvhVDfMS0KbmRdGEwk7Pg==
DB: 2020/08/14 05:42:06.244816 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.718135ms
SaveRDFNode: 2020/08/14 05:42:06.245000 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 05:42:06.245015 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.245019 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.245044 Received UID: X18=
SaveRDFNode: 2020/08/14 05:42:06.245060 a: = db.Item{PKey:[]uint8{0x5d, 0x7d, 0x5f, 0xa4, 0x36, 0x77, 0x46, 0x5d, 0x9f, 0xcc, 0x89, 0x1d, 0xb8, 0x12, 0xe3, 0xfc}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:42:06.245958 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.005158ms
DB: 2020/08/14 05:42:06.249730 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.633706ms
SaveRDFNode: 2020/08/14 05:42:06.249856 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 05:42:06.249869 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.249873 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.249879 Received UID: X18=
SaveRDFNode: 2020/08/14 05:42:06.249890 a: = db.Item{PKey:[]uint8{0x5d, 0x7d, 0x5f, 0xa4, 0x36, 0x77, 0x46, 0x5d, 0x9f, 0xcc, 0x89, 0x1d, 0xb8, 0x12, 0xe3, 0xfc}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:42:06.250979 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.98311ms
DB: 2020/08/14 05:42:06.254599 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.672724ms
SaveRDFNode: 2020/08/14 05:42:06.254613 Returned.+++++++++++ No error
grmgr: 2020/08/14 05:42:06.254623 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 05:42:06.254629 Send ack to waiting saveNode...
saveNode: 2020/08/14 05:42:06.254636 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 05:42:06.254641 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 05:42:06.254691 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.254700 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.254708 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.254714 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.254719 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.254726 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:42:06.254743 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:42:06.254747 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:42:06.254753 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000383f80)}
SaveRDFNode: 2020/08/14 05:42:06.254758 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:42:06.254768 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.254772 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.254778 UID received  : RqbJ9KnBQTicOoDTfHkL7w==
grmgr: 2020/08/14 05:42:06.254988 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 05:42:06.256454 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.440995ms
DB: 2020/08/14 05:42:06.259418 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.611322ms
DB: 2020/08/14 05:42:06.261557 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.064925ms
DB: 2020/08/14 05:42:06.264090 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.637771ms
DB: 2020/08/14 05:42:06.268797 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.671534ms
DB: 2020/08/14 05:42:06.271023 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.258093ms
SaveRDFNode: 2020/08/14 05:42:06.271038 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000383440)}
rdfUIDdb: 2020/08/14 05:42:06.271045 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.271049 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.271056 Received UID: X18=
SaveRDFNode: 2020/08/14 05:42:06.271068 a: = db.Item{PKey:[]uint8{0x3d, 0x6b, 0xe1, 0x54, 0x37, 0xcc, 0x4b, 0x42, 0x9b, 0x99, 0x17, 0x46, 0x13, 0x9, 0x3b, 0x3e}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:42:06.273758 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.827515ms
DB: 2020/08/14 05:42:06.276557 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.458054ms
SaveRDFNode: 2020/08/14 05:42:06.276574 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000383440)}
rdfUIDdb: 2020/08/14 05:42:06.276581 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.276585 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.276591 Received UID: X18=
SaveRDFNode: 2020/08/14 05:42:06.276602 a: = db.Item{PKey:[]uint8{0x3d, 0x6b, 0xe1, 0x54, 0x37, 0xcc, 0x4b, 0x42, 0x9b, 0x99, 0x17, 0x46, 0x13, 0x9, 0x3b, 0x3e}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:42:06.278374 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.581766ms
SaveRDFNode: 2020/08/14 05:42:06.278548 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000383f80)}
rdfUIDdb: 2020/08/14 05:42:06.278562 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.278567 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.278573 Received UID: X18=
SaveRDFNode: 2020/08/14 05:42:06.278585 a: = db.Item{PKey:[]uint8{0x46, 0xa6, 0xc9, 0xf4, 0xa9, 0xc1, 0x41, 0x38, 0x9c, 0x3a, 0x80, 0xd3, 0x7c, 0x79, 0xb, 0xef}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:42:06.281632 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.993118ms
SaveRDFNode: 2020/08/14 05:42:06.281651 Returned.+++++++++++ No error
grmgr: 2020/08/14 05:42:06.281661 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 05:42:06.283158 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.538304ms
SaveRDFNode: 2020/08/14 05:42:06.283183 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000383f80)}
rdfUIDdb: 2020/08/14 05:42:06.283190 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:42:06.283194 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:42:06.283199 Received UID: X18=
SaveRDFNode: 2020/08/14 05:42:06.283210 a: = db.Item{PKey:[]uint8{0x46, 0xa6, 0xc9, 0xf4, 0xa9, 0xc1, 0x41, 0x38, 0x9c, 0x3a, 0x80, 0xd3, 0x7c, 0x79, 0xb, 0xef}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:42:06.287898 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.656529ms
SaveRDFNode: 2020/08/14 05:42:06.289267 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 05:42:06.289286 saveNode finished waiting...exiting
grmgr: 2020/08/14 05:42:06.289294 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 05:42:06.289305 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 05:42:06.289310 Looping..... 0
grmgr: 2020/08/14 05:42:06.289400 Looping..... 1
grmgr: 2020/08/14 05:42:06.289581 Looping..... 2
grmgr: 2020/08/14 05:42:06.289759 Looping..... 3
grmgr: 2020/08/14 05:42:06.289937 Looping..... 4
grmgr: 2020/08/14 05:42:06.290138 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 05:42:06.290148 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:42:06.290153 goroutine about to start 1 
attachNode: 2020/08/14 05:42:06.290160 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 05:42:06.290164 Looping..... 0
grmgr: 2020/08/14 05:42:06.290186 Looping..... 1
grmgr: 2020/08/14 05:42:06.290192 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:42:06.290196 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 05:42:06.290201 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:42:06.290205 goroutine about to start 2 
attachNode: 2020/08/14 05:42:06.290210 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 05:42:06.290215 Looping..... 0
grmgr: 2020/08/14 05:42:06.291244 Looping..... 1
grmgr: 2020/08/14 05:42:06.291257 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:42:06.291262 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:42:06.293086 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.812747ms
DB: 2020/08/14 05:42:06.295509 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.198912ms
DB: 2020/08/14 05:42:06.296862 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.741388ms
DB: 2020/08/14 05:42:06.299728 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.021594ms
DB: 2020/08/14 05:42:06.300747 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.174136ms
DB: 2020/08/14 05:42:06.303420 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.647625ms
DB: 2020/08/14 05:42:06.303705 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.925963ms
DB: 2020/08/14 05:42:06.306913 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.460023ms
DB: 2020/08/14 05:42:06.308548 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.786733ms
DB: 2020/08/14 05:42:06.312163 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.17578ms
DB: 2020/08/14 05:42:06.318389 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 9.000347ms
FetchForUpdate: 2020/08/14 05:42:06.318406 ** Cache FetchForUpdate Cache Key Value: [XX1fpDZ3Rl2fzIkduBLj/A==]   sortk: A#G#:S
FetchNode: 2020/08/14 05:42:06.318423  node: XX1fpDZ3Rl2fzIkduBLj/A== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:42:06.318633 ** Cache FetchForUpdate Cache Key Value: [hxq7CIfpScOaBg0v1EhG6g==]   sortk: A#
FetchNode: 2020/08/14 05:42:06.318668  node: hxq7CIfpScOaBg0v1EhG6g== subKey: A#
DB: 2020/08/14 05:42:06.320591 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.241633ms
FetchForUpdate: 2020/08/14 05:42:06.320670 ** Cache FetchForUpdate Cache Key Value: [PWvhVDfMS0KbmRdGEwk7Pg==]   sortk: A#G#:S
FetchNode: 2020/08/14 05:42:06.320678  node: PWvhVDfMS0KbmRdGEwk7Pg== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:42:06.321007 ** Cache FetchForUpdate Cache Key Value: [hxq7CIfpScOaBg0v1EhG6g==]   sortk: A#
DB: 2020/08/14 05:42:06.321660 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.201543ms
FetchForUpdate: 2020/08/14 05:42:06.321709 len(nb): 1
fetchItems: 2020/08/14 05:42:06.321717 +++  Cache FetchItems for sortk A#G#:S UID: [XX1fpDZ3Rl2fzIkduBLj/A==] 
FetchNode: 2020/08/14 05:42:06.321722  node: XX1fpDZ3Rl2fzIkduBLj/A== subKey: A#G#:S
DB: 2020/08/14 05:42:06.324622 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.89904ms
FetchForUpdate: 2020/08/14 05:42:06.324898 len(nb): 7
fetchItems: 2020/08/14 05:42:06.324912 +++  Cache FetchItems for sortk A# UID: [hxq7CIfpScOaBg0v1EhG6g==] 
FetchNode: 2020/08/14 05:42:06.324917  node: hxq7CIfpScOaBg0v1EhG6g== subKey: A#
DB: 2020/08/14 05:42:06.326999 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.290334ms
FetchForUpdate: 2020/08/14 05:42:06.327037 len(nb): 1
fetchItems: 2020/08/14 05:42:06.327045 +++  Cache FetchItems for sortk A#G#:S UID: [PWvhVDfMS0KbmRdGEwk7Pg==] 
FetchNode: 2020/08/14 05:42:06.327087  node: PWvhVDfMS0KbmRdGEwk7Pg== subKey: A#G#:S
DB: 2020/08/14 05:42:06.330579 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 8.80986ms
DB: 2020/08/14 05:42:06.332429 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 7.482182ms
Unlock: 2020/08/14 05:42:06.336063 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/14 05:42:06.336744 +++  Cache FetchItems for sortk A# UID: [hxq7CIfpScOaBg0v1EhG6g==] 
FetchNode: 2020/08/14 05:42:06.336765  node: hxq7CIfpScOaBg0v1EhG6g== subKey: A#
DB: 2020/08/14 05:42:06.341268 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 9.803235ms
Unlock: 2020/08/14 05:42:06.341382 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/14 05:42:06.342227 ** Cache FetchForUpdate Cache Key Value: [XX1fpDZ3Rl2fzIkduBLj/A==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.342241 +++  Cache FetchItems for sortk A#G#:S UID: [XX1fpDZ3Rl2fzIkduBLj/A==] 
FetchNode: 2020/08/14 05:42:06.342246  node: XX1fpDZ3Rl2fzIkduBLj/A== subKey: A#G#:S
DB: 2020/08/14 05:42:06.345954 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.648904ms
DB: 2020/08/14 05:42:06.350592 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 23.474976ms
DB: 2020/08/14 05:42:06.353630 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 16.805677ms
Unlock: 2020/08/14 05:42:06.353809 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:42:06.356986 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.164996ms
Unlock: 2020/08/14 05:42:06.357007 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/14 05:42:06.357033 ** Cache FetchForUpdate Cache Key Value: [PWvhVDfMS0KbmRdGEwk7Pg==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.357049 +++  Cache FetchItems for sortk A#G#:S UID: [PWvhVDfMS0KbmRdGEwk7Pg==] 
FetchNode: 2020/08/14 05:42:06.357055  node: PWvhVDfMS0KbmRdGEwk7Pg== subKey: A#G#:S
DB: 2020/08/14 05:42:06.360405 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.318573ms
DB: 2020/08/14 05:42:06.366055 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 19.994368ms
DB: 2020/08/14 05:42:06.366650 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.155355ms
DB: 2020/08/14 05:42:06.371308 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.071097ms
DB: 2020/08/14 05:42:06.372340 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.509403ms
DB: 2020/08/14 05:42:06.377241 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.344827ms
DB: 2020/08/14 05:42:06.377989 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.074116ms
DB: 2020/08/14 05:42:06.384071 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.486072ms
DB: 2020/08/14 05:42:06.384732 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.412569ms
DB: 2020/08/14 05:42:06.389442 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.022006ms
DB: 2020/08/14 05:42:06.390082 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.03012ms
DB: 2020/08/14 05:42:06.395209 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.399843ms
DB: 2020/08/14 05:42:06.395815 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.401244ms
DB: 2020/08/14 05:42:06.402122 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.576929ms
DB: 2020/08/14 05:42:06.402725 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.58404ms
DB: 2020/08/14 05:42:06.407310 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.836357ms
DB: 2020/08/14 05:42:06.407935 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.908266ms
DB: 2020/08/14 05:42:06.412893 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.241404ms
Unlock: 2020/08/14 05:42:06.412910 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/14 05:42:06.413587 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.302823ms
Unlock: 2020/08/14 05:42:06.413600 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/14 05:42:06.418136 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.784833ms
FetchForUpdate: 2020/08/14 05:42:06.418150 ** Cache FetchForUpdate Cache Key Value: [XX1fpDZ3Rl2fzIkduBLj/A==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.418156 +++  Cache FetchItems for sortk A#G#:S UID: [XX1fpDZ3Rl2fzIkduBLj/A==] 
FetchNode: 2020/08/14 05:42:06.418161  node: XX1fpDZ3Rl2fzIkduBLj/A== subKey: A#G#:S
DB: 2020/08/14 05:42:06.418507 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.487102ms
FetchForUpdate: 2020/08/14 05:42:06.418519 ** Cache FetchForUpdate Cache Key Value: [PWvhVDfMS0KbmRdGEwk7Pg==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.418525 +++  Cache FetchItems for sortk A#G#:S UID: [PWvhVDfMS0KbmRdGEwk7Pg==] 
FetchNode: 2020/08/14 05:42:06.418539  node: PWvhVDfMS0KbmRdGEwk7Pg== subKey: A#G#:S
DB: 2020/08/14 05:42:06.421924 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.351518ms
Cache: 2020/08/14 05:42:06.422012 In SetUpredAvailable: pUid, tUID:  PWvhVDfMS0KbmRdGEwk7Pg== PWvhVDfMS0KbmRdGEwk7Pg== A#G#:S
Cache: 2020/08/14 05:42:06.422020 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:42:06.422398 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.20422ms
Cache: 2020/08/14 05:42:06.422478 In SetUpredAvailable: pUid, tUID:  XX1fpDZ3Rl2fzIkduBLj/A== XX1fpDZ3Rl2fzIkduBLj/A== A#G#:S
Cache: 2020/08/14 05:42:06.422485 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:42:06.426683 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.630611ms
Unlock: 2020/08/14 05:42:06.426696 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:42:06.427746 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.229856ms
Unlock: 2020/08/14 05:42:06.427758 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:42:06.434943 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.873257ms
grmgr: 2020/08/14 05:42:06.434967 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:42:06.434974 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:42:06.434980 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:42:06.434985 goroutine about to start 3 
attachNode: 2020/08/14 05:42:06.434991 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 05:42:06.434997 Looping..... 0
grmgr: 2020/08/14 05:42:06.435043 Looping..... 1
grmgr: 2020/08/14 05:42:06.435051 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:42:06.435056 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:42:06.437988 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.823203ms
DB: 2020/08/14 05:42:06.438381 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 10.264931ms
grmgr: 2020/08/14 05:42:06.438399 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:42:06.438405 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:42:06.438411 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:42:06.438416 goroutine about to start 4 
attachNode: 2020/08/14 05:42:06.438422 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 05:42:06.438427 Looping..... 0
grmgr: 2020/08/14 05:42:06.438454 Looping..... 1
grmgr: 2020/08/14 05:42:06.438460 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:42:06.438465 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:42:06.440872 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.845491ms
DB: 2020/08/14 05:42:06.441468 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.878034ms
DB: 2020/08/14 05:42:06.443849 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.843329ms
DB: 2020/08/14 05:42:06.444324 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.824391ms
DB: 2020/08/14 05:42:06.446941 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.060702ms
DB: 2020/08/14 05:42:06.447284 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.825434ms
DB: 2020/08/14 05:42:06.450532 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.218279ms
DB: 2020/08/14 05:42:06.451778 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.784952ms
DB: 2020/08/14 05:42:06.455912 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.296877ms
DB: 2020/08/14 05:42:06.456585 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.581703ms
FetchForUpdate: 2020/08/14 05:42:06.456602 ** Cache FetchForUpdate Cache Key Value: [hxq7CIfpScOaBg0v1EhG6g==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.456608 +++  Cache FetchItems for sortk A#G#:S UID: [hxq7CIfpScOaBg0v1EhG6g==] 
FetchNode: 2020/08/14 05:42:06.456613  node: hxq7CIfpScOaBg0v1EhG6g== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:42:06.456824 ** Cache FetchForUpdate Cache Key Value: [XX1fpDZ3Rl2fzIkduBLj/A==]   sortk: A#
fetchItems: 2020/08/14 05:42:06.457013 +++  Cache FetchItems for sortk A# UID: [XX1fpDZ3Rl2fzIkduBLj/A==] 
FetchNode: 2020/08/14 05:42:06.457031  node: XX1fpDZ3Rl2fzIkduBLj/A== subKey: A#
DB: 2020/08/14 05:42:06.460585 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.939613ms
DB: 2020/08/14 05:42:06.461059 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.949277ms
FetchForUpdate: 2020/08/14 05:42:06.461074 ** Cache FetchForUpdate Cache Key Value: [PWvhVDfMS0KbmRdGEwk7Pg==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.461079 +++  Cache FetchItems for sortk A#G#:S UID: [PWvhVDfMS0KbmRdGEwk7Pg==] 
FetchNode: 2020/08/14 05:42:06.461084  node: PWvhVDfMS0KbmRdGEwk7Pg== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:42:06.461273 ** Cache FetchForUpdate Cache Key Value: [XX1fpDZ3Rl2fzIkduBLj/A==]   sortk: A#
DB: 2020/08/14 05:42:06.464589 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.472366ms
DB: 2020/08/14 05:42:06.466723 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.941606ms
Unlock: 2020/08/14 05:42:06.466735 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:42:06.470025 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.272608ms
DB: 2020/08/14 05:42:06.474649 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 17.566164ms
Unlock: 2020/08/14 05:42:06.475431 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/14 05:42:06.475807 ** Cache FetchForUpdate Cache Key Value: [hxq7CIfpScOaBg0v1EhG6g==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.475821 +++  Cache FetchItems for sortk A#G#:S UID: [hxq7CIfpScOaBg0v1EhG6g==] 
FetchNode: 2020/08/14 05:42:06.475827  node: hxq7CIfpScOaBg0v1EhG6g== subKey: A#G#:S
fetchItems: 2020/08/14 05:42:06.476023 +++  Cache FetchItems for sortk A# UID: [XX1fpDZ3Rl2fzIkduBLj/A==] 
FetchNode: 2020/08/14 05:42:06.476071  node: XX1fpDZ3Rl2fzIkduBLj/A== subKey: A#
DB: 2020/08/14 05:42:06.476403 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.334429ms
DB: 2020/08/14 05:42:06.476422 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.334429ms
DB: 2020/08/14 05:42:06.479155 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.293559ms
DB: 2020/08/14 05:42:06.480457 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.339807ms
Unlock: 2020/08/14 05:42:06.482128 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:42:06.483950 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.469968ms
DB: 2020/08/14 05:42:06.483969 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.469968ms
DB: 2020/08/14 05:42:06.485737 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.195317ms
DB: 2020/08/14 05:42:06.490308 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.515483ms
DB: 2020/08/14 05:42:06.490676 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.591046ms
DB: 2020/08/14 05:42:06.495309 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.885724ms
DB: 2020/08/14 05:42:06.496005 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.262616ms
Unlock: 2020/08/14 05:42:06.496020 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:42:06.501641 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.258665ms
DB: 2020/08/14 05:42:06.502543 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.399847ms
DB: 2020/08/14 05:42:06.506275 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.567257ms
DB: 2020/08/14 05:42:06.507459 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.867225ms
DB: 2020/08/14 05:42:06.511195 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.84658ms
DB: 2020/08/14 05:42:06.512649 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.059904ms
DB: 2020/08/14 05:42:06.517562 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.30256ms
DB: 2020/08/14 05:42:06.518513 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.763435ms
DB: 2020/08/14 05:42:06.522281 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.654851ms
DB: 2020/08/14 05:42:06.523453 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.882214ms
DB: 2020/08/14 05:42:06.527405 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.054559ms
Unlock: 2020/08/14 05:42:06.527419 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/14 05:42:06.528645 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.120161ms
DB: 2020/08/14 05:42:06.532288 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.790359ms
FetchForUpdate: 2020/08/14 05:42:06.532306 ** Cache FetchForUpdate Cache Key Value: [hxq7CIfpScOaBg0v1EhG6g==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.532314 +++  Cache FetchItems for sortk A#G#:S UID: [hxq7CIfpScOaBg0v1EhG6g==] 
FetchNode: 2020/08/14 05:42:06.532320  node: hxq7CIfpScOaBg0v1EhG6g== subKey: A#G#:S
DB: 2020/08/14 05:42:06.535163 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.454769ms
DB: 2020/08/14 05:42:06.535663 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.309161ms
Cache: 2020/08/14 05:42:06.535764 In SetUpredAvailable: pUid, tUID:  hxq7CIfpScOaBg0v1EhG6g== hxq7CIfpScOaBg0v1EhG6g== A#G#:S
Cache: 2020/08/14 05:42:06.535771 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:42:06.540256 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.01476ms
DB: 2020/08/14 05:42:06.540610 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.794112ms
Unlock: 2020/08/14 05:42:06.540622 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:42:06.545575 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.246402ms
DB: 2020/08/14 05:42:06.548771 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.541674ms
grmgr: 2020/08/14 05:42:06.548815 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:42:06.548823 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:42:06.548830 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:42:06.548836 goroutine about to start 5 
attachNode: 2020/08/14 05:42:06.548844 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 05:42:06.548850 Looping..... 0
grmgr: 2020/08/14 05:42:06.549007 Looping..... 1
grmgr: 2020/08/14 05:42:06.549019 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:42:06.549027 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:42:06.550677 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.031288ms
FetchForUpdate: 2020/08/14 05:42:06.550689 ** Cache FetchForUpdate Cache Key Value: [PWvhVDfMS0KbmRdGEwk7Pg==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.550695 +++  Cache FetchItems for sortk A#G#:S UID: [PWvhVDfMS0KbmRdGEwk7Pg==] 
FetchNode: 2020/08/14 05:42:06.550700  node: PWvhVDfMS0KbmRdGEwk7Pg== subKey: A#G#:S
DB: 2020/08/14 05:42:06.551689 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.607239ms
DB: 2020/08/14 05:42:06.554370 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.649304ms
DB: 2020/08/14 05:42:06.555067 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.333884ms
Cache: 2020/08/14 05:42:06.555174 In SetUpredAvailable: pUid, tUID:  PWvhVDfMS0KbmRdGEwk7Pg== +VdvqLYcSdO9hUiT40TSBA== A#G#:S
Cache: 2020/08/14 05:42:06.555182 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:42:06.558229 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.781865ms
DB: 2020/08/14 05:42:06.560213 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.998124ms
Unlock: 2020/08/14 05:42:06.560244 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:42:06.562647 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.382673ms
DB: 2020/08/14 05:42:06.565497 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.79782ms
grmgr: 2020/08/14 05:42:06.565518 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:42:06.565525 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:42:06.565531 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:42:06.565536 goroutine about to start 6 
rdfLoader: 2020/08/14 05:42:06.565543 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 05:42:06.565718 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 05:42:06.567568 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.873182ms
DB: 2020/08/14 05:42:06.569522 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.918108ms
DB: 2020/08/14 05:42:06.572229 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.594774ms
FetchForUpdate: 2020/08/14 05:42:06.572243 ** Cache FetchForUpdate Cache Key Value: [hxq7CIfpScOaBg0v1EhG6g==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.572250 +++  Cache FetchItems for sortk A#G#:S UID: [hxq7CIfpScOaBg0v1EhG6g==] 
FetchNode: 2020/08/14 05:42:06.572255  node: hxq7CIfpScOaBg0v1EhG6g== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:42:06.572434 ** Cache FetchForUpdate Cache Key Value: [PWvhVDfMS0KbmRdGEwk7Pg==]   sortk: A#
fetchItems: 2020/08/14 05:42:06.572460 +++  Cache FetchItems for sortk A# UID: [PWvhVDfMS0KbmRdGEwk7Pg==] 
FetchNode: 2020/08/14 05:42:06.572492  node: PWvhVDfMS0KbmRdGEwk7Pg== subKey: A#
DB: 2020/08/14 05:42:06.572887 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.331433ms
DB: 2020/08/14 05:42:06.575703 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.411783ms
DB: 2020/08/14 05:42:06.576333 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.405624ms
DB: 2020/08/14 05:42:06.577187 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.652482ms
Unlock: 2020/08/14 05:42:06.578863 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:42:06.580300 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.925247ms
DB: 2020/08/14 05:42:06.581176 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.298546ms
DB: 2020/08/14 05:42:06.585897 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.683459ms
DB: 2020/08/14 05:42:06.585915 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.683459ms
DB: 2020/08/14 05:42:06.589808 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 9.436184ms
DB: 2020/08/14 05:42:06.590513 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.564043ms
DB: 2020/08/14 05:42:06.590530 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.564043ms
DB: 2020/08/14 05:42:06.594648 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.652235ms
FetchForUpdate: 2020/08/14 05:42:06.594666 ** Cache FetchForUpdate Cache Key Value: [XX1fpDZ3Rl2fzIkduBLj/A==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.594672 +++  Cache FetchItems for sortk A#G#:S UID: [XX1fpDZ3Rl2fzIkduBLj/A==] 
FetchNode: 2020/08/14 05:42:06.594677  node: XX1fpDZ3Rl2fzIkduBLj/A== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:42:06.594873 ** Cache FetchForUpdate Cache Key Value: [PWvhVDfMS0KbmRdGEwk7Pg==]   sortk: A#
fetchItems: 2020/08/14 05:42:06.594885 +++  Cache FetchItems for sortk A# UID: [PWvhVDfMS0KbmRdGEwk7Pg==] 
FetchNode: 2020/08/14 05:42:06.594916  node: PWvhVDfMS0KbmRdGEwk7Pg== subKey: A#
DB: 2020/08/14 05:42:06.596097 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.34576ms
DB: 2020/08/14 05:42:06.599052 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.339855ms
DB: 2020/08/14 05:42:06.600369 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 5.399722ms
Unlock: 2020/08/14 05:42:06.601989 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:42:06.602535 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.242835ms
Unlock: 2020/08/14 05:42:06.602546 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:42:06.604876 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.097214ms
DB: 2020/08/14 05:42:06.609662 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.384303ms
DB: 2020/08/14 05:42:06.610116 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.202059ms
DB: 2020/08/14 05:42:06.610132 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.202059ms
DB: 2020/08/14 05:42:06.614466 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.604077ms
DB: 2020/08/14 05:42:06.615154 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.98903ms
DB: 2020/08/14 05:42:06.615171 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.98903ms
DB: 2020/08/14 05:42:06.619853 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.972831ms
DB: 2020/08/14 05:42:06.620712 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.372329ms
DB: 2020/08/14 05:42:06.626045 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.12363ms
Unlock: 2020/08/14 05:42:06.626057 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:42:06.627410 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.195205ms
DB: 2020/08/14 05:42:06.632476 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.597829ms
DB: 2020/08/14 05:42:06.633755 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.590538ms
DB: 2020/08/14 05:42:06.637815 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.993609ms
DB: 2020/08/14 05:42:06.639223 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.286735ms
DB: 2020/08/14 05:42:06.644669 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.44457ms
DB: 2020/08/14 05:42:06.645423 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.482514ms
DB: 2020/08/14 05:42:06.650277 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.073083ms
DB: 2020/08/14 05:42:06.653306 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.21843ms
DB: 2020/08/14 05:42:06.656583 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.637107ms
DB: 2020/08/14 05:42:06.658955 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.075306ms
DB: 2020/08/14 05:42:06.661736 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.75954ms
FetchForUpdate: 2020/08/14 05:42:06.661749 ** Cache FetchForUpdate Cache Key Value: [hxq7CIfpScOaBg0v1EhG6g==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.661755 +++  Cache FetchItems for sortk A#G#:S UID: [hxq7CIfpScOaBg0v1EhG6g==] 
FetchNode: 2020/08/14 05:42:06.661760  node: hxq7CIfpScOaBg0v1EhG6g== subKey: A#G#:S
DB: 2020/08/14 05:42:06.663946 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.92315ms
DB: 2020/08/14 05:42:06.665866 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.072981ms
Cache: 2020/08/14 05:42:06.665953 In SetUpredAvailable: pUid, tUID:  hxq7CIfpScOaBg0v1EhG6g== faluRNW4SCKt5p6/zQB2Yg== A#G#:S
Cache: 2020/08/14 05:42:06.665959 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:42:06.670716 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.708421ms
DB: 2020/08/14 05:42:06.671443 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.450982ms
Unlock: 2020/08/14 05:42:06.671454 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:42:06.676297 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.112042ms
DB: 2020/08/14 05:42:06.676901 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.839301ms
grmgr: 2020/08/14 05:42:06.676928 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 05:42:06.681864 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.486399ms
DB: 2020/08/14 05:42:06.686774 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.840732ms
FetchForUpdate: 2020/08/14 05:42:06.686793 ** Cache FetchForUpdate Cache Key Value: [XX1fpDZ3Rl2fzIkduBLj/A==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:42:06.686799 +++  Cache FetchItems for sortk A#G#:S UID: [XX1fpDZ3Rl2fzIkduBLj/A==] 
FetchNode: 2020/08/14 05:42:06.686804  node: XX1fpDZ3Rl2fzIkduBLj/A== subKey: A#G#:S
DB: 2020/08/14 05:42:06.690908 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.068278ms
Cache: 2020/08/14 05:42:06.691006 In SetUpredAvailable: pUid, tUID:  XX1fpDZ3Rl2fzIkduBLj/A== rcV55JnITvS59RXdkGRx+w== A#G#:S
Cache: 2020/08/14 05:42:06.691012 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:42:06.696074 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.026295ms
Unlock: 2020/08/14 05:42:06.696225 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:42:06.701358 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.643624ms
rdfLoader: 2020/08/14 05:42:06.701373 saveNode finished waiting...exiting
grmgr: 2020/08/14 05:42:06.701382 EndCh received for nodeAttach. rCnt = 0 
DB:2020/08/14 05:44:33 log.go:18: ===============================================================================
errlog: 2020/08/14 05:44:33.730786 Powering on...
rdfLoader: 2020/08/14 05:44:33.731745 saveNode started......
rdfLoader: 2020/08/14 05:44:33.731759 define saveNode limiter......
rdfuuid: 2020/08/14 05:44:33.731768 Powering on...
grmgr: 2020/08/14 05:44:33.731787 Powering on...
rdfLoader: 2020/08/14 05:44:33.731797  principle goroutines started 
RDFreader: 2020/08/14 05:44:33.731824 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 05:44:33.731839 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 05:44:33.731846 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 05:44:33.731878 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 05:44:33.731896 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 05:44:33.731902 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 05:44:33.731907 spo read:      
RDFreader: 2020/08/14 05:44:33.731912 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 05:44:33.731918 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 05:44:33.731923 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 05:44:33.731928 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 05:44:33.731932 spo read:      
RDFreader: 2020/08/14 05:44:33.731938 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 05:44:33.731943 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 05:44:33.731948 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 05:44:33.731953 spo read:  b  Age  "58"
RDFreader: 2020/08/14 05:44:33.731959 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 05:44:33.731964 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 05:44:33.731969 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 05:44:33.731974 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 05:44:33.731979 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 05:44:33.731984 spo read:      
RDFreader: 2020/08/14 05:44:33.731989 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 05:44:33.731993 Send node batch on channel verifyCh
RDFreader: 2020/08/14 05:44:33.731999 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 05:44:33.732003 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 05:44:33.732008 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 05:44:33.732016 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 05:44:33.732040 spo read:  c  Age  "67"
RDFreader: 2020/08/14 05:44:33.732053 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 05:44:33.732058 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 05:44:33.732063 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 05:44:33.732068 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 05:44:33.732075 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 05:44:33.732080 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 05:44:33.732085 spo read:      
RDFreader: 2020/08/14 05:44:33.732090 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 05:44:33.732094 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 05:44:33.732100 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 05:44:33.732104 spo read:  d  Age  "36"
RDFreader: 2020/08/14 05:44:33.732109 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 05:44:33.732116 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 05:44:33.732120 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 05:44:33.732124 close verify channel
rdfLoader: 2020/08/14 05:44:33.732128 wait for goroutines to end
rdfLoader: 2020/08/14 05:44:33.732133 verify started....
rdfLoader: 2020/08/14 05:44:33.732137 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 05:44:33.732142 .  getType..
rdfLoader: 2020/08/14 05:44:33.732145 node.TyName : [Person]
DB: 2020/08/14 05:44:33.812511 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 80.244848ms
grmgr: 2020/08/14 05:44:33.812655 Looping..... 0
grmgr: 2020/08/14 05:44:33.813045 Looping..... 1
grmgr: 2020/08/14 05:44:33.813191 Looping..... 2
grmgr: 2020/08/14 05:44:33.813379 Looping..... 3
grmgr: 2020/08/14 05:44:33.813568 Looping..... 4
grmgr: 2020/08/14 05:44:33.813733 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 05:44:33.813745 .  getType..
rdfLoader: 2020/08/14 05:44:33.813749 node.TyName : [Person]
grmgr: 2020/08/14 05:44:33.813754 Looping..... 0
unmarshalRDF2020/08/14 05:44:33.813766 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:44:33.813776 Looping..... 1
grmgr: 2020/08/14 05:44:33.813781 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 05:44:33.813785 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 05:44:33.813792 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 05:44:33.813796 .  getType..
rdfLoader: 2020/08/14 05:44:33.813799 node.TyName : [Person]
grmgr: 2020/08/14 05:44:33.813804 Looping..... 0
rdfLoader: 2020/08/14 05:44:33.813813 Add to SS . [Honda]
rdfLoader: 2020/08/14 05:44:33.813818 Add to SS . [Alfa]
unmarshalRDF2020/08/14 05:44:33.813865 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:44:33.813871 Exit  unmarshalRDF. 
saveNode: 2020/08/14 05:44:33.813886 read from saveCH channel 1 
unmarshalRDF2020/08/14 05:44:33.813896 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:44:33.813919 Looping..... 1
grmgr: 2020/08/14 05:44:33.813924 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 05:44:33.813928 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 05:44:33.813932 Looping..... 0
rdfLoader: 2020/08/14 05:44:33.813940 Add to SS . [Honda]
rdfLoader: 2020/08/14 05:44:33.813944 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 05:44:33.813981 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:44:33.813995 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 05:44:33.814000 .  getType..
rdfLoader: 2020/08/14 05:44:33.814004 node.TyName : [Person]
unmarshalRDF2020/08/14 05:44:33.814012 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:44:33.814022 Looping..... 1
rdfLoader: 2020/08/14 05:44:33.814030 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 05:44:33.814034 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 05:44:33.814038 Add to SS . [Honda]
unmarshalRDF2020/08/14 05:44:33.814091 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:44:33.814097 Exit  unmarshalRDF. 
grmgr: 2020/08/14 05:44:33.814121 Looping..... 2
grmgr: 2020/08/14 05:44:33.814345 Looping..... 3
grmgr: 2020/08/14 05:44:33.814490 Looping..... 4
grmgr: 2020/08/14 05:44:33.814679 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 05:44:33.814688 Looping..... 0
saveNode: 2020/08/14 05:44:33.814694 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 05:44:33.814701 read from saveCH channel 2 
grmgr: 2020/08/14 05:44:33.814726 Looping..... 1
SaveRDFNode: xxx 2020/08/14 05:44:33.814737 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.814743 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.814750 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.814756 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.814762 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.814768 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.814774 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:44:33.814778 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:44:33.814785 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000016de0)}
SaveRDFNode: 2020/08/14 05:44:33.814789 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:44:33.814800 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.814804 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.814820 UID received  : eYMmt3NOQJanCLUr61duiQ==
grmgr: 2020/08/14 05:44:33.815087 Looping..... 2
grmgr: 2020/08/14 05:44:33.815267 Looping..... 3
grmgr: 2020/08/14 05:44:33.815441 Looping..... 4
grmgr: 2020/08/14 05:44:33.815619 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 05:44:33.815629 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 05:44:33.815633 Looping..... 0
unmarshalRDF2020/08/14 05:44:33.815650 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:44:33.815661 Looping..... 1
rdfLoader: 2020/08/14 05:44:33.815670 Add to SS . [Bentley]
unmarshalRDF2020/08/14 05:44:33.815724 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:44:33.815729 Exit  unmarshalRDF. 
grmgr: 2020/08/14 05:44:33.815739 Looping..... 2
grmgr: 2020/08/14 05:44:33.815801 Looping..... 3
grmgr: 2020/08/14 05:44:33.815818 Looping..... 4
grmgr: 2020/08/14 05:44:33.815979 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 05:44:33.815989 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 05:44:33.815994 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 05:44:33.815999 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 05:44:33.816005 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 05:44:33.816010 read from saveCH channel 3 
grmgr: 2020/08/14 05:44:33.816015 Looping..... 0
grmgr: 2020/08/14 05:44:33.816162 Looping..... 1
grmgr: 2020/08/14 05:44:33.816172 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 05:44:33.816176 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 05:44:33.816185 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.816191 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.816196 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.816201 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.816208 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.816213 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.816219 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:44:33.816222 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:44:33.816228 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0000176e0)}
SaveRDFNode: 2020/08/14 05:44:33.816231 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:44:33.816282 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.816349 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.816357 UID received  : D2qu7GNGTrWUjZ+WKNB/ig==
DB: 2020/08/14 05:44:33.823516 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.664959ms
DB: 2020/08/14 05:44:33.828478 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 12.083283ms
DB: 2020/08/14 05:44:33.833490 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.798073ms
DB: 2020/08/14 05:44:33.838202 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.674304ms
DB: 2020/08/14 05:44:33.843017 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.784281ms
DB: 2020/08/14 05:44:33.843488 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 19.93904ms
DB: 2020/08/14 05:44:33.847954 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.893608ms
SaveRDFNode: 2020/08/14 05:44:33.847984 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000176e0)}
rdfUIDdb: 2020/08/14 05:44:33.847993 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.847998 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.848004 Received UID: X18=
SaveRDFNode: 2020/08/14 05:44:33.848019 a: = db.Item{PKey:[]uint8{0xf, 0x6a, 0xae, 0xec, 0x63, 0x46, 0x4e, 0xb5, 0x94, 0x8d, 0x9f, 0x96, 0x28, 0xd0, 0x7f, 0x8a}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:44:33.848983 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.448582ms
DB: 2020/08/14 05:44:33.853763 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.727786ms
DB: 2020/08/14 05:44:33.856532 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 8.467502ms
SaveRDFNode: 2020/08/14 05:44:33.856551 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000176e0)}
rdfUIDdb: 2020/08/14 05:44:33.856557 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.856562 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.856567 Received UID: X18=
SaveRDFNode: 2020/08/14 05:44:33.856578 a: = db.Item{PKey:[]uint8{0xf, 0x6a, 0xae, 0xec, 0x63, 0x46, 0x4e, 0xb5, 0x94, 0x8d, 0x9f, 0x96, 0x28, 0xd0, 0x7f, 0x8a}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:44:33.858676 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.877741ms
SaveRDFNode: 2020/08/14 05:44:33.858690 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016de0)}
rdfUIDdb: 2020/08/14 05:44:33.858696 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.858700 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.858706 Received UID: X18=
SaveRDFNode: 2020/08/14 05:44:33.858721 a: = db.Item{PKey:[]uint8{0x79, 0x83, 0x26, 0xb7, 0x73, 0x4e, 0x40, 0x96, 0xa7, 0x8, 0xb5, 0x2b, 0xeb, 0x57, 0x6e, 0x89}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:44:33.861806 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.197483ms
SaveRDFNode: 2020/08/14 05:44:33.861819 Returned.+++++++++++ No error
grmgr: 2020/08/14 05:44:33.861829 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 05:44:33.861835 Send ack to waiting saveNode...
saveNode: 2020/08/14 05:44:33.861841 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 05:44:33.861847 read from saveCH channel 4 
grmgr: 2020/08/14 05:44:33.861852 Looping..... 0
grmgr: 2020/08/14 05:44:33.861891 Looping..... 1
grmgr: 2020/08/14 05:44:33.861898 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 05:44:33.861902 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 05:44:33.861915 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.861921 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.861930 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.861936 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.861953 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.861959 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.861965 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:44:33.861979 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:44:33.861985 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000442180)}
SaveRDFNode: 2020/08/14 05:44:33.861989 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:44:33.861998 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.862002 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.862020 UID received  : u8zg7wV3THubb9XsseHB6g==
DB: 2020/08/14 05:44:33.863511 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.748098ms
SaveRDFNode: 2020/08/14 05:44:33.863536 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016de0)}
rdfUIDdb: 2020/08/14 05:44:33.863542 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.863546 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.863551 Received UID: X18=
SaveRDFNode: 2020/08/14 05:44:33.863587 a: = db.Item{PKey:[]uint8{0x79, 0x83, 0x26, 0xb7, 0x73, 0x4e, 0x40, 0x96, 0xa7, 0x8, 0xb5, 0x2b, 0xeb, 0x57, 0x6e, 0x89}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:44:33.867255 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.209895ms
DB: 2020/08/14 05:44:33.868379 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.758565ms
SaveRDFNode: 2020/08/14 05:44:33.868391 Returned.+++++++++++ No error
grmgr: 2020/08/14 05:44:33.868398 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 05:44:33.868403 Send ack to waiting saveNode...
saveNode: 2020/08/14 05:44:33.868408 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 05:44:33.868413 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 05:44:33.868435 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.868471 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.868480 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.868486 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.868491 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.868527 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:44:33.868533 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:44:33.868537 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:44:33.868544 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000442900)}
SaveRDFNode: 2020/08/14 05:44:33.868548 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:44:33.868556 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.868560 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.868565 UID received  : N31XlHx6SsqPzvSksfb+hQ==
grmgr: 2020/08/14 05:44:33.868764 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 05:44:33.872135 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.799407ms
DB: 2020/08/14 05:44:33.873353 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.762105ms
DB: 2020/08/14 05:44:33.877162 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.982037ms
DB: 2020/08/14 05:44:33.878040 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.653243ms
DB: 2020/08/14 05:44:33.882004 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.808332ms
DB: 2020/08/14 05:44:33.882780 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.70726ms
DB: 2020/08/14 05:44:33.887026 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.953603ms
SaveRDFNode: 2020/08/14 05:44:33.887042 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000442180)}
rdfUIDdb: 2020/08/14 05:44:33.887048 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.887052 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.887058 Received UID: X18=
SaveRDFNode: 2020/08/14 05:44:33.887070 a: = db.Item{PKey:[]uint8{0xbb, 0xcc, 0xe0, 0xef, 0x5, 0x77, 0x4c, 0x7b, 0x9b, 0x6f, 0xd5, 0xec, 0xb1, 0xe1, 0xc1, 0xea}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:44:33.887512 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.702465ms
DB: 2020/08/14 05:44:33.891957 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.857756ms
SaveRDFNode: 2020/08/14 05:44:33.891977 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000442180)}
rdfUIDdb: 2020/08/14 05:44:33.891985 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.891990 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.891997 Received UID: X18=
SaveRDFNode: 2020/08/14 05:44:33.892008 a: = db.Item{PKey:[]uint8{0xbb, 0xcc, 0xe0, 0xef, 0x5, 0x77, 0x4c, 0x7b, 0x9b, 0x6f, 0xd5, 0xec, 0xb1, 0xe1, 0xc1, 0xea}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:44:33.892589 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.046715ms
SaveRDFNode: 2020/08/14 05:44:33.892605 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000442900)}
rdfUIDdb: 2020/08/14 05:44:33.892611 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.892615 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.892621 Received UID: X18=
SaveRDFNode: 2020/08/14 05:44:33.892631 a: = db.Item{PKey:[]uint8{0x37, 0x7d, 0x57, 0x94, 0x7c, 0x7a, 0x4a, 0xca, 0x8f, 0xce, 0xf4, 0xa4, 0xb1, 0xf6, 0xfe, 0x85}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:44:33.897255 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.960361ms
SaveRDFNode: 2020/08/14 05:44:33.897267 Returned.+++++++++++ No error
grmgr: 2020/08/14 05:44:33.897276 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 05:44:33.897428 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.764819ms
SaveRDFNode: 2020/08/14 05:44:33.897440 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000442900)}
rdfUIDdb: 2020/08/14 05:44:33.897446 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:44:33.897450 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:44:33.897455 Received UID: X18=
SaveRDFNode: 2020/08/14 05:44:33.897468 a: = db.Item{PKey:[]uint8{0x37, 0x7d, 0x57, 0x94, 0x7c, 0x7a, 0x4a, 0xca, 0x8f, 0xce, 0xf4, 0xa4, 0xb1, 0xf6, 0xfe, 0x85}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:44:33.902534 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.03417ms
SaveRDFNode: 2020/08/14 05:44:33.902546 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 05:44:33.902553 saveNode finished waiting...exiting
grmgr: 2020/08/14 05:44:33.902562 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 05:44:33.902572 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 05:44:33.902577 Looping..... 0
grmgr: 2020/08/14 05:44:33.902619 Looping..... 1
grmgr: 2020/08/14 05:44:33.902800 Looping..... 2
grmgr: 2020/08/14 05:44:33.902977 Looping..... 3
grmgr: 2020/08/14 05:44:33.903156 Looping..... 4
grmgr: 2020/08/14 05:44:33.903334 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 05:44:33.903343 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:44:33.903348 goroutine about to start 1 
attachNode: 2020/08/14 05:44:33.903355 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 05:44:33.903360 Looping..... 0
grmgr: 2020/08/14 05:44:33.903380 Looping..... 1
grmgr: 2020/08/14 05:44:33.903385 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:44:33.903390 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 05:44:33.903407 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:44:33.903411 goroutine about to start 2 
attachNode: 2020/08/14 05:44:33.903416 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 05:44:33.903420 Looping..... 0
grmgr: 2020/08/14 05:44:33.906570 Looping..... 1
grmgr: 2020/08/14 05:44:33.906585 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:44:33.906590 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:44:33.907336 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.858906ms
DB: 2020/08/14 05:44:33.910621 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.233953ms
DB: 2020/08/14 05:44:33.914653 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.39925ms
DB: 2020/08/14 05:44:33.918623 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.927344ms
DB: 2020/08/14 05:44:33.923764 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.078367ms
DB: 2020/08/14 05:44:33.925526 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 18.535317ms
DB: 2020/08/14 05:44:33.928631 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.034342ms
DB: 2020/08/14 05:44:33.931648 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.798005ms
FetchForUpdate: 2020/08/14 05:44:33.931665 ** Cache FetchForUpdate Cache Key Value: [D2qu7GNGTrWUjZ+WKNB/ig==]   sortk: A#G#:S
FetchNode: 2020/08/14 05:44:33.931673  node: D2qu7GNGTrWUjZ+WKNB/ig== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:44:33.931900 ** Cache FetchForUpdate Cache Key Value: [eYMmt3NOQJanCLUr61duiQ==]   sortk: A#
FetchNode: 2020/08/14 05:44:33.931933  node: eYMmt3NOQJanCLUr61duiQ== subKey: A#
DB: 2020/08/14 05:44:33.932556 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.797979ms
DB: 2020/08/14 05:44:33.935252 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.543875ms
FetchForUpdate: 2020/08/14 05:44:33.935319 len(nb): 1
fetchItems: 2020/08/14 05:44:33.935346 +++  Cache FetchItems for sortk A#G#:S UID: [D2qu7GNGTrWUjZ+WKNB/ig==] 
FetchNode: 2020/08/14 05:44:33.935351  node: D2qu7GNGTrWUjZ+WKNB/ig== subKey: A#G#:S
DB: 2020/08/14 05:44:33.936467 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.457941ms
FetchForUpdate: 2020/08/14 05:44:33.936571 len(nb): 7
fetchItems: 2020/08/14 05:44:33.936579 +++  Cache FetchItems for sortk A# UID: [eYMmt3NOQJanCLUr61duiQ==] 
FetchNode: 2020/08/14 05:44:33.936584  node: eYMmt3NOQJanCLUr61duiQ== subKey: A#
DB: 2020/08/14 05:44:33.941311 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.926971ms
DB: 2020/08/14 05:44:33.941930 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 9.339191ms
DB: 2020/08/14 05:44:33.948949 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.952948ms
DB: 2020/08/14 05:44:33.964772 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 20.691796ms
Unlock: 2020/08/14 05:44:33.964976 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:44:33.966814 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 30.17411ms
DB: 2020/08/14 05:44:33.968519 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 18.620286ms
FetchForUpdate: 2020/08/14 05:44:33.968536 ** Cache FetchForUpdate Cache Key Value: [u8zg7wV3THubb9XsseHB6g==]   sortk: A#G#:S
FetchNode: 2020/08/14 05:44:33.968543  node: u8zg7wV3THubb9XsseHB6g== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:44:33.968785 ** Cache FetchForUpdate Cache Key Value: [eYMmt3NOQJanCLUr61duiQ==]   sortk: A#
Unlock: 2020/08/14 05:44:33.971066 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/14 05:44:33.971707 ** Cache FetchForUpdate Cache Key Value: [D2qu7GNGTrWUjZ+WKNB/ig==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:33.971719 +++  Cache FetchItems for sortk A#G#:S UID: [D2qu7GNGTrWUjZ+WKNB/ig==] 
FetchNode: 2020/08/14 05:44:33.971742  node: D2qu7GNGTrWUjZ+WKNB/ig== subKey: A#G#:S
fetchItems: 2020/08/14 05:44:33.971978 +++  Cache FetchItems for sortk A# UID: [eYMmt3NOQJanCLUr61duiQ==] 
FetchNode: 2020/08/14 05:44:33.972005  node: eYMmt3NOQJanCLUr61duiQ== subKey: A#
DB: 2020/08/14 05:44:33.972689 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.108554ms
FetchForUpdate: 2020/08/14 05:44:33.972730 len(nb): 1
fetchItems: 2020/08/14 05:44:33.972737 +++  Cache FetchItems for sortk A#G#:S UID: [u8zg7wV3THubb9XsseHB6g==] 
FetchNode: 2020/08/14 05:44:33.972742  node: u8zg7wV3THubb9XsseHB6g== subKey: A#G#:S
DB: 2020/08/14 05:44:33.974701 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.911745ms
DB: 2020/08/14 05:44:33.977203 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.149875ms
DB: 2020/08/14 05:44:33.978645 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.871734ms
DB: 2020/08/14 05:44:33.984797 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.984725ms
Unlock: 2020/08/14 05:44:33.985177 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:44:33.991642 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.963118ms
DB: 2020/08/14 05:44:33.993429 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.757194ms
Unlock: 2020/08/14 05:44:33.993441 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/14 05:44:33.993467 ** Cache FetchForUpdate Cache Key Value: [u8zg7wV3THubb9XsseHB6g==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:33.993474 +++  Cache FetchItems for sortk A#G#:S UID: [u8zg7wV3THubb9XsseHB6g==] 
FetchNode: 2020/08/14 05:44:33.993479  node: u8zg7wV3THubb9XsseHB6g== subKey: A#G#:S
DB: 2020/08/14 05:44:33.996953 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.208556ms
DB: 2020/08/14 05:44:33.997330 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.819563ms
DB: 2020/08/14 05:44:34.003505 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.479641ms
DB: 2020/08/14 05:44:34.004442 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.032848ms
DB: 2020/08/14 05:44:34.009647 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.796163ms
DB: 2020/08/14 05:44:34.011629 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.97567ms
DB: 2020/08/14 05:44:34.016958 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.926904ms
DB: 2020/08/14 05:44:34.021998 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.915124ms
DB: 2020/08/14 05:44:34.023349 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.32538ms
DB: 2020/08/14 05:44:34.028447 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.01686ms
DB: 2020/08/14 05:44:34.028739 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.673039ms
DB: 2020/08/14 05:44:34.033543 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.750188ms
DB: 2020/08/14 05:44:34.033852 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.32248ms
Unlock: 2020/08/14 05:44:34.033864 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/14 05:44:34.038655 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.021696ms
DB: 2020/08/14 05:44:34.039264 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.339096ms
FetchForUpdate: 2020/08/14 05:44:34.039297 ** Cache FetchForUpdate Cache Key Value: [D2qu7GNGTrWUjZ+WKNB/ig==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:34.039306 +++  Cache FetchItems for sortk A#G#:S UID: [D2qu7GNGTrWUjZ+WKNB/ig==] 
FetchNode: 2020/08/14 05:44:34.039312  node: D2qu7GNGTrWUjZ+WKNB/ig== subKey: A#G#:S
DB: 2020/08/14 05:44:34.042671 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.325233ms
Cache: 2020/08/14 05:44:34.042824 In SetUpredAvailable: pUid, tUID:  D2qu7GNGTrWUjZ+WKNB/ig== D2qu7GNGTrWUjZ+WKNB/ig== A#G#:S
Cache: 2020/08/14 05:44:34.042834 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:44:34.045739 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.755248ms
DB: 2020/08/14 05:44:34.047803 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.932387ms
Unlock: 2020/08/14 05:44:34.047815 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:44:34.050870 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.789823ms
DB: 2020/08/14 05:44:34.056239 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.04739ms
Unlock: 2020/08/14 05:44:34.056258 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/14 05:44:34.056964 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.771383ms
grmgr: 2020/08/14 05:44:34.057002 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:44:34.057011 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:44:34.057018 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:44:34.057023 goroutine about to start 3 
attachNode: 2020/08/14 05:44:34.057031 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 05:44:34.057037 Looping..... 0
grmgr: 2020/08/14 05:44:34.057066 Looping..... 1
grmgr: 2020/08/14 05:44:34.057074 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:44:34.057080 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:44:34.060988 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.785883ms
DB: 2020/08/14 05:44:34.061656 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.949377ms
FetchForUpdate: 2020/08/14 05:44:34.061679 ** Cache FetchForUpdate Cache Key Value: [u8zg7wV3THubb9XsseHB6g==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:34.061686 +++  Cache FetchItems for sortk A#G#:S UID: [u8zg7wV3THubb9XsseHB6g==] 
FetchNode: 2020/08/14 05:44:34.061691  node: u8zg7wV3THubb9XsseHB6g== subKey: A#G#:S
DB: 2020/08/14 05:44:34.065055 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.005031ms
DB: 2020/08/14 05:44:34.065888 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.161188ms
Cache: 2020/08/14 05:44:34.065971 In SetUpredAvailable: pUid, tUID:  u8zg7wV3THubb9XsseHB6g== u8zg7wV3THubb9XsseHB6g== A#G#:S
Cache: 2020/08/14 05:44:34.065976 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:44:34.071099 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.08751ms
Unlock: 2020/08/14 05:44:34.071112 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:44:34.075478 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 10.089472ms
DB: 2020/08/14 05:44:34.079429 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.950508ms
grmgr: 2020/08/14 05:44:34.079448 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:44:34.079454 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:44:34.079460 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:44:34.079465 goroutine about to start 4 
attachNode: 2020/08/14 05:44:34.079471 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 05:44:34.079477 Looping..... 0
grmgr: 2020/08/14 05:44:34.079502 Looping..... 1
grmgr: 2020/08/14 05:44:34.079553 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:44:34.079558 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:44:34.079968 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.450317ms
DB: 2020/08/14 05:44:34.082427 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.750071ms
DB: 2020/08/14 05:44:34.085509 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.468571ms
DB: 2020/08/14 05:44:34.086514 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.053954ms
DB: 2020/08/14 05:44:34.089412 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.714761ms
DB: 2020/08/14 05:44:34.092133 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.310465ms
FetchForUpdate: 2020/08/14 05:44:34.092169 ** Cache FetchForUpdate Cache Key Value: [eYMmt3NOQJanCLUr61duiQ==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:34.092179 +++  Cache FetchItems for sortk A#G#:S UID: [eYMmt3NOQJanCLUr61duiQ==] 
FetchNode: 2020/08/14 05:44:34.092185  node: eYMmt3NOQJanCLUr61duiQ== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:44:34.093027 ** Cache FetchForUpdate Cache Key Value: [D2qu7GNGTrWUjZ+WKNB/ig==]   sortk: A#
fetchItems: 2020/08/14 05:44:34.093063 +++  Cache FetchItems for sortk A# UID: [D2qu7GNGTrWUjZ+WKNB/ig==] 
FetchNode: 2020/08/14 05:44:34.093077  node: D2qu7GNGTrWUjZ+WKNB/ig== subKey: A#
DB: 2020/08/14 05:44:34.093617 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.169225ms
DB: 2020/08/14 05:44:34.096821 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.972473ms
DB: 2020/08/14 05:44:34.098105 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.967164ms
Unlock: 2020/08/14 05:44:34.099980 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:44:34.103655 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 9.985049ms
DB: 2020/08/14 05:44:34.105503 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 8.195928ms
Unlock: 2020/08/14 05:44:34.105529 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/14 05:44:34.105917 ** Cache FetchForUpdate Cache Key Value: [eYMmt3NOQJanCLUr61duiQ==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:34.105930 +++  Cache FetchItems for sortk A#G#:S UID: [eYMmt3NOQJanCLUr61duiQ==] 
FetchNode: 2020/08/14 05:44:34.105935  node: eYMmt3NOQJanCLUr61duiQ== subKey: A#G#:S
DB: 2020/08/14 05:44:34.109680 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.939225ms
FetchForUpdate: 2020/08/14 05:44:34.109872 ** Cache FetchForUpdate Cache Key Value: [u8zg7wV3THubb9XsseHB6g==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:34.109886 +++  Cache FetchItems for sortk A#G#:S UID: [u8zg7wV3THubb9XsseHB6g==] 
FetchNode: 2020/08/14 05:44:34.109891  node: u8zg7wV3THubb9XsseHB6g== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:44:34.110101 ** Cache FetchForUpdate Cache Key Value: [D2qu7GNGTrWUjZ+WKNB/ig==]   sortk: A#
fetchItems: 2020/08/14 05:44:34.110112 +++  Cache FetchItems for sortk A# UID: [D2qu7GNGTrWUjZ+WKNB/ig==] 
FetchNode: 2020/08/14 05:44:34.110131  node: D2qu7GNGTrWUjZ+WKNB/ig== subKey: A#
DB: 2020/08/14 05:44:34.113611 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.68247ms
DB: 2020/08/14 05:44:34.120742 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.026269ms
DB: 2020/08/14 05:44:34.124247 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 18.276147ms
DB: 2020/08/14 05:44:34.125778 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.989309ms
DB: 2020/08/14 05:44:34.125801 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.989309ms
DB: 2020/08/14 05:44:34.129889 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 19.714406ms
Unlock: 2020/08/14 05:44:34.131466 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:44:34.132114 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.739229ms
DB: 2020/08/14 05:44:34.132827 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.989708ms
DB: 2020/08/14 05:44:34.132844 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.989708ms
DB: 2020/08/14 05:44:34.138446 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.962466ms
DB: 2020/08/14 05:44:34.139477 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.334202ms
DB: 2020/08/14 05:44:34.145546 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.856051ms
Unlock: 2020/08/14 05:44:34.145797 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:44:34.149262 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 10.064503ms
DB: 2020/08/14 05:44:34.153504 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.632367ms
DB: 2020/08/14 05:44:34.158693 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.995439ms
DB: 2020/08/14 05:44:34.159325 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.466906ms
DB: 2020/08/14 05:44:34.164052 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.941648ms
DB: 2020/08/14 05:44:34.164752 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.095154ms
DB: 2020/08/14 05:44:34.170955 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.509094ms
DB: 2020/08/14 05:44:34.171785 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.617593ms
DB: 2020/08/14 05:44:34.176749 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.249407ms
DB: 2020/08/14 05:44:34.178945 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.488652ms
DB: 2020/08/14 05:44:34.182042 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.958889ms
DB: 2020/08/14 05:44:34.184136 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.84792ms
DB: 2020/08/14 05:44:34.188856 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.413939ms
DB: 2020/08/14 05:44:34.189515 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.982979ms
Unlock: 2020/08/14 05:44:34.189527 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/14 05:44:34.193982 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.799197ms
DB: 2020/08/14 05:44:34.195483 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.26308ms
FetchForUpdate: 2020/08/14 05:44:34.195495 ** Cache FetchForUpdate Cache Key Value: [eYMmt3NOQJanCLUr61duiQ==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:34.195502 +++  Cache FetchItems for sortk A#G#:S UID: [eYMmt3NOQJanCLUr61duiQ==] 
FetchNode: 2020/08/14 05:44:34.195507  node: eYMmt3NOQJanCLUr61duiQ== subKey: A#G#:S
DB: 2020/08/14 05:44:34.199736 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.19399ms
Cache: 2020/08/14 05:44:34.200054 In SetUpredAvailable: pUid, tUID:  eYMmt3NOQJanCLUr61duiQ== eYMmt3NOQJanCLUr61duiQ== A#G#:S
Cache: 2020/08/14 05:44:34.200067 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:44:34.200442 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.93529ms
DB: 2020/08/14 05:44:34.205285 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.179114ms
Unlock: 2020/08/14 05:44:34.205301 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:44:34.206226 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.421849ms
FetchForUpdate: 2020/08/14 05:44:34.206302 ** Cache FetchForUpdate Cache Key Value: [u8zg7wV3THubb9XsseHB6g==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:34.206309 +++  Cache FetchItems for sortk A#G#:S UID: [u8zg7wV3THubb9XsseHB6g==] 
FetchNode: 2020/08/14 05:44:34.206315  node: u8zg7wV3THubb9XsseHB6g== subKey: A#G#:S
DB: 2020/08/14 05:44:34.211248 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.89648ms
Cache: 2020/08/14 05:44:34.211353 In SetUpredAvailable: pUid, tUID:  u8zg7wV3THubb9XsseHB6g== abec6WLHSlOw/1svBUVT/w== A#G#:S
Cache: 2020/08/14 05:44:34.211360 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:44:34.216586 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.191691ms
Unlock: 2020/08/14 05:44:34.216605 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:44:34.218009 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 12.159415ms
grmgr: 2020/08/14 05:44:34.218037 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:44:34.218043 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:44:34.218050 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:44:34.218054 goroutine about to start 5 
attachNode: 2020/08/14 05:44:34.218061 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 05:44:34.218066 Looping..... 0
grmgr: 2020/08/14 05:44:34.218112 Looping..... 1
grmgr: 2020/08/14 05:44:34.218119 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:44:34.218124 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:44:34.222113 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.859829ms
grmgr: 2020/08/14 05:44:34.222128 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:44:34.222133 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:44:34.222138 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:44:34.222143 goroutine about to start 6 
rdfLoader: 2020/08/14 05:44:34.222147 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 05:44:34.222521 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 05:44:34.222658 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.306471ms
DB: 2020/08/14 05:44:34.225588 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.246491ms
DB: 2020/08/14 05:44:34.226174 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.48581ms
DB: 2020/08/14 05:44:34.228851 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.223653ms
DB: 2020/08/14 05:44:34.229457 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.028721ms
DB: 2020/08/14 05:44:34.232558 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.51504ms
DB: 2020/08/14 05:44:34.233444 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.9565ms
DB: 2020/08/14 05:44:34.236200 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.601121ms
DB: 2020/08/14 05:44:34.240220 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.700294ms
DB: 2020/08/14 05:44:34.241266 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.012698ms
DB: 2020/08/14 05:44:34.245599 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.99811ms
FetchForUpdate: 2020/08/14 05:44:34.245614 ** Cache FetchForUpdate Cache Key Value: [eYMmt3NOQJanCLUr61duiQ==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:34.245621 +++  Cache FetchItems for sortk A#G#:S UID: [eYMmt3NOQJanCLUr61duiQ==] 
FetchNode: 2020/08/14 05:44:34.245626  node: eYMmt3NOQJanCLUr61duiQ== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:44:34.245826 ** Cache FetchForUpdate Cache Key Value: [u8zg7wV3THubb9XsseHB6g==]   sortk: A#
fetchItems: 2020/08/14 05:44:34.245838 +++  Cache FetchItems for sortk A# UID: [u8zg7wV3THubb9XsseHB6g==] 
FetchNode: 2020/08/14 05:44:34.245869  node: u8zg7wV3THubb9XsseHB6g== subKey: A#
DB: 2020/08/14 05:44:34.246569 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.988069ms
FetchForUpdate: 2020/08/14 05:44:34.246582 ** Cache FetchForUpdate Cache Key Value: [D2qu7GNGTrWUjZ+WKNB/ig==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:34.246587 +++  Cache FetchItems for sortk A#G#:S UID: [D2qu7GNGTrWUjZ+WKNB/ig==] 
FetchNode: 2020/08/14 05:44:34.246593  node: D2qu7GNGTrWUjZ+WKNB/ig== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:44:34.246772 ** Cache FetchForUpdate Cache Key Value: [u8zg7wV3THubb9XsseHB6g==]   sortk: A#
DB: 2020/08/14 05:44:34.249956 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.296719ms
DB: 2020/08/14 05:44:34.251260 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.637271ms
DB: 2020/08/14 05:44:34.255854 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.046438ms
DB: 2020/08/14 05:44:34.257272 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.487666ms
DB: 2020/08/14 05:44:34.260684 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.794068ms
DB: 2020/08/14 05:44:34.260701 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.794068ms
DB: 2020/08/14 05:44:34.263072 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.747508ms
DB: 2020/08/14 05:44:34.263088 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.747508ms
DB: 2020/08/14 05:44:34.264195 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 18.279291ms
Unlock: 2020/08/14 05:44:34.266145 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/14 05:44:34.266741 +++  Cache FetchItems for sortk A# UID: [u8zg7wV3THubb9XsseHB6g==] 
FetchNode: 2020/08/14 05:44:34.266761  node: u8zg7wV3THubb9XsseHB6g== subKey: A#
DB: 2020/08/14 05:44:34.267078 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.346826ms
DB: 2020/08/14 05:44:34.267094 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.346826ms
DB: 2020/08/14 05:44:34.268035 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.913ms
DB: 2020/08/14 05:44:34.268050 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.913ms
DB: 2020/08/14 05:44:34.270780 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.9549ms
DB: 2020/08/14 05:44:34.273104 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.781379ms
Unlock: 2020/08/14 05:44:34.274526 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:44:34.275368 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.99869ms
DB: 2020/08/14 05:44:34.280354 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.253048ms
Unlock: 2020/08/14 05:44:34.280367 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:44:34.281339 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.81021ms
Unlock: 2020/08/14 05:44:34.281351 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:44:34.287724 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.667204ms
DB: 2020/08/14 05:44:34.289036 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.999054ms
DB: 2020/08/14 05:44:34.293015 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.925837ms
DB: 2020/08/14 05:44:34.294384 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.149388ms
DB: 2020/08/14 05:44:34.299155 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.732412ms
DB: 2020/08/14 05:44:34.299929 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.113174ms
DB: 2020/08/14 05:44:34.305977 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.479944ms
DB: 2020/08/14 05:44:34.306880 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.621578ms
DB: 2020/08/14 05:44:34.311495 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.026888ms
DB: 2020/08/14 05:44:34.312174 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.969285ms
DB: 2020/08/14 05:44:34.316960 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.111071ms
DB: 2020/08/14 05:44:34.318142 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.641694ms
DB: 2020/08/14 05:44:34.323827 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.510859ms
DB: 2020/08/14 05:44:34.324979 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.511032ms
DB: 2020/08/14 05:44:34.329241 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.908181ms
DB: 2020/08/14 05:44:34.329984 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.700228ms
DB: 2020/08/14 05:44:34.334584 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.020289ms
DB: 2020/08/14 05:44:34.336421 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.124785ms
DB: 2020/08/14 05:44:34.339610 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.969728ms
FetchForUpdate: 2020/08/14 05:44:34.339628 ** Cache FetchForUpdate Cache Key Value: [eYMmt3NOQJanCLUr61duiQ==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:34.339635 +++  Cache FetchItems for sortk A#G#:S UID: [eYMmt3NOQJanCLUr61duiQ==] 
FetchNode: 2020/08/14 05:44:34.339641  node: eYMmt3NOQJanCLUr61duiQ== subKey: A#G#:S
DB: 2020/08/14 05:44:34.341375 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.902364ms
FetchForUpdate: 2020/08/14 05:44:34.341388 ** Cache FetchForUpdate Cache Key Value: [D2qu7GNGTrWUjZ+WKNB/ig==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:44:34.341393 +++  Cache FetchItems for sortk A#G#:S UID: [D2qu7GNGTrWUjZ+WKNB/ig==] 
FetchNode: 2020/08/14 05:44:34.341398  node: D2qu7GNGTrWUjZ+WKNB/ig== subKey: A#G#:S
DB: 2020/08/14 05:44:34.343583 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.90571ms
Cache: 2020/08/14 05:44:34.343689 In SetUpredAvailable: pUid, tUID:  eYMmt3NOQJanCLUr61duiQ== MTXjiutVRzKCbqASNrGuvw== A#G#:S
Cache: 2020/08/14 05:44:34.343697 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:44:34.344910 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.48202ms
Cache: 2020/08/14 05:44:34.345007 In SetUpredAvailable: pUid, tUID:  D2qu7GNGTrWUjZ+WKNB/ig== 8MexPuzrSlG1+l/ap3JLMA== A#G#:S
Cache: 2020/08/14 05:44:34.345015 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:44:34.348664 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.933224ms
Unlock: 2020/08/14 05:44:34.348676 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:44:34.350362 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.315147ms
Unlock: 2020/08/14 05:44:34.350373 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:44:34.354128 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.938623ms
grmgr: 2020/08/14 05:44:34.354159 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 05:44:34.355900 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.058898ms
rdfLoader: 2020/08/14 05:44:34.356134 saveNode finished waiting...exiting
grmgr: 2020/08/14 05:44:34.356149 EndCh received for nodeAttach. rCnt = 0 
DB:2020/08/14 05:52:47 log.go:18: ===============================================================================
errlog: 2020/08/14 05:52:47.464516 Powering on...
rdfLoader: 2020/08/14 05:52:47.464554 saveNode started......
rdfLoader: 2020/08/14 05:52:47.464559 define saveNode limiter......
rdfuuid: 2020/08/14 05:52:47.464591 Powering on...
grmgr: 2020/08/14 05:52:47.464612 Powering on...
rdfLoader: 2020/08/14 05:52:47.464623  principle goroutines started 
RDFreader: 2020/08/14 05:52:47.464649 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 05:52:47.464664 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 05:52:47.464670 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 05:52:47.464676 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 05:52:47.464682 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 05:52:47.464687 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 05:52:47.464692 spo read:      
RDFreader: 2020/08/14 05:52:47.464697 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 05:52:47.464703 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 05:52:47.464708 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 05:52:47.464713 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 05:52:47.464717 spo read:      
RDFreader: 2020/08/14 05:52:47.464723 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 05:52:47.464728 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 05:52:47.464733 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 05:52:47.464739 spo read:  b  Age  "58"
RDFreader: 2020/08/14 05:52:47.464744 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 05:52:47.464761 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 05:52:47.464767 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 05:52:47.464773 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 05:52:47.464778 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 05:52:47.464782 spo read:      
RDFreader: 2020/08/14 05:52:47.464787 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 05:52:47.464791 Send node batch on channel verifyCh
RDFreader: 2020/08/14 05:52:47.464797 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 05:52:47.464801 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 05:52:47.464807 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 05:52:47.464814 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 05:52:47.464819 spo read:  c  Age  "67"
RDFreader: 2020/08/14 05:52:47.464825 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 05:52:47.464830 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 05:52:47.464835 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 05:52:47.464840 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 05:52:47.464847 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 05:52:47.464852 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 05:52:47.464857 spo read:      
RDFreader: 2020/08/14 05:52:47.464862 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 05:52:47.464867 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 05:52:47.464872 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 05:52:47.464878 spo read:  d  Age  "36"
RDFreader: 2020/08/14 05:52:47.464883 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 05:52:47.464890 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 05:52:47.464894 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 05:52:47.464898 close verify channel
rdfLoader: 2020/08/14 05:52:47.464902 wait for goroutines to end
rdfLoader: 2020/08/14 05:52:47.464907 verify started....
rdfLoader: 2020/08/14 05:52:47.464912 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 05:52:47.464916 .  getType..
rdfLoader: 2020/08/14 05:52:47.464925 node.TyName : [Person]
DB: 2020/08/14 05:52:47.539283 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 74.295231ms
grmgr: 2020/08/14 05:52:47.539427 Looping..... 0
grmgr: 2020/08/14 05:52:47.539750 Looping..... 1
grmgr: 2020/08/14 05:52:47.539773 Looping..... 2
grmgr: 2020/08/14 05:52:47.539900 Looping..... 3
grmgr: 2020/08/14 05:52:47.540134 Looping..... 4
grmgr: 2020/08/14 05:52:47.540167 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 05:52:47.540184 .  getType..
rdfLoader: 2020/08/14 05:52:47.540194 node.TyName : [Person]
grmgr: 2020/08/14 05:52:47.540206 Looping..... 0
unmarshalRDF2020/08/14 05:52:47.540232 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:52:47.540253 Looping..... 1
grmgr: 2020/08/14 05:52:47.540283 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 05:52:47.540294 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 05:52:47.540312 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 05:52:47.540320 .  getType..
rdfLoader: 2020/08/14 05:52:47.540329 node.TyName : [Person]
grmgr: 2020/08/14 05:52:47.540345 Looping..... 0
rdfLoader: 2020/08/14 05:52:47.540366 Add to SS . [Honda]
rdfLoader: 2020/08/14 05:52:47.540377 Add to SS . [Alfa]
unmarshalRDF2020/08/14 05:52:47.540471 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:52:47.540483 Exit  unmarshalRDF. 
saveNode: 2020/08/14 05:52:47.540494 read from saveCH channel 1 
unmarshalRDF2020/08/14 05:52:47.540514 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:52:47.540569 Looping..... 1
grmgr: 2020/08/14 05:52:47.540574 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 05:52:47.540579 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 05:52:47.540584 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 05:52:47.540589 Looping..... 0
rdfLoader: 2020/08/14 05:52:47.540597 Add to SS . [Honda]
rdfLoader: 2020/08/14 05:52:47.540602 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 05:52:47.540644 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:52:47.540649 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 05:52:47.540655 .  getType..
rdfLoader: 2020/08/14 05:52:47.540659 node.TyName : [Person]
unmarshalRDF2020/08/14 05:52:47.540668 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:52:47.540679 Looping..... 1
rdfLoader: 2020/08/14 05:52:47.540688 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 05:52:47.540693 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 05:52:47.540697 Add to SS . [Honda]
unmarshalRDF2020/08/14 05:52:47.540741 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:52:47.540755 Exit  unmarshalRDF. 
grmgr: 2020/08/14 05:52:47.540780 Looping..... 2
grmgr: 2020/08/14 05:52:47.540963 Looping..... 3
grmgr: 2020/08/14 05:52:47.541140 Looping..... 4
grmgr: 2020/08/14 05:52:47.541327 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 05:52:47.541340 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 05:52:47.541345 Looping..... 0
saveNode: 2020/08/14 05:52:47.541351 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 05:52:47.541357 read from saveCH channel 2 
grmgr: 2020/08/14 05:52:47.541385 Looping..... 1
SaveRDFNode: xxx 2020/08/14 05:52:47.541396 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.541403 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.541409 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.541415 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.541420 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.541426 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.541432 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:52:47.541436 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:52:47.541443 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017680)}
SaveRDFNode: 2020/08/14 05:52:47.541447 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:52:47.541456 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.541460 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.541477 UID received  : 7+Mnz3LqS0OyX4gmGgbuXw==
grmgr: 2020/08/14 05:52:47.541775 Looping..... 2
grmgr: 2020/08/14 05:52:47.541921 Looping..... 3
grmgr: 2020/08/14 05:52:47.542098 Looping..... 4
grmgr: 2020/08/14 05:52:47.542318 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 05:52:47.542337 Looping..... 0
unmarshalRDF2020/08/14 05:52:47.542367 Entered unmarshalRDF. 
grmgr: 2020/08/14 05:52:47.542389 Looping..... 1
rdfLoader: 2020/08/14 05:52:47.542409 Add to SS . [Bentley]
unmarshalRDF2020/08/14 05:52:47.542502 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 05:52:47.542514 Exit  unmarshalRDF. 
grmgr: 2020/08/14 05:52:47.542566 Looping..... 2
grmgr: 2020/08/14 05:52:47.542628 Looping..... 3
grmgr: 2020/08/14 05:52:47.542651 Looping..... 4
grmgr: 2020/08/14 05:52:47.542672 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 05:52:47.542686 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 05:52:47.542696 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 05:52:47.542741 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 05:52:47.542763 read from saveCH channel 3 
grmgr: 2020/08/14 05:52:47.542775 Looping..... 0
grmgr: 2020/08/14 05:52:47.542801 Looping..... 1
grmgr: 2020/08/14 05:52:47.542807 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 05:52:47.542811 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 05:52:47.542820 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.542826 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.542833 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.542839 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.542845 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.542851 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.542857 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:52:47.542861 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:52:47.542867 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017da0)}
SaveRDFNode: 2020/08/14 05:52:47.542871 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:52:47.542894 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.542898 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.542904 UID received  : ol8vb8VjSIKoHR+Lh8z8tw==
DB: 2020/08/14 05:52:47.549619 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.110091ms
DB: 2020/08/14 05:52:47.553656 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.723676ms
DB: 2020/08/14 05:52:47.558067 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.366767ms
DB: 2020/08/14 05:52:47.561971 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.694792ms
DB: 2020/08/14 05:52:47.565614 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.606312ms
DB: 2020/08/14 05:52:47.566274 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 16.586682ms
DB: 2020/08/14 05:52:47.569296 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.647214ms
SaveRDFNode: 2020/08/14 05:52:47.569312 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 05:52:47.569320 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.569324 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.569330 Received UID: X18=
SaveRDFNode: 2020/08/14 05:52:47.569344 a: = db.Item{PKey:[]uint8{0xa2, 0x5f, 0x2f, 0x6f, 0xc5, 0x63, 0x48, 0x82, 0xa8, 0x1d, 0x1f, 0x8b, 0x87, 0xcc, 0xfc, 0xb7}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:52:47.569726 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.41991ms
DB: 2020/08/14 05:52:47.572877 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.503324ms
SaveRDFNode: 2020/08/14 05:52:47.572891 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 05:52:47.572897 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.572902 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.572907 Received UID: X18=
SaveRDFNode: 2020/08/14 05:52:47.572918 a: = db.Item{PKey:[]uint8{0xa2, 0x5f, 0x2f, 0x6f, 0xc5, 0x63, 0x48, 0x82, 0xa8, 0x1d, 0x1f, 0x8b, 0x87, 0xcc, 0xfc, 0xb7}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:52:47.573227 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.441709ms
DB: 2020/08/14 05:52:47.576473 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.51471ms
SaveRDFNode: 2020/08/14 05:52:47.576647 Returned.+++++++++++ No error
grmgr: 2020/08/14 05:52:47.576662 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 05:52:47.576669 Send ack to waiting saveNode...
saveNode: 2020/08/14 05:52:47.576675 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 05:52:47.576682 read from saveCH channel 4 
grmgr: 2020/08/14 05:52:47.576687 Looping..... 0
grmgr: 2020/08/14 05:52:47.576722 Looping..... 1
grmgr: 2020/08/14 05:52:47.576728 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 05:52:47.576733 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 05:52:47.576743 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.576750 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.576755 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.576764 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.576799 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.576807 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.576813 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:52:47.576817 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:52:47.576823 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000380720)}
SaveRDFNode: 2020/08/14 05:52:47.576827 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:52:47.576837 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.576841 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.576847 UID received  : Vyl+jcCBRLGaQ584Ivg5BA==
DB: 2020/08/14 05:52:47.577120 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.850447ms
SaveRDFNode: 2020/08/14 05:52:47.577132 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 05:52:47.577138 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.577141 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.577147 Received UID: X18=
SaveRDFNode: 2020/08/14 05:52:47.577158 a: = db.Item{PKey:[]uint8{0xef, 0xe3, 0x27, 0xcf, 0x72, 0xea, 0x4b, 0x43, 0xb2, 0x5f, 0x88, 0x26, 0x1a, 0x6, 0xee, 0x5f}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:52:47.580467 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.588828ms
DB: 2020/08/14 05:52:47.580748 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.543305ms
SaveRDFNode: 2020/08/14 05:52:47.580761 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 05:52:47.580767 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.580771 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.580777 Received UID: X18=
SaveRDFNode: 2020/08/14 05:52:47.580787 a: = db.Item{PKey:[]uint8{0xef, 0xe3, 0x27, 0xcf, 0x72, 0xea, 0x4b, 0x43, 0xb2, 0x5f, 0x88, 0x26, 0x1a, 0x6, 0xee, 0x5f}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:52:47.583984 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.158753ms
SaveRDFNode: 2020/08/14 05:52:47.583995 Returned.+++++++++++ No error
grmgr: 2020/08/14 05:52:47.584002 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 05:52:47.584007 Send ack to waiting saveNode...
saveNode: 2020/08/14 05:52:47.584012 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 05:52:47.584017 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 05:52:47.584056 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.584062 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.584111 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.584118 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.584124 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.584129 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 05:52:47.584135 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 05:52:47.584139 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 05:52:47.584145 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000381860)}
SaveRDFNode: 2020/08/14 05:52:47.584149 Waiting for UID ......................
rdfUIDdb: 2020/08/14 05:52:47.584158 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.584162 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.584168 UID received  : AEbUT1vLQsixlM+6BbgXdg==
grmgr: 2020/08/14 05:52:47.584352 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 05:52:47.584463 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.962776ms
DB: 2020/08/14 05:52:47.587333 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.140037ms
DB: 2020/08/14 05:52:47.588075 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.57969ms
DB: 2020/08/14 05:52:47.590632 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.268789ms
DB: 2020/08/14 05:52:47.591707 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.599216ms
DB: 2020/08/14 05:52:47.594382 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.717675ms
DB: 2020/08/14 05:52:47.595664 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.738821ms
SaveRDFNode: 2020/08/14 05:52:47.595679 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000380720)}
rdfUIDdb: 2020/08/14 05:52:47.595685 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.595689 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.595694 Received UID: X18=
SaveRDFNode: 2020/08/14 05:52:47.595705 a: = db.Item{PKey:[]uint8{0x57, 0x29, 0x7e, 0x8d, 0xc0, 0x81, 0x44, 0xb1, 0x9a, 0x43, 0x9f, 0x38, 0x22, 0xf8, 0x39, 0x4}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:52:47.597647 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.075077ms
DB: 2020/08/14 05:52:47.599269 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.506734ms
SaveRDFNode: 2020/08/14 05:52:47.599283 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000380720)}
rdfUIDdb: 2020/08/14 05:52:47.599295 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.599299 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.599305 Received UID: X18=
SaveRDFNode: 2020/08/14 05:52:47.599315 a: = db.Item{PKey:[]uint8{0x57, 0x29, 0x7e, 0x8d, 0xc0, 0x81, 0x44, 0xb1, 0x9a, 0x43, 0x9f, 0x38, 0x22, 0xf8, 0x39, 0x4}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:52:47.600879 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.196368ms
SaveRDFNode: 2020/08/14 05:52:47.600893 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000381860)}
rdfUIDdb: 2020/08/14 05:52:47.600899 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.600903 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.600908 Received UID: X18=
SaveRDFNode: 2020/08/14 05:52:47.600919 a: = db.Item{PKey:[]uint8{0x0, 0x46, 0xd4, 0x4f, 0x5b, 0xcb, 0x42, 0xc8, 0xb1, 0x94, 0xcf, 0xba, 0x5, 0xb8, 0x17, 0x76}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:52:47.603055 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.711209ms
SaveRDFNode: 2020/08/14 05:52:47.603066 Returned.+++++++++++ No error
grmgr: 2020/08/14 05:52:47.603073 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 05:52:47.604145 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.198596ms
SaveRDFNode: 2020/08/14 05:52:47.604159 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000381860)}
rdfUIDdb: 2020/08/14 05:52:47.604165 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 05:52:47.604169 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 05:52:47.604175 Received UID: X18=
SaveRDFNode: 2020/08/14 05:52:47.604185 a: = db.Item{PKey:[]uint8{0x0, 0x46, 0xd4, 0x4f, 0x5b, 0xcb, 0x42, 0xc8, 0xb1, 0x94, 0xcf, 0xba, 0x5, 0xb8, 0x17, 0x76}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 05:52:47.607711 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.493829ms
SaveRDFNode: 2020/08/14 05:52:47.607722 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 05:52:47.607728 saveNode finished waiting...exiting
grmgr: 2020/08/14 05:52:47.607734 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 05:52:47.607743 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 05:52:47.607748 Looping..... 0
grmgr: 2020/08/14 05:52:47.607764 Looping..... 1
grmgr: 2020/08/14 05:52:47.607850 Looping..... 2
grmgr: 2020/08/14 05:52:47.608024 Looping..... 3
grmgr: 2020/08/14 05:52:47.608206 Looping..... 4
grmgr: 2020/08/14 05:52:47.608389 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 05:52:47.608399 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:52:47.608404 goroutine about to start 1 
attachNode: 2020/08/14 05:52:47.608410 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 05:52:47.608415 Looping..... 0
grmgr: 2020/08/14 05:52:47.608433 Looping..... 1
grmgr: 2020/08/14 05:52:47.608438 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:52:47.608443 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 05:52:47.608447 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:52:47.608451 goroutine about to start 2 
attachNode: 2020/08/14 05:52:47.608456 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 05:52:47.608460 Looping..... 0
grmgr: 2020/08/14 05:52:47.609399 Looping..... 1
grmgr: 2020/08/14 05:52:47.609415 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:52:47.609421 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:52:47.611257 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.742509ms
DB: 2020/08/14 05:52:47.614012 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.716018ms
DB: 2020/08/14 05:52:47.617618 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.27284ms
DB: 2020/08/14 05:52:47.620567 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.918218ms
DB: 2020/08/14 05:52:47.624906 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 15.43516ms
DB: 2020/08/14 05:52:47.625304 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.672709ms
DB: 2020/08/14 05:52:47.627548 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.605434ms
DB: 2020/08/14 05:52:47.630791 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.903609ms
DB: 2020/08/14 05:52:47.631839 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.890434ms
FetchForUpdate: 2020/08/14 05:52:47.631871 ** Cache FetchForUpdate Cache Key Value: [ol8vb8VjSIKoHR+Lh8z8tw==]   sortk: A#G#:S
FetchNode: 2020/08/14 05:52:47.631878  node: ol8vb8VjSIKoHR+Lh8z8tw== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:52:47.632068 ** Cache FetchForUpdate Cache Key Value: [7+Mnz3LqS0OyX4gmGgbuXw==]   sortk: A#
FetchNode: 2020/08/14 05:52:47.632101  node: 7+Mnz3LqS0OyX4gmGgbuXw== subKey: A#
DB: 2020/08/14 05:52:47.633090 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.267796ms
DB: 2020/08/14 05:52:47.636065 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.143998ms
FetchForUpdate: 2020/08/14 05:52:47.636141 len(nb): 1
fetchItems: 2020/08/14 05:52:47.636152 +++  Cache FetchItems for sortk A#G#:S UID: [ol8vb8VjSIKoHR+Lh8z8tw==] 
FetchNode: 2020/08/14 05:52:47.636157  node: ol8vb8VjSIKoHR+Lh8z8tw== subKey: A#G#:S
DB: 2020/08/14 05:52:47.636966 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.783673ms
FetchForUpdate: 2020/08/14 05:52:47.637126 len(nb): 7
fetchItems: 2020/08/14 05:52:47.637141 +++  Cache FetchItems for sortk A# UID: [7+Mnz3LqS0OyX4gmGgbuXw==] 
FetchNode: 2020/08/14 05:52:47.637163  node: 7+Mnz3LqS0OyX4gmGgbuXw== subKey: A#
DB: 2020/08/14 05:52:47.640260 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.05466ms
DB: 2020/08/14 05:52:47.642136 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.945676ms
DB: 2020/08/14 05:52:47.644334 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 7.139033ms
DB: 2020/08/14 05:52:47.647509 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.544276ms
Unlock: 2020/08/14 05:52:47.647521 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
Unlock: 2020/08/14 05:52:47.652472 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/14 05:52:47.655114 ** Cache FetchForUpdate Cache Key Value: [ol8vb8VjSIKoHR+Lh8z8tw==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.655126 +++  Cache FetchItems for sortk A#G#:S UID: [ol8vb8VjSIKoHR+Lh8z8tw==] 
FetchNode: 2020/08/14 05:52:47.655131  node: ol8vb8VjSIKoHR+Lh8z8tw== subKey: A#G#:S
DB: 2020/08/14 05:52:47.657690 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 16.639162ms
FetchForUpdate: 2020/08/14 05:52:47.657718 ** Cache FetchForUpdate Cache Key Value: [Vyl+jcCBRLGaQ584Ivg5BA==]   sortk: A#G#:S
FetchNode: 2020/08/14 05:52:47.657731  node: Vyl+jcCBRLGaQ584Ivg5BA== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:52:47.658044 ** Cache FetchForUpdate Cache Key Value: [7+Mnz3LqS0OyX4gmGgbuXw==]   sortk: A#
fetchItems: 2020/08/14 05:52:47.658067 +++  Cache FetchItems for sortk A# UID: [7+Mnz3LqS0OyX4gmGgbuXw==] 
FetchNode: 2020/08/14 05:52:47.658094  node: 7+Mnz3LqS0OyX4gmGgbuXw== subKey: A#
DB: 2020/08/14 05:52:47.658392 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.185677ms
DB: 2020/08/14 05:52:47.663974 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.166087ms
FetchForUpdate: 2020/08/14 05:52:47.664062 len(nb): 1
fetchItems: 2020/08/14 05:52:47.664072 +++  Cache FetchItems for sortk A#G#:S UID: [Vyl+jcCBRLGaQ584Ivg5BA==] 
FetchNode: 2020/08/14 05:52:47.664077  node: Vyl+jcCBRLGaQ584Ivg5BA== subKey: A#G#:S
DB: 2020/08/14 05:52:47.666027 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.496026ms
DB: 2020/08/14 05:52:47.666856 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.74941ms
DB: 2020/08/14 05:52:47.670376 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.108304ms
DB: 2020/08/14 05:52:47.672045 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.946036ms
Unlock: 2020/08/14 05:52:47.672056 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:52:47.674539 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 16.393598ms
Unlock: 2020/08/14 05:52:47.674702 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
FetchForUpdate: 2020/08/14 05:52:47.674729 ** Cache FetchForUpdate Cache Key Value: [Vyl+jcCBRLGaQ584Ivg5BA==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.674734 +++  Cache FetchItems for sortk A#G#:S UID: [Vyl+jcCBRLGaQ584Ivg5BA==] 
FetchNode: 2020/08/14 05:52:47.674738  node: Vyl+jcCBRLGaQ584Ivg5BA== subKey: A#G#:S
DB: 2020/08/14 05:52:47.675039 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.299099ms
DB: 2020/08/14 05:52:47.677437 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.671243ms
DB: 2020/08/14 05:52:47.680969 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.846587ms
DB: 2020/08/14 05:52:47.683611 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.061943ms
DB: 2020/08/14 05:52:47.684900 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.767008ms
DB: 2020/08/14 05:52:47.687339 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.66664ms
DB: 2020/08/14 05:52:47.690186 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.207713ms
DB: 2020/08/14 05:52:47.691489 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.958517ms
DB: 2020/08/14 05:52:47.697779 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.673904ms
DB: 2020/08/14 05:52:47.699787 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.919018ms
DB: 2020/08/14 05:52:47.701613 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.760298ms
DB: 2020/08/14 05:52:47.703180 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.328104ms
DB: 2020/08/14 05:52:47.705496 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.797241ms
Unlock: 2020/08/14 05:52:47.705510 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/14 05:52:47.706728 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.479405ms
DB: 2020/08/14 05:52:47.709280 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.697241ms
FetchForUpdate: 2020/08/14 05:52:47.709294 ** Cache FetchForUpdate Cache Key Value: [ol8vb8VjSIKoHR+Lh8z8tw==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.709301 +++  Cache FetchItems for sortk A#G#:S UID: [ol8vb8VjSIKoHR+Lh8z8tw==] 
FetchNode: 2020/08/14 05:52:47.709306  node: ol8vb8VjSIKoHR+Lh8z8tw== subKey: A#G#:S
DB: 2020/08/14 05:52:47.712334 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.996678ms
Cache: 2020/08/14 05:52:47.712419 In SetUpredAvailable: pUid, tUID:  ol8vb8VjSIKoHR+Lh8z8tw== ol8vb8VjSIKoHR+Lh8z8tw== A#G#:S
Cache: 2020/08/14 05:52:47.712425 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:52:47.712709 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.912478ms
DB: 2020/08/14 05:52:47.716492 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.013092ms
Unlock: 2020/08/14 05:52:47.716512 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:52:47.717158 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.126408ms
DB: 2020/08/14 05:52:47.720890 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.416075ms
Unlock: 2020/08/14 05:52:47.720906 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/14 05:52:47.723615 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.728975ms
grmgr: 2020/08/14 05:52:47.723632 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:52:47.723637 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:52:47.723643 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:52:47.723648 goroutine about to start 3 
attachNode: 2020/08/14 05:52:47.723654 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 05:52:47.723659 Looping..... 0
grmgr: 2020/08/14 05:52:47.723683 Looping..... 1
grmgr: 2020/08/14 05:52:47.723689 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:52:47.723705 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:52:47.724688 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.363918ms
FetchForUpdate: 2020/08/14 05:52:47.724701 ** Cache FetchForUpdate Cache Key Value: [Vyl+jcCBRLGaQ584Ivg5BA==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.724708 +++  Cache FetchItems for sortk A#G#:S UID: [Vyl+jcCBRLGaQ584Ivg5BA==] 
FetchNode: 2020/08/14 05:52:47.724712  node: Vyl+jcCBRLGaQ584Ivg5BA== subKey: A#G#:S
DB: 2020/08/14 05:52:47.727108 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.362623ms
Cache: 2020/08/14 05:52:47.727213 In SetUpredAvailable: pUid, tUID:  Vyl+jcCBRLGaQ584Ivg5BA== Vyl+jcCBRLGaQ584Ivg5BA== A#G#:S
Cache: 2020/08/14 05:52:47.727221 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:52:47.727537 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.779242ms
DB: 2020/08/14 05:52:47.730590 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.022087ms
DB: 2020/08/14 05:52:47.731016 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.759555ms
Unlock: 2020/08/14 05:52:47.731027 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:52:47.733964 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.16961ms
DB: 2020/08/14 05:52:47.736587 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.576938ms
DB: 2020/08/14 05:52:47.737549 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.104602ms
grmgr: 2020/08/14 05:52:47.737577 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:52:47.737588 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:52:47.737600 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:52:47.737609 goroutine about to start 4 
attachNode: 2020/08/14 05:52:47.737621 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 05:52:47.737637 Looping..... 0
grmgr: 2020/08/14 05:52:47.737741 Looping..... 1
grmgr: 2020/08/14 05:52:47.737757 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:52:47.737777 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:52:47.741107 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.18346ms
DB: 2020/08/14 05:52:47.741468 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.833018ms
DB: 2020/08/14 05:52:47.743785 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.609231ms
DB: 2020/08/14 05:52:47.746401 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.751387ms
FetchForUpdate: 2020/08/14 05:52:47.746415 ** Cache FetchForUpdate Cache Key Value: [7+Mnz3LqS0OyX4gmGgbuXw==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.746421 +++  Cache FetchItems for sortk A#G#:S UID: [7+Mnz3LqS0OyX4gmGgbuXw==] 
FetchNode: 2020/08/14 05:52:47.746426  node: 7+Mnz3LqS0OyX4gmGgbuXw== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:52:47.746647 ** Cache FetchForUpdate Cache Key Value: [ol8vb8VjSIKoHR+Lh8z8tw==]   sortk: A#
fetchItems: 2020/08/14 05:52:47.746658 +++  Cache FetchItems for sortk A# UID: [ol8vb8VjSIKoHR+Lh8z8tw==] 
FetchNode: 2020/08/14 05:52:47.746692  node: ol8vb8VjSIKoHR+Lh8z8tw== subKey: A#
DB: 2020/08/14 05:52:47.747182 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.259533ms
DB: 2020/08/14 05:52:47.750165 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.41408ms
Unlock: 2020/08/14 05:52:47.752202 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:52:47.754228 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 7.753994ms
DB: 2020/08/14 05:52:47.756323 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 9.110253ms
DB: 2020/08/14 05:52:47.758508 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.920727ms
Unlock: 2020/08/14 05:52:47.758519 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
FetchForUpdate: 2020/08/14 05:52:47.758891 ** Cache FetchForUpdate Cache Key Value: [7+Mnz3LqS0OyX4gmGgbuXw==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.758904 +++  Cache FetchItems for sortk A#G#:S UID: [7+Mnz3LqS0OyX4gmGgbuXw==] 
FetchNode: 2020/08/14 05:52:47.758909  node: 7+Mnz3LqS0OyX4gmGgbuXw== subKey: A#G#:S
DB: 2020/08/14 05:52:47.760058 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.687396ms
DB: 2020/08/14 05:52:47.764051 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.690361ms
FetchForUpdate: 2020/08/14 05:52:47.764065 ** Cache FetchForUpdate Cache Key Value: [Vyl+jcCBRLGaQ584Ivg5BA==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.764071 +++  Cache FetchItems for sortk A#G#:S UID: [Vyl+jcCBRLGaQ584Ivg5BA==] 
FetchNode: 2020/08/14 05:52:47.764076  node: Vyl+jcCBRLGaQ584Ivg5BA== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:52:47.765063 ** Cache FetchForUpdate Cache Key Value: [ol8vb8VjSIKoHR+Lh8z8tw==]   sortk: A#
fetchItems: 2020/08/14 05:52:47.765078 +++  Cache FetchItems for sortk A# UID: [ol8vb8VjSIKoHR+Lh8z8tw==] 
FetchNode: 2020/08/14 05:52:47.765112  node: ol8vb8VjSIKoHR+Lh8z8tw== subKey: A#
DB: 2020/08/14 05:52:47.767335 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.927653ms
DB: 2020/08/14 05:52:47.769156 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.985783ms
Unlock: 2020/08/14 05:52:47.770753 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:52:47.771820 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.820113ms
DB: 2020/08/14 05:52:47.773765 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 14.823695ms
DB: 2020/08/14 05:52:47.775164 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.310396ms
DB: 2020/08/14 05:52:47.775180 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.310396ms
DB: 2020/08/14 05:52:47.778553 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.342248ms
DB: 2020/08/14 05:52:47.778570 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.342248ms
DB: 2020/08/14 05:52:47.779910 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.501003ms
DB: 2020/08/14 05:52:47.782547 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.762274ms
DB: 2020/08/14 05:52:47.783717 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.510006ms
DB: 2020/08/14 05:52:47.786402 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.488579ms
Unlock: 2020/08/14 05:52:47.786414 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:52:47.788971 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.556015ms
DB: 2020/08/14 05:52:47.794658 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.943966ms
DB: 2020/08/14 05:52:47.795620 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.048668ms
DB: 2020/08/14 05:52:47.798274 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.229137ms
DB: 2020/08/14 05:52:47.800541 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.26685ms
DB: 2020/08/14 05:52:47.801818 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.441071ms
DB: 2020/08/14 05:52:47.804218 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.609855ms
DB: 2020/08/14 05:52:47.807878 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.996798ms
DB: 2020/08/14 05:52:47.810252 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.961969ms
DB: 2020/08/14 05:52:47.811511 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.327404ms
DB: 2020/08/14 05:52:47.814233 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.509613ms
DB: 2020/08/14 05:52:47.815400 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.506181ms
DB: 2020/08/14 05:52:47.818483 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.563867ms
Unlock: 2020/08/14 05:52:47.818602 ******* IN UNLOCK NC ********************  unSet parent lock in propgatechilddata...2
DB: 2020/08/14 05:52:47.821936 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.964699ms
DB: 2020/08/14 05:52:47.822728 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.502874ms
FetchForUpdate: 2020/08/14 05:52:47.822739 ** Cache FetchForUpdate Cache Key Value: [7+Mnz3LqS0OyX4gmGgbuXw==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.822746 +++  Cache FetchItems for sortk A#G#:S UID: [7+Mnz3LqS0OyX4gmGgbuXw==] 
FetchNode: 2020/08/14 05:52:47.822751  node: 7+Mnz3LqS0OyX4gmGgbuXw== subKey: A#G#:S
DB: 2020/08/14 05:52:47.825260 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.477843ms
Cache: 2020/08/14 05:52:47.825355 In SetUpredAvailable: pUid, tUID:  7+Mnz3LqS0OyX4gmGgbuXw== 7+Mnz3LqS0OyX4gmGgbuXw== A#G#:S
Cache: 2020/08/14 05:52:47.825362 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:52:47.825713 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.255109ms
DB: 2020/08/14 05:52:47.828785 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.392755ms
Unlock: 2020/08/14 05:52:47.828797 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:52:47.830286 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.967373ms
DB: 2020/08/14 05:52:47.833712 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.354131ms
FetchForUpdate: 2020/08/14 05:52:47.833728 ** Cache FetchForUpdate Cache Key Value: [Vyl+jcCBRLGaQ584Ivg5BA==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.833734 +++  Cache FetchItems for sortk A#G#:S UID: [Vyl+jcCBRLGaQ584Ivg5BA==] 
FetchNode: 2020/08/14 05:52:47.833738  node: Vyl+jcCBRLGaQ584Ivg5BA== subKey: A#G#:S
DB: 2020/08/14 05:52:47.835994 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.461709ms
grmgr: 2020/08/14 05:52:47.836013 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:52:47.836019 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:52:47.836025 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:52:47.836029 goroutine about to start 5 
attachNode: 2020/08/14 05:52:47.836051 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 05:52:47.836056 Looping..... 0
grmgr: 2020/08/14 05:52:47.836217 Looping..... 1
grmgr: 2020/08/14 05:52:47.836229 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 05:52:47.836233 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 05:52:47.836853 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.085126ms
Cache: 2020/08/14 05:52:47.836946 In SetUpredAvailable: pUid, tUID:  Vyl+jcCBRLGaQ584Ivg5BA== 9eBUqt3uR0WIxxVZoT5ehw== A#G#:S
Cache: 2020/08/14 05:52:47.836953 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:52:47.838796 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.361494ms
DB: 2020/08/14 05:52:47.840292 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.308361ms
Unlock: 2020/08/14 05:52:47.840303 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:52:47.841201 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.342955ms
DB: 2020/08/14 05:52:47.843782 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.375439ms
DB: 2020/08/14 05:52:47.844418 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.722327ms
grmgr: 2020/08/14 05:52:47.844440 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 05:52:47.844445 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 05:52:47.844470 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 05:52:47.844475 goroutine about to start 6 
rdfLoader: 2020/08/14 05:52:47.844492 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 05:52:47.844824 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 05:52:47.846247 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.433921ms
DB: 2020/08/14 05:52:47.847543 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.871609ms
DB: 2020/08/14 05:52:47.849820 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.402218ms
DB: 2020/08/14 05:52:47.850481 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.906247ms
DB: 2020/08/14 05:52:47.852580 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 1.923751ms
DB: 2020/08/14 05:52:47.853977 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.851353ms
FetchForUpdate: 2020/08/14 05:52:47.853991 ** Cache FetchForUpdate Cache Key Value: [7+Mnz3LqS0OyX4gmGgbuXw==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.853997 +++  Cache FetchItems for sortk A#G#:S UID: [7+Mnz3LqS0OyX4gmGgbuXw==] 
FetchNode: 2020/08/14 05:52:47.854002  node: 7+Mnz3LqS0OyX4gmGgbuXw== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:52:47.854234 ** Cache FetchForUpdate Cache Key Value: [Vyl+jcCBRLGaQ584Ivg5BA==]   sortk: A#
fetchItems: 2020/08/14 05:52:47.854244 +++  Cache FetchItems for sortk A# UID: [Vyl+jcCBRLGaQ584Ivg5BA==] 
FetchNode: 2020/08/14 05:52:47.854255  node: Vyl+jcCBRLGaQ584Ivg5BA== subKey: A#
DB: 2020/08/14 05:52:47.854597 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 1.888763ms
DB: 2020/08/14 05:52:47.856438 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.385082ms
DB: 2020/08/14 05:52:47.858049 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.753462ms
Unlock: 2020/08/14 05:52:47.859674 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:52:47.860193 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.544936ms
DB: 2020/08/14 05:52:47.860738 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.787518ms
DB: 2020/08/14 05:52:47.863953 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.184888ms
DB: 2020/08/14 05:52:47.864106 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.184888ms
DB: 2020/08/14 05:52:47.864431 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.958347ms
FetchForUpdate: 2020/08/14 05:52:47.864444 ** Cache FetchForUpdate Cache Key Value: [ol8vb8VjSIKoHR+Lh8z8tw==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.864450 +++  Cache FetchItems for sortk A#G#:S UID: [ol8vb8VjSIKoHR+Lh8z8tw==] 
FetchNode: 2020/08/14 05:52:47.864454  node: ol8vb8VjSIKoHR+Lh8z8tw== subKey: A#G#:S
FetchForUpdate: 2020/08/14 05:52:47.864660 ** Cache FetchForUpdate Cache Key Value: [Vyl+jcCBRLGaQ584Ivg5BA==]   sortk: A#
fetchItems: 2020/08/14 05:52:47.864684 +++  Cache FetchItems for sortk A# UID: [Vyl+jcCBRLGaQ584Ivg5BA==] 
FetchNode: 2020/08/14 05:52:47.864696  node: Vyl+jcCBRLGaQ584Ivg5BA== subKey: A#
DB: 2020/08/14 05:52:47.867677 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.192021ms
DB: 2020/08/14 05:52:47.868929 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.156119ms
Unlock: 2020/08/14 05:52:47.870563 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 05:52:47.871122 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.944962ms
DB: 2020/08/14 05:52:47.871139 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.944962ms
DB: 2020/08/14 05:52:47.873355 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.055367ms
DB: 2020/08/14 05:52:47.875338 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.998654ms
DB: 2020/08/14 05:52:47.876776 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.387927ms
DB: 2020/08/14 05:52:47.876794 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.387927ms
DB: 2020/08/14 05:52:47.879138 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.596266ms
Unlock: 2020/08/14 05:52:47.879309 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:52:47.880502 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.67902ms
DB: 2020/08/14 05:52:47.880522 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.67902ms
DB: 2020/08/14 05:52:47.885125 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.431196ms
DB: 2020/08/14 05:52:47.885467 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.257824ms
DB: 2020/08/14 05:52:47.888648 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.452308ms
Unlock: 2020/08/14 05:52:47.888661 ******* IN UNLOCK NC ********************  Unlock from main goroutine in AttachNode..
DB: 2020/08/14 05:52:47.889006 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.479787ms
DB: 2020/08/14 05:52:47.892614 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.50288ms
DB: 2020/08/14 05:52:47.894772 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.01183ms
DB: 2020/08/14 05:52:47.898396 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.431793ms
DB: 2020/08/14 05:52:47.899197 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.244819ms
DB: 2020/08/14 05:52:47.902440 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.479777ms
DB: 2020/08/14 05:52:47.903127 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.603869ms
DB: 2020/08/14 05:52:47.907051 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.584244ms
DB: 2020/08/14 05:52:47.908737 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.879488ms
DB: 2020/08/14 05:52:47.912513 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.431064ms
DB: 2020/08/14 05:52:47.913332 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.95296ms
DB: 2020/08/14 05:52:47.916288 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.442218ms
DB: 2020/08/14 05:52:47.917131 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.365733ms
DB: 2020/08/14 05:52:47.921471 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.85424ms
DB: 2020/08/14 05:52:47.922607 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.835788ms
DB: 2020/08/14 05:52:47.925402 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.643882ms
FetchForUpdate: 2020/08/14 05:52:47.925415 ** Cache FetchForUpdate Cache Key Value: [7+Mnz3LqS0OyX4gmGgbuXw==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.925423 +++  Cache FetchItems for sortk A#G#:S UID: [7+Mnz3LqS0OyX4gmGgbuXw==] 
FetchNode: 2020/08/14 05:52:47.925428  node: 7+Mnz3LqS0OyX4gmGgbuXw== subKey: A#G#:S
DB: 2020/08/14 05:52:47.926074 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.149994ms
DB: 2020/08/14 05:52:47.928259 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.783598ms
Cache: 2020/08/14 05:52:47.928347 In SetUpredAvailable: pUid, tUID:  7+Mnz3LqS0OyX4gmGgbuXw== +jxERqC2QBqfBRWu78uabg== A#G#:S
Cache: 2020/08/14 05:52:47.928354 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:52:47.930304 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.872942ms
DB: 2020/08/14 05:52:47.931931 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.545449ms
Unlock: 2020/08/14 05:52:47.932050 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:52:47.933883 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.38448ms
FetchForUpdate: 2020/08/14 05:52:47.933895 ** Cache FetchForUpdate Cache Key Value: [ol8vb8VjSIKoHR+Lh8z8tw==]   sortk: A#G#:S
fetchItems: 2020/08/14 05:52:47.933902 +++  Cache FetchItems for sortk A#G#:S UID: [ol8vb8VjSIKoHR+Lh8z8tw==] 
FetchNode: 2020/08/14 05:52:47.933906  node: ol8vb8VjSIKoHR+Lh8z8tw== subKey: A#G#:S
DB: 2020/08/14 05:52:47.936347 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.823582ms
grmgr: 2020/08/14 05:52:47.936363 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 05:52:47.937070 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.110212ms
Cache: 2020/08/14 05:52:47.937298 In SetUpredAvailable: pUid, tUID:  ol8vb8VjSIKoHR+Lh8z8tw== iDZaen0USCmLeXb/8+RRDg== A#G#:S
Cache: 2020/08/14 05:52:47.937479 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 05:52:47.940953 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.431857ms
Unlock: 2020/08/14 05:52:47.940976 ******* IN UNLOCK NC ********************
DB: 2020/08/14 05:52:47.944874 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.819091ms
rdfLoader: 2020/08/14 05:52:47.944889 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 05:52:47.944895 cancel contexts
rdfLoader: 2020/08/14 05:52:47.944901 wait for autonomous goroutines to end
errlog: 2020/08/14 05:52:47.944906 Powering down...
grmgr: 2020/08/14 05:52:47.944913 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 05:52:47.944918 Powering down...
rdfuuid: 2020/08/14 05:52:47.944924 Powering down...
rdfLoader: 2020/08/14 05:52:47.944929 loader exists.....
DB:2020/08/14 06:44:40 log.go:18: ===============================================================================
errlog: 2020/08/14 06:44:40.386456 Powering on...
rdfLoader: 2020/08/14 06:44:40.387161 saveNode started......
rdfLoader: 2020/08/14 06:44:40.387172 define saveNode limiter......
rdfuuid: 2020/08/14 06:44:40.387181 Powering on...
grmgr: 2020/08/14 06:44:40.387197 Powering on...
rdfLoader: 2020/08/14 06:44:40.387208  principle goroutines started 
RDFreader: 2020/08/14 06:44:40.387233 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 06:44:40.387255 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 06:44:40.387262 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 06:44:40.387267 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 06:44:40.387273 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 06:44:40.387278 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 06:44:40.387282 spo read:      
RDFreader: 2020/08/14 06:44:40.387287 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 06:44:40.387292 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 06:44:40.387297 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 06:44:40.387302 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 06:44:40.387306 spo read:      
RDFreader: 2020/08/14 06:44:40.387312 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 06:44:40.387317 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 06:44:40.387321 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 06:44:40.387326 spo read:  b  Age  "58"
RDFreader: 2020/08/14 06:44:40.387332 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 06:44:40.387336 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 06:44:40.387342 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 06:44:40.387347 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 06:44:40.387351 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 06:44:40.387355 spo read:      
RDFreader: 2020/08/14 06:44:40.387360 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 06:44:40.387364 Send node batch on channel verifyCh
RDFreader: 2020/08/14 06:44:40.387369 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 06:44:40.387373 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 06:44:40.387378 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 06:44:40.387385 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 06:44:40.387390 spo read:  c  Age  "67"
RDFreader: 2020/08/14 06:44:40.387395 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 06:44:40.387400 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 06:44:40.387405 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 06:44:40.387410 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 06:44:40.387416 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 06:44:40.387421 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 06:44:40.387426 spo read:      
RDFreader: 2020/08/14 06:44:40.387431 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 06:44:40.387435 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 06:44:40.387440 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 06:44:40.387445 spo read:  d  Age  "36"
RDFreader: 2020/08/14 06:44:40.387450 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 06:44:40.387456 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 06:44:40.387460 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 06:44:40.387464 close verify channel
rdfLoader: 2020/08/14 06:44:40.387468 wait for goroutines to end
rdfLoader: 2020/08/14 06:44:40.387472 verify started....
rdfLoader: 2020/08/14 06:44:40.387477 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 06:44:40.387481 .  getType..
rdfLoader: 2020/08/14 06:44:40.387485 node.TyName : [Person]
DB: 2020/08/14 06:44:40.463539 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 75.983121ms
grmgr: 2020/08/14 06:44:40.463717 Looping..... 0
grmgr: 2020/08/14 06:44:40.463991 Looping..... 1
grmgr: 2020/08/14 06:44:40.464024 Looping..... 2
grmgr: 2020/08/14 06:44:40.464171 Looping..... 3
grmgr: 2020/08/14 06:44:40.464349 Looping..... 4
grmgr: 2020/08/14 06:44:40.464528 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 06:44:40.464540 .  getType..
rdfLoader: 2020/08/14 06:44:40.464545 node.TyName : [Person]
grmgr: 2020/08/14 06:44:40.464551 Looping..... 0
unmarshalRDF2020/08/14 06:44:40.464563 Entered unmarshalRDF. 
grmgr: 2020/08/14 06:44:40.464573 Looping..... 1
grmgr: 2020/08/14 06:44:40.464579 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 06:44:40.464593 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 06:44:40.464601 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 06:44:40.464605 .  getType..
rdfLoader: 2020/08/14 06:44:40.464609 node.TyName : [Person]
grmgr: 2020/08/14 06:44:40.464614 Looping..... 0
rdfLoader: 2020/08/14 06:44:40.464625 Add to SS . [Honda]
rdfLoader: 2020/08/14 06:44:40.464630 Add to SS . [Alfa]
unmarshalRDF2020/08/14 06:44:40.464706 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 06:44:40.464715 Exit  unmarshalRDF. 
saveNode: 2020/08/14 06:44:40.464721 read from saveCH channel 1 
unmarshalRDF2020/08/14 06:44:40.464730 Entered unmarshalRDF. 
grmgr: 2020/08/14 06:44:40.464757 Looping..... 1
grmgr: 2020/08/14 06:44:40.464763 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 06:44:40.464768 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 06:44:40.464773 Looping..... 0
rdfLoader: 2020/08/14 06:44:40.464782 Add to SS . [Honda]
rdfLoader: 2020/08/14 06:44:40.464787 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 06:44:40.464825 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 06:44:40.464830 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 06:44:40.464840 .  getType..
rdfLoader: 2020/08/14 06:44:40.464844 node.TyName : [Person]
unmarshalRDF2020/08/14 06:44:40.464853 Entered unmarshalRDF. 
grmgr: 2020/08/14 06:44:40.464864 Looping..... 1
rdfLoader: 2020/08/14 06:44:40.464873 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 06:44:40.464877 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 06:44:40.464882 Add to SS . [Honda]
unmarshalRDF2020/08/14 06:44:40.464942 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 06:44:40.464950 Exit  unmarshalRDF. 
grmgr: 2020/08/14 06:44:40.464977 Looping..... 2
grmgr: 2020/08/14 06:44:40.465158 Looping..... 3
grmgr: 2020/08/14 06:44:40.465350 Looping..... 4
grmgr: 2020/08/14 06:44:40.465515 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 06:44:40.465526 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 06:44:40.465531 Looping..... 0
saveNode: 2020/08/14 06:44:40.465537 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 06:44:40.465543 read from saveCH channel 2 
grmgr: 2020/08/14 06:44:40.465584 Looping..... 1
SaveRDFNode: xxx 2020/08/14 06:44:40.465595 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.465607 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.465614 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.465619 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.465625 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.465631 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.465636 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 06:44:40.465640 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 06:44:40.465648 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017440)}
SaveRDFNode: 2020/08/14 06:44:40.465652 Waiting for UID ......................
rdfUIDdb: 2020/08/14 06:44:40.465673 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.465678 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.465685 UID received  : 7ky8Y01zS+uvJBmdwT5cQw==
grmgr: 2020/08/14 06:44:40.465949 Looping..... 2
grmgr: 2020/08/14 06:44:40.466112 Looping..... 3
grmgr: 2020/08/14 06:44:40.466289 Looping..... 4
grmgr: 2020/08/14 06:44:40.466467 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 06:44:40.466476 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 06:44:40.466481 Looping..... 0
unmarshalRDF2020/08/14 06:44:40.466495 Entered unmarshalRDF. 
grmgr: 2020/08/14 06:44:40.466506 Looping..... 1
rdfLoader: 2020/08/14 06:44:40.466516 Add to SS . [Bentley]
unmarshalRDF2020/08/14 06:44:40.466550 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 06:44:40.466554 Exit  unmarshalRDF. 
grmgr: 2020/08/14 06:44:40.466565 Looping..... 2
grmgr: 2020/08/14 06:44:40.466647 Looping..... 3
grmgr: 2020/08/14 06:44:40.466824 Looping..... 4
grmgr: 2020/08/14 06:44:40.467005 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 06:44:40.467017 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 06:44:40.467022 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 06:44:40.467028 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 06:44:40.467033 read from saveCH channel 3 
grmgr: 2020/08/14 06:44:40.467038 Looping..... 0
grmgr: 2020/08/14 06:44:40.467066 Looping..... 1
grmgr: 2020/08/14 06:44:40.467072 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 06:44:40.467076 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 06:44:40.467085 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.467091 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.467098 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.467104 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.467116 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.467121 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.467127 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 06:44:40.467131 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 06:44:40.467137 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017920)}
SaveRDFNode: 2020/08/14 06:44:40.467141 Waiting for UID ......................
rdfUIDdb: 2020/08/14 06:44:40.467166 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.467172 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.467177 UID received  : Bjpj5htfS8er0wwyQ/qdew==
DB: 2020/08/14 06:44:40.475445 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.728546ms
DB: 2020/08/14 06:44:40.480246 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 13.040961ms
DB: 2020/08/14 06:44:40.485906 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.738533ms
DB: 2020/08/14 06:44:40.490613 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.668472ms
DB: 2020/08/14 06:44:40.495390 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.741105ms
DB: 2020/08/14 06:44:40.498318 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 22.825132ms
DB: 2020/08/14 06:44:40.500079 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.651313ms
SaveRDFNode: 2020/08/14 06:44:40.500114 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017920)}
rdfUIDdb: 2020/08/14 06:44:40.500123 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.500128 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.500134 Received UID: X18=
SaveRDFNode: 2020/08/14 06:44:40.500171 a: = db.Item{PKey:[]uint8{0x6, 0x3a, 0x63, 0xe6, 0x1b, 0x5f, 0x4b, 0xc7, 0xab, 0xd3, 0xc, 0x32, 0x43, 0xfa, 0x9d, 0x7b}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:44:40.503691 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.168331ms
DB: 2020/08/14 06:44:40.508878 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.152522ms
DB: 2020/08/14 06:44:40.514019 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.103212ms
SaveRDFNode: 2020/08/14 06:44:40.514207 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 06:44:40.514221 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.514226 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.514232 Received UID: X18=
SaveRDFNode: 2020/08/14 06:44:40.514244 a: = db.Item{PKey:[]uint8{0xee, 0x4c, 0xbc, 0x63, 0x4d, 0x73, 0x4b, 0xeb, 0xaf, 0x24, 0x19, 0x9d, 0xc1, 0x3e, 0x5c, 0x43}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:44:40.519482 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.204102ms
SaveRDFNode: 2020/08/14 06:44:40.519504 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 06:44:40.519510 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.519514 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.519521 Received UID: X18=
SaveRDFNode: 2020/08/14 06:44:40.519537 a: = db.Item{PKey:[]uint8{0xee, 0x4c, 0xbc, 0x63, 0x4d, 0x73, 0x4b, 0xeb, 0xaf, 0x24, 0x19, 0x9d, 0xc1, 0x3e, 0x5c, 0x43}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:44:40.525069 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.464175ms
SaveRDFNode: 2020/08/14 06:44:40.525085 Returned.+++++++++++ No error
grmgr: 2020/08/14 06:44:40.525096 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 06:44:40.525101 Send ack to waiting saveNode...
saveNode: 2020/08/14 06:44:40.525108 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 06:44:40.525114 read from saveCH channel 4 
grmgr: 2020/08/14 06:44:40.525119 Looping..... 0
grmgr: 2020/08/14 06:44:40.525180 Looping..... 1
grmgr: 2020/08/14 06:44:40.525187 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 06:44:40.525192 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 06:44:40.525202 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.525209 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.525217 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.525223 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.525229 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.525235 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.525241 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 06:44:40.525245 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 06:44:40.525252 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000446300)}
SaveRDFNode: 2020/08/14 06:44:40.525258 Waiting for UID ......................
rdfUIDdb: 2020/08/14 06:44:40.525269 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.525273 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.525279 UID received  : d70EXov2QF2f8UIZXVH+MQ==
DB: 2020/08/14 06:44:40.530643 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.307792ms
DB: 2020/08/14 06:44:40.535900 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.055195ms
DB: 2020/08/14 06:44:40.540993 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.052137ms
DB: 2020/08/14 06:44:40.545066 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 44.860219ms
SaveRDFNode: 2020/08/14 06:44:40.545084 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017920)}
rdfUIDdb: 2020/08/14 06:44:40.545092 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.545096 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.545103 Received UID: X18=
SaveRDFNode: 2020/08/14 06:44:40.545115 a: = db.Item{PKey:[]uint8{0x6, 0x3a, 0x63, 0xe6, 0x1b, 0x5f, 0x4b, 0xc7, 0xab, 0xd3, 0xc, 0x32, 0x43, 0xfa, 0x9d, 0x7b}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:44:40.546232 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.202457ms
DB: 2020/08/14 06:44:40.550288 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.138553ms
SaveRDFNode: 2020/08/14 06:44:40.550301 Returned.+++++++++++ No error
grmgr: 2020/08/14 06:44:40.550312 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 06:44:40.550317 Send ack to waiting saveNode...
saveNode: 2020/08/14 06:44:40.550323 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 06:44:40.550340 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 06:44:40.550390 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.550399 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.550407 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.550413 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.550418 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.550424 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 06:44:40.550434 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 06:44:40.550439 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 06:44:40.550445 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000447020)}
SaveRDFNode: 2020/08/14 06:44:40.550449 Waiting for UID ......................
rdfUIDdb: 2020/08/14 06:44:40.550460 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.550465 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.550470 UID received  : cunwdaUmSBmjw6tkm/Xq7Q==
grmgr: 2020/08/14 06:44:40.550687 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 06:44:40.551511 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.041097ms
SaveRDFNode: 2020/08/14 06:44:40.551525 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000446300)}
rdfUIDdb: 2020/08/14 06:44:40.551530 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.551534 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.551540 Received UID: X18=
SaveRDFNode: 2020/08/14 06:44:40.551551 a: = db.Item{PKey:[]uint8{0x77, 0xbd, 0x4, 0x5e, 0x8b, 0xf6, 0x40, 0x5d, 0x9f, 0xf1, 0x42, 0x19, 0x5d, 0x51, 0xfe, 0x31}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:44:40.555406 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.887725ms
DB: 2020/08/14 06:44:40.556825 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.239134ms
SaveRDFNode: 2020/08/14 06:44:40.556843 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000446300)}
rdfUIDdb: 2020/08/14 06:44:40.556850 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.556854 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.556860 Received UID: X18=
SaveRDFNode: 2020/08/14 06:44:40.556871 a: = db.Item{PKey:[]uint8{0x77, 0xbd, 0x4, 0x5e, 0x8b, 0xf6, 0x40, 0x5d, 0x9f, 0xf1, 0x42, 0x19, 0x5d, 0x51, 0xfe, 0x31}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:44:40.562123 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.677529ms
DB: 2020/08/14 06:44:40.563299 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.111712ms
SaveRDFNode: 2020/08/14 06:44:40.563311 Returned.+++++++++++ No error
grmgr: 2020/08/14 06:44:40.563325 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 06:44:40.567627 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.509901ms
DB: 2020/08/14 06:44:40.572309 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.646296ms
DB: 2020/08/14 06:44:40.576781 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.438639ms
SaveRDFNode: 2020/08/14 06:44:40.576811 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000447020)}
rdfUIDdb: 2020/08/14 06:44:40.576820 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.576824 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.576830 Received UID: X18=
SaveRDFNode: 2020/08/14 06:44:40.576842 a: = db.Item{PKey:[]uint8{0x72, 0xe9, 0xf0, 0x75, 0xa5, 0x26, 0x48, 0x19, 0xa3, 0xc3, 0xab, 0x64, 0x9b, 0xf5, 0xea, 0xed}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:44:40.581439 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.565145ms
SaveRDFNode: 2020/08/14 06:44:40.581457 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000447020)}
rdfUIDdb: 2020/08/14 06:44:40.581464 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:44:40.581468 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:44:40.581474 Received UID: X18=
SaveRDFNode: 2020/08/14 06:44:40.581488 a: = db.Item{PKey:[]uint8{0x72, 0xe9, 0xf0, 0x75, 0xa5, 0x26, 0x48, 0x19, 0xa3, 0xc3, 0xab, 0x64, 0x9b, 0xf5, 0xea, 0xed}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:44:40.586203 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.680152ms
SaveRDFNode: 2020/08/14 06:44:40.586216 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 06:44:40.586240 saveNode finished waiting...exiting
grmgr: 2020/08/14 06:44:40.586250 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 06:44:40.586259 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 06:44:40.586265 Looping..... 0
grmgr: 2020/08/14 06:44:40.586301 Looping..... 1
grmgr: 2020/08/14 06:44:40.586321 Looping..... 2
grmgr: 2020/08/14 06:44:40.586477 Looping..... 3
grmgr: 2020/08/14 06:44:40.586654 Looping..... 4
grmgr: 2020/08/14 06:44:40.586860 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 06:44:40.587089 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:44:40.587100 goroutine about to start 1 
attachNode: 2020/08/14 06:44:40.587142 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 06:44:40.587306 Looping..... 0
grmgr: 2020/08/14 06:44:40.588909 Looping..... 1
grmgr: 2020/08/14 06:44:40.588923 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 06:44:40.588928 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 06:44:40.588935 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:44:40.588939 goroutine about to start 2 
attachNode: 2020/08/14 06:44:40.588946 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 06:44:40.588951 Looping..... 0
grmgr: 2020/08/14 06:44:40.589883 Looping..... 1
grmgr: 2020/08/14 06:44:40.589895 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 06:44:40.589908 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 06:44:40.593088 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.378764ms
DB: 2020/08/14 06:44:40.596314 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.192565ms
DB: 2020/08/14 06:44:40.599062 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.704008ms
DB: 2020/08/14 06:44:40.601901 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.800879ms
DB: 2020/08/14 06:44:40.606845 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.887301ms
DB: 2020/08/14 06:44:40.607910 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 17.659669ms
DB: 2020/08/14 06:44:40.611054 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.060708ms
DB: 2020/08/14 06:44:40.614472 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.986146ms
DB: 2020/08/14 06:44:40.614920 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.892987ms
FetchForUpdate: 2020/08/14 06:44:40.614938 ** Cache FetchForUpdate Cache Key Value: [Bjpj5htfS8er0wwyQ/qdew==]   sortk: A#G#:S
FetchNode: 2020/08/14 06:44:40.614946  node: Bjpj5htfS8er0wwyQ/qdew== subKey: A#G#:S
FetchForUpdate: 2020/08/14 06:44:40.615312 ** Cache FetchForUpdate Cache Key Value: [7ky8Y01zS+uvJBmdwT5cQw==]   sortk: A#
FetchNode: 2020/08/14 06:44:40.615337  node: 7ky8Y01zS+uvJBmdwT5cQw== subKey: A#
DB: 2020/08/14 06:44:40.617721 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.212531ms
DB: 2020/08/14 06:44:40.618467 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.489064ms
FetchForUpdate: 2020/08/14 06:44:40.618555 len(nb): 1
fetchItems: 2020/08/14 06:44:40.618566 +++  Cache FetchItems for sortk A#G#:S UID: [Bjpj5htfS8er0wwyQ/qdew==] 
FetchNode: 2020/08/14 06:44:40.618571  node: Bjpj5htfS8er0wwyQ/qdew== subKey: A#G#:S
DB: 2020/08/14 06:44:40.622825 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 7.423642ms
FetchForUpdate: 2020/08/14 06:44:40.622958 len(nb): 7
fetchItems: 2020/08/14 06:44:40.622968 +++  Cache FetchItems for sortk A# UID: [7ky8Y01zS+uvJBmdwT5cQw==] 
FetchNode: 2020/08/14 06:44:40.622973  node: 7ky8Y01zS+uvJBmdwT5cQw== subKey: A#
DB: 2020/08/14 06:44:40.625129 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.317387ms
DB: 2020/08/14 06:44:40.627596 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 8.995504ms
DB: 2020/08/14 06:44:40.632126 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.277098ms
FetchForUpdate: 2020/08/14 06:44:40.632142 ** Cache FetchForUpdate Cache Key Value: [d70EXov2QF2f8UIZXVH+MQ==]   sortk: A#G#:S
FetchNode: 2020/08/14 06:44:40.632149  node: d70EXov2QF2f8UIZXVH+MQ== subKey: A#G#:S
DB: 2020/08/14 06:44:40.632546 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 9.544613ms
FetchForUpdate: 2020/08/14 06:44:40.632664 ** Cache FetchForUpdate Cache Key Value: [7ky8Y01zS+uvJBmdwT5cQw==]   sortk: A#
Unlock: 2020/08/14 06:44:40.634734 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/14 06:44:40.635149 +++  Cache FetchItems for sortk A# UID: [7ky8Y01zS+uvJBmdwT5cQw==] 
FetchNode: 2020/08/14 06:44:40.635170  node: 7ky8Y01zS+uvJBmdwT5cQw== subKey: A#
DB: 2020/08/14 06:44:40.639772 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.205007ms
DB: 2020/08/14 06:44:40.642345 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 7.094606ms
Unlock: 2020/08/14 06:44:40.642493 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 06:44:40.647783 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 15.596591ms
FetchForUpdate: 2020/08/14 06:44:40.647819 len(nb): 1
fetchItems: 2020/08/14 06:44:40.647826 +++  Cache FetchItems for sortk A#G#:S UID: [d70EXov2QF2f8UIZXVH+MQ==] 
FetchNode: 2020/08/14 06:44:40.647831  node: d70EXov2QF2f8UIZXVH+MQ== subKey: A#G#:S
DB: 2020/08/14 06:44:40.648189 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.188967ms
DB: 2020/08/14 06:44:40.653532 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.152365ms
DB: 2020/08/14 06:44:40.659655 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.731332ms
DB: 2020/08/14 06:44:40.665701 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 17.834979ms
DB: 2020/08/14 06:44:40.666608 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.604973ms
DB: 2020/08/14 06:44:40.671859 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.925017ms
DB: 2020/08/14 06:44:40.672554 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.59571ms
DB: 2020/08/14 06:44:40.677489 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.21897ms
DB: 2020/08/14 06:44:40.678842 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.926298ms
DB: 2020/08/14 06:44:40.683786 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.73769ms
DB: 2020/08/14 06:44:40.684475 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.667519ms
DB: 2020/08/14 06:44:40.689043 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.847503ms
DB: 2020/08/14 06:44:40.689794 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.013734ms
DB: 2020/08/14 06:44:40.695146 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.043132ms
DB: 2020/08/14 06:44:40.695695 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.311449ms
DB: 2020/08/14 06:44:40.700513 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.168501ms
Cache: 2020/08/14 06:44:40.700531 In SetUpredAvailable: pUid, tUID:  Bjpj5htfS8er0wwyQ/qdew== Bjpj5htfS8er0wwyQ/qdew== A#G#:S
Cache: 2020/08/14 06:44:40.700537 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:44:40.701195 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.979193ms
DB: 2020/08/14 06:44:40.706096 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.516165ms
Unlock: 2020/08/14 06:44:40.706116 ******* IN UNLOCK NC ********************
DB: 2020/08/14 06:44:40.706690 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.429876ms
DB: 2020/08/14 06:44:40.713226 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.473659ms
DB: 2020/08/14 06:44:40.713875 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.643838ms
grmgr: 2020/08/14 06:44:40.713892 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 06:44:40.713897 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 06:44:40.713903 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:44:40.713908 goroutine about to start 3 
attachNode: 2020/08/14 06:44:40.713914 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 06:44:40.713919 Looping..... 0
grmgr: 2020/08/14 06:44:40.714112 Looping..... 1
grmgr: 2020/08/14 06:44:40.714124 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 06:44:40.714129 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 06:44:40.717401 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.223289ms
DB: 2020/08/14 06:44:40.717777 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.4937ms
DB: 2020/08/14 06:44:40.720735 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.300409ms
DB: 2020/08/14 06:44:40.722890 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.045203ms
DB: 2020/08/14 06:44:40.724065 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.266204ms
DB: 2020/08/14 06:44:40.727770 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.807532ms
Cache: 2020/08/14 06:44:40.727784 In SetUpredAvailable: pUid, tUID:  d70EXov2QF2f8UIZXVH+MQ== d70EXov2QF2f8UIZXVH+MQ== A#G#:S
Cache: 2020/08/14 06:44:40.727789 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:44:40.728211 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.077353ms
DB: 2020/08/14 06:44:40.732501 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.675225ms
Unlock: 2020/08/14 06:44:40.732512 ******* IN UNLOCK NC ********************
DB: 2020/08/14 06:44:40.733575 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.31184ms
DB: 2020/08/14 06:44:40.738426 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.783514ms
FetchForUpdate: 2020/08/14 06:44:40.738441 ** Cache FetchForUpdate Cache Key Value: [7ky8Y01zS+uvJBmdwT5cQw==]   sortk: A#G#:S
fetchItems: 2020/08/14 06:44:40.738448 +++  Cache FetchItems for sortk A#G#:S UID: [7ky8Y01zS+uvJBmdwT5cQw==] 
FetchNode: 2020/08/14 06:44:40.738453  node: 7ky8Y01zS+uvJBmdwT5cQw== subKey: A#G#:S
FetchForUpdate: 2020/08/14 06:44:40.738639 ** Cache FetchForUpdate Cache Key Value: [Bjpj5htfS8er0wwyQ/qdew==]   sortk: A#
fetchItems: 2020/08/14 06:44:40.738650 +++  Cache FetchItems for sortk A# UID: [Bjpj5htfS8er0wwyQ/qdew==] 
FetchNode: 2020/08/14 06:44:40.738669  node: Bjpj5htfS8er0wwyQ/qdew== subKey: A#
DB: 2020/08/14 06:44:40.739925 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.710548ms
grmgr: 2020/08/14 06:44:40.739945 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 06:44:40.739951 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 06:44:40.739958 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:44:40.739963 goroutine about to start 4 
attachNode: 2020/08/14 06:44:40.739969 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 06:44:40.739974 Looping..... 0
grmgr: 2020/08/14 06:44:40.740149 Looping..... 1
grmgr: 2020/08/14 06:44:40.740184 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 06:44:40.740189 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 06:44:40.742203 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.491696ms
fetchItems: 2020/08/14 06:44:40.742355 +++  Cache FetchItems for sortk A# UID: [Bjpj5htfS8er0wwyQ/qdew==] 
FetchNode: 2020/08/14 06:44:40.742363  node: Bjpj5htfS8er0wwyQ/qdew== subKey: A#
DB: 2020/08/14 06:44:40.742650 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.166435ms
DB: 2020/08/14 06:44:40.744021 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.732239ms
DB: 2020/08/14 06:44:40.746197 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.805364ms
Unlock: 2020/08/14 06:44:40.746957 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 06:44:40.747515 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.461616ms
DB: 2020/08/14 06:44:40.747859 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.122917ms
DB: 2020/08/14 06:44:40.751255 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.629475ms
DB: 2020/08/14 06:44:40.754610 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.408133ms
DB: 2020/08/14 06:44:40.755106 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.819091ms
DB: 2020/08/14 06:44:40.759495 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.684491ms
DB: 2020/08/14 06:44:40.760317 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.159051ms
DB: 2020/08/14 06:44:40.765067 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.577328ms
FetchForUpdate: 2020/08/14 06:44:40.765082 ** Cache FetchForUpdate Cache Key Value: [d70EXov2QF2f8UIZXVH+MQ==]   sortk: A#G#:S
fetchItems: 2020/08/14 06:44:40.765088 +++  Cache FetchItems for sortk A#G#:S UID: [d70EXov2QF2f8UIZXVH+MQ==] 
FetchNode: 2020/08/14 06:44:40.765093  node: d70EXov2QF2f8UIZXVH+MQ== subKey: A#G#:S
FetchForUpdate: 2020/08/14 06:44:40.765323 ** Cache FetchForUpdate Cache Key Value: [Bjpj5htfS8er0wwyQ/qdew==]   sortk: A#
fetchItems: 2020/08/14 06:44:40.765337 +++  Cache FetchItems for sortk A# UID: [Bjpj5htfS8er0wwyQ/qdew==] 
FetchNode: 2020/08/14 06:44:40.765350  node: Bjpj5htfS8er0wwyQ/qdew== subKey: A#
DB: 2020/08/14 06:44:40.765606 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.725474ms
DB: 2020/08/14 06:44:40.768791 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.659184ms
DB: 2020/08/14 06:44:40.769718 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.329679ms
Unlock: 2020/08/14 06:44:40.771096 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 06:44:40.774217 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.508135ms
DB: 2020/08/14 06:44:40.775058 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.917682ms
DB: 2020/08/14 06:44:40.779562 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.472562ms
DB: 2020/08/14 06:44:40.779594 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.472562ms
DB: 2020/08/14 06:44:40.779934 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.39332ms
DB: 2020/08/14 06:44:40.784242 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.61565ms
DB: 2020/08/14 06:44:40.784261 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.61565ms
DB: 2020/08/14 06:44:40.785696 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.438153ms
DB: 2020/08/14 06:44:40.789606 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.165264ms
DB: 2020/08/14 06:44:40.792731 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.689823ms
DB: 2020/08/14 06:44:40.794756 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.989057ms
DB: 2020/08/14 06:44:40.797973 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.92821ms
DB: 2020/08/14 06:44:40.801374 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.264381ms
DB: 2020/08/14 06:44:40.803335 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.028308ms
DB: 2020/08/14 06:44:40.806230 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.639515ms
DB: 2020/08/14 06:44:40.808669 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.144452ms
Cache: 2020/08/14 06:44:40.808693 In SetUpredAvailable: pUid, tUID:  7ky8Y01zS+uvJBmdwT5cQw== 7ky8Y01zS+uvJBmdwT5cQw== A#G#:S
Cache: 2020/08/14 06:44:40.808698 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:44:40.811378 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.763858ms
DB: 2020/08/14 06:44:40.813947 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.215722ms
Unlock: 2020/08/14 06:44:40.813958 ******* IN UNLOCK NC ********************
DB: 2020/08/14 06:44:40.818155 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.332475ms
DB: 2020/08/14 06:44:40.819253 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.890588ms
grmgr: 2020/08/14 06:44:40.819268 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 06:44:40.819274 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 06:44:40.819280 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:44:40.819284 goroutine about to start 5 
attachNode: 2020/08/14 06:44:40.819290 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 06:44:40.819295 Looping..... 0
grmgr: 2020/08/14 06:44:40.819330 Looping..... 1
grmgr: 2020/08/14 06:44:40.819347 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 06:44:40.819352 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 06:44:40.822772 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.373212ms
DB: 2020/08/14 06:44:40.823086 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.649349ms
DB: 2020/08/14 06:44:40.825820 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.015888ms
DB: 2020/08/14 06:44:40.828463 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.875216ms
DB: 2020/08/14 06:44:40.829794 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.749584ms
DB: 2020/08/14 06:44:40.835311 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.487078ms
DB: 2020/08/14 06:44:40.835747 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.961121ms
DB: 2020/08/14 06:44:40.840337 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.83362ms
DB: 2020/08/14 06:44:40.840784 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.511224ms
DB: 2020/08/14 06:44:40.845109 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.696758ms
FetchForUpdate: 2020/08/14 06:44:40.845124 ** Cache FetchForUpdate Cache Key Value: [7ky8Y01zS+uvJBmdwT5cQw==]   sortk: A#G#:S
fetchItems: 2020/08/14 06:44:40.845131 +++  Cache FetchItems for sortk A#G#:S UID: [7ky8Y01zS+uvJBmdwT5cQw==] 
FetchNode: 2020/08/14 06:44:40.845136  node: 7ky8Y01zS+uvJBmdwT5cQw== subKey: A#G#:S
FetchForUpdate: 2020/08/14 06:44:40.845335 ** Cache FetchForUpdate Cache Key Value: [d70EXov2QF2f8UIZXVH+MQ==]   sortk: A#
DB: 2020/08/14 06:44:40.845595 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.731372ms
DB: 2020/08/14 06:44:40.849403 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.222719ms
DB: 2020/08/14 06:44:40.850327 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.677825ms
Cache: 2020/08/14 06:44:40.850341 In SetUpredAvailable: pUid, tUID:  d70EXov2QF2f8UIZXVH+MQ== rMGaFcQ2SG2jFGTvj4UuKw== A#G#:S
Cache: 2020/08/14 06:44:40.850345 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:44:40.855292 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.902064ms
Unlock: 2020/08/14 06:44:40.855307 ******* IN UNLOCK NC ********************
fetchItems: 2020/08/14 06:44:40.855824 +++  Cache FetchItems for sortk A# UID: [d70EXov2QF2f8UIZXVH+MQ==] 
FetchNode: 2020/08/14 06:44:40.855861  node: d70EXov2QF2f8UIZXVH+MQ== subKey: A#
DB: 2020/08/14 06:44:40.856153 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.382681ms
DB: 2020/08/14 06:44:40.859665 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.759523ms
Unlock: 2020/08/14 06:44:40.861920 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 06:44:40.863750 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.562314ms
DB: 2020/08/14 06:44:40.863775 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.562314ms
DB: 2020/08/14 06:44:40.864075 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.414857ms
grmgr: 2020/08/14 06:44:40.864097 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 06:44:40.864121 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 06:44:40.864130 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:44:40.864139 goroutine about to start 6 
rdfLoader: 2020/08/14 06:44:40.864145 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 06:44:40.864404 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 06:44:40.867493 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.292531ms
DB: 2020/08/14 06:44:40.868819 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.002459ms
DB: 2020/08/14 06:44:40.868835 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.002459ms
DB: 2020/08/14 06:44:40.871114 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.589294ms
DB: 2020/08/14 06:44:40.874572 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.165693ms
DB: 2020/08/14 06:44:40.875037 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.9899ms
DB: 2020/08/14 06:44:40.877751 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.957714ms
DB: 2020/08/14 06:44:40.880365 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.120678ms
DB: 2020/08/14 06:44:40.882741 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.920022ms
DB: 2020/08/14 06:44:40.887391 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.376434ms
DB: 2020/08/14 06:44:40.887984 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.908987ms
FetchForUpdate: 2020/08/14 06:44:40.887999 ** Cache FetchForUpdate Cache Key Value: [Bjpj5htfS8er0wwyQ/qdew==]   sortk: A#G#:S
fetchItems: 2020/08/14 06:44:40.888022 +++  Cache FetchItems for sortk A#G#:S UID: [Bjpj5htfS8er0wwyQ/qdew==] 
FetchNode: 2020/08/14 06:44:40.888028  node: Bjpj5htfS8er0wwyQ/qdew== subKey: A#G#:S
FetchForUpdate: 2020/08/14 06:44:40.888232 ** Cache FetchForUpdate Cache Key Value: [d70EXov2QF2f8UIZXVH+MQ==]   sortk: A#
fetchItems: 2020/08/14 06:44:40.888248 +++  Cache FetchItems for sortk A# UID: [d70EXov2QF2f8UIZXVH+MQ==] 
FetchNode: 2020/08/14 06:44:40.888260  node: d70EXov2QF2f8UIZXVH+MQ== subKey: A#
DB: 2020/08/14 06:44:40.892063 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.760013ms
DB: 2020/08/14 06:44:40.893457 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.03986ms
DB: 2020/08/14 06:44:40.893473 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.985059ms
Unlock: 2020/08/14 06:44:40.894990 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 06:44:40.900914 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.093969ms
DB: 2020/08/14 06:44:40.901670 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.969401ms
DB: 2020/08/14 06:44:40.906066 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.080076ms
DB: 2020/08/14 06:44:40.906084 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.080076ms
DB: 2020/08/14 06:44:40.908762 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.527616ms
DB: 2020/08/14 06:44:40.911064 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.949458ms
DB: 2020/08/14 06:44:40.911081 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.949458ms
DB: 2020/08/14 06:44:40.914265 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.904618ms
DB: 2020/08/14 06:44:40.916411 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.114055ms
DB: 2020/08/14 06:44:40.919883 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.064763ms
DB: 2020/08/14 06:44:40.921824 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.218703ms
DB: 2020/08/14 06:44:40.926980 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.528203ms
DB: 2020/08/14 06:44:40.929081 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.635579ms
DB: 2020/08/14 06:44:40.932428 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.824784ms
DB: 2020/08/14 06:44:40.934186 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.806777ms
DB: 2020/08/14 06:44:40.938110 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.083863ms
DB: 2020/08/14 06:44:40.939725 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.853986ms
DB: 2020/08/14 06:44:40.943204 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.748668ms
Cache: 2020/08/14 06:44:40.943221 In SetUpredAvailable: pUid, tUID:  7ky8Y01zS+uvJBmdwT5cQw== E/E1Mug3Rvmt3IWtZ7X3Nw== A#G#:S
Cache: 2020/08/14 06:44:40.943227 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:44:40.947458 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.394281ms
DB: 2020/08/14 06:44:40.948277 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.013867ms
Unlock: 2020/08/14 06:44:40.948289 ******* IN UNLOCK NC ********************
DB: 2020/08/14 06:44:40.952377 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.857802ms
DB: 2020/08/14 06:44:40.953333 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.955948ms
grmgr: 2020/08/14 06:44:40.953350 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 06:44:40.957437 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.990115ms
DB: 2020/08/14 06:44:40.964415 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.672201ms
DB: 2020/08/14 06:44:40.969511 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.721433ms
DB: 2020/08/14 06:44:40.975007 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.153808ms
DB: 2020/08/14 06:44:40.980625 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.419052ms
Cache: 2020/08/14 06:44:40.980639 In SetUpredAvailable: pUid, tUID:  Bjpj5htfS8er0wwyQ/qdew== Q1EJG3uATny4UfK3BOyk7Q== A#G#:S
Cache: 2020/08/14 06:44:40.980645 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:44:40.985953 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.271292ms
Unlock: 2020/08/14 06:44:40.985969 ******* IN UNLOCK NC ********************
DB: 2020/08/14 06:44:40.991865 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.212355ms
rdfLoader: 2020/08/14 06:44:40.991882 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 06:44:40.991888 cancel contexts
rdfLoader: 2020/08/14 06:44:40.991893 wait for autonomous goroutines to end
errlog: 2020/08/14 06:44:40.991899 Powering down...
grmgr: 2020/08/14 06:44:40.991907 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 06:44:40.991912 Powering down...
rdfuuid: 2020/08/14 06:44:40.991918 Powering down...
rdfLoader: 2020/08/14 06:44:40.991923 loader exists.....
DB:2020/08/14 06:46:14 log.go:18: ===============================================================================
errlog: 2020/08/14 06:46:14.144419 Powering on...
rdfLoader: 2020/08/14 06:46:14.144477 saveNode started......
rdfLoader: 2020/08/14 06:46:14.144483 define saveNode limiter......
rdfuuid: 2020/08/14 06:46:14.144492 Powering on...
grmgr: 2020/08/14 06:46:14.144508 Powering on...
rdfLoader: 2020/08/14 06:46:14.144518  principle goroutines started 
RDFreader: 2020/08/14 06:46:14.144543 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 06:46:14.144557 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 06:46:14.144564 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 06:46:14.144574 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 06:46:14.144580 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 06:46:14.144585 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 06:46:14.144590 spo read:      
RDFreader: 2020/08/14 06:46:14.144595 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 06:46:14.144600 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 06:46:14.144605 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 06:46:14.144610 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 06:46:14.144615 spo read:      
RDFreader: 2020/08/14 06:46:14.144620 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 06:46:14.144626 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 06:46:14.144631 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 06:46:14.144636 spo read:  b  Age  "58"
RDFreader: 2020/08/14 06:46:14.144641 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 06:46:14.144646 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 06:46:14.144652 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 06:46:14.144657 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 06:46:14.144662 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 06:46:14.144666 spo read:      
RDFreader: 2020/08/14 06:46:14.144671 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 06:46:14.144675 Send node batch on channel verifyCh
RDFreader: 2020/08/14 06:46:14.144681 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 06:46:14.144685 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 06:46:14.144690 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 06:46:14.144697 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 06:46:14.144709 spo read:  c  Age  "67"
RDFreader: 2020/08/14 06:46:14.144715 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 06:46:14.144719 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 06:46:14.144724 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 06:46:14.144729 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 06:46:14.144736 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 06:46:14.144741 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 06:46:14.144745 spo read:      
RDFreader: 2020/08/14 06:46:14.144750 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 06:46:14.144755 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 06:46:14.144760 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 06:46:14.144765 spo read:  d  Age  "36"
RDFreader: 2020/08/14 06:46:14.144770 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 06:46:14.144776 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 06:46:14.144780 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 06:46:14.144784 close verify channel
rdfLoader: 2020/08/14 06:46:14.144788 wait for goroutines to end
rdfLoader: 2020/08/14 06:46:14.144792 verify started....
rdfLoader: 2020/08/14 06:46:14.144797 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 06:46:14.144801 .  getType..
rdfLoader: 2020/08/14 06:46:14.144805 node.TyName : [Person]
DB: 2020/08/14 06:46:14.223078 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 78.208145ms
grmgr: 2020/08/14 06:46:14.223221 Looping..... 0
grmgr: 2020/08/14 06:46:14.223497 Looping..... 1
grmgr: 2020/08/14 06:46:14.223519 Looping..... 2
grmgr: 2020/08/14 06:46:14.223674 Looping..... 3
grmgr: 2020/08/14 06:46:14.223859 Looping..... 4
grmgr: 2020/08/14 06:46:14.224035 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 06:46:14.224047 .  getType..
rdfLoader: 2020/08/14 06:46:14.224051 node.TyName : [Person]
grmgr: 2020/08/14 06:46:14.224057 Looping..... 0
unmarshalRDF2020/08/14 06:46:14.224070 Entered unmarshalRDF. 
grmgr: 2020/08/14 06:46:14.224080 Looping..... 1
grmgr: 2020/08/14 06:46:14.224086 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 06:46:14.224090 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 06:46:14.224098 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 06:46:14.224102 .  getType..
rdfLoader: 2020/08/14 06:46:14.224106 node.TyName : [Person]
grmgr: 2020/08/14 06:46:14.224111 Looping..... 0
rdfLoader: 2020/08/14 06:46:14.224121 Add to SS . [Honda]
rdfLoader: 2020/08/14 06:46:14.224126 Add to SS . [Alfa]
unmarshalRDF2020/08/14 06:46:14.224204 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 06:46:14.224213 Exit  unmarshalRDF. 
saveNode: 2020/08/14 06:46:14.224231 read from saveCH channel 1 
unmarshalRDF2020/08/14 06:46:14.224241 Entered unmarshalRDF. 
grmgr: 2020/08/14 06:46:14.224252 Looping..... 1
grmgr: 2020/08/14 06:46:14.224257 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 06:46:14.224261 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 06:46:14.224266 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 06:46:14.224271 Looping..... 0
rdfLoader: 2020/08/14 06:46:14.224279 Add to SS . [Honda]
rdfLoader: 2020/08/14 06:46:14.224284 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 06:46:14.224321 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 06:46:14.224368 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 06:46:14.224375 .  getType..
rdfLoader: 2020/08/14 06:46:14.224380 node.TyName : [Person]
unmarshalRDF2020/08/14 06:46:14.224389 Entered unmarshalRDF. 
grmgr: 2020/08/14 06:46:14.224401 Looping..... 1
rdfLoader: 2020/08/14 06:46:14.224410 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 06:46:14.224415 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 06:46:14.224419 Add to SS . [Honda]
unmarshalRDF2020/08/14 06:46:14.224454 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 06:46:14.224460 Exit  unmarshalRDF. 
grmgr: 2020/08/14 06:46:14.224469 Looping..... 2
grmgr: 2020/08/14 06:46:14.224554 Looping..... 3
grmgr: 2020/08/14 06:46:14.224752 Looping..... 4
grmgr: 2020/08/14 06:46:14.224930 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 06:46:14.224939 Looping..... 0
saveNode: 2020/08/14 06:46:14.224945 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 06:46:14.224952 read from saveCH channel 2 
grmgr: 2020/08/14 06:46:14.224984 Looping..... 1
SaveRDFNode: xxx 2020/08/14 06:46:14.224995 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.225002 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.225009 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.225015 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.225020 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.225026 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.225032 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 06:46:14.225036 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 06:46:14.225043 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017680)}
SaveRDFNode: 2020/08/14 06:46:14.225048 Waiting for UID ......................
rdfUIDdb: 2020/08/14 06:46:14.225057 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.225061 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.225067 UID received  : 4wBB9p8/TPOykKVYd740NA==
grmgr: 2020/08/14 06:46:14.225318 Looping..... 2
grmgr: 2020/08/14 06:46:14.225438 Looping..... 3
grmgr: 2020/08/14 06:46:14.225615 Looping..... 4
grmgr: 2020/08/14 06:46:14.225793 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 06:46:14.225802 Looping..... 0
unmarshalRDF2020/08/14 06:46:14.225817 Entered unmarshalRDF. 
grmgr: 2020/08/14 06:46:14.225827 Looping..... 1
rdfLoader: 2020/08/14 06:46:14.225843 Add to SS . [Bentley]
unmarshalRDF2020/08/14 06:46:14.225881 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 06:46:14.225887 Exit  unmarshalRDF. 
grmgr: 2020/08/14 06:46:14.225897 Looping..... 2
grmgr: 2020/08/14 06:46:14.225975 Looping..... 3
grmgr: 2020/08/14 06:46:14.226151 Looping..... 4
grmgr: 2020/08/14 06:46:14.226339 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 06:46:14.226348 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 06:46:14.226353 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 06:46:14.226358 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 06:46:14.226365 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 06:46:14.226370 read from saveCH channel 3 
grmgr: 2020/08/14 06:46:14.226375 Looping..... 0
grmgr: 2020/08/14 06:46:14.226413 Looping..... 1
grmgr: 2020/08/14 06:46:14.226419 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 06:46:14.226423 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 06:46:14.226432 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.226438 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.226443 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.226450 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.226457 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.226463 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.226469 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 06:46:14.226473 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 06:46:14.226479 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017da0)}
SaveRDFNode: 2020/08/14 06:46:14.226519 Waiting for UID ......................
rdfUIDdb: 2020/08/14 06:46:14.226528 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.226532 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.226538 UID received  : E4LidrmDRvuPlZbDX3U6Jg==
DB: 2020/08/14 06:46:14.234858 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.743247ms
DB: 2020/08/14 06:46:14.239960 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.065067ms
DB: 2020/08/14 06:46:14.245072 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.931582ms
DB: 2020/08/14 06:46:14.250275 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.168882ms
DB: 2020/08/14 06:46:14.253291 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 26.724509ms
DB: 2020/08/14 06:46:14.255899 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.58797ms
SaveRDFNode: 2020/08/14 06:46:14.256069 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 06:46:14.256093 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.256098 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.256104 Received UID: X18=
SaveRDFNode: 2020/08/14 06:46:14.256162 a: = db.Item{PKey:[]uint8{0xe3, 0x0, 0x41, 0xf6, 0x9f, 0x3f, 0x4c, 0xf3, 0xb2, 0x90, 0xa5, 0x58, 0x77, 0xbe, 0x34, 0x34}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:46:14.258591 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.998159ms
DB: 2020/08/14 06:46:14.261127 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.930233ms
SaveRDFNode: 2020/08/14 06:46:14.261140 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 06:46:14.261146 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.261149 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.261166 Received UID: X18=
SaveRDFNode: 2020/08/14 06:46:14.261176 a: = db.Item{PKey:[]uint8{0xe3, 0x0, 0x41, 0xf6, 0x9f, 0x3f, 0x4c, 0xf3, 0xb2, 0x90, 0xa5, 0x58, 0x77, 0xbe, 0x34, 0x34}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:46:14.263164 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.539272ms
DB: 2020/08/14 06:46:14.266262 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.055584ms
SaveRDFNode: 2020/08/14 06:46:14.266274 Returned.+++++++++++ No error
grmgr: 2020/08/14 06:46:14.266282 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 06:46:14.266287 Send ack to waiting saveNode...
saveNode: 2020/08/14 06:46:14.266293 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 06:46:14.266299 read from saveCH channel 4 
grmgr: 2020/08/14 06:46:14.266304 Looping..... 0
grmgr: 2020/08/14 06:46:14.266339 Looping..... 1
grmgr: 2020/08/14 06:46:14.266358 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 06:46:14.266364 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 06:46:14.266373 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.266379 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.266387 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.266393 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.266399 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.266405 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.266411 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 06:46:14.266414 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 06:46:14.266420 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000378e40)}
SaveRDFNode: 2020/08/14 06:46:14.266424 Waiting for UID ......................
rdfUIDdb: 2020/08/14 06:46:14.266433 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.266437 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.266443 UID received  : nsaTUx+oTZWl4s/CKiqyJw==
DB: 2020/08/14 06:46:14.267698 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.502923ms
DB: 2020/08/14 06:46:14.271472 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.989226ms
DB: 2020/08/14 06:46:14.272197 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.466732ms
SaveRDFNode: 2020/08/14 06:46:14.272212 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 06:46:14.272218 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.272222 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.272228 Received UID: X18=
SaveRDFNode: 2020/08/14 06:46:14.272239 a: = db.Item{PKey:[]uint8{0x13, 0x82, 0xe2, 0x76, 0xb9, 0x83, 0x46, 0xfb, 0x8f, 0x95, 0x96, 0xc3, 0x5f, 0x75, 0x3a, 0x26}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:46:14.276849 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.182578ms
DB: 2020/08/14 06:46:14.277117 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.849192ms
SaveRDFNode: 2020/08/14 06:46:14.277130 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 06:46:14.277135 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.277139 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.277145 Received UID: X18=
SaveRDFNode: 2020/08/14 06:46:14.277155 a: = db.Item{PKey:[]uint8{0x13, 0x82, 0xe2, 0x76, 0xb9, 0x83, 0x46, 0xfb, 0x8f, 0x95, 0x96, 0xc3, 0x5f, 0x75, 0x3a, 0x26}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:46:14.281990 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.788526ms
SaveRDFNode: 2020/08/14 06:46:14.282028 Returned.+++++++++++ No error
grmgr: 2020/08/14 06:46:14.282036 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 06:46:14.282041 Send ack to waiting saveNode...
saveNode: 2020/08/14 06:46:14.282047 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 06:46:14.282051 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 06:46:14.282074 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.282080 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.282087 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.282093 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.282102 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.282109 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 06:46:14.282115 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 06:46:14.282119 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 06:46:14.282124 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000379e00)}
SaveRDFNode: 2020/08/14 06:46:14.282128 Waiting for UID ......................
rdfUIDdb: 2020/08/14 06:46:14.282148 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.282152 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.282157 UID received  : rFrm4yLdRC2NscE5O5cybw==
grmgr: 2020/08/14 06:46:14.282383 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 06:46:14.282466 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.563782ms
DB: 2020/08/14 06:46:14.286906 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.706661ms
DB: 2020/08/14 06:46:14.287885 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.386759ms
DB: 2020/08/14 06:46:14.291687 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.588723ms
DB: 2020/08/14 06:46:14.293540 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.61723ms
SaveRDFNode: 2020/08/14 06:46:14.293554 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000378e40)}
rdfUIDdb: 2020/08/14 06:46:14.293560 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.293564 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.293570 Received UID: X18=
SaveRDFNode: 2020/08/14 06:46:14.293580 a: = db.Item{PKey:[]uint8{0x9e, 0xc6, 0x93, 0x53, 0x1f, 0xa8, 0x4d, 0x95, 0xa5, 0xe2, 0xcf, 0xc2, 0x2a, 0x2a, 0xb2, 0x27}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:46:14.296300 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.513484ms
DB: 2020/08/14 06:46:14.299312 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.702914ms
SaveRDFNode: 2020/08/14 06:46:14.299326 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000378e40)}
rdfUIDdb: 2020/08/14 06:46:14.299332 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.299336 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.299341 Received UID: X18=
SaveRDFNode: 2020/08/14 06:46:14.299352 a: = db.Item{PKey:[]uint8{0x9e, 0xc6, 0x93, 0x53, 0x1f, 0xa8, 0x4d, 0x95, 0xa5, 0xe2, 0xcf, 0xc2, 0x2a, 0x2a, 0xb2, 0x27}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:46:14.300903 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.571074ms
DB: 2020/08/14 06:46:14.304296 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.910374ms
SaveRDFNode: 2020/08/14 06:46:14.304448 Returned.+++++++++++ No error
grmgr: 2020/08/14 06:46:14.304462 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 06:46:14.305515 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.576403ms
SaveRDFNode: 2020/08/14 06:46:14.305528 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000379e00)}
rdfUIDdb: 2020/08/14 06:46:14.305534 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.305538 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.305544 Received UID: X18=
SaveRDFNode: 2020/08/14 06:46:14.305555 a: = db.Item{PKey:[]uint8{0xac, 0x5a, 0xe6, 0xe3, 0x22, 0xdd, 0x44, 0x2d, 0x8d, 0xb1, 0xc1, 0x39, 0x3b, 0x97, 0x32, 0x6f}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:46:14.309971 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.387774ms
SaveRDFNode: 2020/08/14 06:46:14.309985 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000379e00)}
rdfUIDdb: 2020/08/14 06:46:14.309991 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 06:46:14.309994 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 06:46:14.310000 Received UID: X18=
SaveRDFNode: 2020/08/14 06:46:14.310010 a: = db.Item{PKey:[]uint8{0xac, 0x5a, 0xe6, 0xe3, 0x22, 0xdd, 0x44, 0x2d, 0x8d, 0xb1, 0xc1, 0x39, 0x3b, 0x97, 0x32, 0x6f}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 06:46:14.314730 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.670519ms
SaveRDFNode: 2020/08/14 06:46:14.314742 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 06:46:14.314748 saveNode finished waiting...exiting
grmgr: 2020/08/14 06:46:14.314754 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 06:46:14.314763 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 06:46:14.314768 Looping..... 0
grmgr: 2020/08/14 06:46:14.314784 Looping..... 1
grmgr: 2020/08/14 06:46:14.314856 Looping..... 2
grmgr: 2020/08/14 06:46:14.315047 Looping..... 3
grmgr: 2020/08/14 06:46:14.315225 Looping..... 4
grmgr: 2020/08/14 06:46:14.315413 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 06:46:14.315426 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:46:14.315431 goroutine about to start 1 
attachNode: 2020/08/14 06:46:14.315437 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 06:46:14.315442 Looping..... 0
grmgr: 2020/08/14 06:46:14.315461 Looping..... 1
grmgr: 2020/08/14 06:46:14.315466 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 06:46:14.315471 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 06:46:14.315475 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:46:14.315480 goroutine about to start 2 
attachNode: 2020/08/14 06:46:14.315484 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 06:46:14.315489 Looping..... 0
grmgr: 2020/08/14 06:46:14.316300 Looping..... 1
grmgr: 2020/08/14 06:46:14.316314 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 06:46:14.316319 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 06:46:14.318707 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.16337ms
DB: 2020/08/14 06:46:14.319757 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.378865ms
DB: 2020/08/14 06:46:14.322600 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.847268ms
DB: 2020/08/14 06:46:14.323349 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.541003ms
DB: 2020/08/14 06:46:14.325916 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.850869ms
DB: 2020/08/14 06:46:14.326514 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.80599ms
DB: 2020/08/14 06:46:14.329544 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.597163ms
DB: 2020/08/14 06:46:14.329992 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.447669ms
DB: 2020/08/14 06:46:14.334633 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.986957ms
DB: 2020/08/14 06:46:14.335793 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.733339ms
DB: 2020/08/14 06:46:14.344009 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.49676ms
FetchForUpdate: 2020/08/14 06:46:14.344031 ** Cache FetchForUpdate Cache Key Value: [E4LidrmDRvuPlZbDX3U6Jg==]   sortk: A#G#:S
FetchNode: 2020/08/14 06:46:14.344038  node: E4LidrmDRvuPlZbDX3U6Jg== subKey: A#G#:S
FetchForUpdate: 2020/08/14 06:46:14.344250 ** Cache FetchForUpdate Cache Key Value: [4wBB9p8/TPOykKVYd740NA==]   sortk: A#
FetchNode: 2020/08/14 06:46:14.344284  node: 4wBB9p8/TPOykKVYd740NA== subKey: A#
DB: 2020/08/14 06:46:14.344783 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.227746ms
FetchForUpdate: 2020/08/14 06:46:14.344801 ** Cache FetchForUpdate Cache Key Value: [nsaTUx+oTZWl4s/CKiqyJw==]   sortk: A#G#:S
FetchNode: 2020/08/14 06:46:14.344807  node: nsaTUx+oTZWl4s/CKiqyJw== subKey: A#G#:S
FetchForUpdate: 2020/08/14 06:46:14.345825 ** Cache FetchForUpdate Cache Key Value: [4wBB9p8/TPOykKVYd740NA==]   sortk: A#
DB: 2020/08/14 06:46:14.347976 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.904641ms
FetchForUpdate: 2020/08/14 06:46:14.348058 len(nb): 1
fetchItems: 2020/08/14 06:46:14.348069 +++  Cache FetchItems for sortk A#G#:S UID: [E4LidrmDRvuPlZbDX3U6Jg==] 
FetchNode: 2020/08/14 06:46:14.348083  node: E4LidrmDRvuPlZbDX3U6Jg== subKey: A#G#:S
DB: 2020/08/14 06:46:14.348810 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.462712ms
FetchForUpdate: 2020/08/14 06:46:14.348929 len(nb): 7
fetchItems: 2020/08/14 06:46:14.348939 +++  Cache FetchItems for sortk A# UID: [4wBB9p8/TPOykKVYd740NA==] 
FetchNode: 2020/08/14 06:46:14.348944  node: 4wBB9p8/TPOykKVYd740NA== subKey: A#
DB: 2020/08/14 06:46:14.353572 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.456053ms
DB: 2020/08/14 06:46:14.354186 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 9.347488ms
FetchForUpdate: 2020/08/14 06:46:14.354226 len(nb): 1
fetchItems: 2020/08/14 06:46:14.354234 +++  Cache FetchItems for sortk A#G#:S UID: [nsaTUx+oTZWl4s/CKiqyJw==] 
FetchNode: 2020/08/14 06:46:14.354238  node: nsaTUx+oTZWl4s/CKiqyJw== subKey: A#G#:S
DB: 2020/08/14 06:46:14.358135 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 9.161774ms
DB: 2020/08/14 06:46:14.360496 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.81121ms
Unlock: 2020/08/14 06:46:14.363910 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
fetchItems: 2020/08/14 06:46:14.365594 +++  Cache FetchItems for sortk A# UID: [4wBB9p8/TPOykKVYd740NA==] 
FetchNode: 2020/08/14 06:46:14.365705  node: 4wBB9p8/TPOykKVYd740NA== subKey: A#
DB: 2020/08/14 06:46:14.372144 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.145506ms
DB: 2020/08/14 06:46:14.379343 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 25.068638ms
DB: 2020/08/14 06:46:14.383596 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 17.834061ms
DB: 2020/08/14 06:46:14.385957 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.738385ms
Unlock: 2020/08/14 06:46:14.386971 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 06:46:14.391406 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 18.655408ms
DB: 2020/08/14 06:46:14.394910 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.082739ms
DB: 2020/08/14 06:46:14.396347 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.832178ms
DB: 2020/08/14 06:46:14.399809 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.84347ms
DB: 2020/08/14 06:46:14.402637 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.225308ms
DB: 2020/08/14 06:46:14.404929 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.023817ms
DB: 2020/08/14 06:46:14.407420 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.704103ms
DB: 2020/08/14 06:46:14.411723 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.474402ms
DB: 2020/08/14 06:46:14.412730 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.900871ms
DB: 2020/08/14 06:46:14.417005 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.972256ms
DB: 2020/08/14 06:46:14.419343 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.295701ms
DB: 2020/08/14 06:46:14.422335 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.994943ms
DB: 2020/08/14 06:46:14.424276 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.621094ms
DB: 2020/08/14 06:46:14.429091 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.418679ms
DB: 2020/08/14 06:46:14.429705 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.070718ms
DB: 2020/08/14 06:46:14.434292 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.854275ms
DB: 2020/08/14 06:46:14.434862 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.000977ms
Cache: 2020/08/14 06:46:14.434876 In SetUpredAvailable: pUid, tUID:  E4LidrmDRvuPlZbDX3U6Jg== E4LidrmDRvuPlZbDX3U6Jg== A#G#:S
Cache: 2020/08/14 06:46:14.434881 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:46:14.439531 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.159848ms
DB: 2020/08/14 06:46:14.439986 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.051306ms
Unlock: 2020/08/14 06:46:14.439997 ******* IN UNLOCK NC ********************
DB: 2020/08/14 06:46:14.444722 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.989388ms
Cache: 2020/08/14 06:46:14.444736 In SetUpredAvailable: pUid, tUID:  nsaTUx+oTZWl4s/CKiqyJw== nsaTUx+oTZWl4s/CKiqyJw== A#G#:S
Cache: 2020/08/14 06:46:14.444741 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:46:14.448081 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.765809ms
grmgr: 2020/08/14 06:46:14.448105 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 06:46:14.448111 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 06:46:14.448118 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:46:14.448148 goroutine about to start 3 
attachNode: 2020/08/14 06:46:14.448157 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 06:46:14.448163 Looping..... 0
grmgr: 2020/08/14 06:46:14.448187 Looping..... 1
grmgr: 2020/08/14 06:46:14.448193 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 06:46:14.448198 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 06:46:14.451070 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.820431ms
DB: 2020/08/14 06:46:14.451567 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.788036ms
Unlock: 2020/08/14 06:46:14.451578 ******* IN UNLOCK NC ********************
DB: 2020/08/14 06:46:14.455182 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.058157ms
DB: 2020/08/14 06:46:14.458896 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.600783ms
DB: 2020/08/14 06:46:14.462618 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.687613ms
DB: 2020/08/14 06:46:14.463966 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 12.095843ms
grmgr: 2020/08/14 06:46:14.463986 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 06:46:14.463992 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 06:46:14.463999 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:46:14.464003 goroutine about to start 4 
attachNode: 2020/08/14 06:46:14.464009 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 06:46:14.464015 Looping..... 0
grmgr: 2020/08/14 06:46:14.464040 Looping..... 1
grmgr: 2020/08/14 06:46:14.464060 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 06:46:14.464064 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 06:46:14.467454 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.758933ms
DB: 2020/08/14 06:46:14.468015 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.902745ms
DB: 2020/08/14 06:46:14.471981 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.935283ms
DB: 2020/08/14 06:46:14.472388 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.733828ms
FetchForUpdate: 2020/08/14 06:46:14.472403 ** Cache FetchForUpdate Cache Key Value: [4wBB9p8/TPOykKVYd740NA==]   sortk: A#G#:S
fetchItems: 2020/08/14 06:46:14.472409 +++  Cache FetchItems for sortk A#G#:S UID: [4wBB9p8/TPOykKVYd740NA==] 
FetchNode: 2020/08/14 06:46:14.472414  node: 4wBB9p8/TPOykKVYd740NA== subKey: A#G#:S
FetchForUpdate: 2020/08/14 06:46:14.472691 ** Cache FetchForUpdate Cache Key Value: [E4LidrmDRvuPlZbDX3U6Jg==]   sortk: A#
fetchItems: 2020/08/14 06:46:14.472708 +++  Cache FetchItems for sortk A# UID: [E4LidrmDRvuPlZbDX3U6Jg==] 
FetchNode: 2020/08/14 06:46:14.472720  node: E4LidrmDRvuPlZbDX3U6Jg== subKey: A#
DB: 2020/08/14 06:46:14.476186 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.075907ms
DB: 2020/08/14 06:46:14.476512 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.065662ms
DB: 2020/08/14 06:46:14.479214 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.983674ms
DB: 2020/08/14 06:46:14.481705 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.811693ms
DB: 2020/08/14 06:46:14.484764 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 11.998265ms
fetchItems: 2020/08/14 06:46:14.484930 +++  Cache FetchItems for sortk A# UID: [E4LidrmDRvuPlZbDX3U6Jg==] 
FetchNode: 2020/08/14 06:46:14.484938  node: E4LidrmDRvuPlZbDX3U6Jg== subKey: A#
DB: 2020/08/14 06:46:14.485238 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.953429ms
DB: 2020/08/14 06:46:14.488653 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.685918ms
Unlock: 2020/08/14 06:46:14.490321 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 06:46:14.491621 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.077612ms
FetchForUpdate: 2020/08/14 06:46:14.491636 ** Cache FetchForUpdate Cache Key Value: [nsaTUx+oTZWl4s/CKiqyJw==]   sortk: A#G#:S
fetchItems: 2020/08/14 06:46:14.491642 +++  Cache FetchItems for sortk A#G#:S UID: [nsaTUx+oTZWl4s/CKiqyJw==] 
FetchNode: 2020/08/14 06:46:14.491647  node: nsaTUx+oTZWl4s/CKiqyJw== subKey: A#G#:S
FetchForUpdate: 2020/08/14 06:46:14.491837 ** Cache FetchForUpdate Cache Key Value: [E4LidrmDRvuPlZbDX3U6Jg==]   sortk: A#
fetchItems: 2020/08/14 06:46:14.491847 +++  Cache FetchItems for sortk A# UID: [E4LidrmDRvuPlZbDX3U6Jg==] 
FetchNode: 2020/08/14 06:46:14.491860  node: E4LidrmDRvuPlZbDX3U6Jg== subKey: A#
DB: 2020/08/14 06:46:14.496120 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.210502ms
Unlock: 2020/08/14 06:46:14.497933 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 06:46:14.498569 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.225625ms
DB: 2020/08/14 06:46:14.499297 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 7.620503ms
DB: 2020/08/14 06:46:14.503482 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.598761ms
DB: 2020/08/14 06:46:14.505011 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.182098ms
DB: 2020/08/14 06:46:14.508943 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.752355ms
DB: 2020/08/14 06:46:14.509803 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.74866ms
DB: 2020/08/14 06:46:14.509822 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.74866ms
DB: 2020/08/14 06:46:14.514875 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.017673ms
DB: 2020/08/14 06:46:14.515195 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.017673ms
DB: 2020/08/14 06:46:14.515769 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.242491ms
DB: 2020/08/14 06:46:14.520832 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.362808ms
DB: 2020/08/14 06:46:14.521379 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.120141ms
DB: 2020/08/14 06:46:14.526366 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.281906ms
DB: 2020/08/14 06:46:14.527225 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.288544ms
DB: 2020/08/14 06:46:14.533053 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.575378ms
DB: 2020/08/14 06:46:14.533685 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.396933ms
DB: 2020/08/14 06:46:14.538238 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.111934ms
DB: 2020/08/14 06:46:14.539253 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.092614ms
DB: 2020/08/14 06:46:14.544293 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.31925ms
DB: 2020/08/14 06:46:14.545195 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.391508ms
DB: 2020/08/14 06:46:14.550253 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.75395ms
Cache: 2020/08/14 06:46:14.550429 In SetUpredAvailable: pUid, tUID:  4wBB9p8/TPOykKVYd740NA== 4wBB9p8/TPOykKVYd740NA== A#G#:S
Cache: 2020/08/14 06:46:14.550439 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:46:14.551678 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.724757ms
DB: 2020/08/14 06:46:14.555306 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.828042ms
Unlock: 2020/08/14 06:46:14.555319 ******* IN UNLOCK NC ********************
DB: 2020/08/14 06:46:14.557074 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.812118ms
DB: 2020/08/14 06:46:14.562032 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.889847ms
DB: 2020/08/14 06:46:14.562863 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.445102ms
grmgr: 2020/08/14 06:46:14.562891 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 06:46:14.562897 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 06:46:14.562914 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:46:14.562919 goroutine about to start 5 
attachNode: 2020/08/14 06:46:14.562929 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 06:46:14.562934 Looping..... 0
grmgr: 2020/08/14 06:46:14.562968 Looping..... 1
grmgr: 2020/08/14 06:46:14.562974 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 06:46:14.562979 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 06:46:14.566029 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.870124ms
DB: 2020/08/14 06:46:14.568639 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.547975ms
DB: 2020/08/14 06:46:14.569347 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.270785ms
DB: 2020/08/14 06:46:14.572559 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.975467ms
DB: 2020/08/14 06:46:14.573965 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.245917ms
DB: 2020/08/14 06:46:14.576251 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.661121ms
DB: 2020/08/14 06:46:14.580563 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.001314ms
DB: 2020/08/14 06:46:14.581208 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.909207ms
DB: 2020/08/14 06:46:14.586038 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.053483ms
Cache: 2020/08/14 06:46:14.586074 In SetUpredAvailable: pUid, tUID:  nsaTUx+oTZWl4s/CKiqyJw== Rifi3pf9TyOllbDT9p8JMQ== A#G#:S
Cache: 2020/08/14 06:46:14.586086 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:46:14.587927 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.48348ms
FetchForUpdate: 2020/08/14 06:46:14.587940 ** Cache FetchForUpdate Cache Key Value: [4wBB9p8/TPOykKVYd740NA==]   sortk: A#G#:S
fetchItems: 2020/08/14 06:46:14.587946 +++  Cache FetchItems for sortk A#G#:S UID: [4wBB9p8/TPOykKVYd740NA==] 
FetchNode: 2020/08/14 06:46:14.587950  node: 4wBB9p8/TPOykKVYd740NA== subKey: A#G#:S
FetchForUpdate: 2020/08/14 06:46:14.588150 ** Cache FetchForUpdate Cache Key Value: [nsaTUx+oTZWl4s/CKiqyJw==]   sortk: A#
DB: 2020/08/14 06:46:14.591507 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.523723ms
DB: 2020/08/14 06:46:14.592040 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.881377ms
Unlock: 2020/08/14 06:46:14.592051 ******* IN UNLOCK NC ********************
fetchItems: 2020/08/14 06:46:14.594277 +++  Cache FetchItems for sortk A# UID: [nsaTUx+oTZWl4s/CKiqyJw==] 
FetchNode: 2020/08/14 06:46:14.594299  node: nsaTUx+oTZWl4s/CKiqyJw== subKey: A#
DB: 2020/08/14 06:46:14.597597 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.08284ms
DB: 2020/08/14 06:46:14.599474 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.213317ms
grmgr: 2020/08/14 06:46:14.599492 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 06:46:14.599497 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 06:46:14.599503 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 06:46:14.599508 goroutine about to start 6 
rdfLoader: 2020/08/14 06:46:14.599513 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 06:46:14.600043 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 06:46:14.602169 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 7.804511ms
DB: 2020/08/14 06:46:14.604349 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.714187ms
DB: 2020/08/14 06:46:14.604367 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.714187ms
DB: 2020/08/14 06:46:14.607621 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.809931ms
Unlock: 2020/08/14 06:46:14.608741 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 06:46:14.609356 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.953087ms
DB: 2020/08/14 06:46:14.609372 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.953087ms
DB: 2020/08/14 06:46:14.611441 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.786857ms
DB: 2020/08/14 06:46:14.614699 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.212681ms
DB: 2020/08/14 06:46:14.629700 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 20.095886ms
DB: 2020/08/14 06:46:14.631559 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 16.827724ms
DB: 2020/08/14 06:46:14.634737 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.95085ms
DB: 2020/08/14 06:46:14.638251 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.640178ms
DB: 2020/08/14 06:46:14.641906 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.463742ms
DB: 2020/08/14 06:46:14.647118 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.878921ms
DB: 2020/08/14 06:46:14.647581 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.970314ms
FetchForUpdate: 2020/08/14 06:46:14.647595 ** Cache FetchForUpdate Cache Key Value: [E4LidrmDRvuPlZbDX3U6Jg==]   sortk: A#G#:S
fetchItems: 2020/08/14 06:46:14.647601 +++  Cache FetchItems for sortk A#G#:S UID: [E4LidrmDRvuPlZbDX3U6Jg==] 
FetchNode: 2020/08/14 06:46:14.647606  node: E4LidrmDRvuPlZbDX3U6Jg== subKey: A#G#:S
FetchForUpdate: 2020/08/14 06:46:14.647783 ** Cache FetchForUpdate Cache Key Value: [nsaTUx+oTZWl4s/CKiqyJw==]   sortk: A#
fetchItems: 2020/08/14 06:46:14.647802 +++  Cache FetchItems for sortk A# UID: [nsaTUx+oTZWl4s/CKiqyJw==] 
FetchNode: 2020/08/14 06:46:14.647814  node: nsaTUx+oTZWl4s/CKiqyJw== subKey: A#
DB: 2020/08/14 06:46:14.651316 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.457432ms
Unlock: 2020/08/14 06:46:14.652749 ******* IN UNLOCK NC ********************  From UnmarshalCache  //// 
DB: 2020/08/14 06:46:14.653531 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.893653ms
DB: 2020/08/14 06:46:14.658066 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 9.25969ms
DB: 2020/08/14 06:46:14.659152 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.058267ms
DB: 2020/08/14 06:46:14.663959 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.77372ms
DB: 2020/08/14 06:46:14.664145 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.77372ms
DB: 2020/08/14 06:46:14.664876 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.25827ms
DB: 2020/08/14 06:46:14.668857 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.648485ms
DB: 2020/08/14 06:46:14.668874 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.648485ms
DB: 2020/08/14 06:46:14.670144 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.565818ms
DB: 2020/08/14 06:46:14.674149 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.053122ms
DB: 2020/08/14 06:46:14.675689 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.955487ms
DB: 2020/08/14 06:46:14.679170 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.821618ms
DB: 2020/08/14 06:46:14.681909 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.653013ms
DB: 2020/08/14 06:46:14.686367 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.240356ms
DB: 2020/08/14 06:46:14.687086 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.572057ms
DB: 2020/08/14 06:46:14.692041 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.372166ms
DB: 2020/08/14 06:46:14.693079 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.4535ms
DB: 2020/08/14 06:46:14.697719 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.889929ms
DB: 2020/08/14 06:46:14.698690 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.301277ms
Cache: 2020/08/14 06:46:14.698704 In SetUpredAvailable: pUid, tUID:  4wBB9p8/TPOykKVYd740NA== 9rqGekUPRlSrrdpmZ16DQA== A#G#:S
Cache: 2020/08/14 06:46:14.698709 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:46:14.703818 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.042782ms
Unlock: 2020/08/14 06:46:14.703889 ******* IN UNLOCK NC ********************
DB: 2020/08/14 06:46:14.704799 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.363322ms
DB: 2020/08/14 06:46:14.709246 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.756715ms
grmgr: 2020/08/14 06:46:14.709263 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 06:46:14.710252 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.946721ms
DB: 2020/08/14 06:46:14.715786 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.963648ms
DB: 2020/08/14 06:46:14.723049 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.499693ms
DB: 2020/08/14 06:46:14.728049 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.647129ms
DB: 2020/08/14 06:46:14.733513 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.103567ms
DB: 2020/08/14 06:46:14.738703 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.838192ms
Cache: 2020/08/14 06:46:14.738717 In SetUpredAvailable: pUid, tUID:  E4LidrmDRvuPlZbDX3U6Jg== GJdqWvumRlKZV9tIXBPboQ== A#G#:S
Cache: 2020/08/14 06:46:14.738722 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 06:46:14.743520 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.763018ms
Unlock: 2020/08/14 06:46:14.743542 ******* IN UNLOCK NC ********************
DB: 2020/08/14 06:46:14.749016 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.000593ms
rdfLoader: 2020/08/14 06:46:14.749179 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 06:46:14.749204 cancel contexts
rdfLoader: 2020/08/14 06:46:14.749210 wait for autonomous goroutines to end
errlog: 2020/08/14 06:46:14.749215 Powering down...
grmgr: 2020/08/14 06:46:14.749222 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 06:46:14.749227 Powering down...
rdfuuid: 2020/08/14 06:46:14.749233 Powering down...
rdfLoader: 2020/08/14 06:46:14.749237 loader exists.....
DB:2020/08/14 09:56:35 log.go:18: ===============================================================================
errlog: 2020/08/14 09:56:35.561938 Powering on...
rdfLoader: 2020/08/14 09:56:35.561977 saveNode started......
rdfLoader: 2020/08/14 09:56:35.561982 define saveNode limiter......
rdfuuid: 2020/08/14 09:56:35.561990 Powering on...
grmgr: 2020/08/14 09:56:35.562007 Powering on...
rdfLoader: 2020/08/14 09:56:35.562017  principle goroutines started 
RDFreader: 2020/08/14 09:56:35.562043 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 09:56:35.562057 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 09:56:35.562063 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 09:56:35.562069 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 09:56:35.562074 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 09:56:35.562080 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 09:56:35.562084 spo read:      
RDFreader: 2020/08/14 09:56:35.562089 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 09:56:35.562094 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 09:56:35.562099 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 09:56:35.562104 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 09:56:35.562108 spo read:      
RDFreader: 2020/08/14 09:56:35.562113 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 09:56:35.562118 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 09:56:35.562123 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 09:56:35.562128 spo read:  b  Age  "58"
RDFreader: 2020/08/14 09:56:35.562133 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 09:56:35.562138 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 09:56:35.562144 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 09:56:35.562148 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 09:56:35.562153 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 09:56:35.562157 spo read:      
RDFreader: 2020/08/14 09:56:35.562162 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 09:56:35.562166 Send node batch on channel verifyCh
RDFreader: 2020/08/14 09:56:35.562171 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 09:56:35.562175 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 09:56:35.562180 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 09:56:35.562187 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 09:56:35.562192 spo read:  c  Age  "67"
RDFreader: 2020/08/14 09:56:35.562197 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 09:56:35.562202 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 09:56:35.562207 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 09:56:35.562212 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 09:56:35.562218 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 09:56:35.562223 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 09:56:35.562228 spo read:      
RDFreader: 2020/08/14 09:56:35.562233 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 09:56:35.562237 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 09:56:35.562242 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 09:56:35.562247 spo read:  d  Age  "36"
RDFreader: 2020/08/14 09:56:35.562252 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 09:56:35.562259 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 09:56:35.562263 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 09:56:35.562266 close verify channel
rdfLoader: 2020/08/14 09:56:35.562270 wait for goroutines to end
rdfLoader: 2020/08/14 09:56:35.562274 verify started....
rdfLoader: 2020/08/14 09:56:35.562279 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 09:56:35.562283 .  getType..
rdfLoader: 2020/08/14 09:56:35.562287 node.TyName : [Person]
DB: 2020/08/14 09:56:35.636628 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 74.27178ms
grmgr: 2020/08/14 09:56:35.636778 Looping..... 0
grmgr: 2020/08/14 09:56:35.637101 Looping..... 1
grmgr: 2020/08/14 09:56:35.637124 Looping..... 2
grmgr: 2020/08/14 09:56:35.637289 Looping..... 3
grmgr: 2020/08/14 09:56:35.637470 Looping..... 4
grmgr: 2020/08/14 09:56:35.637653 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 09:56:35.637675 .  getType..
rdfLoader: 2020/08/14 09:56:35.637680 node.TyName : [Person]
grmgr: 2020/08/14 09:56:35.637686 Looping..... 0
unmarshalRDF2020/08/14 09:56:35.637699 Entered unmarshalRDF. 
grmgr: 2020/08/14 09:56:35.637709 Looping..... 1
grmgr: 2020/08/14 09:56:35.637715 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 09:56:35.637719 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 09:56:35.637728 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 09:56:35.637732 .  getType..
rdfLoader: 2020/08/14 09:56:35.637736 node.TyName : [Person]
grmgr: 2020/08/14 09:56:35.637741 Looping..... 0
rdfLoader: 2020/08/14 09:56:35.637751 Add to SS . [Honda]
rdfLoader: 2020/08/14 09:56:35.637756 Add to SS . [Alfa]
unmarshalRDF2020/08/14 09:56:35.637818 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 09:56:35.637826 Exit  unmarshalRDF. 
saveNode: 2020/08/14 09:56:35.637831 read from saveCH channel 1 
unmarshalRDF2020/08/14 09:56:35.637840 Entered unmarshalRDF. 
grmgr: 2020/08/14 09:56:35.637866 Looping..... 1
grmgr: 2020/08/14 09:56:35.637872 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 09:56:35.637876 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 09:56:35.637882 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 09:56:35.637886 Looping..... 0
rdfLoader: 2020/08/14 09:56:35.637895 Add to SS . [Honda]
rdfLoader: 2020/08/14 09:56:35.637900 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 09:56:35.637936 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 09:56:35.637941 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 09:56:35.637947 .  getType..
rdfLoader: 2020/08/14 09:56:35.637951 node.TyName : [Person]
unmarshalRDF2020/08/14 09:56:35.637960 Entered unmarshalRDF. 
grmgr: 2020/08/14 09:56:35.637971 Looping..... 1
rdfLoader: 2020/08/14 09:56:35.637980 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 09:56:35.637985 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 09:56:35.637989 Add to SS . [Honda]
unmarshalRDF2020/08/14 09:56:35.638032 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 09:56:35.638038 Exit  unmarshalRDF. 
grmgr: 2020/08/14 09:56:35.638062 Looping..... 2
grmgr: 2020/08/14 09:56:35.638249 Looping..... 3
grmgr: 2020/08/14 09:56:35.638441 Looping..... 4
grmgr: 2020/08/14 09:56:35.638624 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 09:56:35.638640 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 09:56:35.638645 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/14 09:56:35.638649 Looping..... 0
saveNode: 2020/08/14 09:56:35.638655 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 09:56:35.638662 read from saveCH channel 2 
grmgr: 2020/08/14 09:56:35.638690 Looping..... 1
SaveRDFNode: xxx 2020/08/14 09:56:35.638701 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.638707 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.638714 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.638720 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.638725 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.638732 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.638737 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 09:56:35.638742 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 09:56:35.638750 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017680)}
SaveRDFNode: 2020/08/14 09:56:35.638754 Waiting for UID ......................
rdfUIDdb: 2020/08/14 09:56:35.638774 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.638779 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.638786 UID received  : ERVqH/UUToGXqPNFFGiSIw==
grmgr: 2020/08/14 09:56:35.639033 Looping..... 2
grmgr: 2020/08/14 09:56:35.639053 Looping..... 3
grmgr: 2020/08/14 09:56:35.639238 Looping..... 4
grmgr: 2020/08/14 09:56:35.639424 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 09:56:35.639435 Looping..... 0
unmarshalRDF2020/08/14 09:56:35.639449 Entered unmarshalRDF. 
grmgr: 2020/08/14 09:56:35.639459 Looping..... 1
rdfLoader: 2020/08/14 09:56:35.639469 Add to SS . [Bentley]
unmarshalRDF2020/08/14 09:56:35.639503 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 09:56:35.639508 Exit  unmarshalRDF. 
grmgr: 2020/08/14 09:56:35.639517 Looping..... 2
grmgr: 2020/08/14 09:56:35.639609 Looping..... 3
grmgr: 2020/08/14 09:56:35.639790 Looping..... 4
grmgr: 2020/08/14 09:56:35.639973 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 09:56:35.639983 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 09:56:35.639990 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 09:56:35.639996 read from saveCH channel 3 
grmgr: 2020/08/14 09:56:35.640001 Looping..... 0
grmgr: 2020/08/14 09:56:35.640026 Looping..... 1
grmgr: 2020/08/14 09:56:35.640031 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 09:56:35.640036 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 09:56:35.640045 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.640051 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.640087 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.640094 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.640099 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.640105 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.640111 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 09:56:35.640131 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 09:56:35.640139 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017da0)}
SaveRDFNode: 2020/08/14 09:56:35.640143 Waiting for UID ......................
rdfUIDdb: 2020/08/14 09:56:35.640152 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.640156 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.640162 UID received  : 06H6BzU4Rk2NKoYQhBxtQQ==
DB: 2020/08/14 09:56:35.648147 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.325508ms
DB: 2020/08/14 09:56:35.653447 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 13.257126ms
DB: 2020/08/14 09:56:35.658630 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.971768ms
DB: 2020/08/14 09:56:35.663271 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.603602ms
DB: 2020/08/14 09:56:35.667869 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.563027ms
DB: 2020/08/14 09:56:35.670594 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 22.398814ms
DB: 2020/08/14 09:56:35.672779 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.873144ms
SaveRDFNode: 2020/08/14 09:56:35.672796 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 09:56:35.672804 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.672808 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.672814 Received UID: X18=
SaveRDFNode: 2020/08/14 09:56:35.672828 a: = db.Item{PKey:[]uint8{0xd3, 0xa1, 0xfa, 0x7, 0x35, 0x38, 0x46, 0x4d, 0x8d, 0x2a, 0x86, 0x10, 0x84, 0x1c, 0x6d, 0x41}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:56:35.676182 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.362664ms
DB: 2020/08/14 09:56:35.677614 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.754998ms
SaveRDFNode: 2020/08/14 09:56:35.677653 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 09:56:35.677661 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.677665 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.677671 Received UID: X18=
SaveRDFNode: 2020/08/14 09:56:35.677682 a: = db.Item{PKey:[]uint8{0xd3, 0xa1, 0xfa, 0x7, 0x35, 0x38, 0x46, 0x4d, 0x8d, 0x2a, 0x86, 0x10, 0x84, 0x1c, 0x6d, 0x41}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:56:35.681486 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.269653ms
DB: 2020/08/14 09:56:35.682400 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.686885ms
SaveRDFNode: 2020/08/14 09:56:35.682412 Returned.+++++++++++ No error
grmgr: 2020/08/14 09:56:35.682431 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 09:56:35.682437 Send ack to waiting saveNode...
saveNode: 2020/08/14 09:56:35.682442 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 09:56:35.682448 read from saveCH channel 4 
grmgr: 2020/08/14 09:56:35.682453 Looping..... 0
grmgr: 2020/08/14 09:56:35.682498 Looping..... 1
grmgr: 2020/08/14 09:56:35.682505 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 09:56:35.682509 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 09:56:35.682519 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.682525 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.682533 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.682538 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.682544 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.682552 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.682558 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 09:56:35.682561 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 09:56:35.682568 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0000169c0)}
SaveRDFNode: 2020/08/14 09:56:35.682572 Waiting for UID ......................
rdfUIDdb: 2020/08/14 09:56:35.682580 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.682584 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.682590 UID received  : mLhzPPLKROuCS0M8ium9vw==
DB: 2020/08/14 09:56:35.686997 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.47575ms
SaveRDFNode: 2020/08/14 09:56:35.687199 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 09:56:35.687213 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.687217 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.687223 Received UID: X18=
SaveRDFNode: 2020/08/14 09:56:35.687234 a: = db.Item{PKey:[]uint8{0x11, 0x15, 0x6a, 0x1f, 0xf5, 0x14, 0x4e, 0x81, 0x97, 0xa8, 0xf3, 0x45, 0x14, 0x68, 0x92, 0x23}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:56:35.687541 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.924173ms
DB: 2020/08/14 09:56:35.692294 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.022214ms
SaveRDFNode: 2020/08/14 09:56:35.692308 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 09:56:35.692314 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.692318 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.692324 Received UID: X18=
SaveRDFNode: 2020/08/14 09:56:35.692334 a: = db.Item{PKey:[]uint8{0x11, 0x15, 0x6a, 0x1f, 0xf5, 0x14, 0x4e, 0x81, 0x97, 0xa8, 0xf3, 0x45, 0x14, 0x68, 0x92, 0x23}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:56:35.692623 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.051285ms
DB: 2020/08/14 09:56:35.697378 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.985264ms
SaveRDFNode: 2020/08/14 09:56:35.697390 Returned.+++++++++++ No error
grmgr: 2020/08/14 09:56:35.697398 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 09:56:35.697410 Send ack to waiting saveNode...
saveNode: 2020/08/14 09:56:35.697416 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 09:56:35.697420 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 09:56:35.697447 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.697454 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.697481 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.697490 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.697496 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.697502 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 09:56:35.697507 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 09:56:35.697512 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 09:56:35.697518 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0001b8180)}
SaveRDFNode: 2020/08/14 09:56:35.697522 Waiting for UID ......................
rdfUIDdb: 2020/08/14 09:56:35.697531 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.697535 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.697541 UID received  : vK7hB0K6RrCJrA2jNTQ3Ew==
grmgr: 2020/08/14 09:56:35.697727 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 09:56:35.697844 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.189499ms
DB: 2020/08/14 09:56:35.702546 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.97627ms
DB: 2020/08/14 09:56:35.703003 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.127861ms
DB: 2020/08/14 09:56:35.707773 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.734043ms
SaveRDFNode: 2020/08/14 09:56:35.707788 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000169c0)}
rdfUIDdb: 2020/08/14 09:56:35.707794 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.707799 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.707805 Received UID: X18=
SaveRDFNode: 2020/08/14 09:56:35.707836 a: = db.Item{PKey:[]uint8{0x98, 0xb8, 0x73, 0x3c, 0xf2, 0xca, 0x44, 0xeb, 0x82, 0x4b, 0x43, 0x3c, 0x8a, 0xe9, 0xbd, 0xbf}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:56:35.708102 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.325202ms
DB: 2020/08/14 09:56:35.712630 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.76191ms
SaveRDFNode: 2020/08/14 09:56:35.712644 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000169c0)}
rdfUIDdb: 2020/08/14 09:56:35.712649 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.712653 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.712659 Received UID: X18=
SaveRDFNode: 2020/08/14 09:56:35.712669 a: = db.Item{PKey:[]uint8{0x98, 0xb8, 0x73, 0x3c, 0xf2, 0xca, 0x44, 0xeb, 0x82, 0x4b, 0x43, 0x3c, 0x8a, 0xe9, 0xbd, 0xbf}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:56:35.713159 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.979803ms
DB: 2020/08/14 09:56:35.717278 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.581206ms
SaveRDFNode: 2020/08/14 09:56:35.717309 Returned.+++++++++++ No error
grmgr: 2020/08/14 09:56:35.717316 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 09:56:35.718253 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.055553ms
DB: 2020/08/14 09:56:35.723001 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.549683ms
SaveRDFNode: 2020/08/14 09:56:35.723018 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001b8180)}
rdfUIDdb: 2020/08/14 09:56:35.723024 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.723028 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.723034 Received UID: X18=
SaveRDFNode: 2020/08/14 09:56:35.723045 a: = db.Item{PKey:[]uint8{0xbc, 0xae, 0xe1, 0x7, 0x42, 0xba, 0x46, 0xb0, 0x89, 0xac, 0xd, 0xa3, 0x35, 0x34, 0x37, 0x13}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:56:35.727803 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.729404ms
SaveRDFNode: 2020/08/14 09:56:35.727829 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001b8180)}
rdfUIDdb: 2020/08/14 09:56:35.727835 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:56:35.727839 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:56:35.727844 Received UID: X18=
SaveRDFNode: 2020/08/14 09:56:35.727889 a: = db.Item{PKey:[]uint8{0xbc, 0xae, 0xe1, 0x7, 0x42, 0xba, 0x46, 0xb0, 0x89, 0xac, 0xd, 0xa3, 0x35, 0x34, 0x37, 0x13}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:56:35.732589 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.670065ms
SaveRDFNode: 2020/08/14 09:56:35.732601 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 09:56:35.732610 saveNode finished waiting...exiting
grmgr: 2020/08/14 09:56:35.732617 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 09:56:35.732626 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 09:56:35.732631 Looping..... 0
grmgr: 2020/08/14 09:56:35.732661 Looping..... 1
grmgr: 2020/08/14 09:56:35.732717 Looping..... 2
grmgr: 2020/08/14 09:56:35.732900 Looping..... 3
grmgr: 2020/08/14 09:56:35.733078 Looping..... 4
grmgr: 2020/08/14 09:56:35.733257 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 09:56:35.733266 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 09:56:35.733272 goroutine about to start 1 
attachNode: 2020/08/14 09:56:35.733278 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 09:56:35.733282 Looping..... 0
grmgr: 2020/08/14 09:56:35.733301 Looping..... 1
grmgr: 2020/08/14 09:56:35.733307 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 09:56:35.733324 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 09:56:35.733328 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 09:56:35.733332 goroutine about to start 2 
attachNode: 2020/08/14 09:56:35.733337 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 09:56:35.733341 Looping..... 0
grmgr: 2020/08/14 09:56:35.734287 Looping..... 1
grmgr: 2020/08/14 09:56:35.734303 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 09:56:35.734310 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 09:56:35.734317 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 09:56:35.734322 goroutine about to start 3 
attachNode: 2020/08/14 09:56:35.734328 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 09:56:35.734334 Looping..... 0
grmgr: 2020/08/14 09:56:35.734994 Looping..... 1
grmgr: 2020/08/14 09:56:35.735007 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 09:56:35.735012 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 09:56:35.735018 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 09:56:35.735028 goroutine about to start 4 
attachNode: 2020/08/14 09:56:35.735034 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 09:56:35.735039 Looping..... 0
grmgr: 2020/08/14 09:56:35.735790 Looping..... 1
grmgr: 2020/08/14 09:56:35.735802 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 09:56:35.735807 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 09:56:35.735813 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 09:56:35.735818 goroutine about to start 5 
attachNode: 2020/08/14 09:56:35.735824 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 09:56:35.735829 Looping..... 0
DB: 2020/08/14 09:56:35.736736 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.340719ms
grmgr: 2020/08/14 09:56:35.737037 Looping..... 1
grmgr: 2020/08/14 09:56:35.737049 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 09:56:35.737054 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 09:56:35.737060 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 09:56:35.737065 goroutine about to start 6 
rdfLoader: 2020/08/14 09:56:35.737069 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 09:56:35.738402 StartCh received for nodeAttach. rCnt = 6 
DB: 2020/08/14 09:56:35.740838 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.718413ms
DB: 2020/08/14 09:56:35.744762 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 8.44277ms
DB: 2020/08/14 09:56:35.751105 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 14.336295ms
DB: 2020/08/14 09:56:35.753540 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 19.157765ms
DB: 2020/08/14 09:56:35.756338 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 18.036537ms
DB: 2020/08/14 09:56:35.757818 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 16.925422ms
DB: 2020/08/14 09:56:35.758736 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.575889ms
DB: 2020/08/14 09:56:35.764701 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.930409ms
DB: 2020/08/14 09:56:35.766931 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 29.471591ms
DB: 2020/08/14 09:56:35.771401 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 26.60622ms
DB: 2020/08/14 09:56:35.772631 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 19.017472ms
DB: 2020/08/14 09:56:35.774592 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 18.200072ms
DB: 2020/08/14 09:56:35.775768 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.441157ms
DB: 2020/08/14 09:56:35.776013 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.063219ms
DB: 2020/08/14 09:56:35.778719 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.918987ms
DB: 2020/08/14 09:56:35.779110 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.067051ms
DB: 2020/08/14 09:56:35.781892 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.900724ms
DB: 2020/08/14 09:56:35.782524 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 18.253399ms
DB: 2020/08/14 09:56:35.784006 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.232134ms
DB: 2020/08/14 09:56:35.784988 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 20.232304ms
DB: 2020/08/14 09:56:35.785303 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 18.316712ms
DB: 2020/08/14 09:56:35.785339 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.181225ms
DB: 2020/08/14 09:56:35.785495 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.568718ms
DB: 2020/08/14 09:56:35.786814 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.247309ms
DB: 2020/08/14 09:56:35.790723 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.158199ms
DB: 2020/08/14 09:56:35.793264 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.114783ms
DB: 2020/08/14 09:56:35.799207 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 11.453143ms
FetchForUpdate: 2020/08/14 09:56:35.799240 ** Cache FetchForUpdate Cache Key Value: [06H6BzU4Rk2NKoYQhBxtQQ==]   sortk: A#G#:S
FetchNode: 2020/08/14 09:56:35.799248  node: 06H6BzU4Rk2NKoYQhBxtQQ== subKey: A#G#:S
FetchForUpdate: 2020/08/14 09:56:35.801572 ** Cache FetchForUpdate Cache Key Value: [ERVqH/UUToGXqPNFFGiSIw==]   sortk: A#
FetchNode: 2020/08/14 09:56:35.801603  node: ERVqH/UUToGXqPNFFGiSIw== subKey: A#
DB: 2020/08/14 09:56:35.801907 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 12.765108ms
FetchForUpdate: 2020/08/14 09:56:35.801921 ** Cache FetchForUpdate Cache Key Value: [mLhzPPLKROuCS0M8ium9vw==]   sortk: A#G#:S
FetchNode: 2020/08/14 09:56:35.801928  node: mLhzPPLKROuCS0M8ium9vw== subKey: A#G#:S
FetchForUpdate: 2020/08/14 09:56:35.802136 ** Cache FetchForUpdate Cache Key Value: [ERVqH/UUToGXqPNFFGiSIw==]   sortk: A#
DB: 2020/08/14 09:56:35.802437 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 12.462859ms
DB: 2020/08/14 09:56:35.805645 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 19.844936ms
FetchForUpdate: 2020/08/14 09:56:35.805663 ** Cache FetchForUpdate Cache Key Value: [mLhzPPLKROuCS0M8ium9vw==]   sortk: A#G#:S
FetchForUpdate: 2020/08/14 09:56:35.805676 ** Cache FetchForUpdate Cache Key Value: [06H6BzU4Rk2NKoYQhBxtQQ==]   sortk: A#
DB: 2020/08/14 09:56:35.806006 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.723065ms
FetchForUpdate: 2020/08/14 09:56:35.806049 len(nb): 1
fetchItems: 2020/08/14 09:56:35.806057 +++  Cache FetchItems for sortk A#G#:S UID: [06H6BzU4Rk2NKoYQhBxtQQ==] 
FetchNode: 2020/08/14 09:56:35.806061  node: 06H6BzU4Rk2NKoYQhBxtQQ== subKey: A#G#:S
DB: 2020/08/14 09:56:35.806621 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.152883ms
DB: 2020/08/14 09:56:35.807277 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 15.291079ms
FetchForUpdate: 2020/08/14 09:56:35.807290 ** Cache FetchForUpdate Cache Key Value: [06H6BzU4Rk2NKoYQhBxtQQ==]   sortk: A#G#:S
FetchForUpdate: 2020/08/14 09:56:35.807301 ** Cache FetchForUpdate Cache Key Value: [mLhzPPLKROuCS0M8ium9vw==]   sortk: A#
DB: 2020/08/14 09:56:35.809267 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.176497ms
DB: 2020/08/14 09:56:35.815758 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.782059ms
DB: 2020/08/14 09:56:35.816002 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 9.327247ms
DB: 2020/08/14 09:56:35.819009 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 17.341368ms
FetchForUpdate: 2020/08/14 09:56:35.819125 len(nb): 7
fetchItems: 2020/08/14 09:56:35.819135 +++  Cache FetchItems for sortk A# UID: [ERVqH/UUToGXqPNFFGiSIw==] 
FetchNode: 2020/08/14 09:56:35.819140  node: ERVqH/UUToGXqPNFFGiSIw== subKey: A#
DB: 2020/08/14 09:56:35.820217 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 18.258562ms
FetchForUpdate: 2020/08/14 09:56:35.820453 len(nb): 1
fetchItems: 2020/08/14 09:56:35.820551 +++  Cache FetchItems for sortk A#G#:S UID: [mLhzPPLKROuCS0M8ium9vw==] 
FetchNode: 2020/08/14 09:56:35.820560  node: mLhzPPLKROuCS0M8ium9vw== subKey: A#G#:S
DB: 2020/08/14 09:56:35.820886 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 25.016474ms
FetchForUpdate: 2020/08/14 09:56:35.820918 ** Cache FetchForUpdate Cache Key Value: [ERVqH/UUToGXqPNFFGiSIw==]   sortk: A#G#:S
FetchForUpdate: 2020/08/14 09:56:35.820931 ** Cache FetchForUpdate Cache Key Value: [06H6BzU4Rk2NKoYQhBxtQQ==]   sortk: A#
DB: 2020/08/14 09:56:35.821251 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.154868ms
FetchForUpdate: 2020/08/14 09:56:35.821263 ** Cache FetchForUpdate Cache Key Value: [ERVqH/UUToGXqPNFFGiSIw==]   sortk: A#G#:S
FetchForUpdate: 2020/08/14 09:56:35.821275 ** Cache FetchForUpdate Cache Key Value: [mLhzPPLKROuCS0M8ium9vw==]   sortk: A#
DB: 2020/08/14 09:56:35.824775 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.145335ms
DB: 2020/08/14 09:56:35.835704 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 10.22723ms
DB: 2020/08/14 09:56:35.839134 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 19.962292ms
DB: 2020/08/14 09:56:35.845865 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.520323ms
DB: 2020/08/14 09:56:35.851728 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.807786ms
DB: 2020/08/14 09:56:35.857482 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.303901ms
DB: 2020/08/14 09:56:35.865963 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.127545ms
DB: 2020/08/14 09:56:35.873188 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.547143ms
DB: 2020/08/14 09:56:35.878870 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.295154ms
DB: 2020/08/14 09:56:35.885985 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.757162ms
DB: 2020/08/14 09:56:35.891486 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.16702ms
DB: 2020/08/14 09:56:35.897146 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.319556ms
DB: 2020/08/14 09:56:35.902647 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.287362ms
Cache: 2020/08/14 09:56:35.902662 In SetUpredAvailable: pUid, tUID:  06H6BzU4Rk2NKoYQhBxtQQ== 06H6BzU4Rk2NKoYQhBxtQQ== A#G#:S
Cache: 2020/08/14 09:56:35.902668 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 09:56:35.907889 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.171917ms
Unlock: 2020/08/14 09:56:35.907901 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 09:56:35.907907 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 09:56:35.908171 +++  Cache FetchItems for sortk A# UID: [06H6BzU4Rk2NKoYQhBxtQQ==] 
FetchNode: 2020/08/14 09:56:35.908201  node: 06H6BzU4Rk2NKoYQhBxtQQ== subKey: A#
fetchItems: 2020/08/14 09:56:35.908390 +++  Cache FetchItems for sortk A# UID: [ERVqH/UUToGXqPNFFGiSIw==] 
FetchNode: 2020/08/14 09:56:35.908420  node: ERVqH/UUToGXqPNFFGiSIw== subKey: A#
DB: 2020/08/14 09:56:35.912850 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.874336ms
grmgr: 2020/08/14 09:56:35.912873 EndCh received for nodeAttach. rCnt = 5 
DB: 2020/08/14 09:56:35.916322 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 7.848143ms
DB: 2020/08/14 09:56:35.918106 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 9.857286ms
fetchItems: 2020/08/14 09:56:35.918561 +++  Cache FetchItems for sortk A# UID: [06H6BzU4Rk2NKoYQhBxtQQ==] 
FetchNode: 2020/08/14 09:56:35.918571  node: 06H6BzU4Rk2NKoYQhBxtQQ== subKey: A#
DB: 2020/08/14 09:56:35.931660 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.174586ms
DB: 2020/08/14 09:56:35.936955 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.224176ms
DB: 2020/08/14 09:56:35.937608 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 18.992378ms
DB: 2020/08/14 09:56:35.942404 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.309285ms
DB: 2020/08/14 09:56:35.949112 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.643581ms
DB: 2020/08/14 09:56:35.965912 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 16.730435ms
DB: 2020/08/14 09:56:35.971444 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.45447ms
DB: 2020/08/14 09:56:35.978243 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.732049ms
DB: 2020/08/14 09:56:35.983210 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.904015ms
DB: 2020/08/14 09:56:35.988484 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.198645ms
DB: 2020/08/14 09:56:35.993521 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.977063ms
Cache: 2020/08/14 09:56:35.993536 In SetUpredAvailable: pUid, tUID:  mLhzPPLKROuCS0M8ium9vw== mLhzPPLKROuCS0M8ium9vw== A#G#:S
Cache: 2020/08/14 09:56:35.993542 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 09:56:35.998660 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.067491ms
Unlock: 2020/08/14 09:56:35.998672 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 09:56:35.998678 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 09:56:35.998929 +++  Cache FetchItems for sortk A# UID: [mLhzPPLKROuCS0M8ium9vw==] 
FetchNode: 2020/08/14 09:56:35.998965  node: mLhzPPLKROuCS0M8ium9vw== subKey: A#
fetchItems: 2020/08/14 09:56:35.999156 +++  Cache FetchItems for sortk A#G#:S UID: [ERVqH/UUToGXqPNFFGiSIw==] 
FetchNode: 2020/08/14 09:56:35.999203  node: ERVqH/UUToGXqPNFFGiSIw== subKey: A#G#:S
DB: 2020/08/14 09:56:36.002317 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.297554ms
fetchItems: 2020/08/14 09:56:36.002489 +++  Cache FetchItems for sortk A# UID: [mLhzPPLKROuCS0M8ium9vw==] 
FetchNode: 2020/08/14 09:56:36.002498  node: mLhzPPLKROuCS0M8ium9vw== subKey: A#
DB: 2020/08/14 09:56:36.003957 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.196713ms
grmgr: 2020/08/14 09:56:36.003989 EndCh received for nodeAttach. rCnt = 4 
DB: 2020/08/14 09:56:36.006901 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 7.650453ms
DB: 2020/08/14 09:56:36.008043 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 5.511655ms
DB: 2020/08/14 09:56:36.013334 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.126236ms
DB:2020/08/14 09:58:32 log.go:18: ===============================================================================
errlog: 2020/08/14 09:58:32.686858 Powering on...
rdfLoader: 2020/08/14 09:58:32.687281 saveNode started......
rdfLoader: 2020/08/14 09:58:32.687295 define saveNode limiter......
rdfuuid: 2020/08/14 09:58:32.687307 Powering on...
grmgr: 2020/08/14 09:58:32.687318 Powering on...
rdfLoader: 2020/08/14 09:58:32.687329  principle goroutines started 
RDFreader: 2020/08/14 09:58:32.687355 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 09:58:32.687371 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 09:58:32.687378 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 09:58:32.687383 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 09:58:32.687389 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 09:58:32.687394 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 09:58:32.687399 spo read:      
RDFreader: 2020/08/14 09:58:32.687404 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 09:58:32.687410 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 09:58:32.687415 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 09:58:32.687420 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 09:58:32.687424 spo read:      
RDFreader: 2020/08/14 09:58:32.687430 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 09:58:32.687435 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 09:58:32.687440 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 09:58:32.687445 spo read:  b  Age  "58"
RDFreader: 2020/08/14 09:58:32.687450 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 09:58:32.687455 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 09:58:32.687461 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 09:58:32.687466 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 09:58:32.687471 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 09:58:32.687475 spo read:      
RDFreader: 2020/08/14 09:58:32.687480 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 09:58:32.687484 Send node batch on channel verifyCh
RDFreader: 2020/08/14 09:58:32.687490 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 09:58:32.687494 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 09:58:32.687499 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 09:58:32.687506 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 09:58:32.687512 spo read:  c  Age  "67"
RDFreader: 2020/08/14 09:58:32.687517 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 09:58:32.687522 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 09:58:32.687527 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 09:58:32.687532 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 09:58:32.687538 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 09:58:32.687543 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 09:58:32.687548 spo read:      
RDFreader: 2020/08/14 09:58:32.687553 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 09:58:32.687558 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 09:58:32.687564 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 09:58:32.687569 spo read:  d  Age  "36"
RDFreader: 2020/08/14 09:58:32.687574 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 09:58:32.687580 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 09:58:32.687584 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 09:58:32.687588 close verify channel
rdfLoader: 2020/08/14 09:58:32.687592 wait for goroutines to end
rdfLoader: 2020/08/14 09:58:32.687597 verify started....
rdfLoader: 2020/08/14 09:58:32.687607 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 09:58:32.687611 .  getType..
rdfLoader: 2020/08/14 09:58:32.687615 node.TyName : [Person]
DB: 2020/08/14 09:58:32.759837 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 72.15773ms
grmgr: 2020/08/14 09:58:32.759988 Looping..... 0
grmgr: 2020/08/14 09:58:32.760318 Looping..... 1
grmgr: 2020/08/14 09:58:32.760342 Looping..... 2
grmgr: 2020/08/14 09:58:32.760505 Looping..... 3
grmgr: 2020/08/14 09:58:32.760686 Looping..... 4
grmgr: 2020/08/14 09:58:32.760867 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 09:58:32.760879 .  getType..
rdfLoader: 2020/08/14 09:58:32.760883 node.TyName : [Person]
grmgr: 2020/08/14 09:58:32.760889 Looping..... 0
unmarshalRDF2020/08/14 09:58:32.760901 Entered unmarshalRDF. 
grmgr: 2020/08/14 09:58:32.760911 Looping..... 1
grmgr: 2020/08/14 09:58:32.760917 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 09:58:32.760921 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 09:58:32.760929 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 09:58:32.760934 .  getType..
rdfLoader: 2020/08/14 09:58:32.760938 node.TyName : [Person]
grmgr: 2020/08/14 09:58:32.760942 Looping..... 0
rdfLoader: 2020/08/14 09:58:32.760952 Add to SS . [Honda]
rdfLoader: 2020/08/14 09:58:32.760957 Add to SS . [Alfa]
unmarshalRDF2020/08/14 09:58:32.761033 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 09:58:32.761043 Exit  unmarshalRDF. 
saveNode: 2020/08/14 09:58:32.761049 read from saveCH channel 1 
unmarshalRDF2020/08/14 09:58:32.761058 Entered unmarshalRDF. 
grmgr: 2020/08/14 09:58:32.761086 Looping..... 1
grmgr: 2020/08/14 09:58:32.761092 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 09:58:32.761096 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 09:58:32.761103 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 09:58:32.761107 Looping..... 0
rdfLoader: 2020/08/14 09:58:32.761116 Add to SS . [Honda]
rdfLoader: 2020/08/14 09:58:32.761121 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 09:58:32.761158 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 09:58:32.761163 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 09:58:32.761170 .  getType..
rdfLoader: 2020/08/14 09:58:32.761174 node.TyName : [Person]
unmarshalRDF2020/08/14 09:58:32.761183 Entered unmarshalRDF. 
grmgr: 2020/08/14 09:58:32.761195 Looping..... 1
rdfLoader: 2020/08/14 09:58:32.761203 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 09:58:32.761208 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 09:58:32.761213 Add to SS . [Honda]
unmarshalRDF2020/08/14 09:58:32.761256 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 09:58:32.761272 Exit  unmarshalRDF. 
grmgr: 2020/08/14 09:58:32.761297 Looping..... 2
grmgr: 2020/08/14 09:58:32.761483 Looping..... 3
grmgr: 2020/08/14 09:58:32.761663 Looping..... 4
grmgr: 2020/08/14 09:58:32.761844 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 09:58:32.761855 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 09:58:32.761859 Looping..... 0
saveNode: 2020/08/14 09:58:32.761865 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 09:58:32.761871 read from saveCH channel 2 
grmgr: 2020/08/14 09:58:32.761900 Looping..... 1
SaveRDFNode: xxx 2020/08/14 09:58:32.761911 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.761917 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.761923 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.761929 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.761935 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.761941 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.761947 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 09:58:32.761951 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 09:58:32.761958 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0000175c0)}
SaveRDFNode: 2020/08/14 09:58:32.761962 Waiting for UID ......................
rdfUIDdb: 2020/08/14 09:58:32.761972 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.761982 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.761998 UID received  : XZwH0GatSpG5x4PSlc/xdA==
grmgr: 2020/08/14 09:58:32.762252 Looping..... 2
grmgr: 2020/08/14 09:58:32.762437 Looping..... 3
grmgr: 2020/08/14 09:58:32.762618 Looping..... 4
grmgr: 2020/08/14 09:58:32.762799 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 09:58:32.762809 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/14 09:58:32.762814 Looping..... 0
unmarshalRDF2020/08/14 09:58:32.762828 Entered unmarshalRDF. 
grmgr: 2020/08/14 09:58:32.762839 Looping..... 1
rdfLoader: 2020/08/14 09:58:32.762848 Add to SS . [Bentley]
unmarshalRDF2020/08/14 09:58:32.762882 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 09:58:32.762887 Exit  unmarshalRDF. 
grmgr: 2020/08/14 09:58:32.762897 Looping..... 2
grmgr: 2020/08/14 09:58:32.762984 Looping..... 3
grmgr: 2020/08/14 09:58:32.763164 Looping..... 4
grmgr: 2020/08/14 09:58:32.763350 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 09:58:32.763361 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 09:58:32.763375 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 09:58:32.763381 read from saveCH channel 3 
grmgr: 2020/08/14 09:58:32.763386 Looping..... 0
grmgr: 2020/08/14 09:58:32.763411 Looping..... 1
grmgr: 2020/08/14 09:58:32.763416 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 09:58:32.763421 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 09:58:32.763430 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.763436 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.763444 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.763450 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.763455 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.763461 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.763467 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 09:58:32.763471 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 09:58:32.763477 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017aa0)}
SaveRDFNode: 2020/08/14 09:58:32.763481 Waiting for UID ......................
rdfUIDdb: 2020/08/14 09:58:32.763488 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.763505 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.763511 UID received  : ayCkQKekTWWLh1/mZ54PJQ==
DB: 2020/08/14 09:58:32.771523 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.4925ms
DB: 2020/08/14 09:58:32.777693 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 14.154697ms
DB: 2020/08/14 09:58:32.784693 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.791788ms
DB: 2020/08/14 09:58:32.789338 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.607241ms
DB: 2020/08/14 09:58:32.792637 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 21.077537ms
DB: 2020/08/14 09:58:32.793918 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.546598ms
DB: 2020/08/14 09:58:32.797436 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.76501ms
DB: 2020/08/14 09:58:32.798638 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.485498ms
SaveRDFNode: 2020/08/14 09:58:32.798654 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017aa0)}
rdfUIDdb: 2020/08/14 09:58:32.798662 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.798666 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.798672 Received UID: X18=
SaveRDFNode: 2020/08/14 09:58:32.798686 a: = db.Item{PKey:[]uint8{0x6b, 0x20, 0xa4, 0x40, 0xa7, 0xa4, 0x4d, 0x65, 0x8b, 0x87, 0x5f, 0xe6, 0x67, 0x9e, 0xf, 0x25}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:58:32.802062 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.588832ms
DB: 2020/08/14 09:58:32.803217 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.500664ms
SaveRDFNode: 2020/08/14 09:58:32.803231 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017aa0)}
rdfUIDdb: 2020/08/14 09:58:32.803248 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.803252 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.803257 Received UID: X18=
SaveRDFNode: 2020/08/14 09:58:32.803268 a: = db.Item{PKey:[]uint8{0x6b, 0x20, 0xa4, 0x40, 0xa7, 0xa4, 0x4d, 0x65, 0x8b, 0x87, 0x5f, 0xe6, 0x67, 0x9e, 0xf, 0x25}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:58:32.806748 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.648755ms
SaveRDFNode: 2020/08/14 09:58:32.806763 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000175c0)}
rdfUIDdb: 2020/08/14 09:58:32.806768 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.806772 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.806778 Received UID: X18=
SaveRDFNode: 2020/08/14 09:58:32.806789 a: = db.Item{PKey:[]uint8{0x5d, 0x9c, 0x7, 0xd0, 0x66, 0xad, 0x4a, 0x91, 0xb9, 0xc7, 0x83, 0xd2, 0x95, 0xcf, 0xf1, 0x74}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:58:32.807916 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.618895ms
SaveRDFNode: 2020/08/14 09:58:32.807927 Returned.+++++++++++ No error
grmgr: 2020/08/14 09:58:32.807937 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 09:58:32.807942 Send ack to waiting saveNode...
saveNode: 2020/08/14 09:58:32.807949 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 09:58:32.807954 read from saveCH channel 4 
grmgr: 2020/08/14 09:58:32.807960 Looping..... 0
grmgr: 2020/08/14 09:58:32.808010 Looping..... 1
grmgr: 2020/08/14 09:58:32.808017 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 09:58:32.808022 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 09:58:32.808032 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.808039 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.808047 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.808053 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.808062 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.808068 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.808074 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 09:58:32.808078 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 09:58:32.808084 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000375bc0)}
SaveRDFNode: 2020/08/14 09:58:32.808088 Waiting for UID ......................
rdfUIDdb: 2020/08/14 09:58:32.808097 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.808101 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.808107 UID received  : JTX96oaPRyac3OJUGyZX+w==
DB: 2020/08/14 09:58:32.811510 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.686948ms
SaveRDFNode: 2020/08/14 09:58:32.811710 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000175c0)}
rdfUIDdb: 2020/08/14 09:58:32.811723 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.811728 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.811734 Received UID: X18=
SaveRDFNode: 2020/08/14 09:58:32.811744 a: = db.Item{PKey:[]uint8{0x5d, 0x9c, 0x7, 0xd0, 0x66, 0xad, 0x4a, 0x91, 0xb9, 0xc7, 0x83, 0xd2, 0x95, 0xcf, 0xf1, 0x74}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:58:32.812762 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.426669ms
DB: 2020/08/14 09:58:32.816415 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.633054ms
SaveRDFNode: 2020/08/14 09:58:32.816427 Returned.+++++++++++ No error
grmgr: 2020/08/14 09:58:32.816435 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 09:58:32.816440 Send ack to waiting saveNode...
saveNode: 2020/08/14 09:58:32.816446 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 09:58:32.816451 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 09:58:32.816473 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.816480 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.816488 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.816493 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.816520 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.816528 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 09:58:32.816534 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 09:58:32.816538 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 09:58:32.816544 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000214360)}
SaveRDFNode: 2020/08/14 09:58:32.816548 Waiting for UID ......................
rdfUIDdb: 2020/08/14 09:58:32.816556 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.816560 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.816566 UID received  : igUKX+joRUiM6Oc3YsZzpQ==
grmgr: 2020/08/14 09:58:32.816772 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 09:58:32.817314 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.519325ms
DB: 2020/08/14 09:58:32.821264 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.671087ms
DB: 2020/08/14 09:58:32.821782 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.436571ms
DB: 2020/08/14 09:58:32.826347 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.045808ms
DB: 2020/08/14 09:58:32.826635 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.822245ms
DB: 2020/08/14 09:58:32.830977 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.595311ms
DB: 2020/08/14 09:58:32.831457 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.790112ms
SaveRDFNode: 2020/08/14 09:58:32.831474 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000375bc0)}
rdfUIDdb: 2020/08/14 09:58:32.831482 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.831486 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.831492 Received UID: X18=
SaveRDFNode: 2020/08/14 09:58:32.831505 a: = db.Item{PKey:[]uint8{0x25, 0x35, 0xfd, 0xea, 0x86, 0x8f, 0x47, 0x26, 0x9c, 0xdc, 0xe2, 0x54, 0x1b, 0x26, 0x57, 0xfb}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:58:32.836087 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.552401ms
SaveRDFNode: 2020/08/14 09:58:32.836103 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000375bc0)}
rdfUIDdb: 2020/08/14 09:58:32.836120 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.836124 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.836130 Received UID: X18=
SaveRDFNode: 2020/08/14 09:58:32.836141 a: = db.Item{PKey:[]uint8{0x25, 0x35, 0xfd, 0xea, 0x86, 0x8f, 0x47, 0x26, 0x9c, 0xdc, 0xe2, 0x54, 0x1b, 0x26, 0x57, 0xfb}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:58:32.840898 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.70287ms
SaveRDFNode: 2020/08/14 09:58:32.840911 Returned.+++++++++++ No error
grmgr: 2020/08/14 09:58:32.840932 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 09:58:32.841370 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.354475ms
DB: 2020/08/14 09:58:32.847147 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.732889ms
SaveRDFNode: 2020/08/14 09:58:32.847166 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000214360)}
rdfUIDdb: 2020/08/14 09:58:32.847173 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.847178 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.847184 Received UID: X18=
SaveRDFNode: 2020/08/14 09:58:32.847198 a: = db.Item{PKey:[]uint8{0x8a, 0x5, 0xa, 0x5f, 0xe8, 0xe8, 0x45, 0x48, 0x8c, 0xe8, 0xe7, 0x37, 0x62, 0xc6, 0x73, 0xa5}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:58:32.851846 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.61879ms
SaveRDFNode: 2020/08/14 09:58:32.851862 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000214360)}
rdfUIDdb: 2020/08/14 09:58:32.851868 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 09:58:32.851872 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 09:58:32.851878 Received UID: X18=
SaveRDFNode: 2020/08/14 09:58:32.851889 a: = db.Item{PKey:[]uint8{0x8a, 0x5, 0xa, 0x5f, 0xe8, 0xe8, 0x45, 0x48, 0x8c, 0xe8, 0xe7, 0x37, 0x62, 0xc6, 0x73, 0xa5}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 09:58:32.856467 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.549473ms
SaveRDFNode: 2020/08/14 09:58:32.856478 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 09:58:32.856486 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 09:58:32.856492 cancel contexts
rdfLoader: 2020/08/14 09:58:32.856497 wait for autonomous goroutines to end
errlog: 2020/08/14 09:58:32.856502 Powering down...
grmgr: 2020/08/14 09:58:32.856508 EndCh received for saveNode. rCnt = 0 
grmgr: 2020/08/14 09:58:32.856513 Powering down...
rdfuuid: 2020/08/14 09:58:32.856517 Powering down...
rdfLoader: 2020/08/14 09:58:32.856533 loader exists.....
DB:2020/08/14 10:15:58 log.go:18: ===============================================================================
errlog: 2020/08/14 10:15:58.972938 Powering on...
rdfLoader: 2020/08/14 10:15:58.972977 saveNode started......
rdfLoader: 2020/08/14 10:15:58.972983 define saveNode limiter......
rdfuuid: 2020/08/14 10:15:58.972991 Powering on...
grmgr: 2020/08/14 10:15:58.973007 Powering on...
rdfLoader: 2020/08/14 10:15:58.973017  principle goroutines started 
RDFreader: 2020/08/14 10:15:58.973040 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:15:58.973054 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 10:15:58.973060 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 10:15:58.973066 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 10:15:58.973071 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 10:15:58.973076 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 10:15:58.973081 spo read:      
RDFreader: 2020/08/14 10:15:58.973086 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 10:15:58.973091 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 10:15:58.973101 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 10:15:58.973106 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 10:15:58.973110 spo read:      
RDFreader: 2020/08/14 10:15:58.973115 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 10:15:58.973120 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 10:15:58.973129 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 10:15:58.973134 spo read:  b  Age  "58"
RDFreader: 2020/08/14 10:15:58.973139 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 10:15:58.973143 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 10:15:58.973148 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 10:15:58.973153 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 10:15:58.973158 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 10:15:58.973161 spo read:      
RDFreader: 2020/08/14 10:15:58.973166 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 10:15:58.973170 Send node batch on channel verifyCh
RDFreader: 2020/08/14 10:15:58.973175 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:15:58.973179 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 10:15:58.973184 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 10:15:58.973191 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 10:15:58.973196 spo read:  c  Age  "67"
RDFreader: 2020/08/14 10:15:58.973201 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 10:15:58.973205 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 10:15:58.973210 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 10:15:58.973215 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 10:15:58.973221 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 10:15:58.973226 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 10:15:58.973230 spo read:      
RDFreader: 2020/08/14 10:15:58.973235 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 10:15:58.973239 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 10:15:58.973244 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 10:15:58.973249 spo read:  d  Age  "36"
RDFreader: 2020/08/14 10:15:58.973253 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 10:15:58.973259 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 10:15:58.973263 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 10:15:58.973267 close verify channel
rdfLoader: 2020/08/14 10:15:58.973271 wait for goroutines to end
rdfLoader: 2020/08/14 10:15:58.973275 verify started....
rdfLoader: 2020/08/14 10:15:58.973279 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:15:58.973283 .  getType..
rdfLoader: 2020/08/14 10:15:58.973287 node.TyName : [Person]
DB: 2020/08/14 10:15:59.049878 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 76.527149ms
grmgr: 2020/08/14 10:15:59.050028 Looping..... 0
grmgr: 2020/08/14 10:15:59.050325 Looping..... 1
grmgr: 2020/08/14 10:15:59.050506 Looping..... 2
grmgr: 2020/08/14 10:15:59.050687 Looping..... 3
grmgr: 2020/08/14 10:15:59.050882 Looping..... 4
grmgr: 2020/08/14 10:15:59.051052 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:15:59.051064 .  getType..
rdfLoader: 2020/08/14 10:15:59.051069 node.TyName : [Person]
grmgr: 2020/08/14 10:15:59.051075 Looping..... 0
unmarshalRDF2020/08/14 10:15:59.051088 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:15:59.051098 Looping..... 1
grmgr: 2020/08/14 10:15:59.051103 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:15:59.051107 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:15:59.051115 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:15:59.051119 .  getType..
rdfLoader: 2020/08/14 10:15:59.051123 node.TyName : [Person]
grmgr: 2020/08/14 10:15:59.051128 Looping..... 0
rdfLoader: 2020/08/14 10:15:59.051138 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:15:59.051143 Add to SS . [Alfa]
unmarshalRDF2020/08/14 10:15:59.051207 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:15:59.051226 Exit  unmarshalRDF. 
saveNode: 2020/08/14 10:15:59.051232 read from saveCH channel 1 
unmarshalRDF2020/08/14 10:15:59.051241 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:15:59.051268 Looping..... 1
grmgr: 2020/08/14 10:15:59.051273 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:15:59.051278 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:15:59.051283 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:15:59.051288 Looping..... 0
rdfLoader: 2020/08/14 10:15:59.051296 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:15:59.051301 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 10:15:59.051346 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:15:59.051352 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 10:15:59.051358 .  getType..
rdfLoader: 2020/08/14 10:15:59.051362 node.TyName : [Person]
unmarshalRDF2020/08/14 10:15:59.051371 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:15:59.051383 Looping..... 1
rdfLoader: 2020/08/14 10:15:59.051391 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 10:15:59.051396 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 10:15:59.051400 Add to SS . [Honda]
unmarshalRDF2020/08/14 10:15:59.051444 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:15:59.051450 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:15:59.051475 Looping..... 2
grmgr: 2020/08/14 10:15:59.051661 Looping..... 3
grmgr: 2020/08/14 10:15:59.051842 Looping..... 4
grmgr: 2020/08/14 10:15:59.052021 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:15:59.052030 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:15:59.052035 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/14 10:15:59.052040 Looping..... 0
saveNode: 2020/08/14 10:15:59.052046 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:15:59.052052 read from saveCH channel 2 
grmgr: 2020/08/14 10:15:59.052082 Looping..... 1
SaveRDFNode: xxx 2020/08/14 10:15:59.052093 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.052099 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.052105 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.052111 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.052123 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.052129 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.052135 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:15:59.052139 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:15:59.052147 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000374420)}
SaveRDFNode: 2020/08/14 10:15:59.052167 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:15:59.052178 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.052182 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.052189 UID received  : DMPqU2u2TPqAp99oGGGGpQ==
grmgr: 2020/08/14 10:15:59.052457 Looping..... 2
grmgr: 2020/08/14 10:15:59.052638 Looping..... 3
grmgr: 2020/08/14 10:15:59.052819 Looping..... 4
grmgr: 2020/08/14 10:15:59.052997 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:15:59.053006 Looping..... 0
unmarshalRDF2020/08/14 10:15:59.053019 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:15:59.053029 Looping..... 1
rdfLoader: 2020/08/14 10:15:59.053039 Add to SS . [Bentley]
unmarshalRDF2020/08/14 10:15:59.053074 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:15:59.053078 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:15:59.053088 Looping..... 2
grmgr: 2020/08/14 10:15:59.053174 Looping..... 3
grmgr: 2020/08/14 10:15:59.053355 Looping..... 4
grmgr: 2020/08/14 10:15:59.053532 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:15:59.053542 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 10:15:59.053549 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:15:59.053555 read from saveCH channel 3 
grmgr: 2020/08/14 10:15:59.053560 Looping..... 0
grmgr: 2020/08/14 10:15:59.053604 Looping..... 1
grmgr: 2020/08/14 10:15:59.053612 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:15:59.053616 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:15:59.053625 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.053632 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.053637 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.053645 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.053652 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.053658 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.053663 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:15:59.053667 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:15:59.053684 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000374ae0)}
SaveRDFNode: 2020/08/14 10:15:59.053695 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:15:59.053703 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.053708 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.053713 UID received  : hoPzNb42QiOkq4kiyu2Byw==
DB: 2020/08/14 10:15:59.062067 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.845621ms
DB: 2020/08/14 10:15:59.066692 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.586022ms
DB: 2020/08/14 10:15:59.072982 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.848942ms
DB: 2020/08/14 10:15:59.080279 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.248718ms
DB: 2020/08/14 10:15:59.080819 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 27.07863ms
DB: 2020/08/14 10:15:59.085125 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.80556ms
SaveRDFNode: 2020/08/14 10:15:59.086078 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000374420)}
rdfUIDdb: 2020/08/14 10:15:59.086094 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.086099 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.086106 Received UID: X18=
SaveRDFNode: 2020/08/14 10:15:59.086120 a: = db.Item{PKey:[]uint8{0xc, 0xc3, 0xea, 0x53, 0x6b, 0xb6, 0x4c, 0xfa, 0x80, 0xa7, 0xdf, 0x68, 0x18, 0x61, 0x86, 0xa5}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:15:59.086320 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.85438ms
DB: 2020/08/14 10:15:59.090695 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.542153ms
SaveRDFNode: 2020/08/14 10:15:59.090709 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000374420)}
rdfUIDdb: 2020/08/14 10:15:59.090715 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.090719 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.090725 Received UID: X18=
SaveRDFNode: 2020/08/14 10:15:59.090736 a: = db.Item{PKey:[]uint8{0xc, 0xc3, 0xea, 0x53, 0x6b, 0xb6, 0x4c, 0xfa, 0x80, 0xa7, 0xdf, 0x68, 0x18, 0x61, 0x86, 0xa5}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:15:59.091237 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.868529ms
DB: 2020/08/14 10:15:59.095661 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.893892ms
SaveRDFNode: 2020/08/14 10:15:59.095673 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:15:59.095685 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:15:59.095690 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:15:59.095696 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:15:59.095702 read from saveCH channel 4 
grmgr: 2020/08/14 10:15:59.095707 Looping..... 0
grmgr: 2020/08/14 10:15:59.095766 Looping..... 1
grmgr: 2020/08/14 10:15:59.095773 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:15:59.095778 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:15:59.095788 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.095794 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.095802 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.095808 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.095825 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.095831 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.095837 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:15:59.095841 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:15:59.095847 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000017740)}
SaveRDFNode: 2020/08/14 10:15:59.095851 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:15:59.095861 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.095865 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.095871 UID received  : bI1KBIjHQSakNe2+4c3pCQ==
DB: 2020/08/14 10:15:59.096223 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.952181ms
DB: 2020/08/14 10:15:59.100794 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.894166ms
DB: 2020/08/14 10:15:59.101147 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.873159ms
SaveRDFNode: 2020/08/14 10:15:59.101162 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000374ae0)}
rdfUIDdb: 2020/08/14 10:15:59.101168 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.101173 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.101179 Received UID: X18=
SaveRDFNode: 2020/08/14 10:15:59.101410 a: = db.Item{PKey:[]uint8{0x86, 0x83, 0xf3, 0x35, 0xbe, 0x36, 0x42, 0x23, 0xa4, 0xab, 0x89, 0x22, 0xca, 0xed, 0x81, 0xcb}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:15:59.105590 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.756268ms
DB: 2020/08/14 10:15:59.106776 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.164408ms
SaveRDFNode: 2020/08/14 10:15:59.106792 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000374ae0)}
rdfUIDdb: 2020/08/14 10:15:59.106932 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.106939 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.106953 Received UID: X18=
SaveRDFNode: 2020/08/14 10:15:59.106971 a: = db.Item{PKey:[]uint8{0x86, 0x83, 0xf3, 0x35, 0xbe, 0x36, 0x42, 0x23, 0xa4, 0xab, 0x89, 0x22, 0xca, 0xed, 0x81, 0xcb}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:15:59.110844 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.211786ms
DB: 2020/08/14 10:15:59.112108 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.080152ms
SaveRDFNode: 2020/08/14 10:15:59.112119 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:15:59.112127 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:15:59.112132 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:15:59.112137 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 10:15:59.112143 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 10:15:59.112166 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.112173 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.112203 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.112211 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.112225 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.112231 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:15:59.112237 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:15:59.112241 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:15:59.112247 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000016e40)}
SaveRDFNode: 2020/08/14 10:15:59.112251 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:15:59.112260 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.112264 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.112270 UID received  : dEQSLwvIQ3mf5fpDlOYI+A==
grmgr: 2020/08/14 10:15:59.112457 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 10:15:59.115568 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.688114ms
DB: 2020/08/14 10:15:59.117094 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.797192ms
DB: 2020/08/14 10:15:59.120732 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.13075ms
SaveRDFNode: 2020/08/14 10:15:59.120748 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017740)}
rdfUIDdb: 2020/08/14 10:15:59.120754 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.120758 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.120763 Received UID: X18=
SaveRDFNode: 2020/08/14 10:15:59.120775 a: = db.Item{PKey:[]uint8{0x6c, 0x8d, 0x4a, 0x4, 0x88, 0xc7, 0x41, 0x26, 0xa4, 0x35, 0xed, 0xbe, 0xe1, 0xcd, 0xe9, 0x9}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:15:59.121895 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.60177ms
DB: 2020/08/14 10:15:59.125638 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.832921ms
SaveRDFNode: 2020/08/14 10:15:59.125652 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017740)}
rdfUIDdb: 2020/08/14 10:15:59.125658 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.125661 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.125667 Received UID: X18=
SaveRDFNode: 2020/08/14 10:15:59.125698 a: = db.Item{PKey:[]uint8{0x6c, 0x8d, 0x4a, 0x4, 0x88, 0xc7, 0x41, 0x26, 0xa4, 0x35, 0xed, 0xbe, 0xe1, 0xcd, 0xe9, 0x9}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:15:59.126594 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.664541ms
DB: 2020/08/14 10:15:59.130606 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.875806ms
SaveRDFNode: 2020/08/14 10:15:59.130619 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:15:59.130627 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 10:15:59.132555 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.92174ms
DB: 2020/08/14 10:15:59.137687 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.914458ms
SaveRDFNode: 2020/08/14 10:15:59.137705 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016e40)}
rdfUIDdb: 2020/08/14 10:15:59.137711 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.137716 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.137721 Received UID: X18=
SaveRDFNode: 2020/08/14 10:15:59.137733 a: = db.Item{PKey:[]uint8{0x74, 0x44, 0x12, 0x2f, 0xb, 0xc8, 0x43, 0x79, 0x9f, 0xe5, 0xfa, 0x43, 0x94, 0xe6, 0x8, 0xf8}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:15:59.142436 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.640514ms
SaveRDFNode: 2020/08/14 10:15:59.142451 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016e40)}
rdfUIDdb: 2020/08/14 10:15:59.142456 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:15:59.142460 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:15:59.142466 Received UID: X18=
SaveRDFNode: 2020/08/14 10:15:59.142477 a: = db.Item{PKey:[]uint8{0x74, 0x44, 0x12, 0x2f, 0xb, 0xc8, 0x43, 0x79, 0x9f, 0xe5, 0xfa, 0x43, 0x94, 0xe6, 0x8, 0xf8}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:15:59.147192 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.683923ms
SaveRDFNode: 2020/08/14 10:15:59.147209 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 10:15:59.147217 saveNode finished waiting...exiting
grmgr: 2020/08/14 10:15:59.147225 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 10:15:59.147235 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 10:15:59.147240 Looping..... 0
grmgr: 2020/08/14 10:15:59.147257 Looping..... 1
grmgr: 2020/08/14 10:15:59.147303 Looping..... 2
grmgr: 2020/08/14 10:15:59.147486 Looping..... 3
grmgr: 2020/08/14 10:15:59.147685 Looping..... 4
grmgr: 2020/08/14 10:15:59.148050 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:15:59.148069 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:15:59.148076 goroutine about to start 1 
attachNode: 2020/08/14 10:15:59.148083 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 10:15:59.148090 Looping..... 0
grmgr: 2020/08/14 10:15:59.148297 Looping..... 1
grmgr: 2020/08/14 10:15:59.148466 Looping..... 2
grmgr: 2020/08/14 10:15:59.148647 Looping..... 3
grmgr: 2020/08/14 10:15:59.148828 Looping..... 4
grmgr: 2020/08/14 10:15:59.149010 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:15:59.149019 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:15:59.149024 goroutine about to start 2 
attachNode: 2020/08/14 10:15:59.149029 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 10:15:59.149034 Looping..... 0
grmgr: 2020/08/14 10:15:59.149192 Looping..... 1
grmgr: 2020/08/14 10:15:59.149373 Looping..... 2
grmgr: 2020/08/14 10:15:59.149553 Looping..... 3
grmgr: 2020/08/14 10:15:59.149734 Looping..... 4
grmgr: 2020/08/14 10:15:59.149916 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:15:59.149925 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:15:59.149929 goroutine about to start 3 
attachNode: 2020/08/14 10:15:59.149934 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 10:15:59.149938 Looping..... 0
grmgr: 2020/08/14 10:15:59.150097 Looping..... 1
grmgr: 2020/08/14 10:15:59.150339 Looping..... 2
grmgr: 2020/08/14 10:15:59.150511 Looping..... 3
grmgr: 2020/08/14 10:15:59.150670 Looping..... 4
grmgr: 2020/08/14 10:15:59.150851 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:15:59.150862 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:15:59.150867 goroutine about to start 4 
attachNode: 2020/08/14 10:15:59.150872 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 10:15:59.150877 Looping..... 0
grmgr: 2020/08/14 10:15:59.151043 Looping..... 1
grmgr: 2020/08/14 10:15:59.151224 Looping..... 2
grmgr: 2020/08/14 10:15:59.151404 Looping..... 3
grmgr: 2020/08/14 10:15:59.151584 Looping..... 4
grmgr: 2020/08/14 10:15:59.151764 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:15:59.151773 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:15:59.151777 goroutine about to start 5 
attachNode: 2020/08/14 10:15:59.151782 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 10:15:59.151793 Looping..... 0
grmgr: 2020/08/14 10:15:59.151947 Looping..... 1
grmgr: 2020/08/14 10:15:59.152130 Looping..... 2
grmgr: 2020/08/14 10:15:59.152321 Looping..... 3
grmgr: 2020/08/14 10:15:59.152487 Looping..... 4
grmgr: 2020/08/14 10:15:59.152663 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:15:59.152672 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:15:59.152676 goroutine about to start 6 
rdfLoader: 2020/08/14 10:15:59.152680 saveNode  waiting on AttachNode to finish
rdfLoader: 2020/08/14 10:15:59.152684 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 10:15:59.152690 cancel contexts
rdfLoader: 2020/08/14 10:15:59.152696 wait for autonomous goroutines to end
errlog: 2020/08/14 10:15:59.152701 Powering down...
rdfuuid: 2020/08/14 10:15:59.152706 Powering down...
grmgr: 2020/08/14 10:15:59.152711 Powering down...
rdfLoader: 2020/08/14 10:15:59.152715 loader exists.....
DB:2020/08/14 10:17:22 log.go:18: ===============================================================================
errlog: 2020/08/14 10:17:22.927133 Powering on...
rdfLoader: 2020/08/14 10:17:22.927980 saveNode started......
rdfLoader: 2020/08/14 10:17:22.927995 define saveNode limiter......
rdfuuid: 2020/08/14 10:17:22.928005 Powering on...
grmgr: 2020/08/14 10:17:22.928022 Powering on...
rdfLoader: 2020/08/14 10:17:22.928033  principle goroutines started 
RDFreader: 2020/08/14 10:17:22.928108 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:17:22.928132 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 10:17:22.928139 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 10:17:22.928145 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 10:17:22.928151 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 10:17:22.928157 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 10:17:22.928161 spo read:      
RDFreader: 2020/08/14 10:17:22.928166 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 10:17:22.928172 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 10:17:22.928177 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 10:17:22.928182 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 10:17:22.928187 spo read:      
RDFreader: 2020/08/14 10:17:22.928192 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 10:17:22.928198 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 10:17:22.928203 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 10:17:22.928208 spo read:  b  Age  "58"
RDFreader: 2020/08/14 10:17:22.928214 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 10:17:22.928219 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 10:17:22.928225 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 10:17:22.928230 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 10:17:22.928235 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 10:17:22.928239 spo read:      
RDFreader: 2020/08/14 10:17:22.928244 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 10:17:22.928248 Send node batch on channel verifyCh
RDFreader: 2020/08/14 10:17:22.928254 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:17:22.928259 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 10:17:22.928264 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 10:17:22.928272 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 10:17:22.928278 spo read:  c  Age  "67"
RDFreader: 2020/08/14 10:17:22.928283 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 10:17:22.928288 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 10:17:22.928293 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 10:17:22.928298 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 10:17:22.928306 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 10:17:22.928311 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 10:17:22.928316 spo read:      
RDFreader: 2020/08/14 10:17:22.928321 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 10:17:22.928326 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 10:17:22.928331 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 10:17:22.928343 spo read:  d  Age  "36"
RDFreader: 2020/08/14 10:17:22.928349 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 10:17:22.928355 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 10:17:22.928359 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 10:17:22.928363 close verify channel
rdfLoader: 2020/08/14 10:17:22.928367 wait for goroutines to end
rdfLoader: 2020/08/14 10:17:22.928372 verify started....
rdfLoader: 2020/08/14 10:17:22.928377 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:17:22.928380 .  getType..
rdfLoader: 2020/08/14 10:17:22.928384 node.TyName : [Person]
DB: 2020/08/14 10:17:23.007104 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 78.652439ms
grmgr: 2020/08/14 10:17:23.007245 Looping..... 0
grmgr: 2020/08/14 10:17:23.007556 Looping..... 1
grmgr: 2020/08/14 10:17:23.007579 Looping..... 2
grmgr: 2020/08/14 10:17:23.007762 Looping..... 3
grmgr: 2020/08/14 10:17:23.007942 Looping..... 4
grmgr: 2020/08/14 10:17:23.008122 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:17:23.008147 .  getType..
rdfLoader: 2020/08/14 10:17:23.008152 node.TyName : [Person]
grmgr: 2020/08/14 10:17:23.008158 Looping..... 0
unmarshalRDF2020/08/14 10:17:23.008170 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:17:23.008180 Looping..... 1
grmgr: 2020/08/14 10:17:23.008186 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:17:23.008190 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:17:23.008199 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:17:23.008203 .  getType..
rdfLoader: 2020/08/14 10:17:23.008207 node.TyName : [Person]
grmgr: 2020/08/14 10:17:23.008212 Looping..... 0
rdfLoader: 2020/08/14 10:17:23.008222 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:17:23.008227 Add to SS . [Alfa]
unmarshalRDF2020/08/14 10:17:23.008290 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:17:23.008298 Exit  unmarshalRDF. 
saveNode: 2020/08/14 10:17:23.008303 read from saveCH channel 1 
unmarshalRDF2020/08/14 10:17:23.008313 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:17:23.008340 Looping..... 1
grmgr: 2020/08/14 10:17:23.008346 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:17:23.008350 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:17:23.008356 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:17:23.008361 Looping..... 0
rdfLoader: 2020/08/14 10:17:23.008369 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:17:23.008374 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 10:17:23.008415 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:17:23.008420 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 10:17:23.008426 .  getType..
rdfLoader: 2020/08/14 10:17:23.008431 node.TyName : [Person]
unmarshalRDF2020/08/14 10:17:23.008440 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:17:23.008463 Looping..... 1
rdfLoader: 2020/08/14 10:17:23.008472 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 10:17:23.008478 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 10:17:23.008493 Add to SS . [Honda]
unmarshalRDF2020/08/14 10:17:23.008528 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:17:23.008533 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:17:23.008559 Looping..... 2
grmgr: 2020/08/14 10:17:23.008742 Looping..... 3
grmgr: 2020/08/14 10:17:23.008919 Looping..... 4
grmgr: 2020/08/14 10:17:23.009097 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:17:23.009107 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:17:23.009112 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/14 10:17:23.009116 Looping..... 0
saveNode: 2020/08/14 10:17:23.009122 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:17:23.009128 read from saveCH channel 2 
grmgr: 2020/08/14 10:17:23.009157 Looping..... 1
SaveRDFNode: xxx 2020/08/14 10:17:23.009169 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.009175 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.009182 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.009188 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.009193 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.009199 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.009218 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:17:23.009222 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:17:23.009251 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc00036c420)}
SaveRDFNode: 2020/08/14 10:17:23.009256 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:17:23.009266 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.009270 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.009276 UID received  : i41dXPG5RgO7ir1kYtT/fA==
grmgr: 2020/08/14 10:17:23.009541 Looping..... 2
grmgr: 2020/08/14 10:17:23.009745 Looping..... 3
grmgr: 2020/08/14 10:17:23.009933 Looping..... 4
grmgr: 2020/08/14 10:17:23.010116 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:17:23.010124 Looping..... 0
unmarshalRDF2020/08/14 10:17:23.010138 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:17:23.010147 Looping..... 1
rdfLoader: 2020/08/14 10:17:23.010155 Add to SS . [Bentley]
unmarshalRDF2020/08/14 10:17:23.010188 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:17:23.010201 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:17:23.010211 Looping..... 2
grmgr: 2020/08/14 10:17:23.010296 Looping..... 3
grmgr: 2020/08/14 10:17:23.010474 Looping..... 4
grmgr: 2020/08/14 10:17:23.010651 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:17:23.010661 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 10:17:23.010680 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:17:23.010686 read from saveCH channel 3 
grmgr: 2020/08/14 10:17:23.010691 Looping..... 0
grmgr: 2020/08/14 10:17:23.010751 Looping..... 1
grmgr: 2020/08/14 10:17:23.010757 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:17:23.010761 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:17:23.010771 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.010777 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.010784 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.010802 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.010809 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.010815 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.010821 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:17:23.010826 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:17:23.010832 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc00036cae0)}
SaveRDFNode: 2020/08/14 10:17:23.010836 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:17:23.010844 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.010848 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.010854 UID received  : BhVCMV21SymIs7wBoweWXA==
DB: 2020/08/14 10:17:23.019872 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.563794ms
DB: 2020/08/14 10:17:23.026073 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 15.191592ms
DB: 2020/08/14 10:17:23.031908 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.57254ms
DB: 2020/08/14 10:17:23.036802 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.854051ms
DB: 2020/08/14 10:17:23.037294 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 17.381789ms
DB: 2020/08/14 10:17:23.040865 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.536755ms
DB: 2020/08/14 10:17:23.041716 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.877685ms
DB: 2020/08/14 10:17:23.044491 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.586054ms
DB: 2020/08/14 10:17:23.047217 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.462921ms
SaveRDFNode: 2020/08/14 10:17:23.047232 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00036cae0)}
rdfUIDdb: 2020/08/14 10:17:23.047239 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.047243 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.047248 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:23.047261 a: = db.Item{PKey:[]uint8{0x6, 0x15, 0x42, 0x31, 0x5d, 0xb5, 0x4b, 0x29, 0x88, 0xb3, 0xbc, 0x1, 0xa3, 0x7, 0x96, 0x5c}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:23.048171 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.638292ms
SaveRDFNode: 2020/08/14 10:17:23.048185 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00036c420)}
rdfUIDdb: 2020/08/14 10:17:23.048191 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.048195 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.048200 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:23.048210 a: = db.Item{PKey:[]uint8{0x8b, 0x8d, 0x5d, 0x5c, 0xf1, 0xb9, 0x46, 0x3, 0xbb, 0x8a, 0xbd, 0x64, 0x62, 0xd4, 0xff, 0x7c}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:23.051769 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.530626ms
SaveRDFNode: 2020/08/14 10:17:23.051783 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00036c420)}
rdfUIDdb: 2020/08/14 10:17:23.051788 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.051792 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.051800 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:23.051811 a: = db.Item{PKey:[]uint8{0x8b, 0x8d, 0x5d, 0x5c, 0xf1, 0xb9, 0x46, 0x3, 0xbb, 0x8a, 0xbd, 0x64, 0x62, 0xd4, 0xff, 0x7c}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:23.052134 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.789719ms
SaveRDFNode: 2020/08/14 10:17:23.052146 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00036cae0)}
rdfUIDdb: 2020/08/14 10:17:23.052152 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.052156 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.052161 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:23.052199 a: = db.Item{PKey:[]uint8{0x6, 0x15, 0x42, 0x31, 0x5d, 0xb5, 0x4b, 0x29, 0x88, 0xb3, 0xbc, 0x1, 0xa3, 0x7, 0x96, 0x5c}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:23.055412 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.573372ms
SaveRDFNode: 2020/08/14 10:17:23.055423 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:17:23.055432 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:17:23.055438 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:17:23.055455 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:17:23.055463 read from saveCH channel 4 
grmgr: 2020/08/14 10:17:23.055468 Looping..... 0
grmgr: 2020/08/14 10:17:23.055527 Looping..... 1
grmgr: 2020/08/14 10:17:23.055535 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:17:23.055539 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:17:23.055549 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.055558 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.055564 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.055570 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.055576 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.055582 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.055588 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:17:23.055599 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:17:23.055605 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc00036d140)}
SaveRDFNode: 2020/08/14 10:17:23.055610 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:17:23.055619 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.055623 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.055629 UID received  : cZ/EKYqZRpKBnpj7RiuQeg==
DB: 2020/08/14 10:17:23.057967 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.736484ms
SaveRDFNode: 2020/08/14 10:17:23.057979 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:17:23.057985 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:17:23.057990 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:17:23.057995 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 10:17:23.058000 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 10:17:23.058020 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.058027 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.058055 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.058061 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.058066 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.058072 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:23.058078 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:17:23.058082 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:17:23.058087 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc00036d5c0)}
SaveRDFNode: 2020/08/14 10:17:23.058091 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:17:23.058099 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.058103 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.058109 UID received  : qiXPCr7fQXiC/KGvv8+lcA==
grmgr: 2020/08/14 10:17:23.058295 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 10:17:23.059391 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.7169ms
DB: 2020/08/14 10:17:23.063036 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.890108ms
DB: 2020/08/14 10:17:23.063325 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.679119ms
DB: 2020/08/14 10:17:23.067678 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.32086ms
DB: 2020/08/14 10:17:23.068205 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.133325ms
DB: 2020/08/14 10:17:23.071640 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.925062ms
DB: 2020/08/14 10:17:23.073171 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.931501ms
DB: 2020/08/14 10:17:23.075415 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.736468ms
SaveRDFNode: 2020/08/14 10:17:23.075627 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00036d140)}
rdfUIDdb: 2020/08/14 10:17:23.075642 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.075646 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.075653 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:23.075677 a: = db.Item{PKey:[]uint8{0x71, 0x9f, 0xc4, 0x29, 0x8a, 0x99, 0x46, 0x92, 0x81, 0x9e, 0x98, 0xfb, 0x46, 0x2b, 0x90, 0x7a}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:23.077927 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.720555ms
DB: 2020/08/14 10:17:23.079278 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.566047ms
SaveRDFNode: 2020/08/14 10:17:23.079292 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00036d140)}
rdfUIDdb: 2020/08/14 10:17:23.079298 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.079303 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.079309 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:23.079320 a: = db.Item{PKey:[]uint8{0x71, 0x9f, 0xc4, 0x29, 0x8a, 0x99, 0x46, 0x92, 0x81, 0x9e, 0x98, 0xfb, 0x46, 0x2b, 0x90, 0x7a}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:23.082766 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.79829ms
SaveRDFNode: 2020/08/14 10:17:23.082790 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00036d5c0)}
rdfUIDdb: 2020/08/14 10:17:23.082798 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.082802 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.082808 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:23.082841 a: = db.Item{PKey:[]uint8{0xaa, 0x25, 0xcf, 0xa, 0xbe, 0xdf, 0x41, 0x78, 0x82, 0xfc, 0xa1, 0xaf, 0xbf, 0xcf, 0xa5, 0x70}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:23.083172 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.802447ms
SaveRDFNode: 2020/08/14 10:17:23.083183 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:17:23.083193 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 10:17:23.087927 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.021032ms
SaveRDFNode: 2020/08/14 10:17:23.087949 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00036d5c0)}
rdfUIDdb: 2020/08/14 10:17:23.087956 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:23.087961 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:23.087967 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:23.087979 a: = db.Item{PKey:[]uint8{0xaa, 0x25, 0xcf, 0xa, 0xbe, 0xdf, 0x41, 0x78, 0x82, 0xfc, 0xa1, 0xaf, 0xbf, 0xcf, 0xa5, 0x70}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:23.091644 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.627029ms
SaveRDFNode: 2020/08/14 10:17:23.091853 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 10:17:23.091868 saveNode finished waiting...exiting
grmgr: 2020/08/14 10:17:23.091877 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 10:17:23.091888 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 10:17:23.091893 Looping..... 0
grmgr: 2020/08/14 10:17:23.091912 Looping..... 1
grmgr: 2020/08/14 10:17:23.092019 Looping..... 2
grmgr: 2020/08/14 10:17:23.092190 Looping..... 3
grmgr: 2020/08/14 10:17:23.092368 Looping..... 4
grmgr: 2020/08/14 10:17:23.092547 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:23.092557 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:23.092561 goroutine about to start 1 
attachNode: 2020/08/14 10:17:23.092566 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 10:17:23.092571 Looping..... 0
grmgr: 2020/08/14 10:17:23.092725 Looping..... 1
grmgr: 2020/08/14 10:17:23.092910 Looping..... 2
grmgr: 2020/08/14 10:17:23.093088 Looping..... 3
grmgr: 2020/08/14 10:17:23.093265 Looping..... 4
grmgr: 2020/08/14 10:17:23.093443 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:23.093466 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:23.093471 goroutine about to start 2 
attachNode: 2020/08/14 10:17:23.093475 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 10:17:23.093480 Looping..... 0
grmgr: 2020/08/14 10:17:23.093623 Looping..... 1
grmgr: 2020/08/14 10:17:23.093800 Looping..... 2
grmgr: 2020/08/14 10:17:23.093978 Looping..... 3
grmgr: 2020/08/14 10:17:23.094155 Looping..... 4
grmgr: 2020/08/14 10:17:23.094333 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:23.094342 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:23.094347 goroutine about to start 3 
attachNode: 2020/08/14 10:17:23.094351 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 10:17:23.094356 Looping..... 0
grmgr: 2020/08/14 10:17:23.094512 Looping..... 1
grmgr: 2020/08/14 10:17:23.094690 Looping..... 2
grmgr: 2020/08/14 10:17:23.094867 Looping..... 3
grmgr: 2020/08/14 10:17:23.095045 Looping..... 4
grmgr: 2020/08/14 10:17:23.095223 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:23.095232 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:23.095236 goroutine about to start 4 
attachNode: 2020/08/14 10:17:23.095241 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 10:17:23.095245 Looping..... 0
grmgr: 2020/08/14 10:17:23.095401 Looping..... 1
grmgr: 2020/08/14 10:17:23.095579 Looping..... 2
grmgr: 2020/08/14 10:17:23.095780 Looping..... 3
grmgr: 2020/08/14 10:17:23.095937 Looping..... 4
grmgr: 2020/08/14 10:17:23.096135 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:23.096146 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:23.096151 goroutine about to start 5 
attachNode: 2020/08/14 10:17:23.096155 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 10:17:23.096160 Looping..... 0
grmgr: 2020/08/14 10:17:23.096315 Looping..... 1
grmgr: 2020/08/14 10:17:23.096492 Looping..... 2
grmgr: 2020/08/14 10:17:23.096670 Looping..... 3
grmgr: 2020/08/14 10:17:23.096848 Looping..... 4
grmgr: 2020/08/14 10:17:23.097025 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:23.097034 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:23.097039 goroutine about to start 6 
rdfLoader: 2020/08/14 10:17:23.097043 saveNode  waiting on AttachNode to finish
rdfLoader: 2020/08/14 10:17:23.097047 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 10:17:23.097054 cancel contexts
rdfLoader: 2020/08/14 10:17:23.097059 wait for autonomous goroutines to end
errlog: 2020/08/14 10:17:23.097065 Powering down...
rdfuuid: 2020/08/14 10:17:23.097070 Powering down...
grmgr: 2020/08/14 10:17:23.097075 Powering down...
rdfLoader: 2020/08/14 10:17:23.097081 loader exists.....
DB:2020/08/14 10:17:43 log.go:18: ===============================================================================
errlog: 2020/08/14 10:17:43.416726 Powering on...
rdfLoader: 2020/08/14 10:17:43.416768 saveNode started......
rdfLoader: 2020/08/14 10:17:43.416773 define saveNode limiter......
rdfuuid: 2020/08/14 10:17:43.416782 Powering on...
grmgr: 2020/08/14 10:17:43.416812 Powering on...
rdfLoader: 2020/08/14 10:17:43.416835  principle goroutines started 
RDFreader: 2020/08/14 10:17:43.416865 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:17:43.416880 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 10:17:43.416887 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 10:17:43.416893 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 10:17:43.416898 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 10:17:43.416903 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 10:17:43.416908 spo read:      
RDFreader: 2020/08/14 10:17:43.416913 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 10:17:43.416918 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 10:17:43.416930 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 10:17:43.416935 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 10:17:43.416941 spo read:      
RDFreader: 2020/08/14 10:17:43.416946 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 10:17:43.416952 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 10:17:43.416957 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 10:17:43.416962 spo read:  b  Age  "58"
RDFreader: 2020/08/14 10:17:43.416967 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 10:17:43.416972 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 10:17:43.416977 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 10:17:43.416982 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 10:17:43.416987 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 10:17:43.416991 spo read:      
RDFreader: 2020/08/14 10:17:43.416996 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 10:17:43.417000 Send node batch on channel verifyCh
RDFreader: 2020/08/14 10:17:43.417005 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:17:43.417009 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 10:17:43.417014 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 10:17:43.417022 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 10:17:43.417027 spo read:  c  Age  "67"
RDFreader: 2020/08/14 10:17:43.417032 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 10:17:43.417037 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 10:17:43.417042 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 10:17:43.417047 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 10:17:43.417054 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 10:17:43.417059 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 10:17:43.417063 spo read:      
RDFreader: 2020/08/14 10:17:43.417068 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 10:17:43.417086 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 10:17:43.417092 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 10:17:43.417108 spo read:  d  Age  "36"
RDFreader: 2020/08/14 10:17:43.417113 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 10:17:43.417119 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 10:17:43.417123 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 10:17:43.417127 close verify channel
rdfLoader: 2020/08/14 10:17:43.417131 wait for goroutines to end
rdfLoader: 2020/08/14 10:17:43.417135 verify started....
rdfLoader: 2020/08/14 10:17:43.417140 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:17:43.417144 .  getType..
rdfLoader: 2020/08/14 10:17:43.417148 node.TyName : [Person]
DB: 2020/08/14 10:17:43.491703 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 74.487139ms
grmgr: 2020/08/14 10:17:43.491858 Looping..... 0
grmgr: 2020/08/14 10:17:43.492161 Looping..... 1
grmgr: 2020/08/14 10:17:43.492185 Looping..... 2
grmgr: 2020/08/14 10:17:43.492344 Looping..... 3
grmgr: 2020/08/14 10:17:43.492371 Looping..... 4
grmgr: 2020/08/14 10:17:43.492522 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:17:43.492535 .  getType..
rdfLoader: 2020/08/14 10:17:43.492539 node.TyName : [Person]
grmgr: 2020/08/14 10:17:43.492545 Looping..... 0
unmarshalRDF2020/08/14 10:17:43.492558 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:17:43.492568 Looping..... 1
grmgr: 2020/08/14 10:17:43.492574 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:17:43.492578 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:17:43.492586 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:17:43.492590 .  getType..
rdfLoader: 2020/08/14 10:17:43.492594 node.TyName : [Person]
grmgr: 2020/08/14 10:17:43.492599 Looping..... 0
rdfLoader: 2020/08/14 10:17:43.492610 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:17:43.492614 Add to SS . [Alfa]
unmarshalRDF2020/08/14 10:17:43.492688 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:17:43.492706 Exit  unmarshalRDF. 
saveNode: 2020/08/14 10:17:43.492711 read from saveCH channel 1 
unmarshalRDF2020/08/14 10:17:43.492720 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:17:43.492758 Looping..... 1
grmgr: 2020/08/14 10:17:43.492764 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:17:43.492768 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:17:43.492774 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:17:43.492778 Looping..... 0
rdfLoader: 2020/08/14 10:17:43.492786 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:17:43.492791 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 10:17:43.492831 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:17:43.492836 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 10:17:43.492842 .  getType..
rdfLoader: 2020/08/14 10:17:43.492847 node.TyName : [Person]
unmarshalRDF2020/08/14 10:17:43.492855 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:17:43.492867 Looping..... 1
rdfLoader: 2020/08/14 10:17:43.492876 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 10:17:43.492880 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 10:17:43.492885 Add to SS . [Honda]
unmarshalRDF2020/08/14 10:17:43.492929 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:17:43.492935 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:17:43.492960 Looping..... 2
grmgr: 2020/08/14 10:17:43.493143 Looping..... 3
grmgr: 2020/08/14 10:17:43.493320 Looping..... 4
grmgr: 2020/08/14 10:17:43.493497 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:17:43.493507 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:17:43.493512 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/14 10:17:43.493516 Looping..... 0
saveNode: 2020/08/14 10:17:43.493522 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:17:43.493528 read from saveCH channel 2 
grmgr: 2020/08/14 10:17:43.493554 Looping..... 1
SaveRDFNode: xxx 2020/08/14 10:17:43.493565 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.493571 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.493578 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.493589 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.493595 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.493600 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.493606 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:17:43.493610 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:17:43.493618 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000372420)}
SaveRDFNode: 2020/08/14 10:17:43.493622 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:17:43.493632 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.493637 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.493663 UID received  : AnFrH94HSDqVilNeovHZBQ==
grmgr: 2020/08/14 10:17:43.493905 Looping..... 2
grmgr: 2020/08/14 10:17:43.494085 Looping..... 3
grmgr: 2020/08/14 10:17:43.494263 Looping..... 4
grmgr: 2020/08/14 10:17:43.494441 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:17:43.494450 Looping..... 0
unmarshalRDF2020/08/14 10:17:43.494464 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:17:43.494474 Looping..... 1
rdfLoader: 2020/08/14 10:17:43.494484 Add to SS . [Bentley]
unmarshalRDF2020/08/14 10:17:43.494531 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:17:43.494536 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:17:43.494546 Looping..... 2
grmgr: 2020/08/14 10:17:43.494621 Looping..... 3
grmgr: 2020/08/14 10:17:43.494797 Looping..... 4
grmgr: 2020/08/14 10:17:43.494979 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:17:43.494990 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 10:17:43.494998 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:17:43.495003 read from saveCH channel 3 
grmgr: 2020/08/14 10:17:43.495008 Looping..... 0
grmgr: 2020/08/14 10:17:43.495032 Looping..... 1
grmgr: 2020/08/14 10:17:43.495037 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:17:43.495041 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:17:43.495050 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.495056 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.495062 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.495067 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.495074 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.495080 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.495085 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:17:43.495089 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:17:43.495101 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000372ae0)}
SaveRDFNode: 2020/08/14 10:17:43.495105 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:17:43.495112 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.495116 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.495134 UID received  : vbHEaOtjTrmy5urVj74vRQ==
DB: 2020/08/14 10:17:43.503830 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.135154ms
DB: 2020/08/14 10:17:43.508621 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 13.458389ms
DB: 2020/08/14 10:17:43.513440 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.592614ms
DB: 2020/08/14 10:17:43.518032 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.546657ms
DB: 2020/08/14 10:17:43.523705 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.636786ms
DB: 2020/08/14 10:17:43.524969 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 21.099859ms
DB: 2020/08/14 10:17:43.529991 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.248054ms
SaveRDFNode: 2020/08/14 10:17:43.530011 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372ae0)}
rdfUIDdb: 2020/08/14 10:17:43.530019 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.530023 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.530030 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:43.530051 a: = db.Item{PKey:[]uint8{0xbd, 0xb1, 0xc4, 0x68, 0xeb, 0x63, 0x4e, 0xb9, 0xb2, 0xe6, 0xea, 0xd5, 0x8f, 0xbe, 0x2f, 0x45}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:43.530336 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.319533ms
DB: 2020/08/14 10:17:43.534711 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.620977ms
SaveRDFNode: 2020/08/14 10:17:43.534727 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372ae0)}
rdfUIDdb: 2020/08/14 10:17:43.534735 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.534739 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.534745 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:43.534756 a: = db.Item{PKey:[]uint8{0xbd, 0xb1, 0xc4, 0x68, 0xeb, 0x63, 0x4e, 0xb9, 0xb2, 0xe6, 0xea, 0xd5, 0x8f, 0xbe, 0x2f, 0x45}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:43.544064 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 9.241315ms
SaveRDFNode: 2020/08/14 10:17:43.544657 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:17:43.544677 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:17:43.544683 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:17:43.544690 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:17:43.544696 read from saveCH channel 4 
grmgr: 2020/08/14 10:17:43.544702 Looping..... 0
DB: 2020/08/14 10:17:43.544883 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 14.507308ms
grmgr: 2020/08/14 10:17:43.545140 Looping..... 1
grmgr: 2020/08/14 10:17:43.545157 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:17:43.545161 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:17:43.545173 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.545180 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.545185 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.545206 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.545215 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.545221 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.545227 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:17:43.545231 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:17:43.545237 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000373b00)}
SaveRDFNode: 2020/08/14 10:17:43.545242 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:17:43.545253 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.545257 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.545262 UID received  : M96LzHeaScu+Y39g2sciTA==
DB: 2020/08/14 10:17:43.549796 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.874725ms
SaveRDFNode: 2020/08/14 10:17:43.549812 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372420)}
rdfUIDdb: 2020/08/14 10:17:43.549818 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.549822 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.549828 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:43.549841 a: = db.Item{PKey:[]uint8{0x2, 0x71, 0x6b, 0x1f, 0xde, 0x7, 0x48, 0x3a, 0x95, 0x8a, 0x53, 0x5e, 0xa2, 0xf1, 0xd9, 0x5}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:43.554465 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.593388ms
SaveRDFNode: 2020/08/14 10:17:43.554481 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372420)}
rdfUIDdb: 2020/08/14 10:17:43.554487 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.554491 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.554497 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:43.554507 a: = db.Item{PKey:[]uint8{0x2, 0x71, 0x6b, 0x1f, 0xde, 0x7, 0x48, 0x3a, 0x95, 0x8a, 0x53, 0x5e, 0xa2, 0xf1, 0xd9, 0x5}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:43.559333 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.791342ms
SaveRDFNode: 2020/08/14 10:17:43.559346 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:17:43.559354 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:17:43.559359 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:17:43.559364 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 10:17:43.559369 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 10:17:43.559392 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.559400 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.559433 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.559439 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.559445 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.559451 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:17:43.559458 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:17:43.559469 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:17:43.559476 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000016d80)}
SaveRDFNode: 2020/08/14 10:17:43.559480 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:17:43.559488 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.559493 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.559498 UID received  : iyPo8o/ASgOPCdwWfIAFYw==
grmgr: 2020/08/14 10:17:43.559948 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 10:17:43.564365 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.835047ms
DB: 2020/08/14 10:17:43.565936 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 20.644665ms
DB: 2020/08/14 10:17:43.568827 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.426087ms
DB: 2020/08/14 10:17:43.570992 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.02061ms
DB: 2020/08/14 10:17:43.574032 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.17057ms
DB: 2020/08/14 10:17:43.576192 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.165578ms
DB: 2020/08/14 10:17:43.578575 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.509235ms
DB: 2020/08/14 10:17:43.583285 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.671438ms
SaveRDFNode: 2020/08/14 10:17:43.583301 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016d80)}
rdfUIDdb: 2020/08/14 10:17:43.583307 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.583311 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.583318 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:43.583328 a: = db.Item{PKey:[]uint8{0x8b, 0x23, 0xe8, 0xf2, 0x8f, 0xc0, 0x4a, 0x3, 0x8f, 0x9, 0xdc, 0x16, 0x7c, 0x80, 0x5, 0x63}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:43.583798 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.56651ms
DB: 2020/08/14 10:17:43.588140 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.745026ms
SaveRDFNode: 2020/08/14 10:17:43.588155 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016d80)}
rdfUIDdb: 2020/08/14 10:17:43.588161 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.588166 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.588171 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:43.588182 a: = db.Item{PKey:[]uint8{0x8b, 0x23, 0xe8, 0xf2, 0x8f, 0xc0, 0x4a, 0x3, 0x8f, 0x9, 0xdc, 0x16, 0x7c, 0x80, 0x5, 0x63}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:43.588866 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.036101ms
SaveRDFNode: 2020/08/14 10:17:43.588879 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000373b00)}
rdfUIDdb: 2020/08/14 10:17:43.588885 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.588888 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.588894 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:43.588904 a: = db.Item{PKey:[]uint8{0x33, 0xde, 0x8b, 0xcc, 0x77, 0x9a, 0x49, 0xcb, 0xbe, 0x63, 0x7f, 0x60, 0xda, 0xc7, 0x22, 0x4c}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:43.592893 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.67808ms
SaveRDFNode: 2020/08/14 10:17:43.593106 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:17:43.593121 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 10:17:43.593800 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.867504ms
SaveRDFNode: 2020/08/14 10:17:43.593814 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000373b00)}
rdfUIDdb: 2020/08/14 10:17:43.593819 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:17:43.593823 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:17:43.593829 Received UID: X18=
SaveRDFNode: 2020/08/14 10:17:43.593839 a: = db.Item{PKey:[]uint8{0x33, 0xde, 0x8b, 0xcc, 0x77, 0x9a, 0x49, 0xcb, 0xbe, 0x63, 0x7f, 0x60, 0xda, 0xc7, 0x22, 0x4c}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:17:43.598927 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.051855ms
SaveRDFNode: 2020/08/14 10:17:43.598942 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 10:17:43.598949 saveNode finished waiting...exiting
grmgr: 2020/08/14 10:17:43.598957 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 10:17:43.598966 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 10:17:43.598971 Looping..... 0
grmgr: 2020/08/14 10:17:43.599040 Looping..... 1
grmgr: 2020/08/14 10:17:43.599072 Looping..... 2
grmgr: 2020/08/14 10:17:43.599218 Looping..... 3
grmgr: 2020/08/14 10:17:43.599395 Looping..... 4
grmgr: 2020/08/14 10:17:43.599573 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:43.599582 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:43.599587 goroutine about to start 1 
attachNode: 2020/08/14 10:17:43.599591 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 10:17:43.599596 Looping..... 0
grmgr: 2020/08/14 10:17:43.599751 Looping..... 1
grmgr: 2020/08/14 10:17:43.599928 Looping..... 2
grmgr: 2020/08/14 10:17:43.600124 Looping..... 3
grmgr: 2020/08/14 10:17:43.600302 Looping..... 4
grmgr: 2020/08/14 10:17:43.600480 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:43.600489 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:43.600494 goroutine about to start 2 
attachNode: 2020/08/14 10:17:43.600498 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 10:17:43.600502 Looping..... 0
grmgr: 2020/08/14 10:17:43.600670 Looping..... 1
grmgr: 2020/08/14 10:17:43.600848 Looping..... 2
grmgr: 2020/08/14 10:17:43.601038 Looping..... 3
grmgr: 2020/08/14 10:17:43.601204 Looping..... 4
grmgr: 2020/08/14 10:17:43.601383 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:43.601392 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:43.601396 goroutine about to start 3 
attachNode: 2020/08/14 10:17:43.601401 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 10:17:43.601405 Looping..... 0
grmgr: 2020/08/14 10:17:43.601560 Looping..... 1
grmgr: 2020/08/14 10:17:43.601737 Looping..... 2
grmgr: 2020/08/14 10:17:43.601914 Looping..... 3
grmgr: 2020/08/14 10:17:43.602091 Looping..... 4
grmgr: 2020/08/14 10:17:43.602269 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:43.602278 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:43.602282 goroutine about to start 4 
attachNode: 2020/08/14 10:17:43.602286 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 10:17:43.602291 Looping..... 0
grmgr: 2020/08/14 10:17:43.602453 Looping..... 1
grmgr: 2020/08/14 10:17:43.602629 Looping..... 2
grmgr: 2020/08/14 10:17:43.602806 Looping..... 3
grmgr: 2020/08/14 10:17:43.602996 Looping..... 4
grmgr: 2020/08/14 10:17:43.603163 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:43.603172 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:43.603176 goroutine about to start 5 
attachNode: 2020/08/14 10:17:43.603180 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 10:17:43.603192 Looping..... 0
grmgr: 2020/08/14 10:17:43.603206 Looping..... 1
grmgr: 2020/08/14 10:17:43.603342 Looping..... 2
grmgr: 2020/08/14 10:17:43.603519 Looping..... 3
grmgr: 2020/08/14 10:17:43.603705 Looping..... 4
grmgr: 2020/08/14 10:17:43.603882 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:17:43.603892 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:17:43.603896 goroutine about to start 6 
rdfLoader: 2020/08/14 10:17:43.603900 saveNode  waiting on AttachNode to finish
rdfLoader: 2020/08/14 10:17:43.603904 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 10:17:43.603911 cancel contexts
rdfLoader: 2020/08/14 10:17:43.603916 wait for autonomous goroutines to end
errlog: 2020/08/14 10:17:43.603922 Powering down...
rdfuuid: 2020/08/14 10:17:43.603927 Powering down...
grmgr: 2020/08/14 10:17:43.603932 Powering down...
rdfLoader: 2020/08/14 10:17:43.603937 loader exists.....
DB:2020/08/14 10:19:06 log.go:18: ===============================================================================
errlog: 2020/08/14 10:19:06.012080 Powering on...
rdfLoader: 2020/08/14 10:19:06.012475 saveNode started......
rdfLoader: 2020/08/14 10:19:06.012490 define saveNode limiter......
rdfuuid: 2020/08/14 10:19:06.012498 Powering on...
grmgr: 2020/08/14 10:19:06.012517 Powering on...
rdfLoader: 2020/08/14 10:19:06.012536  principle goroutines started 
RDFreader: 2020/08/14 10:19:06.012567 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:19:06.012582 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 10:19:06.012589 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 10:19:06.012594 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 10:19:06.012600 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 10:19:06.012605 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 10:19:06.012610 spo read:      
RDFreader: 2020/08/14 10:19:06.012615 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 10:19:06.012620 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 10:19:06.012625 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 10:19:06.012630 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 10:19:06.012634 spo read:      
RDFreader: 2020/08/14 10:19:06.012639 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 10:19:06.012644 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 10:19:06.012650 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 10:19:06.012654 spo read:  b  Age  "58"
RDFreader: 2020/08/14 10:19:06.012660 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 10:19:06.012665 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 10:19:06.012670 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 10:19:06.012675 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 10:19:06.012680 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 10:19:06.012684 spo read:      
RDFreader: 2020/08/14 10:19:06.012689 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 10:19:06.012693 Send node batch on channel verifyCh
RDFreader: 2020/08/14 10:19:06.012698 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:19:06.012702 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 10:19:06.012707 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 10:19:06.012714 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 10:19:06.012719 spo read:  c  Age  "67"
RDFreader: 2020/08/14 10:19:06.012724 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 10:19:06.012729 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 10:19:06.012734 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 10:19:06.012739 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 10:19:06.012747 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 10:19:06.012752 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 10:19:06.012757 spo read:      
RDFreader: 2020/08/14 10:19:06.012762 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 10:19:06.012767 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 10:19:06.012772 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 10:19:06.012783 spo read:  d  Age  "36"
RDFreader: 2020/08/14 10:19:06.012788 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 10:19:06.012794 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 10:19:06.012798 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 10:19:06.012802 close verify channel
rdfLoader: 2020/08/14 10:19:06.012805 wait for goroutines to end
rdfLoader: 2020/08/14 10:19:06.012810 verify started....
rdfLoader: 2020/08/14 10:19:06.012814 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:19:06.012818 .  getType..
rdfLoader: 2020/08/14 10:19:06.012822 node.TyName : [Person]
DB: 2020/08/14 10:19:06.089653 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 76.757409ms
grmgr: 2020/08/14 10:19:06.089800 Looping..... 0
grmgr: 2020/08/14 10:19:06.090085 Looping..... 1
grmgr: 2020/08/14 10:19:06.090108 Looping..... 2
grmgr: 2020/08/14 10:19:06.090271 Looping..... 3
grmgr: 2020/08/14 10:19:06.090453 Looping..... 4
grmgr: 2020/08/14 10:19:06.090636 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:19:06.090649 .  getType..
rdfLoader: 2020/08/14 10:19:06.090654 node.TyName : [Person]
grmgr: 2020/08/14 10:19:06.090660 Looping..... 0
unmarshalRDF2020/08/14 10:19:06.090672 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:19:06.090683 Looping..... 1
grmgr: 2020/08/14 10:19:06.090688 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:19:06.090693 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:19:06.090701 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:19:06.090705 .  getType..
rdfLoader: 2020/08/14 10:19:06.090709 node.TyName : [Person]
grmgr: 2020/08/14 10:19:06.090714 Looping..... 0
rdfLoader: 2020/08/14 10:19:06.090724 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:19:06.090730 Add to SS . [Alfa]
unmarshalRDF2020/08/14 10:19:06.090791 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:19:06.090799 Exit  unmarshalRDF. 
saveNode: 2020/08/14 10:19:06.090805 read from saveCH channel 1 
unmarshalRDF2020/08/14 10:19:06.090814 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:19:06.090841 Looping..... 1
grmgr: 2020/08/14 10:19:06.090847 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:19:06.090851 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:19:06.090857 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:19:06.090861 Looping..... 0
rdfLoader: 2020/08/14 10:19:06.090887 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:19:06.090895 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 10:19:06.090935 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:19:06.090940 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 10:19:06.090947 .  getType..
rdfLoader: 2020/08/14 10:19:06.090951 node.TyName : [Person]
unmarshalRDF2020/08/14 10:19:06.090960 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:19:06.091004 Looping..... 1
rdfLoader: 2020/08/14 10:19:06.091015 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 10:19:06.091019 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 10:19:06.091024 Add to SS . [Honda]
unmarshalRDF2020/08/14 10:19:06.091058 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:19:06.091063 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:19:06.091073 Looping..... 2
grmgr: 2020/08/14 10:19:06.091200 Looping..... 3
grmgr: 2020/08/14 10:19:06.091381 Looping..... 4
grmgr: 2020/08/14 10:19:06.091564 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:19:06.091573 Looping..... 0
saveNode: 2020/08/14 10:19:06.091580 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:19:06.091587 read from saveCH channel 2 
grmgr: 2020/08/14 10:19:06.091613 Looping..... 1
SaveRDFNode: xxx 2020/08/14 10:19:06.091624 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.091630 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.091638 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.091643 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.091649 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.091655 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.091660 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:19:06.091664 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:19:06.091682 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017680)}
SaveRDFNode: 2020/08/14 10:19:06.091689 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:19:06.091699 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.091714 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.091721 UID received  : M6Nt/PLzTl+v5DP6dsQbmA==
grmgr: 2020/08/14 10:19:06.091984 Looping..... 2
grmgr: 2020/08/14 10:19:06.092170 Looping..... 3
grmgr: 2020/08/14 10:19:06.092347 Looping..... 4
grmgr: 2020/08/14 10:19:06.092525 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:19:06.092535 Looping..... 0
unmarshalRDF2020/08/14 10:19:06.092550 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:19:06.092561 Looping..... 1
rdfLoader: 2020/08/14 10:19:06.092570 Add to SS . [Bentley]
unmarshalRDF2020/08/14 10:19:06.092605 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:19:06.092610 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:19:06.092632 Looping..... 2
grmgr: 2020/08/14 10:19:06.092707 Looping..... 3
grmgr: 2020/08/14 10:19:06.092888 Looping..... 4
grmgr: 2020/08/14 10:19:06.093065 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:19:06.093076 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 10:19:06.093081 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:19:06.093086 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 10:19:06.093093 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:19:06.093098 read from saveCH channel 3 
grmgr: 2020/08/14 10:19:06.093103 Looping..... 0
grmgr: 2020/08/14 10:19:06.093130 Looping..... 1
grmgr: 2020/08/14 10:19:06.093135 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:19:06.093140 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:19:06.093149 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.093155 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.093162 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.093168 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.093174 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.093180 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.093186 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:19:06.093190 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:19:06.093195 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017da0)}
SaveRDFNode: 2020/08/14 10:19:06.093199 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:19:06.093224 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.093230 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.093236 UID received  : N24lzbE7R2qg/3GgIOSnig==
DB: 2020/08/14 10:19:06.099207 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.45298ms
DB: 2020/08/14 10:19:06.103002 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.735829ms
DB: 2020/08/14 10:19:06.106982 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.910415ms
DB: 2020/08/14 10:19:06.110758 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.55198ms
DB: 2020/08/14 10:19:06.114399 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.602696ms
DB: 2020/08/14 10:19:06.118180 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.745304ms
SaveRDFNode: 2020/08/14 10:19:06.118197 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 10:19:06.118205 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.118209 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.118215 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:06.118230 a: = db.Item{PKey:[]uint8{0x37, 0x6e, 0x25, 0xcd, 0xb1, 0x3b, 0x47, 0x6a, 0xa0, 0xff, 0x71, 0xa0, 0x20, 0xe4, 0xa7, 0x8a}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:06.118490 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 19.23914ms
DB: 2020/08/14 10:19:06.121867 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.604325ms
SaveRDFNode: 2020/08/14 10:19:06.121895 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 10:19:06.121902 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.121906 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.121912 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:06.121923 a: = db.Item{PKey:[]uint8{0x37, 0x6e, 0x25, 0xcd, 0xb1, 0x3b, 0x47, 0x6a, 0xa0, 0xff, 0x71, 0xa0, 0x20, 0xe4, 0xa7, 0x8a}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:06.122542 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.749302ms
DB: 2020/08/14 10:19:06.125725 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.747481ms
SaveRDFNode: 2020/08/14 10:19:06.125739 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:19:06.125749 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:19:06.125754 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:19:06.125761 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:19:06.125769 read from saveCH channel 4 
grmgr: 2020/08/14 10:19:06.125774 Looping..... 0
grmgr: 2020/08/14 10:19:06.125833 Looping..... 1
grmgr: 2020/08/14 10:19:06.125840 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:19:06.125845 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:19:06.125855 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.125862 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.125871 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.125877 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.125882 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.125888 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.125895 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:19:06.125899 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:19:06.125905 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0003803c0)}
SaveRDFNode: 2020/08/14 10:19:06.125909 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:19:06.125919 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.125923 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.125929 UID received  : hkOIcWj9TcCMFPjYxm7eTg==
DB: 2020/08/14 10:19:06.126235 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.492999ms
DB: 2020/08/14 10:19:06.129630 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.670361ms
DB: 2020/08/14 10:19:06.129963 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.685862ms
SaveRDFNode: 2020/08/14 10:19:06.129978 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 10:19:06.129985 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.129989 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.129995 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:06.130007 a: = db.Item{PKey:[]uint8{0x33, 0xa3, 0x6d, 0xfc, 0xf2, 0xf3, 0x4e, 0x5f, 0xaf, 0xe4, 0x33, 0xfa, 0x76, 0xc4, 0x1b, 0x98}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:06.133175 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.50258ms
DB: 2020/08/14 10:19:06.133483 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.436404ms
SaveRDFNode: 2020/08/14 10:19:06.133497 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 10:19:06.133503 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.133507 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.133513 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:06.133524 a: = db.Item{PKey:[]uint8{0x33, 0xa3, 0x6d, 0xfc, 0xf2, 0xf3, 0x4e, 0x5f, 0xaf, 0xe4, 0x33, 0xfa, 0x76, 0xc4, 0x1b, 0x98}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:06.136634 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.417135ms
DB: 2020/08/14 10:19:06.136928 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.374529ms
SaveRDFNode: 2020/08/14 10:19:06.136939 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:19:06.136948 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:19:06.136953 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:19:06.136958 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 10:19:06.136964 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 10:19:06.136989 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.136997 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.137004 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.137010 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.137016 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.137022 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:06.137028 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:19:06.137032 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:19:06.137038 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000381b60)}
SaveRDFNode: 2020/08/14 10:19:06.137042 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:19:06.137068 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.137074 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.137080 UID received  : Frlw3ypOQACmAoxpNG47UA==
grmgr: 2020/08/14 10:19:06.137264 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 10:19:06.140606 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.498684ms
DB: 2020/08/14 10:19:06.144424 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.572803ms
DB: 2020/08/14 10:19:06.147997 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.530675ms
DB: 2020/08/14 10:19:06.151619 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.585392ms
DB: 2020/08/14 10:19:06.155374 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.719632ms
SaveRDFNode: 2020/08/14 10:19:06.155391 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000381b60)}
rdfUIDdb: 2020/08/14 10:19:06.155399 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.155403 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.155421 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:06.155433 a: = db.Item{PKey:[]uint8{0x16, 0xb9, 0x70, 0xdf, 0x2a, 0x4e, 0x40, 0x0, 0xa6, 0x2, 0x8c, 0x69, 0x34, 0x6e, 0x3b, 0x50}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:06.158968 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.503638ms
SaveRDFNode: 2020/08/14 10:19:06.159164 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000381b60)}
rdfUIDdb: 2020/08/14 10:19:06.159178 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.159183 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.159189 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:06.159200 a: = db.Item{PKey:[]uint8{0x16, 0xb9, 0x70, 0xdf, 0x2a, 0x4e, 0x40, 0x0, 0xa6, 0x2, 0x8c, 0x69, 0x34, 0x6e, 0x3b, 0x50}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:06.162610 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.377577ms
SaveRDFNode: 2020/08/14 10:19:06.162623 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:19:06.162633 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 10:19:06.199403 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 62.719702ms
DB: 2020/08/14 10:19:06.203439 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.716269ms
SaveRDFNode: 2020/08/14 10:19:06.203459 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003803c0)}
rdfUIDdb: 2020/08/14 10:19:06.203467 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.203472 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.203478 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:06.203490 a: = db.Item{PKey:[]uint8{0x86, 0x43, 0x88, 0x71, 0x68, 0xfd, 0x4d, 0xc0, 0x8c, 0x14, 0xf8, 0xd8, 0xc6, 0x6e, 0xde, 0x4e}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:06.206964 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.438908ms
SaveRDFNode: 2020/08/14 10:19:06.206979 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003803c0)}
rdfUIDdb: 2020/08/14 10:19:06.206985 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:06.206989 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:06.206995 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:06.207006 a: = db.Item{PKey:[]uint8{0x86, 0x43, 0x88, 0x71, 0x68, 0xfd, 0x4d, 0xc0, 0x8c, 0x14, 0xf8, 0xd8, 0xc6, 0x6e, 0xde, 0x4e}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:06.210556 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.519527ms
SaveRDFNode: 2020/08/14 10:19:06.210569 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 10:19:06.210576 saveNode finished waiting...exiting
grmgr: 2020/08/14 10:19:06.210585 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 10:19:06.210595 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 10:19:06.210600 Looping..... 0
grmgr: 2020/08/14 10:19:06.210617 Looping..... 1
grmgr: 2020/08/14 10:19:06.210687 Looping..... 2
grmgr: 2020/08/14 10:19:06.210867 Looping..... 3
grmgr: 2020/08/14 10:19:06.211048 Looping..... 4
grmgr: 2020/08/14 10:19:06.211229 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:19:06.211239 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:06.211244 goroutine about to start 1 
attachNode: 2020/08/14 10:19:06.211250 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 10:19:06.211255 Looping..... 0
grmgr: 2020/08/14 10:19:06.211276 Looping..... 1
grmgr: 2020/08/14 10:19:06.211282 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:19:06.211286 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:19:06.214530 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.172033ms
DB: 2020/08/14 10:19:06.217393 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.80627ms
DB: 2020/08/14 10:19:06.220155 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.260731ms
DB: 2020/08/14 10:19:06.222499 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.309556ms
DB: 2020/08/14 10:19:06.226389 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.813947ms
DB: 2020/08/14 10:19:06.235104 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.120198ms
FetchForUpdate: 2020/08/14 10:19:06.235318 ** Cache FetchForUpdate Cache Key Value: [N24lzbE7R2qg/3GgIOSnig==]   sortk: A#G#:S
FetchNode: 2020/08/14 10:19:06.235333  node: N24lzbE7R2qg/3GgIOSnig== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:06.235525 ** Cache FetchForUpdate Cache Key Value: [M6Nt/PLzTl+v5DP6dsQbmA==]   sortk: A#
FetchNode: 2020/08/14 10:19:06.235542  node: M6Nt/PLzTl+v5DP6dsQbmA== subKey: A#
DB: 2020/08/14 10:19:06.237780 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.413223ms
FetchForUpdate: 2020/08/14 10:19:06.237866 len(nb): 1
fetchItems: 2020/08/14 10:19:06.237875 +++  Cache FetchItems for sortk A#G#:S UID: [N24lzbE7R2qg/3GgIOSnig==] 
FetchNode: 2020/08/14 10:19:06.237880  node: N24lzbE7R2qg/3GgIOSnig== subKey: A#G#:S
DB: 2020/08/14 10:19:06.241011 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.102013ms
DB: 2020/08/14 10:19:06.245399 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.743918ms
DB: 2020/08/14 10:19:06.251854 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 16.250649ms
FetchForUpdate: 2020/08/14 10:19:06.251972 len(nb): 7
fetchItems: 2020/08/14 10:19:06.251983 +++  Cache FetchItems for sortk A# UID: [M6Nt/PLzTl+v5DP6dsQbmA==] 
FetchNode: 2020/08/14 10:19:06.251989  node: M6Nt/PLzTl+v5DP6dsQbmA== subKey: A#
DB: 2020/08/14 10:19:06.254621 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.600675ms
DB: 2020/08/14 10:19:06.260334 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.507439ms
DB: 2020/08/14 10:19:06.264488 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.564432ms
DB: 2020/08/14 10:19:06.269448 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.583231ms
DB: 2020/08/14 10:19:06.277209 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.084277ms
DB: 2020/08/14 10:19:06.281004 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.460962ms
DB: 2020/08/14 10:19:06.285286 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.93673ms
DB: 2020/08/14 10:19:06.291960 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.312131ms
DB: 2020/08/14 10:19:06.295978 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.675086ms
DB: 2020/08/14 10:19:06.300192 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.889511ms
DB: 2020/08/14 10:19:06.303966 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.566963ms
Cache: 2020/08/14 10:19:06.303984 In SetUpredAvailable: pUid, tUID:  N24lzbE7R2qg/3GgIOSnig== N24lzbE7R2qg/3GgIOSnig== A#G#:S
Cache: 2020/08/14 10:19:06.304001 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:06.307689 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.646168ms
Unlock: 2020/08/14 10:19:06.307702 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:06.307707 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:06.315243 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.47914ms
grmgr: 2020/08/14 10:19:06.315261 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:06.315266 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:19:06.315273 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:06.315277 goroutine about to start 2 
attachNode: 2020/08/14 10:19:06.315283 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 10:19:06.315288 Looping..... 0
grmgr: 2020/08/14 10:19:06.315317 Looping..... 1
grmgr: 2020/08/14 10:19:06.315341 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:19:06.315346 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:19:06.318357 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.867751ms
DB: 2020/08/14 10:19:06.321355 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.965159ms
DB: 2020/08/14 10:19:06.324027 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.532454ms
DB: 2020/08/14 10:19:06.326605 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.54454ms
DB: 2020/08/14 10:19:06.331199 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.521246ms
DB: 2020/08/14 10:19:06.380565 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 49.140002ms
FetchForUpdate: 2020/08/14 10:19:06.380602 ** Cache FetchForUpdate Cache Key Value: [hkOIcWj9TcCMFPjYxm7eTg==]   sortk: A#G#:S
FetchNode: 2020/08/14 10:19:06.380610  node: hkOIcWj9TcCMFPjYxm7eTg== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:06.380923 ** Cache FetchForUpdate Cache Key Value: [M6Nt/PLzTl+v5DP6dsQbmA==]   sortk: A#
fetchItems: 2020/08/14 10:19:06.380936 +++  Cache FetchItems for sortk A# UID: [M6Nt/PLzTl+v5DP6dsQbmA==] 
FetchNode: 2020/08/14 10:19:06.380950  node: M6Nt/PLzTl+v5DP6dsQbmA== subKey: A#
DB: 2020/08/14 10:19:06.383616 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.614071ms
DB: 2020/08/14 10:19:06.396391 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 15.722348ms
FetchForUpdate: 2020/08/14 10:19:06.396480 len(nb): 1
fetchItems: 2020/08/14 10:19:06.396492 +++  Cache FetchItems for sortk A#G#:S UID: [hkOIcWj9TcCMFPjYxm7eTg==] 
FetchNode: 2020/08/14 10:19:06.396516  node: hkOIcWj9TcCMFPjYxm7eTg== subKey: A#G#:S
DB: 2020/08/14 10:19:06.400570 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.016998ms
DB: 2020/08/14 10:19:06.405208 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.336031ms
DB: 2020/08/14 10:19:06.411210 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.625027ms
DB: 2020/08/14 10:19:06.416470 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.779801ms
DB: 2020/08/14 10:19:06.420363 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.761635ms
DB: 2020/08/14 10:19:06.427096 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.661562ms
DB: 2020/08/14 10:19:06.430625 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.46785ms
DB: 2020/08/14 10:19:06.434223 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.514384ms
DB: 2020/08/14 10:19:06.440411 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.121414ms
DB: 2020/08/14 10:19:06.443992 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.509836ms
DB: 2020/08/14 10:19:06.447718 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.653279ms
DB: 2020/08/14 10:19:06.451353 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.567852ms
Cache: 2020/08/14 10:19:06.451372 In SetUpredAvailable: pUid, tUID:  hkOIcWj9TcCMFPjYxm7eTg== hkOIcWj9TcCMFPjYxm7eTg== A#G#:S
Cache: 2020/08/14 10:19:06.451379 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:06.455004 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.584758ms
Unlock: 2020/08/14 10:19:06.455017 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:06.455022 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:06.458920 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.843776ms
grmgr: 2020/08/14 10:19:06.458941 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:06.458948 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:19:06.458954 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:06.458959 goroutine about to start 3 
attachNode: 2020/08/14 10:19:06.458966 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 10:19:06.458971 Looping..... 0
grmgr: 2020/08/14 10:19:06.459010 Looping..... 1
grmgr: 2020/08/14 10:19:06.459017 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:19:06.459022 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:19:06.461688 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.613143ms
DB: 2020/08/14 10:19:06.466873 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.151904ms
DB: 2020/08/14 10:19:06.469000 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.085931ms
DB: 2020/08/14 10:19:06.471946 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.909465ms
DB: 2020/08/14 10:19:06.477008 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.719326ms
DB: 2020/08/14 10:19:06.481069 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.848278ms
FetchForUpdate: 2020/08/14 10:19:06.481085 ** Cache FetchForUpdate Cache Key Value: [M6Nt/PLzTl+v5DP6dsQbmA==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:19:06.481091 +++  Cache FetchItems for sortk A#G#:S UID: [M6Nt/PLzTl+v5DP6dsQbmA==] 
FetchNode: 2020/08/14 10:19:06.481096  node: M6Nt/PLzTl+v5DP6dsQbmA== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:06.481294 ** Cache FetchForUpdate Cache Key Value: [N24lzbE7R2qg/3GgIOSnig==]   sortk: A#
fetchItems: 2020/08/14 10:19:06.481320 +++  Cache FetchItems for sortk A# UID: [N24lzbE7R2qg/3GgIOSnig==] 
FetchNode: 2020/08/14 10:19:06.481339  node: N24lzbE7R2qg/3GgIOSnig== subKey: A#
DB: 2020/08/14 10:19:06.483486 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.358095ms
DB: 2020/08/14 10:19:06.484670 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.26656ms
fetchItems: 2020/08/14 10:19:06.484837 +++  Cache FetchItems for sortk A# UID: [N24lzbE7R2qg/3GgIOSnig==] 
FetchNode: 2020/08/14 10:19:06.484860  node: N24lzbE7R2qg/3GgIOSnig== subKey: A#
DB: 2020/08/14 10:19:06.487375 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.632612ms
DB: 2020/08/14 10:19:06.487998 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.091209ms
DB: 2020/08/14 10:19:06.495148 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.526575ms
DB: 2020/08/14 10:19:06.498618 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.413374ms
DB: 2020/08/14 10:19:06.502468 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.729247ms
DB: 2020/08/14 10:19:06.508988 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.187323ms
DB: 2020/08/14 10:19:06.512879 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.551214ms
DB: 2020/08/14 10:19:06.517591 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.629943ms
DB: 2020/08/14 10:19:06.523844 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.185439ms
DB: 2020/08/14 10:19:06.527370 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.465179ms
DB: 2020/08/14 10:19:06.531472 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.774126ms
DB: 2020/08/14 10:19:06.535355 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.676123ms
Cache: 2020/08/14 10:19:06.535370 In SetUpredAvailable: pUid, tUID:  M6Nt/PLzTl+v5DP6dsQbmA== M6Nt/PLzTl+v5DP6dsQbmA== A#G#:S
Cache: 2020/08/14 10:19:06.535376 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:06.538976 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.565194ms
Unlock: 2020/08/14 10:19:06.538988 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:06.538993 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:06.543076 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.027911ms
grmgr: 2020/08/14 10:19:06.543095 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:06.543100 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:19:06.543106 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:06.543111 goroutine about to start 4 
attachNode: 2020/08/14 10:19:06.543117 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 10:19:06.543123 Looping..... 0
grmgr: 2020/08/14 10:19:06.543149 Looping..... 1
grmgr: 2020/08/14 10:19:06.543168 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:19:06.543173 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:19:06.545339 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.110759ms
DB: 2020/08/14 10:19:06.548407 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.029058ms
DB: 2020/08/14 10:19:06.551082 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.529566ms
DB: 2020/08/14 10:19:06.553581 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.466809ms
DB: 2020/08/14 10:19:06.557592 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.931299ms
DB: 2020/08/14 10:19:06.561656 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.828519ms
FetchForUpdate: 2020/08/14 10:19:06.561690 ** Cache FetchForUpdate Cache Key Value: [hkOIcWj9TcCMFPjYxm7eTg==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:19:06.561698 +++  Cache FetchItems for sortk A#G#:S UID: [hkOIcWj9TcCMFPjYxm7eTg==] 
FetchNode: 2020/08/14 10:19:06.561704  node: hkOIcWj9TcCMFPjYxm7eTg== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:06.561931 ** Cache FetchForUpdate Cache Key Value: [N24lzbE7R2qg/3GgIOSnig==]   sortk: A#
fetchItems: 2020/08/14 10:19:06.561959 +++  Cache FetchItems for sortk A# UID: [N24lzbE7R2qg/3GgIOSnig==] 
FetchNode: 2020/08/14 10:19:06.561974  node: N24lzbE7R2qg/3GgIOSnig== subKey: A#
DB: 2020/08/14 10:19:06.564300 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.513163ms
DB: 2020/08/14 10:19:06.566040 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.01554ms
DB: 2020/08/14 10:19:06.568353 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.673762ms
DB: 2020/08/14 10:19:06.571840 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.452328ms
DB: 2020/08/14 10:19:06.571856 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.452328ms
DB: 2020/08/14 10:19:06.575574 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.685812ms
DB: 2020/08/14 10:19:06.575591 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.685812ms
DB: 2020/08/14 10:19:06.579756 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.970042ms
DB: 2020/08/14 10:19:06.583761 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.837495ms
DB: 2020/08/14 10:19:06.589356 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.227946ms
DB: 2020/08/14 10:19:06.593222 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.660068ms
DB: 2020/08/14 10:19:06.597451 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.803808ms
DB: 2020/08/14 10:19:06.603900 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.108472ms
DB: 2020/08/14 10:19:06.607830 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.586505ms
DB: 2020/08/14 10:19:06.612092 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.69784ms
DB: 2020/08/14 10:19:06.619128 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.709737ms
DB: 2020/08/14 10:19:06.623110 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.648806ms
DB: 2020/08/14 10:19:06.628272 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.809837ms
DB: 2020/08/14 10:19:06.632179 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.677382ms
Cache: 2020/08/14 10:19:06.632194 In SetUpredAvailable: pUid, tUID:  hkOIcWj9TcCMFPjYxm7eTg== pjCyVenWRZ2rJfZgolUxlg== A#G#:S
Cache: 2020/08/14 10:19:06.632200 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:06.635945 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.705482ms
Unlock: 2020/08/14 10:19:06.635961 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:06.635971 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:06.641365 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.220284ms
grmgr: 2020/08/14 10:19:06.641396 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:06.641403 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:19:06.641409 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:06.641414 goroutine about to start 5 
attachNode: 2020/08/14 10:19:06.641420 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 10:19:06.641425 Looping..... 0
grmgr: 2020/08/14 10:19:06.641472 Looping..... 1
grmgr: 2020/08/14 10:19:06.641479 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:19:06.641483 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:19:06.644458 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.921733ms
DB: 2020/08/14 10:19:06.647535 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.043408ms
DB: 2020/08/14 10:19:06.650608 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.851517ms
DB: 2020/08/14 10:19:06.653757 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.112253ms
DB: 2020/08/14 10:19:06.657821 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.791392ms
DB: 2020/08/14 10:19:06.662047 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.989972ms
FetchForUpdate: 2020/08/14 10:19:06.662065 ** Cache FetchForUpdate Cache Key Value: [M6Nt/PLzTl+v5DP6dsQbmA==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:19:06.662072 +++  Cache FetchItems for sortk A#G#:S UID: [M6Nt/PLzTl+v5DP6dsQbmA==] 
FetchNode: 2020/08/14 10:19:06.662077  node: M6Nt/PLzTl+v5DP6dsQbmA== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:06.662287 ** Cache FetchForUpdate Cache Key Value: [hkOIcWj9TcCMFPjYxm7eTg==]   sortk: A#
fetchItems: 2020/08/14 10:19:06.662314 +++  Cache FetchItems for sortk A# UID: [hkOIcWj9TcCMFPjYxm7eTg==] 
FetchNode: 2020/08/14 10:19:06.662334  node: hkOIcWj9TcCMFPjYxm7eTg== subKey: A#
DB: 2020/08/14 10:19:06.665607 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.227507ms
DB: 2020/08/14 10:19:06.667564 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.453284ms
DB: 2020/08/14 10:19:06.671939 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.840175ms
DB: 2020/08/14 10:19:06.675808 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.827382ms
DB: 2020/08/14 10:19:06.675826 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.827382ms
DB: 2020/08/14 10:19:06.679482 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.61932ms
DB: 2020/08/14 10:19:06.679499 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.61932ms
DB: 2020/08/14 10:19:06.683652 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.843587ms
DB: 2020/08/14 10:19:06.687668 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.801884ms
DB: 2020/08/14 10:19:06.693999 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.378012ms
DB: 2020/08/14 10:19:06.697782 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.718396ms
DB: 2020/08/14 10:19:06.701959 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.050421ms
DB: 2020/08/14 10:19:06.707718 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.675551ms
DB: 2020/08/14 10:19:06.712214 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.137724ms
DB: 2020/08/14 10:19:06.716427 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.735774ms
DB: 2020/08/14 10:19:06.723498 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.730521ms
DB: 2020/08/14 10:19:06.728172 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.24146ms
DB: 2020/08/14 10:19:06.732302 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.778386ms
DB: 2020/08/14 10:19:06.736369 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.857998ms
Cache: 2020/08/14 10:19:06.736384 In SetUpredAvailable: pUid, tUID:  M6Nt/PLzTl+v5DP6dsQbmA== 4OJTulRKTTaFFjWRqeri7A== A#G#:S
Cache: 2020/08/14 10:19:06.736390 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:06.741860 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.432847ms
Unlock: 2020/08/14 10:19:06.741872 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:06.741877 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:06.745991 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.006272ms
grmgr: 2020/08/14 10:19:06.746014 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:06.746162 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:19:06.746176 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:06.746182 goroutine about to start 6 
rdfLoader: 2020/08/14 10:19:06.746209 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 10:19:06.746587 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 10:19:06.749638 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.192426ms
DB: 2020/08/14 10:19:06.752135 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.45615ms
DB: 2020/08/14 10:19:06.754682 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.328429ms
DB: 2020/08/14 10:19:06.757395 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.654182ms
DB: 2020/08/14 10:19:06.761282 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.808546ms
DB: 2020/08/14 10:19:06.765744 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.924055ms
FetchForUpdate: 2020/08/14 10:19:06.765764 ** Cache FetchForUpdate Cache Key Value: [N24lzbE7R2qg/3GgIOSnig==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:19:06.765772 +++  Cache FetchItems for sortk A#G#:S UID: [N24lzbE7R2qg/3GgIOSnig==] 
FetchNode: 2020/08/14 10:19:06.765778  node: N24lzbE7R2qg/3GgIOSnig== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:06.765948 ** Cache FetchForUpdate Cache Key Value: [hkOIcWj9TcCMFPjYxm7eTg==]   sortk: A#
fetchItems: 2020/08/14 10:19:06.765977 +++  Cache FetchItems for sortk A# UID: [hkOIcWj9TcCMFPjYxm7eTg==] 
FetchNode: 2020/08/14 10:19:06.765993  node: hkOIcWj9TcCMFPjYxm7eTg== subKey: A#
DB: 2020/08/14 10:19:06.768729 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.914637ms
DB: 2020/08/14 10:19:06.769649 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.591146ms
DB: 2020/08/14 10:19:06.772775 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.682344ms
DB: 2020/08/14 10:19:06.776432 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.621855ms
DB: 2020/08/14 10:19:06.776460 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.621855ms
DB: 2020/08/14 10:19:06.780049 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.536036ms
DB: 2020/08/14 10:19:06.780065 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.536036ms
DB: 2020/08/14 10:19:06.784395 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.088697ms
DB: 2020/08/14 10:19:06.789635 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.783851ms
DB: 2020/08/14 10:19:06.796448 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.263846ms
DB: 2020/08/14 10:19:06.800664 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.850578ms
DB: 2020/08/14 10:19:06.805279 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.82611ms
DB: 2020/08/14 10:19:06.811769 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.152839ms
DB: 2020/08/14 10:19:06.815910 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.795017ms
DB: 2020/08/14 10:19:06.820046 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.767329ms
DB: 2020/08/14 10:19:06.825618 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.235126ms
DB: 2020/08/14 10:19:06.829692 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.754792ms
DB: 2020/08/14 10:19:06.833903 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.852444ms
DB: 2020/08/14 10:19:06.838284 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.150362ms
Cache: 2020/08/14 10:19:06.838303 In SetUpredAvailable: pUid, tUID:  N24lzbE7R2qg/3GgIOSnig== qf+WSX5eSJSNg/vogbPQMQ== A#G#:S
Cache: 2020/08/14 10:19:06.838309 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:06.842173 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.821387ms
Unlock: 2020/08/14 10:19:06.842185 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:06.842190 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:06.846342 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.074046ms
rdfLoader: 2020/08/14 10:19:06.846358 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 10:19:06.846364 cancel contexts
rdfLoader: 2020/08/14 10:19:06.846370 wait for autonomous goroutines to end
errlog: 2020/08/14 10:19:06.846376 Powering down...
grmgr: 2020/08/14 10:19:06.846405 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:06.846412 Powering down...
rdfuuid: 2020/08/14 10:19:06.846418 Powering down...
rdfLoader: 2020/08/14 10:19:06.846423 loader exists.....
DB:2020/08/14 10:19:43 log.go:18: ===============================================================================
errlog: 2020/08/14 10:19:43.131587 Powering on...
rdfLoader: 2020/08/14 10:19:43.134626 saveNode started......
rdfLoader: 2020/08/14 10:19:43.134644 define saveNode limiter......
rdfuuid: 2020/08/14 10:19:43.134654 Powering on...
grmgr: 2020/08/14 10:19:43.134675 Powering on...
rdfLoader: 2020/08/14 10:19:43.134687  principle goroutines started 
RDFreader: 2020/08/14 10:19:43.134717 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:19:43.134735 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 10:19:43.134742 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 10:19:43.134771 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 10:19:43.134777 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 10:19:43.134783 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 10:19:43.134788 spo read:      
RDFreader: 2020/08/14 10:19:43.134793 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 10:19:43.134799 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 10:19:43.134804 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 10:19:43.134809 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 10:19:43.134814 spo read:      
RDFreader: 2020/08/14 10:19:43.134819 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 10:19:43.134825 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 10:19:43.134830 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 10:19:43.134835 spo read:  b  Age  "58"
RDFreader: 2020/08/14 10:19:43.134841 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 10:19:43.134846 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 10:19:43.134851 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 10:19:43.134857 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 10:19:43.134862 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 10:19:43.134866 spo read:      
RDFreader: 2020/08/14 10:19:43.134874 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 10:19:43.134879 Send node batch on channel verifyCh
RDFreader: 2020/08/14 10:19:43.134884 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:19:43.134889 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 10:19:43.134894 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 10:19:43.134902 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 10:19:43.134908 spo read:  c  Age  "67"
RDFreader: 2020/08/14 10:19:43.134913 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 10:19:43.134918 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 10:19:43.134924 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 10:19:43.134929 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 10:19:43.134936 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 10:19:43.134941 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 10:19:43.134946 spo read:      
RDFreader: 2020/08/14 10:19:43.134951 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 10:19:43.134956 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 10:19:43.134962 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 10:19:43.134967 spo read:  d  Age  "36"
RDFreader: 2020/08/14 10:19:43.134972 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 10:19:43.134979 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 10:19:43.134984 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 10:19:43.134988 close verify channel
rdfLoader: 2020/08/14 10:19:43.134992 wait for goroutines to end
rdfLoader: 2020/08/14 10:19:43.134997 verify started....
rdfLoader: 2020/08/14 10:19:43.135001 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:19:43.135005 .  getType..
rdfLoader: 2020/08/14 10:19:43.135010 node.TyName : [Person]
DB: 2020/08/14 10:19:43.209783 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 74.698649ms
grmgr: 2020/08/14 10:19:43.209932 Looping..... 0
grmgr: 2020/08/14 10:19:43.210252 Looping..... 1
grmgr: 2020/08/14 10:19:43.210276 Looping..... 2
grmgr: 2020/08/14 10:19:43.210436 Looping..... 3
grmgr: 2020/08/14 10:19:43.210613 Looping..... 4
grmgr: 2020/08/14 10:19:43.210791 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:19:43.210803 .  getType..
rdfLoader: 2020/08/14 10:19:43.210808 node.TyName : [Person]
grmgr: 2020/08/14 10:19:43.210818 Looping..... 0
unmarshalRDF2020/08/14 10:19:43.210831 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:19:43.210842 Looping..... 1
grmgr: 2020/08/14 10:19:43.210847 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:19:43.210852 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:19:43.210860 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:19:43.210875 .  getType..
rdfLoader: 2020/08/14 10:19:43.210879 node.TyName : [Person]
grmgr: 2020/08/14 10:19:43.210884 Looping..... 0
rdfLoader: 2020/08/14 10:19:43.210895 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:19:43.210900 Add to SS . [Alfa]
unmarshalRDF2020/08/14 10:19:43.210963 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:19:43.210970 Exit  unmarshalRDF. 
saveNode: 2020/08/14 10:19:43.210976 read from saveCH channel 1 
unmarshalRDF2020/08/14 10:19:43.210985 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:19:43.211011 Looping..... 1
grmgr: 2020/08/14 10:19:43.211017 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:19:43.211022 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:19:43.211027 Looping..... 0
rdfLoader: 2020/08/14 10:19:43.211035 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:19:43.211040 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 10:19:43.211080 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:19:43.211086 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 10:19:43.211091 .  getType..
rdfLoader: 2020/08/14 10:19:43.211096 node.TyName : [Person]
unmarshalRDF2020/08/14 10:19:43.211105 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:19:43.211115 Looping..... 1
rdfLoader: 2020/08/14 10:19:43.211124 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 10:19:43.211128 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 10:19:43.211133 Add to SS . [Honda]
unmarshalRDF2020/08/14 10:19:43.211177 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:19:43.211183 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:19:43.211208 Looping..... 2
grmgr: 2020/08/14 10:19:43.211391 Looping..... 3
grmgr: 2020/08/14 10:19:43.211568 Looping..... 4
grmgr: 2020/08/14 10:19:43.211746 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:19:43.211755 Looping..... 0
saveNode: 2020/08/14 10:19:43.211762 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:19:43.211769 read from saveCH channel 2 
grmgr: 2020/08/14 10:19:43.211794 Looping..... 1
SaveRDFNode: xxx 2020/08/14 10:19:43.211805 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.211811 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.211818 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.211834 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.211840 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.211846 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.211852 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:19:43.211856 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:19:43.211864 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000382420)}
SaveRDFNode: 2020/08/14 10:19:43.211868 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:19:43.211879 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.211883 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.211901 UID received  : +FrPnj/JTG+3cMjxElINmQ==
grmgr: 2020/08/14 10:19:43.212174 Looping..... 2
grmgr: 2020/08/14 10:19:43.212356 Looping..... 3
grmgr: 2020/08/14 10:19:43.212533 Looping..... 4
grmgr: 2020/08/14 10:19:43.212711 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:19:43.212720 Looping..... 0
unmarshalRDF2020/08/14 10:19:43.212735 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:19:43.212746 Looping..... 1
rdfLoader: 2020/08/14 10:19:43.212756 Add to SS . [Bentley]
unmarshalRDF2020/08/14 10:19:43.212791 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:19:43.212796 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:19:43.212806 Looping..... 2
grmgr: 2020/08/14 10:19:43.212892 Looping..... 3
grmgr: 2020/08/14 10:19:43.213091 Looping..... 4
grmgr: 2020/08/14 10:19:43.213268 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:19:43.213278 EndCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/14 10:19:43.213283 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 10:19:43.213289 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:19:43.213294 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 10:19:43.213301 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:19:43.213307 read from saveCH channel 3 
grmgr: 2020/08/14 10:19:43.213312 Looping..... 0
grmgr: 2020/08/14 10:19:43.213339 Looping..... 1
grmgr: 2020/08/14 10:19:43.213345 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:19:43.213349 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:19:43.213359 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.213366 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.213373 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.213379 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.213385 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.213390 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.213403 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:19:43.213407 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:19:43.213425 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000382ae0)}
SaveRDFNode: 2020/08/14 10:19:43.213429 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:19:43.213437 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.213442 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.213447 UID received  : 0O1ogbQLTQyAj/HbdZV73A==
DB: 2020/08/14 10:19:43.221946 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.01035ms
DB: 2020/08/14 10:19:43.226537 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.548049ms
DB: 2020/08/14 10:19:43.232295 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.529217ms
DB: 2020/08/14 10:19:43.237336 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.003926ms
DB: 2020/08/14 10:19:43.238673 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 25.1988ms
DB: 2020/08/14 10:19:43.242101 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.730111ms
SaveRDFNode: 2020/08/14 10:19:43.242315 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000382420)}
rdfUIDdb: 2020/08/14 10:19:43.242330 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.242335 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.242342 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:43.242362 a: = db.Item{PKey:[]uint8{0xf8, 0x5a, 0xcf, 0x9e, 0x3f, 0xc9, 0x4c, 0x6f, 0xb7, 0x70, 0xc8, 0xf1, 0x12, 0x52, 0xd, 0x99}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:43.243440 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.73254ms
DB: 2020/08/14 10:19:43.246906 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.51215ms
SaveRDFNode: 2020/08/14 10:19:43.246921 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000382420)}
rdfUIDdb: 2020/08/14 10:19:43.246927 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.246931 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.246937 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:43.246947 a: = db.Item{PKey:[]uint8{0xf8, 0x5a, 0xcf, 0x9e, 0x3f, 0xc9, 0x4c, 0x6f, 0xb7, 0x70, 0xc8, 0xf1, 0x12, 0x52, 0xd, 0x99}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:43.247937 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.464866ms
DB: 2020/08/14 10:19:43.252704 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.723727ms
DB: 2020/08/14 10:19:43.253038 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.059733ms
SaveRDFNode: 2020/08/14 10:19:43.253049 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:19:43.253060 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:19:43.253065 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:19:43.253071 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:19:43.253078 read from saveCH channel 4 
grmgr: 2020/08/14 10:19:43.253083 Looping..... 0
grmgr: 2020/08/14 10:19:43.253134 Looping..... 1
grmgr: 2020/08/14 10:19:43.253141 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:19:43.253146 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:19:43.253166 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.253173 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.253182 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.253187 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.253193 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.253199 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.253205 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:19:43.253209 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:19:43.253214 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000017f20)}
SaveRDFNode: 2020/08/14 10:19:43.253218 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:19:43.253228 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.253232 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.253238 UID received  : 1DjZovJsQu+sIz6O5jcmEA==
DB: 2020/08/14 10:19:43.257691 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.953245ms
SaveRDFNode: 2020/08/14 10:19:43.257711 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000382ae0)}
rdfUIDdb: 2020/08/14 10:19:43.257719 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.257724 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.257730 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:43.257747 a: = db.Item{PKey:[]uint8{0xd0, 0xed, 0x68, 0x81, 0xb4, 0xb, 0x4d, 0xc, 0x80, 0x8f, 0xf1, 0xdb, 0x75, 0x95, 0x7b, 0xdc}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:43.258012 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.748661ms
DB: 2020/08/14 10:19:43.262276 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.49758ms
SaveRDFNode: 2020/08/14 10:19:43.262292 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000382ae0)}
rdfUIDdb: 2020/08/14 10:19:43.262298 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.262302 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.262308 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:43.262318 a: = db.Item{PKey:[]uint8{0xd0, 0xed, 0x68, 0x81, 0xb4, 0xb, 0x4d, 0xc, 0x80, 0x8f, 0xf1, 0xdb, 0x75, 0x95, 0x7b, 0xdc}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:43.262657 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.607993ms
DB: 2020/08/14 10:19:43.267210 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.85361ms
SaveRDFNode: 2020/08/14 10:19:43.267222 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:19:43.267231 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:19:43.267236 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:19:43.267242 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 10:19:43.267247 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 10:19:43.267274 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.267281 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.267288 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.267329 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.267335 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.267342 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:19:43.267347 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:19:43.267352 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:19:43.267358 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000224a80)}
SaveRDFNode: 2020/08/14 10:19:43.267362 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:19:43.267372 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.267376 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.267382 UID received  : JqDeJK0oTv2kIcQqTspScA==
grmgr: 2020/08/14 10:19:43.267568 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 10:19:43.268190 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.500521ms
DB: 2020/08/14 10:19:43.272055 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.645037ms
DB: 2020/08/14 10:19:43.272835 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.613067ms
DB: 2020/08/14 10:19:43.276784 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.694317ms
DB: 2020/08/14 10:19:43.278263 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.39114ms
SaveRDFNode: 2020/08/14 10:19:43.278280 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017f20)}
rdfUIDdb: 2020/08/14 10:19:43.278287 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.278291 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.278297 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:43.278309 a: = db.Item{PKey:[]uint8{0xd4, 0x38, 0xd9, 0xa2, 0xf2, 0x6c, 0x42, 0xef, 0xac, 0x23, 0x3e, 0x8e, 0xe6, 0x37, 0x26, 0x10}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:43.281420 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.408234ms
DB: 2020/08/14 10:19:43.282887 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.547502ms
SaveRDFNode: 2020/08/14 10:19:43.282900 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017f20)}
rdfUIDdb: 2020/08/14 10:19:43.282906 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.282911 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.282916 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:43.282927 a: = db.Item{PKey:[]uint8{0xd4, 0x38, 0xd9, 0xa2, 0xf2, 0x6c, 0x42, 0xef, 0xac, 0x23, 0x3e, 0x8e, 0xe6, 0x37, 0x26, 0x10}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:43.286045 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.589385ms
DB: 2020/08/14 10:19:43.287518 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.559991ms
SaveRDFNode: 2020/08/14 10:19:43.287530 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:19:43.287539 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 10:19:43.290877 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.794375ms
SaveRDFNode: 2020/08/14 10:19:43.290900 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000224a80)}
rdfUIDdb: 2020/08/14 10:19:43.290907 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.290924 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.290930 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:43.290963 a: = db.Item{PKey:[]uint8{0x26, 0xa0, 0xde, 0x24, 0xad, 0x28, 0x4e, 0xfd, 0xa4, 0x21, 0xc4, 0x2a, 0x4e, 0xca, 0x52, 0x70}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:43.296168 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.161866ms
SaveRDFNode: 2020/08/14 10:19:43.296383 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000224a80)}
rdfUIDdb: 2020/08/14 10:19:43.296398 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:19:43.296402 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:19:43.296409 Received UID: X18=
SaveRDFNode: 2020/08/14 10:19:43.296421 a: = db.Item{PKey:[]uint8{0x26, 0xa0, 0xde, 0x24, 0xad, 0x28, 0x4e, 0xfd, 0xa4, 0x21, 0xc4, 0x2a, 0x4e, 0xca, 0x52, 0x70}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:19:43.301232 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.774195ms
SaveRDFNode: 2020/08/14 10:19:43.301246 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 10:19:43.301254 saveNode finished waiting...exiting
grmgr: 2020/08/14 10:19:43.301262 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 10:19:43.301272 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 10:19:43.301277 Looping..... 0
grmgr: 2020/08/14 10:19:43.301353 Looping..... 1
grmgr: 2020/08/14 10:19:43.301383 Looping..... 2
grmgr: 2020/08/14 10:19:43.301530 Looping..... 3
grmgr: 2020/08/14 10:19:43.301708 Looping..... 4
grmgr: 2020/08/14 10:19:43.301885 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:19:43.301894 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:43.301899 goroutine about to start 1 
attachNode: 2020/08/14 10:19:43.301907 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 10:19:43.301912 Looping..... 0
grmgr: 2020/08/14 10:19:43.301933 Looping..... 1
grmgr: 2020/08/14 10:19:43.301938 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:19:43.301943 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:19:43.304985 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.982722ms
DB: 2020/08/14 10:19:43.308309 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.28904ms
DB: 2020/08/14 10:19:43.312434 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.740245ms
DB: 2020/08/14 10:19:43.316293 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.647032ms
DB: 2020/08/14 10:19:43.321204 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.830327ms
DB: 2020/08/14 10:19:43.329561 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.677656ms
FetchForUpdate: 2020/08/14 10:19:43.329583 ** Cache FetchForUpdate Cache Key Value: [0O1ogbQLTQyAj/HbdZV73A==]   sortk: A#G#:S
FetchNode: 2020/08/14 10:19:43.329591  node: 0O1ogbQLTQyAj/HbdZV73A== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:43.329760 ** Cache FetchForUpdate Cache Key Value: [+FrPnj/JTG+3cMjxElINmQ==]   sortk: A#
FetchNode: 2020/08/14 10:19:43.329795  node: +FrPnj/JTG+3cMjxElINmQ== subKey: A#
DB: 2020/08/14 10:19:43.333565 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.701662ms
FetchForUpdate: 2020/08/14 10:19:43.333680 len(nb): 7
fetchItems: 2020/08/14 10:19:43.333688 +++  Cache FetchItems for sortk A# UID: [+FrPnj/JTG+3cMjxElINmQ==] 
FetchNode: 2020/08/14 10:19:43.333693  node: +FrPnj/JTG+3cMjxElINmQ== subKey: A#
DB: 2020/08/14 10:19:43.334009 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.383633ms
FetchForUpdate: 2020/08/14 10:19:43.334038 len(nb): 1
fetchItems: 2020/08/14 10:19:43.334045 +++  Cache FetchItems for sortk A#G#:S UID: [0O1ogbQLTQyAj/HbdZV73A==] 
FetchNode: 2020/08/14 10:19:43.334049  node: 0O1ogbQLTQyAj/HbdZV73A== subKey: A#G#:S
DB: 2020/08/14 10:19:43.337872 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.138539ms
DB: 2020/08/14 10:19:43.340509 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.427334ms
DB: 2020/08/14 10:19:43.347187 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.340864ms
DB: 2020/08/14 10:19:43.353970 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.695694ms
DB: 2020/08/14 10:19:43.358551 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.524816ms
DB: 2020/08/14 10:19:43.363617 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.955236ms
DB: 2020/08/14 10:19:43.369932 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.23604ms
DB: 2020/08/14 10:19:43.374666 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.667609ms
DB: 2020/08/14 10:19:43.379581 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.843204ms
DB: 2020/08/14 10:19:43.385693 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.046169ms
DB: 2020/08/14 10:19:43.390406 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.636657ms
DB: 2020/08/14 10:19:43.395422 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.93964ms
DB: 2020/08/14 10:19:43.400120 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.62992ms
Cache: 2020/08/14 10:19:43.400135 In SetUpredAvailable: pUid, tUID:  0O1ogbQLTQyAj/HbdZV73A== 0O1ogbQLTQyAj/HbdZV73A== A#G#:S
Cache: 2020/08/14 10:19:43.400141 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:43.404855 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.673383ms
Unlock: 2020/08/14 10:19:43.404873 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:43.404879 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:43.409558 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.621763ms
grmgr: 2020/08/14 10:19:43.409577 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:43.409583 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:19:43.409589 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:43.409594 goroutine about to start 2 
attachNode: 2020/08/14 10:19:43.409601 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 10:19:43.409606 Looping..... 0
grmgr: 2020/08/14 10:19:43.409646 Looping..... 1
grmgr: 2020/08/14 10:19:43.409653 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:19:43.409657 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:19:43.412572 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.840923ms
DB: 2020/08/14 10:19:43.415807 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.197004ms
DB: 2020/08/14 10:19:43.418820 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.965961ms
DB: 2020/08/14 10:19:43.422067 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.197605ms
DB: 2020/08/14 10:19:43.427118 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.991583ms
DB: 2020/08/14 10:19:43.432300 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.971921ms
FetchForUpdate: 2020/08/14 10:19:43.432316 ** Cache FetchForUpdate Cache Key Value: [1DjZovJsQu+sIz6O5jcmEA==]   sortk: A#G#:S
FetchNode: 2020/08/14 10:19:43.432323  node: 1DjZovJsQu+sIz6O5jcmEA== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:43.432511 ** Cache FetchForUpdate Cache Key Value: [+FrPnj/JTG+3cMjxElINmQ==]   sortk: A#
fetchItems: 2020/08/14 10:19:43.432522 +++  Cache FetchItems for sortk A# UID: [+FrPnj/JTG+3cMjxElINmQ==] 
FetchNode: 2020/08/14 10:19:43.432539  node: +FrPnj/JTG+3cMjxElINmQ== subKey: A#
DB: 2020/08/14 10:19:43.436134 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.779657ms
FetchForUpdate: 2020/08/14 10:19:43.436234 len(nb): 1
fetchItems: 2020/08/14 10:19:43.436245 +++  Cache FetchItems for sortk A#G#:S UID: [1DjZovJsQu+sIz6O5jcmEA==] 
FetchNode: 2020/08/14 10:19:43.436249  node: 1DjZovJsQu+sIz6O5jcmEA== subKey: A#G#:S
DB: 2020/08/14 10:19:43.436635 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.050485ms
DB: 2020/08/14 10:19:43.440072 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.791835ms
DB: 2020/08/14 10:19:43.445091 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.750241ms
DB: 2020/08/14 10:19:43.451687 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.227996ms
DB: 2020/08/14 10:19:43.456264 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.499171ms
DB: 2020/08/14 10:19:43.461151 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.760115ms
DB: 2020/08/14 10:19:43.467443 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.210859ms
DB: 2020/08/14 10:19:43.472220 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.714163ms
DB: 2020/08/14 10:19:43.477268 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.959286ms
DB: 2020/08/14 10:19:43.483448 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.104195ms
DB: 2020/08/14 10:19:43.488168 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.64796ms
DB: 2020/08/14 10:19:43.493170 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.930806ms
DB: 2020/08/14 10:19:43.497967 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.739272ms
Cache: 2020/08/14 10:19:43.497985 In SetUpredAvailable: pUid, tUID:  1DjZovJsQu+sIz6O5jcmEA== 1DjZovJsQu+sIz6O5jcmEA== A#G#:S
Cache: 2020/08/14 10:19:43.497990 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:43.502750 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.716187ms
Unlock: 2020/08/14 10:19:43.502763 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:43.502769 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:43.507732 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.900089ms
grmgr: 2020/08/14 10:19:43.507754 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:43.507763 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:19:43.507781 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:43.507787 goroutine about to start 3 
attachNode: 2020/08/14 10:19:43.507794 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 10:19:43.507800 Looping..... 0
grmgr: 2020/08/14 10:19:43.507837 Looping..... 1
grmgr: 2020/08/14 10:19:43.507845 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:19:43.507850 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:19:43.511184 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.278568ms
DB: 2020/08/14 10:19:43.514943 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.718225ms
DB: 2020/08/14 10:19:43.518296 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.309102ms
DB: 2020/08/14 10:19:43.521839 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.508639ms
DB: 2020/08/14 10:19:43.526647 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.753103ms
DB: 2020/08/14 10:19:43.531234 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.507752ms
FetchForUpdate: 2020/08/14 10:19:43.531252 ** Cache FetchForUpdate Cache Key Value: [+FrPnj/JTG+3cMjxElINmQ==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:19:43.531259 +++  Cache FetchItems for sortk A#G#:S UID: [+FrPnj/JTG+3cMjxElINmQ==] 
FetchNode: 2020/08/14 10:19:43.531264  node: +FrPnj/JTG+3cMjxElINmQ== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:43.531448 ** Cache FetchForUpdate Cache Key Value: [0O1ogbQLTQyAj/HbdZV73A==]   sortk: A#
fetchItems: 2020/08/14 10:19:43.531458 +++  Cache FetchItems for sortk A# UID: [0O1ogbQLTQyAj/HbdZV73A==] 
FetchNode: 2020/08/14 10:19:43.531487  node: 0O1ogbQLTQyAj/HbdZV73A== subKey: A#
DB: 2020/08/14 10:19:43.534644 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.345839ms
DB: 2020/08/14 10:19:43.535476 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.93709ms
fetchItems: 2020/08/14 10:19:43.535640 +++  Cache FetchItems for sortk A# UID: [0O1ogbQLTQyAj/HbdZV73A==] 
FetchNode: 2020/08/14 10:19:43.535648  node: 0O1ogbQLTQyAj/HbdZV73A== subKey: A#
DB: 2020/08/14 10:19:43.539316 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.620732ms
DB: 2020/08/14 10:19:43.539842 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.933736ms
DB: 2020/08/14 10:19:43.546255 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.346519ms
DB: 2020/08/14 10:19:43.550962 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.649667ms
DB: 2020/08/14 10:19:43.555909 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.831555ms
DB: 2020/08/14 10:19:43.562243 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.243124ms
DB: 2020/08/14 10:19:43.566906 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.590372ms
DB: 2020/08/14 10:19:43.571812 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.829946ms
DB: 2020/08/14 10:19:43.578563 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.405515ms
DB: 2020/08/14 10:19:43.583201 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.567669ms
DB: 2020/08/14 10:19:43.588146 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.870604ms
DB: 2020/08/14 10:19:43.593009 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.664766ms
Cache: 2020/08/14 10:19:43.593024 In SetUpredAvailable: pUid, tUID:  +FrPnj/JTG+3cMjxElINmQ== +FrPnj/JTG+3cMjxElINmQ== A#G#:S
Cache: 2020/08/14 10:19:43.593030 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:43.597989 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.918117ms
Unlock: 2020/08/14 10:19:43.598015 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:43.598021 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:43.603074 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.931427ms
grmgr: 2020/08/14 10:19:43.603104 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:43.603110 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:19:43.603116 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:43.603121 goroutine about to start 4 
attachNode: 2020/08/14 10:19:43.603148 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 10:19:43.603155 Looping..... 0
grmgr: 2020/08/14 10:19:43.603181 Looping..... 1
grmgr: 2020/08/14 10:19:43.603187 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:19:43.603191 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:19:43.606507 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.253273ms
DB: 2020/08/14 10:19:43.609596 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.054998ms
DB: 2020/08/14 10:19:43.613009 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.268203ms
DB: 2020/08/14 10:19:43.616321 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.278514ms
DB: 2020/08/14 10:19:43.621211 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.807385ms
DB: 2020/08/14 10:19:43.625920 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.485798ms
FetchForUpdate: 2020/08/14 10:19:43.625936 ** Cache FetchForUpdate Cache Key Value: [1DjZovJsQu+sIz6O5jcmEA==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:19:43.625943 +++  Cache FetchItems for sortk A#G#:S UID: [1DjZovJsQu+sIz6O5jcmEA==] 
FetchNode: 2020/08/14 10:19:43.625948  node: 1DjZovJsQu+sIz6O5jcmEA== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:43.626137 ** Cache FetchForUpdate Cache Key Value: [0O1ogbQLTQyAj/HbdZV73A==]   sortk: A#
fetchItems: 2020/08/14 10:19:43.626184 +++  Cache FetchItems for sortk A# UID: [0O1ogbQLTQyAj/HbdZV73A==] 
FetchNode: 2020/08/14 10:19:43.626199  node: 0O1ogbQLTQyAj/HbdZV73A== subKey: A#
DB: 2020/08/14 10:19:43.629960 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.97761ms
DB: 2020/08/14 10:19:43.631158 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.913733ms
DB: 2020/08/14 10:19:43.635416 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.816896ms
DB: 2020/08/14 10:19:43.640054 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.597386ms
DB: 2020/08/14 10:19:43.640074 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.597386ms
DB: 2020/08/14 10:19:43.645093 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.987049ms
DB: 2020/08/14 10:19:43.645109 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.987049ms
DB: 2020/08/14 10:19:43.650654 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.466171ms
DB: 2020/08/14 10:19:43.655680 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.958448ms
DB: 2020/08/14 10:19:43.662619 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.566354ms
DB: 2020/08/14 10:19:43.667635 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.806395ms
DB: 2020/08/14 10:19:43.673004 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.92281ms
DB: 2020/08/14 10:19:43.679441 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.0994ms
DB: 2020/08/14 10:19:43.684453 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.667641ms
DB: 2020/08/14 10:19:43.689658 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.870587ms
DB: 2020/08/14 10:19:43.696261 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.251356ms
DB: 2020/08/14 10:19:43.701326 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.658604ms
DB: 2020/08/14 10:19:43.706592 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.915427ms
DB: 2020/08/14 10:19:43.711529 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.722694ms
Cache: 2020/08/14 10:19:43.711546 In SetUpredAvailable: pUid, tUID:  1DjZovJsQu+sIz6O5jcmEA== Jv4n0OuJSbWXnS3bK08iRQ== A#G#:S
Cache: 2020/08/14 10:19:43.711551 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:43.716368 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.77959ms
Unlock: 2020/08/14 10:19:43.716380 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:43.716385 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:43.721458 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.013909ms
grmgr: 2020/08/14 10:19:43.721476 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:43.721482 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:19:43.721487 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:43.721492 goroutine about to start 5 
attachNode: 2020/08/14 10:19:43.721499 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 10:19:43.721504 Looping..... 0
grmgr: 2020/08/14 10:19:43.721531 Looping..... 1
grmgr: 2020/08/14 10:19:43.721549 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:19:43.721553 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:19:43.724860 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.252122ms
DB: 2020/08/14 10:19:43.729966 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.046199ms
DB: 2020/08/14 10:19:43.733412 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.318585ms
DB: 2020/08/14 10:19:43.736220 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.773813ms
DB: 2020/08/14 10:19:43.741058 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.782496ms
DB: 2020/08/14 10:19:43.745971 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.693558ms
FetchForUpdate: 2020/08/14 10:19:43.745988 ** Cache FetchForUpdate Cache Key Value: [+FrPnj/JTG+3cMjxElINmQ==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:19:43.745995 +++  Cache FetchItems for sortk A#G#:S UID: [+FrPnj/JTG+3cMjxElINmQ==] 
FetchNode: 2020/08/14 10:19:43.746010  node: +FrPnj/JTG+3cMjxElINmQ== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:43.746227 ** Cache FetchForUpdate Cache Key Value: [1DjZovJsQu+sIz6O5jcmEA==]   sortk: A#
fetchItems: 2020/08/14 10:19:43.746253 +++  Cache FetchItems for sortk A# UID: [1DjZovJsQu+sIz6O5jcmEA==] 
FetchNode: 2020/08/14 10:19:43.746268  node: 1DjZovJsQu+sIz6O5jcmEA== subKey: A#
DB: 2020/08/14 10:19:43.749286 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.240999ms
DB: 2020/08/14 10:19:43.750303 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.983907ms
DB: 2020/08/14 10:19:43.754570 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.838871ms
DB: 2020/08/14 10:19:43.759357 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.741064ms
DB: 2020/08/14 10:19:43.759382 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.741064ms
DB: 2020/08/14 10:19:43.764031 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.605269ms
DB: 2020/08/14 10:19:43.764052 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.605269ms
DB: 2020/08/14 10:19:43.769321 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.030139ms
DB: 2020/08/14 10:19:43.774333 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.804532ms
DB: 2020/08/14 10:19:43.780859 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.150962ms
DB: 2020/08/14 10:19:43.785834 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.774528ms
DB: 2020/08/14 10:19:43.791182 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.909851ms
DB: 2020/08/14 10:19:43.797769 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.25762ms
DB: 2020/08/14 10:19:43.802651 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.544159ms
DB: 2020/08/14 10:19:43.807935 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.806249ms
DB: 2020/08/14 10:19:43.814792 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.508374ms
DB: 2020/08/14 10:19:43.819691 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.544006ms
DB: 2020/08/14 10:19:43.824948 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.89821ms
DB: 2020/08/14 10:19:43.830067 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.914296ms
Cache: 2020/08/14 10:19:43.830083 In SetUpredAvailable: pUid, tUID:  +FrPnj/JTG+3cMjxElINmQ== l9ReziomSnuxiMYzsNuP1g== A#G#:S
Cache: 2020/08/14 10:19:43.830089 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:43.834912 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.786916ms
Unlock: 2020/08/14 10:19:43.834929 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:43.834935 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:43.839719 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.726719ms
grmgr: 2020/08/14 10:19:43.839738 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:43.839744 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:19:43.839762 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:19:43.839766 goroutine about to start 6 
rdfLoader: 2020/08/14 10:19:43.839772 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 10:19:43.840088 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 10:19:43.842932 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.00811ms
DB: 2020/08/14 10:19:43.847378 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.414545ms
DB: 2020/08/14 10:19:43.850281 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.684532ms
DB: 2020/08/14 10:19:43.853599 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.217741ms
DB: 2020/08/14 10:19:43.858774 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.110112ms
DB: 2020/08/14 10:19:43.863693 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.559782ms
FetchForUpdate: 2020/08/14 10:19:43.863710 ** Cache FetchForUpdate Cache Key Value: [0O1ogbQLTQyAj/HbdZV73A==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:19:43.863716 +++  Cache FetchItems for sortk A#G#:S UID: [0O1ogbQLTQyAj/HbdZV73A==] 
FetchNode: 2020/08/14 10:19:43.863721  node: 0O1ogbQLTQyAj/HbdZV73A== subKey: A#G#:S
FetchForUpdate: 2020/08/14 10:19:43.863905 ** Cache FetchForUpdate Cache Key Value: [1DjZovJsQu+sIz6O5jcmEA==]   sortk: A#
fetchItems: 2020/08/14 10:19:43.863916 +++  Cache FetchItems for sortk A# UID: [1DjZovJsQu+sIz6O5jcmEA==] 
FetchNode: 2020/08/14 10:19:43.863970  node: 1DjZovJsQu+sIz6O5jcmEA== subKey: A#
DB: 2020/08/14 10:19:43.867453 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.435036ms
DB: 2020/08/14 10:19:43.867843 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.088777ms
DB: 2020/08/14 10:19:43.872951 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.982113ms
DB: 2020/08/14 10:19:43.877517 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.524088ms
DB: 2020/08/14 10:19:43.877538 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.524088ms
DB: 2020/08/14 10:19:43.882350 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.772488ms
DB: 2020/08/14 10:19:43.882370 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.772488ms
DB: 2020/08/14 10:19:43.888084 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.346433ms
DB: 2020/08/14 10:19:43.893516 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.945864ms
DB: 2020/08/14 10:19:43.899905 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.286088ms
DB: 2020/08/14 10:19:43.904614 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.641426ms
DB: 2020/08/14 10:19:43.909490 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.732021ms
DB: 2020/08/14 10:19:43.916984 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.380851ms
DB: 2020/08/14 10:19:43.921945 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.588921ms
DB: 2020/08/14 10:19:43.927308 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.006389ms
DB: 2020/08/14 10:19:43.934288 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.350865ms
DB: 2020/08/14 10:19:43.939601 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.689197ms
DB: 2020/08/14 10:19:43.945030 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.813587ms
DB: 2020/08/14 10:19:43.950432 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.987718ms
Cache: 2020/08/14 10:19:43.950452 In SetUpredAvailable: pUid, tUID:  0O1ogbQLTQyAj/HbdZV73A== 9syndiqdQhyG2mL5sI00vw== A#G#:S
Cache: 2020/08/14 10:19:43.950459 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:19:43.955353 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.856693ms
Unlock: 2020/08/14 10:19:43.955366 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:19:43.955371 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:19:43.960318 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.89123ms
rdfLoader: 2020/08/14 10:19:43.960335 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 10:19:43.960341 cancel contexts
rdfLoader: 2020/08/14 10:19:43.960347 wait for autonomous goroutines to end
errlog: 2020/08/14 10:19:43.960353 Powering down...
grmgr: 2020/08/14 10:19:43.960360 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:19:43.960365 Powering down...
rdfuuid: 2020/08/14 10:19:43.960371 Powering down...
rdfLoader: 2020/08/14 10:19:43.960376 loader exists.....
DB:2020/08/14 10:39:15 log.go:18: ===============================================================================
errlog: 2020/08/14 10:39:15.073317 Powering on...
rdfLoader: 2020/08/14 10:39:15.073357 saveNode started......
rdfLoader: 2020/08/14 10:39:15.073363 define saveNode limiter......
rdfuuid: 2020/08/14 10:39:15.073371 Powering on...
grmgr: 2020/08/14 10:39:15.073390 Powering on...
rdfLoader: 2020/08/14 10:39:15.073400  principle goroutines started 
RDFreader: 2020/08/14 10:39:15.073426 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:39:15.073441 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 10:39:15.073448 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 10:39:15.073454 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 10:39:15.073459 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 10:39:15.073465 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 10:39:15.073469 spo read:      
RDFreader: 2020/08/14 10:39:15.073474 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 10:39:15.073480 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 10:39:15.073485 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 10:39:15.073490 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 10:39:15.073494 spo read:      
RDFreader: 2020/08/14 10:39:15.073500 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 10:39:15.073505 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 10:39:15.073510 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 10:39:15.073515 spo read:  b  Age  "58"
RDFreader: 2020/08/14 10:39:15.073521 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 10:39:15.073526 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 10:39:15.073531 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 10:39:15.073536 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 10:39:15.073541 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 10:39:15.073545 spo read:      
RDFreader: 2020/08/14 10:39:15.073551 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 10:39:15.073555 Send node batch on channel verifyCh
RDFreader: 2020/08/14 10:39:15.073560 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:39:15.073564 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 10:39:15.073569 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 10:39:15.073577 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 10:39:15.073582 spo read:  c  Age  "67"
RDFreader: 2020/08/14 10:39:15.073593 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 10:39:15.073598 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 10:39:15.073603 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 10:39:15.073608 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 10:39:15.073615 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 10:39:15.073619 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 10:39:15.073624 spo read:      
RDFreader: 2020/08/14 10:39:15.073629 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 10:39:15.073651 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 10:39:15.073668 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 10:39:15.073673 spo read:  d  Age  "36"
RDFreader: 2020/08/14 10:39:15.073678 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 10:39:15.073684 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 10:39:15.073688 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 10:39:15.073692 close verify channel
rdfLoader: 2020/08/14 10:39:15.073696 wait for goroutines to end
rdfLoader: 2020/08/14 10:39:15.073700 verify started....
rdfLoader: 2020/08/14 10:39:15.073705 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:39:15.073709 .  getType..
rdfLoader: 2020/08/14 10:39:15.073713 node.TyName : [Person]
DB: 2020/08/14 10:39:15.145509 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 71.720751ms
grmgr: 2020/08/14 10:39:15.145707 Looping..... 0
grmgr: 2020/08/14 10:39:15.146036 Looping..... 1
grmgr: 2020/08/14 10:39:15.146193 Looping..... 2
grmgr: 2020/08/14 10:39:15.146386 Looping..... 3
grmgr: 2020/08/14 10:39:15.146552 Looping..... 4
grmgr: 2020/08/14 10:39:15.146751 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:39:15.146763 .  getType..
rdfLoader: 2020/08/14 10:39:15.146768 node.TyName : [Person]
grmgr: 2020/08/14 10:39:15.146774 Looping..... 0
unmarshalRDF2020/08/14 10:39:15.146786 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:39:15.146796 Looping..... 1
grmgr: 2020/08/14 10:39:15.146802 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:39:15.146806 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:39:15.146814 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:39:15.146818 .  getType..
rdfLoader: 2020/08/14 10:39:15.146822 node.TyName : [Person]
grmgr: 2020/08/14 10:39:15.146827 Looping..... 0
rdfLoader: 2020/08/14 10:39:15.146837 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:39:15.146842 Add to SS . [Alfa]
unmarshalRDF2020/08/14 10:39:15.146910 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:39:15.146918 Exit  unmarshalRDF. 
saveNode: 2020/08/14 10:39:15.146923 read from saveCH channel 1 
unmarshalRDF2020/08/14 10:39:15.146932 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:39:15.146958 Looping..... 1
grmgr: 2020/08/14 10:39:15.146964 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:39:15.146969 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:39:15.146974 Looping..... 0
rdfLoader: 2020/08/14 10:39:15.146983 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:39:15.146988 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 10:39:15.147033 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:39:15.147048 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 10:39:15.147055 .  getType..
rdfLoader: 2020/08/14 10:39:15.147059 node.TyName : [Person]
unmarshalRDF2020/08/14 10:39:15.147068 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:39:15.147079 Looping..... 1
rdfLoader: 2020/08/14 10:39:15.147087 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 10:39:15.147092 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 10:39:15.147096 Add to SS . [Honda]
unmarshalRDF2020/08/14 10:39:15.147141 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:39:15.147146 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:39:15.147172 Looping..... 2
grmgr: 2020/08/14 10:39:15.147358 Looping..... 3
grmgr: 2020/08/14 10:39:15.147540 Looping..... 4
grmgr: 2020/08/14 10:39:15.147721 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:39:15.147732 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 10:39:15.147737 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:39:15.147741 Looping..... 0
saveNode: 2020/08/14 10:39:15.147747 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:39:15.147754 read from saveCH channel 2 
grmgr: 2020/08/14 10:39:15.147794 Looping..... 1
SaveRDFNode: xxx 2020/08/14 10:39:15.147818 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.147838 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.147844 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.147850 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.147855 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.147875 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.147881 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:39:15.147885 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:39:15.147893 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017440)}
SaveRDFNode: 2020/08/14 10:39:15.147897 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:39:15.147908 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.147912 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.147923 UID received  : rB/Qca36Rw+Uxf5iZId6/w==
grmgr: 2020/08/14 10:39:15.148211 Looping..... 2
grmgr: 2020/08/14 10:39:15.148372 Looping..... 3
grmgr: 2020/08/14 10:39:15.148550 Looping..... 4
grmgr: 2020/08/14 10:39:15.148738 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:39:15.148747 Looping..... 0
unmarshalRDF2020/08/14 10:39:15.148761 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:39:15.148777 Looping..... 1
rdfLoader: 2020/08/14 10:39:15.148799 Add to SS . [Bentley]
unmarshalRDF2020/08/14 10:39:15.148834 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:39:15.148838 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:39:15.148849 Looping..... 2
grmgr: 2020/08/14 10:39:15.148920 Looping..... 3
grmgr: 2020/08/14 10:39:15.149098 Looping..... 4
grmgr: 2020/08/14 10:39:15.149276 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:39:15.149286 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:39:15.149291 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 10:39:15.149298 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:39:15.149303 read from saveCH channel 3 
grmgr: 2020/08/14 10:39:15.149308 Looping..... 0
grmgr: 2020/08/14 10:39:15.149349 Looping..... 1
grmgr: 2020/08/14 10:39:15.149355 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:39:15.149359 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:39:15.149380 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.149386 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.149393 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.149398 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.149403 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.149408 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.149413 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:39:15.149432 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:39:15.149438 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017920)}
SaveRDFNode: 2020/08/14 10:39:15.149442 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:39:15.149461 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.149477 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.149483 UID received  : v8wABdOwTVuGT+D1fD0t/w==
DB: 2020/08/14 10:39:15.155191 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.237361ms
DB: 2020/08/14 10:39:15.158685 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.174466ms
DB: 2020/08/14 10:39:15.161986 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.261965ms
DB: 2020/08/14 10:39:15.165443 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.252164ms
DB: 2020/08/14 10:39:15.168845 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.364899ms
DB: 2020/08/14 10:39:15.172155 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.274061ms
SaveRDFNode: 2020/08/14 10:39:15.172171 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017920)}
rdfUIDdb: 2020/08/14 10:39:15.172185 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.172189 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.172195 Received UID: X18=
SaveRDFNode: 2020/08/14 10:39:15.172208 a: = db.Item{PKey:[]uint8{0xbf, 0xcc, 0x0, 0x5, 0xd3, 0xb0, 0x4d, 0x5b, 0x86, 0x4f, 0xe0, 0xf5, 0x7c, 0x3d, 0x2d, 0xff}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:39:15.172518 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 17.290851ms
DB: 2020/08/14 10:39:15.175558 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.320089ms
SaveRDFNode: 2020/08/14 10:39:15.175572 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017920)}
rdfUIDdb: 2020/08/14 10:39:15.175578 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.175582 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.175588 Received UID: X18=
SaveRDFNode: 2020/08/14 10:39:15.175598 a: = db.Item{PKey:[]uint8{0xbf, 0xcc, 0x0, 0x5, 0xd3, 0xb0, 0x4d, 0x5b, 0x86, 0x4f, 0xe0, 0xf5, 0x7c, 0x3d, 0x2d, 0xff}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:39:15.175917 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.368805ms
DB: 2020/08/14 10:39:15.179025 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.397695ms
SaveRDFNode: 2020/08/14 10:39:15.179228 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:39:15.179246 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:39:15.179252 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:39:15.179258 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:39:15.179263 read from saveCH channel 4 
grmgr: 2020/08/14 10:39:15.179268 Looping..... 0
grmgr: 2020/08/14 10:39:15.179303 Looping..... 1
grmgr: 2020/08/14 10:39:15.179310 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:39:15.179314 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:39:15.179324 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.179332 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.179338 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.179344 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.179349 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.179367 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.179374 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:39:15.179378 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:39:15.179384 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc00037bf20)}
SaveRDFNode: 2020/08/14 10:39:15.179388 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:39:15.179397 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.179401 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.179407 UID received  : Vgj2+Vd7SPCn2gjkb/gqgw==
DB: 2020/08/14 10:39:15.179680 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.709981ms
DB: 2020/08/14 10:39:15.182793 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.358299ms
DB: 2020/08/14 10:39:15.183032 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.321391ms
SaveRDFNode: 2020/08/14 10:39:15.183052 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 10:39:15.183058 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.183062 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.183068 Received UID: X18=
SaveRDFNode: 2020/08/14 10:39:15.183083 a: = db.Item{PKey:[]uint8{0xac, 0x1f, 0xd0, 0x71, 0xad, 0xfa, 0x47, 0xf, 0x94, 0xc5, 0xfe, 0x62, 0x64, 0x87, 0x7a, 0xff}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:39:15.186234 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.404892ms
DB: 2020/08/14 10:39:15.186592 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.476912ms
SaveRDFNode: 2020/08/14 10:39:15.186607 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 10:39:15.186613 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.186617 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.186623 Received UID: X18=
SaveRDFNode: 2020/08/14 10:39:15.186634 a: = db.Item{PKey:[]uint8{0xac, 0x1f, 0xd0, 0x71, 0xad, 0xfa, 0x47, 0xf, 0x94, 0xc5, 0xfe, 0x62, 0x64, 0x87, 0x7a, 0xff}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:39:15.189636 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.361575ms
DB: 2020/08/14 10:39:15.190060 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.376148ms
SaveRDFNode: 2020/08/14 10:39:15.190071 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:39:15.190079 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:39:15.190084 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:39:15.190090 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 10:39:15.190095 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 10:39:15.190120 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.190127 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.190134 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.190139 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.190167 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.190175 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:39:15.190180 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:39:15.190185 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:39:15.190190 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000184e40)}
SaveRDFNode: 2020/08/14 10:39:15.190195 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:39:15.190204 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.190207 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.190213 UID received  : NVMRJQMgRuGPqUe08jazOA==
grmgr: 2020/08/14 10:39:15.190427 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 10:39:15.192937 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.265648ms
DB: 2020/08/14 10:39:15.193691 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.452541ms
DB: 2020/08/14 10:39:15.196354 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.384194ms
SaveRDFNode: 2020/08/14 10:39:15.196560 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00037bf20)}
rdfUIDdb: 2020/08/14 10:39:15.196575 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.196579 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.196585 Received UID: X18=
SaveRDFNode: 2020/08/14 10:39:15.196596 a: = db.Item{PKey:[]uint8{0x56, 0x8, 0xf6, 0xf9, 0x57, 0x7b, 0x48, 0xf0, 0xa7, 0xda, 0x8, 0xe4, 0x6f, 0xf8, 0x2a, 0x83}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:39:15.197110 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.367555ms
DB: 2020/08/14 10:39:15.200464 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.319288ms
DB: 2020/08/14 10:39:15.200770 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.14218ms
SaveRDFNode: 2020/08/14 10:39:15.200783 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00037bf20)}
rdfUIDdb: 2020/08/14 10:39:15.200789 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.200794 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.200799 Received UID: X18=
SaveRDFNode: 2020/08/14 10:39:15.200810 a: = db.Item{PKey:[]uint8{0x56, 0x8, 0xf6, 0xf9, 0x57, 0x7b, 0x48, 0xf0, 0xa7, 0xda, 0x8, 0xe4, 0x6f, 0xf8, 0x2a, 0x83}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:39:15.203771 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.266917ms
DB: 2020/08/14 10:39:15.204120 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.280985ms
SaveRDFNode: 2020/08/14 10:39:15.204130 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:39:15.204138 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 10:39:15.207155 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.35135ms
SaveRDFNode: 2020/08/14 10:39:15.207174 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000184e40)}
rdfUIDdb: 2020/08/14 10:39:15.207180 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.207185 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.207209 Received UID: X18=
SaveRDFNode: 2020/08/14 10:39:15.207221 a: = db.Item{PKey:[]uint8{0x35, 0x53, 0x11, 0x25, 0x3, 0x20, 0x46, 0xe1, 0x8f, 0xa9, 0x47, 0xb4, 0xf2, 0x36, 0xb3, 0x38}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:39:15.210634 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.382725ms
SaveRDFNode: 2020/08/14 10:39:15.210649 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000184e40)}
rdfUIDdb: 2020/08/14 10:39:15.210656 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:39:15.210660 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:39:15.210665 Received UID: X18=
SaveRDFNode: 2020/08/14 10:39:15.210678 a: = db.Item{PKey:[]uint8{0x35, 0x53, 0x11, 0x25, 0x3, 0x20, 0x46, 0xe1, 0x8f, 0xa9, 0x47, 0xb4, 0xf2, 0x36, 0xb3, 0x38}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:39:15.214526 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.794741ms
SaveRDFNode: 2020/08/14 10:39:15.214546 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 10:39:15.214554 saveNode finished waiting...exiting
grmgr: 2020/08/14 10:39:15.214563 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 10:39:15.214574 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 10:39:15.214580 Looping..... 0
grmgr: 2020/08/14 10:39:15.214824 Looping..... 1
grmgr: 2020/08/14 10:39:15.215006 Looping..... 2
grmgr: 2020/08/14 10:39:15.215186 Looping..... 3
grmgr: 2020/08/14 10:39:15.215228 Looping..... 4
grmgr: 2020/08/14 10:39:15.215366 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:39:15.215376 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:39:15.215381 goroutine about to start 1 
attachNode: 2020/08/14 10:39:15.215388 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 10:39:15.215393 Looping..... 0
grmgr: 2020/08/14 10:39:15.215412 Looping..... 1
grmgr: 2020/08/14 10:39:15.215418 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:39:15.215422 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:39:15.215427 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:39:15.215431 goroutine about to start 2 
attachNode: 2020/08/14 10:39:15.215436 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 10:39:15.215441 Looping..... 0
grmgr: 2020/08/14 10:39:15.216305 Looping..... 1
grmgr: 2020/08/14 10:39:15.216319 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:39:15.216323 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:39:15.217859 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.362029ms
DB: 2020/08/14 10:39:15.220024 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.132052ms
DB: 2020/08/14 10:39:15.222279 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.211958ms
DB: 2020/08/14 10:39:15.225166 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.853693ms
DB: 2020/08/14 10:39:15.228826 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.584943ms
DB: 2020/08/14 10:39:15.231196 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 14.825475ms
DB: 2020/08/14 10:39:15.233628 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.393953ms
DB: 2020/08/14 10:39:15.236167 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.392788ms
DB: 2020/08/14 10:39:15.238897 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.014506ms
AttachNode: main 2020/08/14 10:39:15.238915 FetchForUpdate: for parent    v8wABdOwTVuGT+D1fD0t/w==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:39:15.238920 ** Cache FetchForUpdate Cache Key Value: [v8wABdOwTVuGT+D1fD0t/w==]   sortk: A#G#:S
FetchNode: 2020/08/14 10:39:15.238928  node: v8wABdOwTVuGT+D1fD0t/w== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:39:15.239161 FetchForUpdate: for child    rB/Qca36Rw+Uxf5iZId6/w==
FetchForUpdate: 2020/08/14 10:39:15.239176 ** Cache FetchForUpdate Cache Key Value: [rB/Qca36Rw+Uxf5iZId6/w==]   sortk: A#
FetchNode: 2020/08/14 10:39:15.239190  node: rB/Qca36Rw+Uxf5iZId6/w== subKey: A#
DB: 2020/08/14 10:39:15.239762 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.557253ms
DB: 2020/08/14 10:39:15.241217 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.231398ms
FetchForUpdate: 2020/08/14 10:39:15.241280 len(nb): 1
fetchItems: 2020/08/14 10:39:15.241289 +++  Cache FetchItems for sortk A#G#:S UID: [v8wABdOwTVuGT+D1fD0t/w==] 
FetchNode: 2020/08/14 10:39:15.241294  node: v8wABdOwTVuGT+D1fD0t/w== subKey: A#G#:S
DB: 2020/08/14 10:39:15.243183 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.946123ms
FetchForUpdate: 2020/08/14 10:39:15.243317 len(nb): 7
fetchItems: 2020/08/14 10:39:15.243337 +++  Cache FetchItems for sortk A# UID: [rB/Qca36Rw+Uxf5iZId6/w==] 
FetchNode: 2020/08/14 10:39:15.243342  node: rB/Qca36Rw+Uxf5iZId6/w== subKey: A#
DB: 2020/08/14 10:39:15.247157 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.833717ms
DB: 2020/08/14 10:39:15.252518 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 12.67683ms
DB: 2020/08/14 10:39:15.257457 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.706848ms
DB: 2020/08/14 10:39:15.261038 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.897812ms
AttachNode: main 2020/08/14 10:39:15.261059 FetchForUpdate: for parent    Vgj2+Vd7SPCn2gjkb/gqgw==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:39:15.261065 ** Cache FetchForUpdate Cache Key Value: [Vgj2+Vd7SPCn2gjkb/gqgw==]   sortk: A#G#:S
FetchNode: 2020/08/14 10:39:15.261071  node: Vgj2+Vd7SPCn2gjkb/gqgw== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:39:15.261292 FetchForUpdate: for child    rB/Qca36Rw+Uxf5iZId6/w==
FetchForUpdate: 2020/08/14 10:39:15.261318 ** Cache FetchForUpdate Cache Key Value: [rB/Qca36Rw+Uxf5iZId6/w==]   sortk: A#
DB: 2020/08/14 10:39:15.262578 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 19.192844ms
DB: 2020/08/14 10:39:15.263482 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.366624ms
FetchForUpdate: 2020/08/14 10:39:15.263525 len(nb): 1
fetchItems: 2020/08/14 10:39:15.263535 +++  Cache FetchItems for sortk A#G#:S UID: [Vgj2+Vd7SPCn2gjkb/gqgw==] 
FetchNode: 2020/08/14 10:39:15.263540  node: Vgj2+Vd7SPCn2gjkb/gqgw== subKey: A#G#:S
DB: 2020/08/14 10:39:15.266942 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.371536ms
DB: 2020/08/14 10:39:15.278011 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 9.208961ms
DB: 2020/08/14 10:39:15.283572 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.475082ms
DB: 2020/08/14 10:39:15.287886 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.194584ms
DB: 2020/08/14 10:39:15.289018 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 17.262767ms
DB: 2020/08/14 10:39:15.294271 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.31904ms
DB: 2020/08/14 10:39:15.297621 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.281809ms
DB: 2020/08/14 10:39:15.301297 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.609404ms
DB: 2020/08/14 10:39:15.307391 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.005319ms
DB: 2020/08/14 10:39:15.310777 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.318811ms
DB: 2020/08/14 10:39:15.314382 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.530534ms
DB: 2020/08/14 10:39:15.317814 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.38115ms
Cache: 2020/08/14 10:39:15.317832 In SetUpredAvailable: pUid, tUID:  v8wABdOwTVuGT+D1fD0t/w== v8wABdOwTVuGT+D1fD0t/w== A#G#:S
Cache: 2020/08/14 10:39:15.317852 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:39:15.321433 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.534578ms
Unlock: 2020/08/14 10:39:15.321446 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:39:15.321451 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 10:39:15.321645 +++  Cache FetchItems for sortk A# UID: [rB/Qca36Rw+Uxf5iZId6/w==] 
FetchNode: 2020/08/14 10:39:15.321700  node: rB/Qca36Rw+Uxf5iZId6/w== subKey: A#
DB: 2020/08/14 10:39:15.324510 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.75621ms
DB: 2020/08/14 10:39:15.329007 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.499783ms
grmgr: 2020/08/14 10:39:15.329029 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 10:39:15.329036 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:39:15.329042 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:39:15.329047 goroutine about to start 3 
attachNode: 2020/08/14 10:39:15.329053 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 10:39:15.329058 Looping..... 0
grmgr: 2020/08/14 10:39:15.329101 Looping..... 1
grmgr: 2020/08/14 10:39:15.329108 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:39:15.329113 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:39:15.331464 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.958742ms
DB: 2020/08/14 10:39:15.332217 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.053533ms
DB: 2020/08/14 10:39:15.334541 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.293163ms
DB: 2020/08/14 10:39:15.334787 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.27524ms
DB: 2020/08/14 10:39:15.337242 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.656064ms
DB: 2020/08/14 10:39:15.338495 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.61063ms
DB: 2020/08/14 10:39:15.339354 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.077789ms
DB: 2020/08/14 10:39:15.342787 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.362826ms
DB: 2020/08/14 10:39:15.344800 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.968165ms
DB: 2020/08/14 10:39:15.347027 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.045129ms
AttachNode: main 2020/08/14 10:39:15.347050 FetchForUpdate: for parent    rB/Qca36Rw+Uxf5iZId6/w==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:39:15.347057 ** Cache FetchForUpdate Cache Key Value: [rB/Qca36Rw+Uxf5iZId6/w==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 10:39:15.347070 FetchForUpdate: for child    v8wABdOwTVuGT+D1fD0t/w==
FetchForUpdate: 2020/08/14 10:39:15.347076 ** Cache FetchForUpdate Cache Key Value: [v8wABdOwTVuGT+D1fD0t/w==]   sortk: A#
fetchItems: 2020/08/14 10:39:15.347082 +++  Cache FetchItems for sortk A# UID: [v8wABdOwTVuGT+D1fD0t/w==] 
FetchNode: 2020/08/14 10:39:15.347099  node: v8wABdOwTVuGT+D1fD0t/w== subKey: A#
DB: 2020/08/14 10:39:15.348909 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.782725ms
DB: 2020/08/14 10:39:15.350640 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.48865ms
fetchItems: 2020/08/14 10:39:15.350814 +++  Cache FetchItems for sortk A# UID: [v8wABdOwTVuGT+D1fD0t/w==] 
FetchNode: 2020/08/14 10:39:15.350822  node: v8wABdOwTVuGT+D1fD0t/w== subKey: A#
DB: 2020/08/14 10:39:15.352892 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.633678ms
DB: 2020/08/14 10:39:15.354372 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.51934ms
DB: 2020/08/14 10:39:15.359146 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.91641ms
DB: 2020/08/14 10:39:15.362750 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.289875ms
DB: 2020/08/14 10:39:15.366669 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.582937ms
DB: 2020/08/14 10:39:15.370241 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.364568ms
Cache: 2020/08/14 10:39:15.370260 In SetUpredAvailable: pUid, tUID:  Vgj2+Vd7SPCn2gjkb/gqgw== Vgj2+Vd7SPCn2gjkb/gqgw== A#G#:S
Cache: 2020/08/14 10:39:15.370266 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:39:15.373551 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.247941ms
Unlock: 2020/08/14 10:39:15.373565 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:39:15.373570 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 10:39:15.373799 +++  Cache FetchItems for sortk A#G#:S UID: [rB/Qca36Rw+Uxf5iZId6/w==] 
FetchNode: 2020/08/14 10:39:15.373822  node: rB/Qca36Rw+Uxf5iZId6/w== subKey: A#G#:S
DB: 2020/08/14 10:39:15.376306 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.452144ms
DB: 2020/08/14 10:39:15.380262 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.698402ms
DB: 2020/08/14 10:39:15.380911 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.244248ms
grmgr: 2020/08/14 10:39:15.380928 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 10:39:15.380934 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:39:15.380940 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:39:15.380944 goroutine about to start 4 
attachNode: 2020/08/14 10:39:15.380955 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 10:39:15.380960 Looping..... 0
grmgr: 2020/08/14 10:39:15.380985 Looping..... 1
grmgr: 2020/08/14 10:39:15.380991 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:39:15.380995 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:39:15.383465 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.424164ms
DB: 2020/08/14 10:39:15.385571 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.071812ms
DB: 2020/08/14 10:39:15.386594 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.947267ms
DB: 2020/08/14 10:39:15.388400 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.688458ms
DB: 2020/08/14 10:39:15.390506 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.720295ms
DB: 2020/08/14 10:39:15.391219 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.786981ms
DB: 2020/08/14 10:39:15.394499 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.578177ms
DB: 2020/08/14 10:39:15.395771 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.501231ms
DB: 2020/08/14 10:39:15.399625 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.673149ms
AttachNode: main 2020/08/14 10:39:15.399642 FetchForUpdate: for parent    Vgj2+Vd7SPCn2gjkb/gqgw==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:39:15.399648 ** Cache FetchForUpdate Cache Key Value: [Vgj2+Vd7SPCn2gjkb/gqgw==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:39:15.399655 +++  Cache FetchItems for sortk A#G#:S UID: [Vgj2+Vd7SPCn2gjkb/gqgw==] 
FetchNode: 2020/08/14 10:39:15.399689  node: Vgj2+Vd7SPCn2gjkb/gqgw== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:39:15.399874 FetchForUpdate: for child    v8wABdOwTVuGT+D1fD0t/w==
FetchForUpdate: 2020/08/14 10:39:15.399910 ** Cache FetchForUpdate Cache Key Value: [v8wABdOwTVuGT+D1fD0t/w==]   sortk: A#
DB: 2020/08/14 10:39:15.400849 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.023526ms
DB: 2020/08/14 10:39:15.402167 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.443092ms
DB: 2020/08/14 10:39:15.404421 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.249561ms
DB: 2020/08/14 10:39:15.405928 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.400208ms
DB: 2020/08/14 10:39:15.408350 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.601128ms
DB: 2020/08/14 10:39:15.409152 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.168284ms
DB: 2020/08/14 10:39:15.409168 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.168284ms
DB: 2020/08/14 10:39:15.412391 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.192393ms
DB: 2020/08/14 10:39:15.412408 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.192393ms
DB: 2020/08/14 10:39:15.414887 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.207562ms
DB: 2020/08/14 10:39:15.416361 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.735621ms
DB: 2020/08/14 10:39:15.418794 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.304376ms
DB: 2020/08/14 10:39:15.420321 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.803006ms
DB: 2020/08/14 10:39:15.422725 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.604047ms
DB: 2020/08/14 10:39:15.426377 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.418249ms
Cache: 2020/08/14 10:39:15.426393 In SetUpredAvailable: pUid, tUID:  rB/Qca36Rw+Uxf5iZId6/w== rB/Qca36Rw+Uxf5iZId6/w== A#G#:S
Cache: 2020/08/14 10:39:15.426399 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:39:15.429889 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.450834ms
Unlock: 2020/08/14 10:39:15.429905 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:39:15.429911 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 10:39:15.430250 +++  Cache FetchItems for sortk A# UID: [v8wABdOwTVuGT+D1fD0t/w==] 
FetchNode: 2020/08/14 10:39:15.430274  node: v8wABdOwTVuGT+D1fD0t/w== subKey: A#
DB: 2020/08/14 10:39:15.433835 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.862554ms
grmgr: 2020/08/14 10:39:15.433856 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 10:39:15.433862 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:39:15.433868 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:39:15.433873 goroutine about to start 5 
attachNode: 2020/08/14 10:39:15.433880 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 10:39:15.433885 Looping..... 0
grmgr: 2020/08/14 10:39:15.434031 Looping..... 1
grmgr: 2020/08/14 10:39:15.434042 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:39:15.434047 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:39:15.435073 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.643194ms
DB: 2020/08/14 10:39:15.437891 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.794305ms
DB: 2020/08/14 10:39:15.441031 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.074801ms
DB: 2020/08/14 10:39:15.442700 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.139575ms
DB: 2020/08/14 10:39:15.443133 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.060133ms
DB: 2020/08/14 10:39:15.445291 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.121408ms
DB: 2020/08/14 10:39:15.446209 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.454638ms
DB: 2020/08/14 10:39:15.448843 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.480386ms
DB: 2020/08/14 10:39:15.450136 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.732926ms
DB: 2020/08/14 10:39:15.452738 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.721563ms
AttachNode: main 2020/08/14 10:39:15.452864 FetchForUpdate: for parent    rB/Qca36Rw+Uxf5iZId6/w==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:39:15.452874 ** Cache FetchForUpdate Cache Key Value: [rB/Qca36Rw+Uxf5iZId6/w==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:39:15.452881 +++  Cache FetchItems for sortk A#G#:S UID: [rB/Qca36Rw+Uxf5iZId6/w==] 
FetchNode: 2020/08/14 10:39:15.452886  node: rB/Qca36Rw+Uxf5iZId6/w== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:39:15.453076 FetchForUpdate: for child    Vgj2+Vd7SPCn2gjkb/gqgw==
FetchForUpdate: 2020/08/14 10:39:15.453086 ** Cache FetchForUpdate Cache Key Value: [Vgj2+Vd7SPCn2gjkb/gqgw==]   sortk: A#
DB: 2020/08/14 10:39:15.456081 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.16057ms
DB: 2020/08/14 10:39:15.456774 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.569685ms
DB: 2020/08/14 10:39:15.460045 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.784152ms
DB: 2020/08/14 10:39:15.460504 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.203088ms
DB: 2020/08/14 10:39:15.463323 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.245131ms
DB: 2020/08/14 10:39:15.463346 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.245131ms
DB: 2020/08/14 10:39:15.464761 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.555453ms
DB: 2020/08/14 10:39:15.467140 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.757199ms
DB: 2020/08/14 10:39:15.467162 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.757199ms
DB: 2020/08/14 10:39:15.470661 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.833127ms
DB: 2020/08/14 10:39:15.470961 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.727171ms
DB: 2020/08/14 10:39:15.474080 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.352077ms
DB: 2020/08/14 10:39:15.475176 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.151255ms
DB: 2020/08/14 10:39:15.477916 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.76963ms
DB: 2020/08/14 10:39:15.481671 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.693677ms
Cache: 2020/08/14 10:39:15.481789 In SetUpredAvailable: pUid, tUID:  Vgj2+Vd7SPCn2gjkb/gqgw== rv5AhesnQLG4aEGLoo92cg== A#G#:S
Cache: 2020/08/14 10:39:15.481807 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:39:15.485198 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.33694ms
Unlock: 2020/08/14 10:39:15.485309 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:39:15.485321 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 10:39:15.485534 +++  Cache FetchItems for sortk A# UID: [Vgj2+Vd7SPCn2gjkb/gqgw==] 
FetchNode: 2020/08/14 10:39:15.485572  node: Vgj2+Vd7SPCn2gjkb/gqgw== subKey: A#
DB: 2020/08/14 10:39:15.488649 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.024627ms
DB: 2020/08/14 10:39:15.489529 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.149731ms
grmgr: 2020/08/14 10:39:15.489548 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 10:39:15.489554 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:39:15.489560 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:39:15.489565 goroutine about to start 6 
rdfLoader: 2020/08/14 10:39:15.489570 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 10:39:15.489592 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 10:39:15.496885 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.575977ms
DB: 2020/08/14 10:39:15.498854 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.670614ms
DB: 2020/08/14 10:39:15.499347 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.422254ms
DB: 2020/08/14 10:39:15.502190 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.79047ms
DB: 2020/08/14 10:39:15.502433 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.528481ms
DB: 2020/08/14 10:39:15.505172 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.944318ms
DB: 2020/08/14 10:39:15.506503 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.64766ms
DB: 2020/08/14 10:39:15.508845 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.616815ms
DB: 2020/08/14 10:39:15.512919 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.744504ms
AttachNode: main 2020/08/14 10:39:15.512941 FetchForUpdate: for parent    v8wABdOwTVuGT+D1fD0t/w==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:39:15.512947 ** Cache FetchForUpdate Cache Key Value: [v8wABdOwTVuGT+D1fD0t/w==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:39:15.512953 +++  Cache FetchItems for sortk A#G#:S UID: [v8wABdOwTVuGT+D1fD0t/w==] 
FetchNode: 2020/08/14 10:39:15.512958  node: v8wABdOwTVuGT+D1fD0t/w== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:39:15.513261 FetchForUpdate: for child    Vgj2+Vd7SPCn2gjkb/gqgw==
FetchForUpdate: 2020/08/14 10:39:15.513309 ** Cache FetchForUpdate Cache Key Value: [Vgj2+Vd7SPCn2gjkb/gqgw==]   sortk: A#
DB: 2020/08/14 10:39:15.513381 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.304914ms
DB: 2020/08/14 10:39:15.516471 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.372841ms
DB: 2020/08/14 10:39:15.517345 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.445502ms
DB: 2020/08/14 10:39:15.521013 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.995344ms
DB: 2020/08/14 10:39:15.521470 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.53998ms
DB: 2020/08/14 10:39:15.524625 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.572777ms
DB: 2020/08/14 10:39:15.524643 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.572777ms
DB: 2020/08/14 10:39:15.527970 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.906163ms
DB: 2020/08/14 10:39:15.528851 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.15834ms
DB: 2020/08/14 10:39:15.528958 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.15834ms
DB: 2020/08/14 10:39:15.531968 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.381623ms
DB: 2020/08/14 10:39:15.532869 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.671505ms
DB: 2020/08/14 10:39:15.536216 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.658969ms
DB: 2020/08/14 10:39:15.536937 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.86773ms
DB: 2020/08/14 10:39:15.540509 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.862452ms
Cache: 2020/08/14 10:39:15.540525 In SetUpredAvailable: pUid, tUID:  rB/Qca36Rw+Uxf5iZId6/w== fezik17FRASq/BUnUwHpuA== A#G#:S
Cache: 2020/08/14 10:39:15.540531 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:39:15.544442 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.870249ms
Unlock: 2020/08/14 10:39:15.544561 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:39:15.544570 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 10:39:15.544818 +++  Cache FetchItems for sortk A# UID: [Vgj2+Vd7SPCn2gjkb/gqgw==] 
FetchNode: 2020/08/14 10:39:15.544852  node: Vgj2+Vd7SPCn2gjkb/gqgw== subKey: A#
DB: 2020/08/14 10:39:15.547683 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.757688ms
DB: 2020/08/14 10:39:15.550282 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.630228ms
grmgr: 2020/08/14 10:39:15.550311 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 10:39:15.556246 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.255527ms
DB: 2020/08/14 10:39:15.559704 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.406992ms
DB: 2020/08/14 10:39:15.563382 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.559378ms
DB: 2020/08/14 10:39:15.569425 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.978659ms
DB: 2020/08/14 10:39:15.572673 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.188631ms
DB: 2020/08/14 10:39:15.576927 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.603554ms
DB: 2020/08/14 10:39:15.583377 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.867922ms
DB: 2020/08/14 10:39:15.587294 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.333503ms
DB: 2020/08/14 10:39:15.591585 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.622372ms
DB: 2020/08/14 10:39:15.595584 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.490971ms
Cache: 2020/08/14 10:39:15.595609 In SetUpredAvailable: pUid, tUID:  v8wABdOwTVuGT+D1fD0t/w== DKK4yF0+T8qIzNoOr5bw+Q== A#G#:S
Cache: 2020/08/14 10:39:15.595614 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:39:15.598955 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.308129ms
Unlock: 2020/08/14 10:39:15.598968 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:39:15.598972 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:39:15.602896 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.8207ms
rdfLoader: 2020/08/14 10:39:15.602916 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 10:39:15.602922 cancel contexts
rdfLoader: 2020/08/14 10:39:15.602928 wait for autonomous goroutines to end
errlog: 2020/08/14 10:39:15.602934 Powering down...
grmgr: 2020/08/14 10:39:15.602942 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:39:15.602947 Powering down...
rdfuuid: 2020/08/14 10:39:15.602954 Powering down...
rdfLoader: 2020/08/14 10:39:15.602958 loader exists.....
DB:2020/08/14 10:40:34 log.go:18: ===============================================================================
errlog: 2020/08/14 10:40:34.353674 Powering on...
rdfLoader: 2020/08/14 10:40:34.353716 saveNode started......
rdfLoader: 2020/08/14 10:40:34.353722 define saveNode limiter......
rdfuuid: 2020/08/14 10:40:34.353730 Powering on...
grmgr: 2020/08/14 10:40:34.353748 Powering on...
rdfLoader: 2020/08/14 10:40:34.353759  principle goroutines started 
RDFreader: 2020/08/14 10:40:34.353787 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:40:34.353801 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 10:40:34.353808 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 10:40:34.353814 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 10:40:34.353819 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 10:40:34.353825 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 10:40:34.353830 spo read:      
RDFreader: 2020/08/14 10:40:34.353835 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 10:40:34.353840 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 10:40:34.353845 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 10:40:34.353851 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 10:40:34.353855 spo read:      
RDFreader: 2020/08/14 10:40:34.353861 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 10:40:34.353866 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 10:40:34.353871 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 10:40:34.353877 spo read:  b  Age  "58"
RDFreader: 2020/08/14 10:40:34.353882 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 10:40:34.353887 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 10:40:34.353893 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 10:40:34.353898 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 10:40:34.353903 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 10:40:34.353907 spo read:      
RDFreader: 2020/08/14 10:40:34.353913 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 10:40:34.353917 Send node batch on channel verifyCh
RDFreader: 2020/08/14 10:40:34.353922 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:40:34.353926 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 10:40:34.353932 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 10:40:34.353939 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 10:40:34.353945 spo read:  c  Age  "67"
RDFreader: 2020/08/14 10:40:34.353950 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 10:40:34.353955 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 10:40:34.353960 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 10:40:34.353965 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 10:40:34.353974 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 10:40:34.353979 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 10:40:34.353984 spo read:      
RDFreader: 2020/08/14 10:40:34.353998 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 10:40:34.354003 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 10:40:34.354008 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 10:40:34.354013 spo read:  d  Age  "36"
RDFreader: 2020/08/14 10:40:34.354018 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 10:40:34.354024 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 10:40:34.354029 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 10:40:34.354032 close verify channel
rdfLoader: 2020/08/14 10:40:34.354036 wait for goroutines to end
rdfLoader: 2020/08/14 10:40:34.354041 verify started....
rdfLoader: 2020/08/14 10:40:34.354045 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:40:34.354049 .  getType..
rdfLoader: 2020/08/14 10:40:34.354053 node.TyName : [Person]
DB: 2020/08/14 10:40:34.427767 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 73.641196ms
grmgr: 2020/08/14 10:40:34.427911 Looping..... 0
grmgr: 2020/08/14 10:40:34.428377 Looping..... 1
grmgr: 2020/08/14 10:40:34.428414 Looping..... 2
grmgr: 2020/08/14 10:40:34.428551 Looping..... 3
grmgr: 2020/08/14 10:40:34.428728 Looping..... 4
grmgr: 2020/08/14 10:40:34.428907 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:40:34.428919 .  getType..
rdfLoader: 2020/08/14 10:40:34.428924 node.TyName : [Person]
grmgr: 2020/08/14 10:40:34.428930 Looping..... 0
unmarshalRDF2020/08/14 10:40:34.428942 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:40:34.428953 Looping..... 1
grmgr: 2020/08/14 10:40:34.428959 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:40:34.428963 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:40:34.428971 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:40:34.428975 .  getType..
rdfLoader: 2020/08/14 10:40:34.428979 node.TyName : [Person]
grmgr: 2020/08/14 10:40:34.428984 Looping..... 0
rdfLoader: 2020/08/14 10:40:34.428994 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:40:34.428999 Add to SS . [Alfa]
unmarshalRDF2020/08/14 10:40:34.429067 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:40:34.429074 Exit  unmarshalRDF. 
saveNode: 2020/08/14 10:40:34.429080 read from saveCH channel 1 
unmarshalRDF2020/08/14 10:40:34.429089 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:40:34.429120 Looping..... 1
grmgr: 2020/08/14 10:40:34.429127 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:40:34.429131 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:40:34.429136 Looping..... 0
rdfLoader: 2020/08/14 10:40:34.429145 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:40:34.429150 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 10:40:34.429189 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:40:34.429194 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 10:40:34.429200 .  getType..
rdfLoader: 2020/08/14 10:40:34.429214 node.TyName : [Person]
unmarshalRDF2020/08/14 10:40:34.429223 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:40:34.429234 Looping..... 1
rdfLoader: 2020/08/14 10:40:34.429243 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 10:40:34.429248 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 10:40:34.429252 Add to SS . [Honda]
unmarshalRDF2020/08/14 10:40:34.429298 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:40:34.429303 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:40:34.429328 Looping..... 2
grmgr: 2020/08/14 10:40:34.429511 Looping..... 3
grmgr: 2020/08/14 10:40:34.429539 Looping..... 4
grmgr: 2020/08/14 10:40:34.429689 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:40:34.429699 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 10:40:34.429704 Looping..... 0
saveNode: 2020/08/14 10:40:34.429710 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:40:34.429716 read from saveCH channel 2 
grmgr: 2020/08/14 10:40:34.429742 Looping..... 1
SaveRDFNode: xxx 2020/08/14 10:40:34.429753 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.429760 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.429766 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.429771 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.429780 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.429786 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.429792 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:40:34.429796 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:40:34.429804 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017440)}
SaveRDFNode: 2020/08/14 10:40:34.429808 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:40:34.429819 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.429823 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.429829 UID received  : oL4tZo1vRPWk4zAo/6ZDSA==
grmgr: 2020/08/14 10:40:34.430115 Looping..... 2
grmgr: 2020/08/14 10:40:34.430289 Looping..... 3
grmgr: 2020/08/14 10:40:34.430465 Looping..... 4
grmgr: 2020/08/14 10:40:34.430643 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:40:34.430652 Looping..... 0
unmarshalRDF2020/08/14 10:40:34.430666 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:40:34.430677 Looping..... 1
rdfLoader: 2020/08/14 10:40:34.430687 Add to SS . [Bentley]
unmarshalRDF2020/08/14 10:40:34.430721 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:40:34.430732 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:40:34.430743 Looping..... 2
grmgr: 2020/08/14 10:40:34.430824 Looping..... 3
grmgr: 2020/08/14 10:40:34.431005 Looping..... 4
grmgr: 2020/08/14 10:40:34.431182 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:40:34.431192 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 10:40:34.431198 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:40:34.431202 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 10:40:34.431209 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:40:34.431214 read from saveCH channel 3 
grmgr: 2020/08/14 10:40:34.431219 Looping..... 0
grmgr: 2020/08/14 10:40:34.431246 Looping..... 1
grmgr: 2020/08/14 10:40:34.431252 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:40:34.431256 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:40:34.431265 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.431272 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.431279 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.431285 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.431291 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.431297 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.431302 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:40:34.431306 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:40:34.431312 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017920)}
SaveRDFNode: 2020/08/14 10:40:34.431316 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:40:34.431354 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.431359 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.431365 UID received  : +2wdbktMSUa1Pz+5qdCuRA==
DB: 2020/08/14 10:40:34.437753 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.879437ms
DB: 2020/08/14 10:40:34.445886 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 14.488973ms
DB: 2020/08/14 10:40:34.449636 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.501184ms
DB: 2020/08/14 10:40:34.453673 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.990095ms
DB: 2020/08/14 10:40:34.457552 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.843945ms
DB: 2020/08/14 10:40:34.461278 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.687462ms
SaveRDFNode: 2020/08/14 10:40:34.461500 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017920)}
rdfUIDdb: 2020/08/14 10:40:34.461597 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.461606 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.461614 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:34.461651 a: = db.Item{PKey:[]uint8{0xfb, 0x6c, 0x1d, 0x6e, 0x4b, 0x4c, 0x49, 0x46, 0xb5, 0x3f, 0x3f, 0xb9, 0xa9, 0xd0, 0xae, 0x44}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:34.463161 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 25.370623ms
DB: 2020/08/14 10:40:34.465202 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.516523ms
SaveRDFNode: 2020/08/14 10:40:34.465217 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017920)}
rdfUIDdb: 2020/08/14 10:40:34.465223 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.465227 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.465233 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:34.465244 a: = db.Item{PKey:[]uint8{0xfb, 0x6c, 0x1d, 0x6e, 0x4b, 0x4c, 0x49, 0x46, 0xb5, 0x3f, 0x3f, 0xb9, 0xa9, 0xd0, 0xae, 0x44}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:34.466904 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.698722ms
DB: 2020/08/14 10:40:34.468665 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.388728ms
SaveRDFNode: 2020/08/14 10:40:34.468678 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:40:34.468688 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:40:34.468693 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:40:34.468700 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:40:34.468706 read from saveCH channel 4 
grmgr: 2020/08/14 10:40:34.468711 Looping..... 0
grmgr: 2020/08/14 10:40:34.468773 Looping..... 1
grmgr: 2020/08/14 10:40:34.468781 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:40:34.468786 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:40:34.468796 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.468802 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.468810 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.468816 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.468822 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.468828 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.468834 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:40:34.468838 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:40:34.468844 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc00037bf20)}
SaveRDFNode: 2020/08/14 10:40:34.468848 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:40:34.468858 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.468862 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.468868 UID received  : 4gdKD2DzSkuydaepylnu+Q==
DB: 2020/08/14 10:40:34.470424 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.488719ms
DB: 2020/08/14 10:40:34.472389 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.489198ms
DB: 2020/08/14 10:40:34.474105 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.648113ms
SaveRDFNode: 2020/08/14 10:40:34.474119 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 10:40:34.474125 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.474130 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.474136 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:34.474153 a: = db.Item{PKey:[]uint8{0xa0, 0xbe, 0x2d, 0x66, 0x8d, 0x6f, 0x44, 0xf5, 0xa4, 0xe3, 0x30, 0x28, 0xff, 0xa6, 0x43, 0x48}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:34.475865 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.444113ms
DB: 2020/08/14 10:40:34.477675 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.48209ms
SaveRDFNode: 2020/08/14 10:40:34.477891 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 10:40:34.477905 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.477909 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.477915 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:34.477926 a: = db.Item{PKey:[]uint8{0xa0, 0xbe, 0x2d, 0x66, 0x8d, 0x6f, 0x44, 0xf5, 0xa4, 0xe3, 0x30, 0x28, 0xff, 0xa6, 0x43, 0x48}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:34.479371 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.473455ms
DB: 2020/08/14 10:40:34.481646 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.686149ms
SaveRDFNode: 2020/08/14 10:40:34.481658 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:40:34.481667 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:40:34.481673 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:40:34.481678 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 10:40:34.481684 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 10:40:34.481712 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.481720 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.481726 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.481753 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.481761 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.481767 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:34.481773 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:40:34.481777 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:40:34.481784 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000446e40)}
SaveRDFNode: 2020/08/14 10:40:34.481788 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:40:34.481798 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.481802 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.481808 UID received  : XnU92bF7StmWA2fdIBw83A==
grmgr: 2020/08/14 10:40:34.481991 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 10:40:34.482899 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.495342ms
DB: 2020/08/14 10:40:34.485527 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.69287ms
DB: 2020/08/14 10:40:34.486274 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.343732ms
SaveRDFNode: 2020/08/14 10:40:34.486287 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00037bf20)}
rdfUIDdb: 2020/08/14 10:40:34.486293 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.486297 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.486304 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:34.486315 a: = db.Item{PKey:[]uint8{0xe2, 0x7, 0x4a, 0xf, 0x60, 0xf3, 0x4a, 0x4b, 0xb2, 0x75, 0xa7, 0xa9, 0xca, 0x59, 0xee, 0xf9}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:34.489121 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.561855ms
DB: 2020/08/14 10:40:34.489954 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.59851ms
SaveRDFNode: 2020/08/14 10:40:34.489967 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00037bf20)}
rdfUIDdb: 2020/08/14 10:40:34.489972 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.489977 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.489982 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:34.489993 a: = db.Item{PKey:[]uint8{0xe2, 0x7, 0x4a, 0xf, 0x60, 0xf3, 0x4a, 0x4b, 0xb2, 0x75, 0xa7, 0xa9, 0xca, 0x59, 0xee, 0xf9}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:34.492798 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.643689ms
DB: 2020/08/14 10:40:34.493681 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.655301ms
SaveRDFNode: 2020/08/14 10:40:34.500163 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:40:34.500195 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 10:40:34.500204 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.971811ms
DB: 2020/08/14 10:40:34.504551 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.30381ms
SaveRDFNode: 2020/08/14 10:40:34.504576 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000446e40)}
rdfUIDdb: 2020/08/14 10:40:34.504585 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.504589 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.504596 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:34.504610 a: = db.Item{PKey:[]uint8{0x5e, 0x75, 0x3d, 0xd9, 0xb1, 0x7b, 0x4a, 0xd9, 0x96, 0x3, 0x67, 0xdd, 0x20, 0x1c, 0x3c, 0xdc}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:34.508219 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.543625ms
SaveRDFNode: 2020/08/14 10:40:34.508445 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000446e40)}
rdfUIDdb: 2020/08/14 10:40:34.508658 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:34.508665 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:34.508733 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:34.508781 a: = db.Item{PKey:[]uint8{0x5e, 0x75, 0x3d, 0xd9, 0xb1, 0x7b, 0x4a, 0xd9, 0x96, 0x3, 0x67, 0xdd, 0x20, 0x1c, 0x3c, 0xdc}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:34.512958 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.129624ms
SaveRDFNode: 2020/08/14 10:40:34.512975 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 10:40:34.512983 saveNode finished waiting...exiting
grmgr: 2020/08/14 10:40:34.512992 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 10:40:34.513002 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 10:40:34.513007 Looping..... 0
grmgr: 2020/08/14 10:40:34.513033 Looping..... 1
grmgr: 2020/08/14 10:40:34.513217 Looping..... 2
grmgr: 2020/08/14 10:40:34.513394 Looping..... 3
grmgr: 2020/08/14 10:40:34.513571 Looping..... 4
grmgr: 2020/08/14 10:40:34.513749 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:40:34.513759 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:40:34.513764 goroutine about to start 1 
attachNode: 2020/08/14 10:40:34.513771 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 10:40:34.513776 Looping..... 0
grmgr: 2020/08/14 10:40:34.513795 Looping..... 1
grmgr: 2020/08/14 10:40:34.513811 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:40:34.513815 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:40:34.513820 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:40:34.513824 goroutine about to start 2 
attachNode: 2020/08/14 10:40:34.513829 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 10:40:34.513834 Looping..... 0
grmgr: 2020/08/14 10:40:34.514370 Looping..... 1
grmgr: 2020/08/14 10:40:34.514382 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:40:34.514387 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:40:34.516398 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.5074ms
DB: 2020/08/14 10:40:34.518926 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.49409ms
DB: 2020/08/14 10:40:34.521413 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.444529ms
DB: 2020/08/14 10:40:34.524906 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.457151ms
DB: 2020/08/14 10:40:34.528767 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.791918ms
DB: 2020/08/14 10:40:34.530224 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 15.78964ms
DB: 2020/08/14 10:40:34.536670 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.819028ms
AttachNode: main 2020/08/14 10:40:34.536686 FetchForUpdate: for parent    +2wdbktMSUa1Pz+5qdCuRA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:40:34.536692 ** Cache FetchForUpdate Cache Key Value: [+2wdbktMSUa1Pz+5qdCuRA==]   sortk: A#G#:S
FetchNode: 2020/08/14 10:40:34.536700  node: +2wdbktMSUa1Pz+5qdCuRA== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:40:34.536870 FetchForUpdate: for child    oL4tZo1vRPWk4zAo/6ZDSA==
FetchForUpdate: 2020/08/14 10:40:34.536879 ** Cache FetchForUpdate Cache Key Value: [oL4tZo1vRPWk4zAo/6ZDSA==]   sortk: A#
FetchNode: 2020/08/14 10:40:34.536893  node: oL4tZo1vRPWk4zAo/6ZDSA== subKey: A#
DB: 2020/08/14 10:40:34.542150 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.415597ms
FetchForUpdate: 2020/08/14 10:40:34.542223 len(nb): 1
fetchItems: 2020/08/14 10:40:34.542234 +++  Cache FetchItems for sortk A#G#:S UID: [+2wdbktMSUa1Pz+5qdCuRA==] 
FetchNode: 2020/08/14 10:40:34.542239  node: +2wdbktMSUa1Pz+5qdCuRA== subKey: A#G#:S
DB: 2020/08/14 10:40:34.545658 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 8.717536ms
FetchForUpdate: 2020/08/14 10:40:34.545921 len(nb): 7
fetchItems: 2020/08/14 10:40:34.545936 +++  Cache FetchItems for sortk A# UID: [oL4tZo1vRPWk4zAo/6ZDSA==] 
FetchNode: 2020/08/14 10:40:34.545941  node: oL4tZo1vRPWk4zAo/6ZDSA== subKey: A#
DB: 2020/08/14 10:40:34.546532 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 16.273033ms
DB: 2020/08/14 10:40:34.549138 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.868655ms
DB: 2020/08/14 10:40:34.549710 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.73721ms
DB: 2020/08/14 10:40:34.555804 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.121967ms
DB: 2020/08/14 10:40:34.562613 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.372056ms
DB: 2020/08/14 10:40:34.564604 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 15.970986ms
DB: 2020/08/14 10:40:34.568233 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.59092ms
DB: 2020/08/14 10:40:34.571985 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.66279ms
DB: 2020/08/14 10:40:34.580524 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 16.710577ms
DB: 2020/08/14 10:40:34.581974 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 9.144844ms
AttachNode: main 2020/08/14 10:40:34.581990 FetchForUpdate: for parent    4gdKD2DzSkuydaepylnu+Q==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:40:34.581996 ** Cache FetchForUpdate Cache Key Value: [4gdKD2DzSkuydaepylnu+Q==]   sortk: A#G#:S
FetchNode: 2020/08/14 10:40:34.582003  node: 4gdKD2DzSkuydaepylnu+Q== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:40:34.582228 FetchForUpdate: for child    oL4tZo1vRPWk4zAo/6ZDSA==
FetchForUpdate: 2020/08/14 10:40:34.582238 ** Cache FetchForUpdate Cache Key Value: [oL4tZo1vRPWk4zAo/6ZDSA==]   sortk: A#
DB: 2020/08/14 10:40:34.584947 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.91036ms
FetchForUpdate: 2020/08/14 10:40:34.585016 len(nb): 1
fetchItems: 2020/08/14 10:40:34.585025 +++  Cache FetchItems for sortk A#G#:S UID: [4gdKD2DzSkuydaepylnu+Q==] 
FetchNode: 2020/08/14 10:40:34.585030  node: 4gdKD2DzSkuydaepylnu+Q== subKey: A#G#:S
DB: 2020/08/14 10:40:34.587111 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.222135ms
DB: 2020/08/14 10:40:34.588601 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.523265ms
DB: 2020/08/14 10:40:34.592570 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.734106ms
DB: 2020/08/14 10:40:34.593588 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.147544ms
DB: 2020/08/14 10:40:34.597484 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.560033ms
DB: 2020/08/14 10:40:34.601695 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.871141ms
DB: 2020/08/14 10:40:34.608062 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.035557ms
DB: 2020/08/14 10:40:34.612006 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.611069ms
DB: 2020/08/14 10:40:34.616269 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.923612ms
DB: 2020/08/14 10:40:34.620286 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.808449ms
Cache: 2020/08/14 10:40:34.620301 In SetUpredAvailable: pUid, tUID:  +2wdbktMSUa1Pz+5qdCuRA== +2wdbktMSUa1Pz+5qdCuRA== A#G#:S
Cache: 2020/08/14 10:40:34.620307 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:40:34.624098 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.753298ms
Unlock: 2020/08/14 10:40:34.624148 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:40:34.624153 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 10:40:34.624365 +++  Cache FetchItems for sortk A# UID: [oL4tZo1vRPWk4zAo/6ZDSA==] 
FetchNode: 2020/08/14 10:40:34.624425  node: oL4tZo1vRPWk4zAo/6ZDSA== subKey: A#
DB: 2020/08/14 10:40:34.627460 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.985195ms
DB: 2020/08/14 10:40:34.628310 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.09854ms
grmgr: 2020/08/14 10:40:34.628328 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 10:40:34.628334 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:40:34.628350 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:40:34.628355 goroutine about to start 3 
attachNode: 2020/08/14 10:40:34.628361 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 10:40:34.628367 Looping..... 0
grmgr: 2020/08/14 10:40:34.628414 Looping..... 1
grmgr: 2020/08/14 10:40:34.628422 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:40:34.628426 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:40:34.634091 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.687192ms
DB: 2020/08/14 10:40:34.636955 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.330696ms
DB: 2020/08/14 10:40:34.637301 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.170636ms
DB: 2020/08/14 10:40:34.640520 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.180988ms
DB: 2020/08/14 10:40:34.640751 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.743746ms
DB: 2020/08/14 10:40:34.643652 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.096772ms
DB: 2020/08/14 10:40:34.644501 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.646982ms
DB: 2020/08/14 10:40:34.648066 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.363786ms
DB: 2020/08/14 10:40:34.651501 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.641179ms
DB: 2020/08/14 10:40:34.655789 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.945048ms
DB: 2020/08/14 10:40:34.656492 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.224354ms
AttachNode: main 2020/08/14 10:40:34.656508 FetchForUpdate: for parent    oL4tZo1vRPWk4zAo/6ZDSA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:40:34.656514 ** Cache FetchForUpdate Cache Key Value: [oL4tZo1vRPWk4zAo/6ZDSA==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 10:40:34.656529 FetchForUpdate: for child    +2wdbktMSUa1Pz+5qdCuRA==
FetchForUpdate: 2020/08/14 10:40:34.656540 ** Cache FetchForUpdate Cache Key Value: [+2wdbktMSUa1Pz+5qdCuRA==]   sortk: A#
fetchItems: 2020/08/14 10:40:34.656545 +++  Cache FetchItems for sortk A# UID: [+2wdbktMSUa1Pz+5qdCuRA==] 
FetchNode: 2020/08/14 10:40:34.656558  node: +2wdbktMSUa1Pz+5qdCuRA== subKey: A#
DB: 2020/08/14 10:40:34.659992 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.388156ms
fetchItems: 2020/08/14 10:40:34.660183 +++  Cache FetchItems for sortk A# UID: [+2wdbktMSUa1Pz+5qdCuRA==] 
FetchNode: 2020/08/14 10:40:34.660194  node: +2wdbktMSUa1Pz+5qdCuRA== subKey: A#
DB: 2020/08/14 10:40:34.660508 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.318604ms
DB: 2020/08/14 10:40:34.663984 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.759225ms
DB: 2020/08/14 10:40:34.667967 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.773288ms
DB: 2020/08/14 10:40:34.671534 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.498001ms
DB: 2020/08/14 10:40:34.675444 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.815835ms
DB: 2020/08/14 10:40:34.679155 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.650758ms
Cache: 2020/08/14 10:40:34.679170 In SetUpredAvailable: pUid, tUID:  4gdKD2DzSkuydaepylnu+Q== 4gdKD2DzSkuydaepylnu+Q== A#G#:S
Cache: 2020/08/14 10:40:34.679185 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:40:34.682912 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.690652ms
Unlock: 2020/08/14 10:40:34.682923 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:40:34.682928 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 10:40:34.683180 +++  Cache FetchItems for sortk A#G#:S UID: [oL4tZo1vRPWk4zAo/6ZDSA==] 
FetchNode: 2020/08/14 10:40:34.683190  node: oL4tZo1vRPWk4zAo/6ZDSA== subKey: A#G#:S
DB: 2020/08/14 10:40:34.686726 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.469567ms
DB: 2020/08/14 10:40:34.687384 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.378915ms
grmgr: 2020/08/14 10:40:34.687403 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 10:40:34.687423 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:40:34.687430 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:40:34.687457 goroutine about to start 4 
attachNode: 2020/08/14 10:40:34.687466 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 10:40:34.687472 Looping..... 0
grmgr: 2020/08/14 10:40:34.687498 Looping..... 1
grmgr: 2020/08/14 10:40:34.687505 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:40:34.687510 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:40:34.690087 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.434428ms
DB: 2020/08/14 10:40:34.691666 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.682674ms
DB: 2020/08/14 10:40:34.692855 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.729087ms
DB: 2020/08/14 10:40:34.696463 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.452997ms
DB: 2020/08/14 10:40:34.698256 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.220387ms
DB: 2020/08/14 10:40:34.699071 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.573876ms
DB: 2020/08/14 10:40:34.702133 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.683418ms
DB: 2020/08/14 10:40:34.703152 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.013852ms
DB: 2020/08/14 10:40:34.706397 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.831061ms
DB: 2020/08/14 10:40:34.707445 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.077804ms
AttachNode: main 2020/08/14 10:40:34.707459 FetchForUpdate: for parent    4gdKD2DzSkuydaepylnu+Q==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:40:34.707464 ** Cache FetchForUpdate Cache Key Value: [4gdKD2DzSkuydaepylnu+Q==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:40:34.707480 +++  Cache FetchItems for sortk A#G#:S UID: [4gdKD2DzSkuydaepylnu+Q==] 
FetchNode: 2020/08/14 10:40:34.707485  node: 4gdKD2DzSkuydaepylnu+Q== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:40:34.707704 FetchForUpdate: for child    +2wdbktMSUa1Pz+5qdCuRA==
FetchForUpdate: 2020/08/14 10:40:34.707719 ** Cache FetchForUpdate Cache Key Value: [+2wdbktMSUa1Pz+5qdCuRA==]   sortk: A#
DB: 2020/08/14 10:40:34.711507 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.990804ms
DB: 2020/08/14 10:40:34.713068 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.343218ms
DB: 2020/08/14 10:40:34.715760 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.915959ms
DB: 2020/08/14 10:40:34.717143 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.580004ms
DB: 2020/08/14 10:40:34.719398 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.595492ms
DB: 2020/08/14 10:40:34.719420 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.595492ms
DB: 2020/08/14 10:40:34.721642 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.92787ms
DB: 2020/08/14 10:40:34.723037 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.555695ms
DB: 2020/08/14 10:40:34.723055 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.555695ms
DB: 2020/08/14 10:40:34.727262 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.036023ms
DB: 2020/08/14 10:40:34.728744 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.765371ms
DB: 2020/08/14 10:40:34.731268 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.772229ms
DB: 2020/08/14 10:40:34.737343 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 8.076899ms
DB: 2020/08/14 10:40:34.742108 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.030231ms
DB: 2020/08/14 10:40:34.745669 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.502113ms
Cache: 2020/08/14 10:40:34.745697 In SetUpredAvailable: pUid, tUID:  oL4tZo1vRPWk4zAo/6ZDSA== oL4tZo1vRPWk4zAo/6ZDSA== A#G#:S
Cache: 2020/08/14 10:40:34.745705 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:40:34.749487 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.744235ms
Unlock: 2020/08/14 10:40:34.749503 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:40:34.749509 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 10:40:34.749739 +++  Cache FetchItems for sortk A# UID: [+2wdbktMSUa1Pz+5qdCuRA==] 
FetchNode: 2020/08/14 10:40:34.749762  node: +2wdbktMSUa1Pz+5qdCuRA== subKey: A#
DB: 2020/08/14 10:40:34.752964 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.145601ms
DB: 2020/08/14 10:40:34.754364 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.790656ms
grmgr: 2020/08/14 10:40:34.754380 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 10:40:34.754386 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:40:34.754411 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:40:34.754417 goroutine about to start 5 
attachNode: 2020/08/14 10:40:34.754423 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 10:40:34.754429 Looping..... 0
grmgr: 2020/08/14 10:40:34.754754 Looping..... 1
grmgr: 2020/08/14 10:40:34.754770 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:40:34.754775 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:40:34.757627 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.742984ms
DB: 2020/08/14 10:40:34.760215 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.551431ms
DB: 2020/08/14 10:40:34.760573 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.473619ms
DB: 2020/08/14 10:40:34.762872 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.522328ms
DB: 2020/08/14 10:40:34.765110 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.34848ms
DB: 2020/08/14 10:40:34.766314 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.399558ms
DB: 2020/08/14 10:40:34.769555 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.010961ms
DB: 2020/08/14 10:40:34.770556 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.191074ms
DB: 2020/08/14 10:40:34.775331 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.589987ms
AttachNode: main 2020/08/14 10:40:34.775351 FetchForUpdate: for parent    oL4tZo1vRPWk4zAo/6ZDSA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:40:34.775357 ** Cache FetchForUpdate Cache Key Value: [oL4tZo1vRPWk4zAo/6ZDSA==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:40:34.775364 +++  Cache FetchItems for sortk A#G#:S UID: [oL4tZo1vRPWk4zAo/6ZDSA==] 
FetchNode: 2020/08/14 10:40:34.775369  node: oL4tZo1vRPWk4zAo/6ZDSA== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:40:34.775567 FetchForUpdate: for child    4gdKD2DzSkuydaepylnu+Q==
FetchForUpdate: 2020/08/14 10:40:34.775688 ** Cache FetchForUpdate Cache Key Value: [4gdKD2DzSkuydaepylnu+Q==]   sortk: A#
DB: 2020/08/14 10:40:34.776611 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.513599ms
DB: 2020/08/14 10:40:34.779030 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.62264ms
DB: 2020/08/14 10:40:34.780718 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.679088ms
DB: 2020/08/14 10:40:34.783521 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.854441ms
DB: 2020/08/14 10:40:34.785326 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.029391ms
DB: 2020/08/14 10:40:34.787092 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.537449ms
DB: 2020/08/14 10:40:34.787114 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.537449ms
DB: 2020/08/14 10:40:34.791301 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.15342ms
DB: 2020/08/14 10:40:34.791325 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.15342ms
DB: 2020/08/14 10:40:34.792310 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.149521ms
DB: 2020/08/14 10:40:34.795767 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.250469ms
DB: 2020/08/14 10:40:34.796947 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.271961ms
DB: 2020/08/14 10:40:34.799727 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.776783ms
DB: 2020/08/14 10:40:34.801129 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.840569ms
DB: 2020/08/14 10:40:34.805001 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.655244ms
Cache: 2020/08/14 10:40:34.805029 In SetUpredAvailable: pUid, tUID:  4gdKD2DzSkuydaepylnu+Q== WClzcMWQQ4qP73UKZEGAjw== A#G#:S
Cache: 2020/08/14 10:40:34.805036 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:40:34.808710 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.605415ms
Unlock: 2020/08/14 10:40:34.808727 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:40:34.808734 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 10:40:34.808999 +++  Cache FetchItems for sortk A# UID: [4gdKD2DzSkuydaepylnu+Q==] 
FetchNode: 2020/08/14 10:40:34.809022  node: 4gdKD2DzSkuydaepylnu+Q== subKey: A#
DB: 2020/08/14 10:40:34.813136 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.060074ms
DB: 2020/08/14 10:40:34.815294 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.465773ms
grmgr: 2020/08/14 10:40:34.815332 EndCh received for nodeAttach. rCnt = 1 
grmgr: 2020/08/14 10:40:34.815339 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:40:34.815346 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:40:34.815351 goroutine about to start 6 
rdfLoader: 2020/08/14 10:40:34.815357 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 10:40:34.815606 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 10:40:34.818019 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.552329ms
DB: 2020/08/14 10:40:34.821396 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.474812ms
DB: 2020/08/14 10:40:34.821961 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.910194ms
DB: 2020/08/14 10:40:34.825351 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.726099ms
DB: 2020/08/14 10:40:34.826104 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.006982ms
DB: 2020/08/14 10:40:34.828598 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.443351ms
DB: 2020/08/14 10:40:34.829788 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.968575ms
DB: 2020/08/14 10:40:34.832273 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.601627ms
DB: 2020/08/14 10:40:34.836338 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.871199ms
AttachNode: main 2020/08/14 10:40:34.836357 FetchForUpdate: for parent    +2wdbktMSUa1Pz+5qdCuRA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:40:34.836362 ** Cache FetchForUpdate Cache Key Value: [+2wdbktMSUa1Pz+5qdCuRA==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:40:34.836368 +++  Cache FetchItems for sortk A#G#:S UID: [+2wdbktMSUa1Pz+5qdCuRA==] 
FetchNode: 2020/08/14 10:40:34.836373  node: +2wdbktMSUa1Pz+5qdCuRA== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:40:34.837372 FetchForUpdate: for child    4gdKD2DzSkuydaepylnu+Q==
FetchForUpdate: 2020/08/14 10:40:34.837384 ** Cache FetchForUpdate Cache Key Value: [4gdKD2DzSkuydaepylnu+Q==]   sortk: A#
DB: 2020/08/14 10:40:34.838107 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.733839ms
DB: 2020/08/14 10:40:34.840500 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.094035ms
DB: 2020/08/14 10:40:34.843653 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.589458ms
DB: 2020/08/14 10:40:34.845216 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.145168ms
DB: 2020/08/14 10:40:34.848193 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.771629ms
DB: 2020/08/14 10:40:34.849106 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.856452ms
DB: 2020/08/14 10:40:34.849124 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.856452ms
DB: 2020/08/14 10:40:34.852642 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.486233ms
DB: 2020/08/14 10:40:34.852671 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.486233ms
DB: 2020/08/14 10:40:34.855127 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.266512ms
DB: 2020/08/14 10:40:34.856903 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.006974ms
DB: 2020/08/14 10:40:34.859371 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.619115ms
DB: 2020/08/14 10:40:34.860796 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.678851ms
DB: 2020/08/14 10:40:34.863670 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.63051ms
DB: 2020/08/14 10:40:34.867913 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.883288ms
Cache: 2020/08/14 10:40:34.867927 In SetUpredAvailable: pUid, tUID:  oL4tZo1vRPWk4zAo/6ZDSA== ys371edpQiOeTvuakf1IcQ== A#G#:S
Cache: 2020/08/14 10:40:34.867933 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:40:34.871841 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.872233ms
Unlock: 2020/08/14 10:40:34.872012 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:40:34.872024 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 10:40:34.872326 +++  Cache FetchItems for sortk A# UID: [4gdKD2DzSkuydaepylnu+Q==] 
FetchNode: 2020/08/14 10:40:34.872363  node: 4gdKD2DzSkuydaepylnu+Q== subKey: A#
DB: 2020/08/14 10:40:34.875593 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.177173ms
DB: 2020/08/14 10:40:34.878471 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.312721ms
grmgr: 2020/08/14 10:40:34.878488 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 10:40:34.884384 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.249637ms
DB: 2020/08/14 10:40:34.888353 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.770483ms
DB: 2020/08/14 10:40:34.892869 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.782344ms
DB: 2020/08/14 10:40:34.898895 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.958453ms
DB: 2020/08/14 10:40:34.902367 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.413257ms
DB: 2020/08/14 10:40:34.906409 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.969397ms
DB: 2020/08/14 10:40:34.912551 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.074894ms
DB: 2020/08/14 10:40:34.916350 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.435851ms
DB: 2020/08/14 10:40:34.920261 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.558559ms
DB: 2020/08/14 10:40:34.923967 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.495309ms
Cache: 2020/08/14 10:40:34.923984 In SetUpredAvailable: pUid, tUID:  +2wdbktMSUa1Pz+5qdCuRA== UViuWtCpQx+3+XE/Kk1ikA== A#G#:S
Cache: 2020/08/14 10:40:34.923991 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:40:34.927521 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.49149ms
Unlock: 2020/08/14 10:40:34.927560 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:40:34.927566 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 10:40:34.931694 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.058231ms
rdfLoader: 2020/08/14 10:40:34.931715 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 10:40:34.931722 cancel contexts
rdfLoader: 2020/08/14 10:40:34.931728 wait for autonomous goroutines to end
errlog: 2020/08/14 10:40:34.931734 Powering down...
grmgr: 2020/08/14 10:40:34.931741 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 10:40:34.931746 Powering down...
rdfuuid: 2020/08/14 10:40:34.931752 Powering down...
rdfLoader: 2020/08/14 10:40:34.931758 loader exists.....
DB:2020/08/14 10:40:55 log.go:18: ===============================================================================
errlog: 2020/08/14 10:40:55.386779 Powering on...
rdfLoader: 2020/08/14 10:40:55.387143 saveNode started......
rdfLoader: 2020/08/14 10:40:55.387157 define saveNode limiter......
rdfuuid: 2020/08/14 10:40:55.387166 Powering on...
grmgr: 2020/08/14 10:40:55.387184 Powering on...
rdfLoader: 2020/08/14 10:40:55.387194  principle goroutines started 
RDFreader: 2020/08/14 10:40:55.387221 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:40:55.387236 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 10:40:55.387243 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 10:40:55.387253 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 10:40:55.387259 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 10:40:55.387264 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 10:40:55.387269 spo read:      
RDFreader: 2020/08/14 10:40:55.387274 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 10:40:55.387279 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 10:40:55.387284 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 10:40:55.387289 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 10:40:55.387294 spo read:      
RDFreader: 2020/08/14 10:40:55.387299 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 10:40:55.387304 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 10:40:55.387309 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 10:40:55.387314 spo read:  b  Age  "58"
RDFreader: 2020/08/14 10:40:55.387319 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 10:40:55.387324 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 10:40:55.387330 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 10:40:55.387334 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 10:40:55.387339 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 10:40:55.387343 spo read:      
RDFreader: 2020/08/14 10:40:55.387348 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 10:40:55.387352 Send node batch on channel verifyCh
RDFreader: 2020/08/14 10:40:55.387357 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 10:40:55.387361 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 10:40:55.387366 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 10:40:55.387376 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 10:40:55.387381 spo read:  c  Age  "67"
RDFreader: 2020/08/14 10:40:55.387386 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 10:40:55.387391 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 10:40:55.387396 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 10:40:55.387401 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 10:40:55.387408 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 10:40:55.387413 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 10:40:55.387418 spo read:      
RDFreader: 2020/08/14 10:40:55.387423 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 10:40:55.387427 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 10:40:55.387433 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 10:40:55.387438 spo read:  d  Age  "36"
RDFreader: 2020/08/14 10:40:55.387443 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 10:40:55.387449 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 10:40:55.387453 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 10:40:55.387463 close verify channel
rdfLoader: 2020/08/14 10:40:55.387467 wait for goroutines to end
rdfLoader: 2020/08/14 10:40:55.387472 verify started....
rdfLoader: 2020/08/14 10:40:55.387477 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:40:55.387481 .  getType..
rdfLoader: 2020/08/14 10:40:55.387485 node.TyName : [Person]
DB: 2020/08/14 10:40:55.457479 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 69.924032ms
grmgr: 2020/08/14 10:40:55.457995 Looping..... 0
grmgr: 2020/08/14 10:40:55.459710 Looping..... 1
grmgr: 2020/08/14 10:40:55.459899 Looping..... 2
grmgr: 2020/08/14 10:40:55.460065 Looping..... 3
grmgr: 2020/08/14 10:40:55.460274 Looping..... 4
grmgr: 2020/08/14 10:40:55.460302 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:40:55.460322 .  getType..
rdfLoader: 2020/08/14 10:40:55.460339 node.TyName : [Person]
grmgr: 2020/08/14 10:40:55.460345 Looping..... 0
unmarshalRDF2020/08/14 10:40:55.460358 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:40:55.460368 Looping..... 1
grmgr: 2020/08/14 10:40:55.460374 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:40:55.460378 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 10:40:55.460386 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 10:40:55.460390 .  getType..
rdfLoader: 2020/08/14 10:40:55.460394 node.TyName : [Person]
grmgr: 2020/08/14 10:40:55.460399 Looping..... 0
rdfLoader: 2020/08/14 10:40:55.460409 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:40:55.460414 Add to SS . [Alfa]
unmarshalRDF2020/08/14 10:40:55.460476 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:40:55.460483 Exit  unmarshalRDF. 
saveNode: 2020/08/14 10:40:55.460489 read from saveCH channel 1 
unmarshalRDF2020/08/14 10:40:55.460498 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:40:55.460525 Looping..... 1
grmgr: 2020/08/14 10:40:55.460531 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 10:40:55.460535 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:40:55.460540 Looping..... 0
rdfLoader: 2020/08/14 10:40:55.460548 Add to SS . [Honda]
rdfLoader: 2020/08/14 10:40:55.460553 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 10:40:55.460591 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:40:55.460596 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 10:40:55.460602 .  getType..
rdfLoader: 2020/08/14 10:40:55.460606 node.TyName : [Person]
unmarshalRDF2020/08/14 10:40:55.460615 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:40:55.460625 Looping..... 1
rdfLoader: 2020/08/14 10:40:55.460646 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 10:40:55.460651 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 10:40:55.460668 Add to SS . [Honda]
unmarshalRDF2020/08/14 10:40:55.460729 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:40:55.460746 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:40:55.460775 Looping..... 2
grmgr: 2020/08/14 10:40:55.460967 Looping..... 3
grmgr: 2020/08/14 10:40:55.461158 Looping..... 4
grmgr: 2020/08/14 10:40:55.461336 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:40:55.461346 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 10:40:55.461351 Looping..... 0
saveNode: 2020/08/14 10:40:55.461400 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:40:55.461410 read from saveCH channel 2 
grmgr: 2020/08/14 10:40:55.461439 Looping..... 1
SaveRDFNode: xxx 2020/08/14 10:40:55.461451 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.461458 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.461465 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.461471 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.461488 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.461495 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.461501 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:40:55.461505 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:40:55.461513 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000016a80)}
SaveRDFNode: 2020/08/14 10:40:55.461517 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:40:55.461528 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.461533 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.461539 UID received  : xgEpXaRBQv2T8M7H4P6lQA==
grmgr: 2020/08/14 10:40:55.461774 Looping..... 2
grmgr: 2020/08/14 10:40:55.461808 Looping..... 3
grmgr: 2020/08/14 10:40:55.461954 Looping..... 4
grmgr: 2020/08/14 10:40:55.462130 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 10:40:55.462139 Looping..... 0
unmarshalRDF2020/08/14 10:40:55.462153 Entered unmarshalRDF. 
grmgr: 2020/08/14 10:40:55.462163 Looping..... 1
rdfLoader: 2020/08/14 10:40:55.462172 Add to SS . [Bentley]
unmarshalRDF2020/08/14 10:40:55.462218 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 10:40:55.462223 Exit  unmarshalRDF. 
grmgr: 2020/08/14 10:40:55.462233 Looping..... 2
grmgr: 2020/08/14 10:40:55.462312 Looping..... 3
grmgr: 2020/08/14 10:40:55.462493 Looping..... 4
grmgr: 2020/08/14 10:40:55.462670 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 10:40:55.462680 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 10:40:55.462691 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 10:40:55.462696 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 10:40:55.462703 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:40:55.462709 read from saveCH channel 3 
grmgr: 2020/08/14 10:40:55.462714 Looping..... 0
grmgr: 2020/08/14 10:40:55.462742 Looping..... 1
grmgr: 2020/08/14 10:40:55.462747 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:40:55.462752 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:40:55.462761 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.462767 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.462774 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.462780 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.462786 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.462792 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.462798 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:40:55.462802 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:40:55.462808 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017440)}
SaveRDFNode: 2020/08/14 10:40:55.462829 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:40:55.462838 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.462842 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.462848 UID received  : GQlHvI40RO6eZ0F5bIcF5Q==
DB: 2020/08/14 10:40:55.469127 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.536222ms
DB: 2020/08/14 10:40:55.475327 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 12.431454ms
DB: 2020/08/14 10:40:55.478834 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.265097ms
DB: 2020/08/14 10:40:55.482057 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.185093ms
DB: 2020/08/14 10:40:55.485348 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.257991ms
DB: 2020/08/14 10:40:55.488071 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 18.907599ms
DB: 2020/08/14 10:40:55.488566 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.18467ms
SaveRDFNode: 2020/08/14 10:40:55.488582 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 10:40:55.488589 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.488594 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.488600 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:55.488615 a: = db.Item{PKey:[]uint8{0x19, 0x9, 0x47, 0xbc, 0x8e, 0x34, 0x44, 0xee, 0x9e, 0x67, 0x41, 0x79, 0x6c, 0x87, 0x5, 0xe5}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:55.491654 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.536409ms
DB: 2020/08/14 10:40:55.492183 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.506376ms
SaveRDFNode: 2020/08/14 10:40:55.492199 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 10:40:55.492215 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.492219 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.492225 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:55.492256 a: = db.Item{PKey:[]uint8{0x19, 0x9, 0x47, 0xbc, 0x8e, 0x34, 0x44, 0xee, 0x9e, 0x67, 0x41, 0x79, 0x6c, 0x87, 0x5, 0xe5}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:55.495292 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.349157ms
DB: 2020/08/14 10:40:55.495576 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.288032ms
SaveRDFNode: 2020/08/14 10:40:55.495587 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:40:55.495597 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:40:55.495602 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:40:55.495608 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 10:40:55.495614 read from saveCH channel 4 
grmgr: 2020/08/14 10:40:55.495619 Looping..... 0
grmgr: 2020/08/14 10:40:55.495657 Looping..... 1
grmgr: 2020/08/14 10:40:55.495664 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 10:40:55.495668 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 10:40:55.495677 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.495683 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.495691 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.495697 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.495715 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.495721 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.495727 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:40:55.495731 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:40:55.495737 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000381d40)}
SaveRDFNode: 2020/08/14 10:40:55.495742 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:40:55.495751 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.495755 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.495762 UID received  : jvk2GmDYQIa945CZvZyIaw==
DB: 2020/08/14 10:40:55.498761 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.425352ms
SaveRDFNode: 2020/08/14 10:40:55.498789 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016a80)}
rdfUIDdb: 2020/08/14 10:40:55.498802 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.498811 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.498822 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:55.498846 a: = db.Item{PKey:[]uint8{0xc6, 0x1, 0x29, 0x5d, 0xa4, 0x41, 0x42, 0xfd, 0x93, 0xf0, 0xce, 0xc7, 0xe0, 0xfe, 0xa5, 0x40}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:55.499195 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.405183ms
DB: 2020/08/14 10:40:55.502311 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.083878ms
DB: 2020/08/14 10:40:55.502766 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.87302ms
SaveRDFNode: 2020/08/14 10:40:55.502779 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016a80)}
rdfUIDdb: 2020/08/14 10:40:55.502791 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.502795 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.502813 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:55.502823 a: = db.Item{PKey:[]uint8{0xc6, 0x1, 0x29, 0x5d, 0xa4, 0x41, 0x42, 0xfd, 0x93, 0xf0, 0xce, 0xc7, 0xe0, 0xfe, 0xa5, 0x40}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:55.505440 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.095832ms
DB: 2020/08/14 10:40:55.506499 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.629921ms
SaveRDFNode: 2020/08/14 10:40:55.506510 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:40:55.506518 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 10:40:55.506523 Send ack to waiting saveNode...
saveNode: 2020/08/14 10:40:55.506528 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 10:40:55.506533 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 10:40:55.506555 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.506561 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.506567 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.506574 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.506579 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.506607 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 10:40:55.506615 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 10:40:55.506619 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 10:40:55.506625 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000236a80)}
SaveRDFNode: 2020/08/14 10:40:55.506629 Waiting for UID ......................
rdfUIDdb: 2020/08/14 10:40:55.506637 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.506641 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.506647 UID received  : pnB8ww8dQbqe153isCCcog==
grmgr: 2020/08/14 10:40:55.506865 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 10:40:55.508707 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.218422ms
DB: 2020/08/14 10:40:55.510201 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.528009ms
DB: 2020/08/14 10:40:55.512168 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.257748ms
SaveRDFNode: 2020/08/14 10:40:55.512182 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000381d40)}
rdfUIDdb: 2020/08/14 10:40:55.512188 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.512191 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.512197 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:55.512208 a: = db.Item{PKey:[]uint8{0x8e, 0xf9, 0x36, 0x1a, 0x60, 0xd8, 0x40, 0x86, 0xbd, 0xe3, 0x90, 0x99, 0xbd, 0x9c, 0x88, 0x6b}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:55.513696 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.45081ms
DB: 2020/08/14 10:40:55.515392 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.155697ms
SaveRDFNode: 2020/08/14 10:40:55.515406 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000381d40)}
rdfUIDdb: 2020/08/14 10:40:55.515418 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.515423 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.515428 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:55.515440 a: = db.Item{PKey:[]uint8{0x8e, 0xf9, 0x36, 0x1a, 0x60, 0xd8, 0x40, 0x86, 0xbd, 0xe3, 0x90, 0x99, 0xbd, 0x9c, 0x88, 0x6b}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:55.517548 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.772117ms
DB: 2020/08/14 10:40:55.518651 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.180048ms
SaveRDFNode: 2020/08/14 10:40:55.518662 Returned.+++++++++++ No error
grmgr: 2020/08/14 10:40:55.518669 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 10:40:55.521270 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.684103ms
DB: 2020/08/14 10:40:55.524362 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.060228ms
SaveRDFNode: 2020/08/14 10:40:55.524555 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000236a80)}
rdfUIDdb: 2020/08/14 10:40:55.524568 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.524573 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.524578 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:55.524589 a: = db.Item{PKey:[]uint8{0xa6, 0x70, 0x7c, 0xc3, 0xf, 0x1d, 0x41, 0xba, 0x9e, 0xd7, 0x9d, 0xe2, 0xb0, 0x20, 0x9c, 0xa2}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:55.527821 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.198692ms
SaveRDFNode: 2020/08/14 10:40:55.527834 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000236a80)}
rdfUIDdb: 2020/08/14 10:40:55.527840 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 10:40:55.527844 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 10:40:55.527849 Received UID: X18=
SaveRDFNode: 2020/08/14 10:40:55.527860 a: = db.Item{PKey:[]uint8{0xa6, 0x70, 0x7c, 0xc3, 0xf, 0x1d, 0x41, 0xba, 0x9e, 0xd7, 0x9d, 0xe2, 0xb0, 0x20, 0x9c, 0xa2}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 10:40:55.531120 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.232317ms
SaveRDFNode: 2020/08/14 10:40:55.531130 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 10:40:55.531136 saveNode finished waiting...exiting
grmgr: 2020/08/14 10:40:55.531142 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 10:40:55.531150 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 10:40:55.531155 Looping..... 0
grmgr: 2020/08/14 10:40:55.531171 Looping..... 1
grmgr: 2020/08/14 10:40:55.531252 Looping..... 2
grmgr: 2020/08/14 10:40:55.531442 Looping..... 3
grmgr: 2020/08/14 10:40:55.531626 Looping..... 4
grmgr: 2020/08/14 10:40:55.531804 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:40:55.531812 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:40:55.531817 goroutine about to start 1 
attachNode: 2020/08/14 10:40:55.531823 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 10:40:55.531828 Looping..... 0
grmgr: 2020/08/14 10:40:55.531846 Looping..... 1
grmgr: 2020/08/14 10:40:55.531851 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:40:55.531868 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:40:55.531872 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:40:55.531876 goroutine about to start 2 
attachNode: 2020/08/14 10:40:55.531880 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 10:40:55.531884 Looping..... 0
grmgr: 2020/08/14 10:40:55.532786 Looping..... 1
grmgr: 2020/08/14 10:40:55.532800 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:40:55.532805 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 10:40:55.532810 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:40:55.532815 goroutine about to start 3 
attachNode: 2020/08/14 10:40:55.532820 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 10:40:55.532826 Looping..... 0
grmgr: 2020/08/14 10:40:55.533399 Looping..... 1
grmgr: 2020/08/14 10:40:55.533418 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:40:55.533423 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:40:55.534378 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.43141ms
DB: 2020/08/14 10:40:55.536761 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.285883ms
DB: 2020/08/14 10:40:55.543074 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 8.662371ms
DB: 2020/08/14 10:40:55.547013 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.461258ms
DB: 2020/08/14 10:40:55.549872 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 16.987519ms
DB: 2020/08/14 10:40:55.552578 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.672911ms
DB: 2020/08/14 10:40:55.556006 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.08091ms
DB: 2020/08/14 10:40:55.558699 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.64965ms
DB: 2020/08/14 10:40:55.559036 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 22.239374ms
DB: 2020/08/14 10:40:55.561331 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 14.240682ms
DB: 2020/08/14 10:40:55.563016 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.94227ms
DB: 2020/08/14 10:40:55.563752 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.982102ms
DB: 2020/08/14 10:40:55.565408 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.360319ms
DB: 2020/08/14 10:40:55.566371 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.98276ms
DB: 2020/08/14 10:40:55.568958 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.445287ms
DB: 2020/08/14 10:40:55.573611 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.721829ms
AttachNode: main 2020/08/14 10:40:55.573641 FetchForUpdate: for parent    jvk2GmDYQIa945CZvZyIaw==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:40:55.573652 ** Cache FetchForUpdate Cache Key Value: [jvk2GmDYQIa945CZvZyIaw==]   sortk: A#G#:S
FetchNode: 2020/08/14 10:40:55.573666  node: jvk2GmDYQIa945CZvZyIaw== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:40:55.573882 FetchForUpdate: for child    xgEpXaRBQv2T8M7H4P6lQA==
FetchForUpdate: 2020/08/14 10:40:55.573908 ** Cache FetchForUpdate Cache Key Value: [xgEpXaRBQv2T8M7H4P6lQA==]   sortk: A#
FetchNode: 2020/08/14 10:40:55.573939  node: xgEpXaRBQv2T8M7H4P6lQA== subKey: A#
DB: 2020/08/14 10:40:55.574219 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.972412ms
AttachNode: main 2020/08/14 10:40:55.574231 FetchForUpdate: for parent    GQlHvI40RO6eZ0F5bIcF5Q==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:40:55.574236 ** Cache FetchForUpdate Cache Key Value: [GQlHvI40RO6eZ0F5bIcF5Q==]   sortk: A#G#:S
FetchNode: 2020/08/14 10:40:55.574270  node: GQlHvI40RO6eZ0F5bIcF5Q== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:40:55.574448 FetchForUpdate: for child    xgEpXaRBQv2T8M7H4P6lQA==
FetchForUpdate: 2020/08/14 10:40:55.574459 ** Cache FetchForUpdate Cache Key Value: [xgEpXaRBQv2T8M7H4P6lQA==]   sortk: A#
DB: 2020/08/14 10:40:55.576551 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.783008ms
AttachNode: main 2020/08/14 10:40:55.576621 FetchForUpdate: for parent    xgEpXaRBQv2T8M7H4P6lQA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:40:55.576633 ** Cache FetchForUpdate Cache Key Value: [xgEpXaRBQv2T8M7H4P6lQA==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 10:40:55.576651 FetchForUpdate: for child    GQlHvI40RO6eZ0F5bIcF5Q==
FetchForUpdate: 2020/08/14 10:40:55.576661 ** Cache FetchForUpdate Cache Key Value: [GQlHvI40RO6eZ0F5bIcF5Q==]   sortk: A#
DB: 2020/08/14 10:40:55.576948 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.648244ms
FetchForUpdate: 2020/08/14 10:40:55.577027 len(nb): 1
fetchItems: 2020/08/14 10:40:55.577037 +++  Cache FetchItems for sortk A#G#:S UID: [GQlHvI40RO6eZ0F5bIcF5Q==] 
FetchNode: 2020/08/14 10:40:55.577042  node: GQlHvI40RO6eZ0F5bIcF5Q== subKey: A#G#:S
DB: 2020/08/14 10:40:55.577393 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.675098ms
FetchForUpdate: 2020/08/14 10:40:55.577426 len(nb): 1
fetchItems: 2020/08/14 10:40:55.577432 +++  Cache FetchItems for sortk A#G#:S UID: [jvk2GmDYQIa945CZvZyIaw==] 
FetchNode: 2020/08/14 10:40:55.577437  node: jvk2GmDYQIa945CZvZyIaw== subKey: A#G#:S
DB: 2020/08/14 10:40:55.580407 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.942242ms
DB: 2020/08/14 10:40:55.581244 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.153212ms
DB: 2020/08/14 10:40:55.586161 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.329527ms
DB: 2020/08/14 10:40:55.587332 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.636104ms
DB: 2020/08/14 10:40:55.589709 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 15.722291ms
FetchForUpdate: 2020/08/14 10:40:55.589819 len(nb): 7
fetchItems: 2020/08/14 10:40:55.589828 +++  Cache FetchItems for sortk A# UID: [xgEpXaRBQv2T8M7H4P6lQA==] 
FetchNode: 2020/08/14 10:40:55.589832  node: xgEpXaRBQv2T8M7H4P6lQA== subKey: A#
DB: 2020/08/14 10:40:55.592753 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.893025ms
DB: 2020/08/14 10:40:55.602053 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.11402ms
DB: 2020/08/14 10:40:55.608831 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.385513ms
DB: 2020/08/14 10:40:55.613267 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.515004ms
DB: 2020/08/14 10:40:55.619122 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.792345ms
DB: 2020/08/14 10:40:55.622468 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.279936ms
DB: 2020/08/14 10:40:55.625970 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.430978ms
DB: 2020/08/14 10:40:55.631930 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.896088ms
DB: 2020/08/14 10:40:55.635467 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.447765ms
DB: 2020/08/14 10:40:55.639338 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.530988ms
DB: 2020/08/14 10:40:55.643093 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.507752ms
Cache: 2020/08/14 10:40:55.643127 In SetUpredAvailable: pUid, tUID:  jvk2GmDYQIa945CZvZyIaw== jvk2GmDYQIa945CZvZyIaw== A#G#:S
Cache: 2020/08/14 10:40:55.643133 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 10:40:55.646493 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.324441ms
Unlock: 2020/08/14 10:40:55.646504 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 10:40:55.646509 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 10:40:55.646780 +++  Cache FetchItems for sortk A#G#:S UID: [xgEpXaRBQv2T8M7H4P6lQA==] 
FetchNode: 2020/08/14 10:40:55.646789  node: xgEpXaRBQv2T8M7H4P6lQA== subKey: A#G#:S
DB: 2020/08/14 10:40:55.650348 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.485101ms
DB: 2020/08/14 10:40:55.650918 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.308942ms
grmgr: 2020/08/14 10:40:55.650934 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 10:40:55.650940 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 10:40:55.650947 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 10:40:55.650951 goroutine about to start 4 
attachNode: 2020/08/14 10:40:55.650958 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 10:40:55.650963 Looping..... 0
grmgr: 2020/08/14 10:40:55.650988 Looping..... 1
grmgr: 2020/08/14 10:40:55.650994 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 10:40:55.650998 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 10:40:55.653438 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.294147ms
DB: 2020/08/14 10:40:55.654805 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.164294ms
DB: 2020/08/14 10:40:55.655838 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.362402ms
DB: 2020/08/14 10:40:55.658338 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.373457ms
DB: 2020/08/14 10:40:55.661006 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.63575ms
DB: 2020/08/14 10:40:55.664832 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.776751ms
DB: 2020/08/14 10:40:55.669444 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.714731ms
AttachNode: main 2020/08/14 10:40:55.669464 FetchForUpdate: for parent    jvk2GmDYQIa945CZvZyIaw==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 10:40:55.669471 ** Cache FetchForUpdate Cache Key Value: [jvk2GmDYQIa945CZvZyIaw==]   sortk: A#G#:S
fetchItems: 2020/08/14 10:40:55.669477 +++  Cache FetchItems for sortk A#G#:S UID: [jvk2GmDYQIa945CZvZyIaw==] 
FetchNode: 2020/08/14 10:40:55.669483  node: jvk2GmDYQIa945CZvZyIaw== subKey: A#G#:S
AttachNode: gr1 2020/08/14 10:40:55.669646 FetchForUpdate: for child    GQlHvI40RO6eZ0F5bIcF5Q==
FetchForUpdate: 2020/08/14 10:40:55.669685 ** Cache FetchForUpdate Cache Key Value: [GQlHvI40RO6eZ0F5bIcF5Q==]   sortk: A#
DB: 2020/08/14 10:40:55.672089 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.573484ms
DB: 2020/08/14 10:40:55.675605 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.340352ms
DB: 2020/08/14 10:40:55.678773 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.131052ms
DB: 2020/08/14 10:40:55.678800 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.131052ms
DB: 2020/08/14 10:40:55.682218 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.383411ms
DB: 2020/08/14 10:40:55.682235 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.383411ms
DB: 2020/08/14 10:40:55.686141 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.6964ms
DB: 2020/08/14 10:40:55.689685 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.376292ms
DB:2020/08/14 12:02:50 log.go:18: ===============================================================================
errlog: 2020/08/14 12:02:50.171137 Powering on...
rdfLoader: 2020/08/14 12:02:50.171178 saveNode started......
rdfLoader: 2020/08/14 12:02:50.171183 define saveNode limiter......
rdfuuid: 2020/08/14 12:02:50.171206 Powering on...
grmgr: 2020/08/14 12:02:50.171223 Powering on...
rdfLoader: 2020/08/14 12:02:50.171232  principle goroutines started 
RDFreader: 2020/08/14 12:02:50.171252 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:02:50.171265 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 12:02:50.171271 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 12:02:50.171277 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 12:02:50.171281 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 12:02:50.171286 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 12:02:50.171291 spo read:      
RDFreader: 2020/08/14 12:02:50.171295 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 12:02:50.171300 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 12:02:50.171305 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 12:02:50.171309 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 12:02:50.171313 spo read:      
RDFreader: 2020/08/14 12:02:50.171318 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 12:02:50.171323 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 12:02:50.171328 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 12:02:50.171332 spo read:  b  Age  "58"
RDFreader: 2020/08/14 12:02:50.171337 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 12:02:50.171342 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 12:02:50.171347 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 12:02:50.171351 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 12:02:50.171356 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 12:02:50.171360 spo read:      
RDFreader: 2020/08/14 12:02:50.171365 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 12:02:50.171368 Send node batch on channel verifyCh
RDFreader: 2020/08/14 12:02:50.171373 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:02:50.171377 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 12:02:50.171381 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 12:02:50.171400 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 12:02:50.171405 spo read:  c  Age  "67"
RDFreader: 2020/08/14 12:02:50.171410 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 12:02:50.171415 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 12:02:50.171420 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 12:02:50.171425 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 12:02:50.171431 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 12:02:50.171448 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 12:02:50.171453 spo read:      
RDFreader: 2020/08/14 12:02:50.171458 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 12:02:50.171463 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 12:02:50.171468 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 12:02:50.171474 spo read:  d  Age  "36"
RDFreader: 2020/08/14 12:02:50.171479 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 12:02:50.171485 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 12:02:50.171489 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 12:02:50.171500 close verify channel
rdfLoader: 2020/08/14 12:02:50.171504 wait for goroutines to end
rdfLoader: 2020/08/14 12:02:50.171509 verify started....
rdfLoader: 2020/08/14 12:02:50.171513 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:02:50.171517 .  getType..
rdfLoader: 2020/08/14 12:02:50.171521 node.TyName : [Person]
DB: 2020/08/14 12:02:50.249086 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 77.495168ms
grmgr: 2020/08/14 12:02:50.249241 Looping..... 0
grmgr: 2020/08/14 12:02:50.249512 Looping..... 1
grmgr: 2020/08/14 12:02:50.249693 Looping..... 2
grmgr: 2020/08/14 12:02:50.249875 Looping..... 3
grmgr: 2020/08/14 12:02:50.249905 Looping..... 4
grmgr: 2020/08/14 12:02:50.250058 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:02:50.250071 .  getType..
rdfLoader: 2020/08/14 12:02:50.250076 node.TyName : [Person]
grmgr: 2020/08/14 12:02:50.250082 Looping..... 0
unmarshalRDF2020/08/14 12:02:50.250095 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:02:50.250104 Looping..... 1
grmgr: 2020/08/14 12:02:50.250110 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:02:50.250114 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:02:50.250122 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:02:50.250127 .  getType..
rdfLoader: 2020/08/14 12:02:50.250130 node.TyName : [Person]
grmgr: 2020/08/14 12:02:50.250135 Looping..... 0
rdfLoader: 2020/08/14 12:02:50.250145 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:02:50.250151 Add to SS . [Alfa]
unmarshalRDF2020/08/14 12:02:50.250214 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:02:50.250222 Exit  unmarshalRDF. 
saveNode: 2020/08/14 12:02:50.250228 read from saveCH channel 1 
unmarshalRDF2020/08/14 12:02:50.250237 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:02:50.250262 Looping..... 1
grmgr: 2020/08/14 12:02:50.250268 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:02:50.250273 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:02:50.250278 Looping..... 0
rdfLoader: 2020/08/14 12:02:50.250287 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:02:50.250291 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 12:02:50.250331 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:02:50.250336 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 12:02:50.250342 .  getType..
rdfLoader: 2020/08/14 12:02:50.250346 node.TyName : [Person]
unmarshalRDF2020/08/14 12:02:50.250355 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:02:50.250365 Looping..... 1
rdfLoader: 2020/08/14 12:02:50.250374 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 12:02:50.250378 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 12:02:50.250383 Add to SS . [Honda]
unmarshalRDF2020/08/14 12:02:50.250428 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:02:50.250444 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:02:50.250469 Looping..... 2
grmgr: 2020/08/14 12:02:50.250656 Looping..... 3
grmgr: 2020/08/14 12:02:50.250837 Looping..... 4
grmgr: 2020/08/14 12:02:50.251018 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:02:50.251027 Looping..... 0
saveNode: 2020/08/14 12:02:50.251034 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:02:50.251041 read from saveCH channel 2 
grmgr: 2020/08/14 12:02:50.251068 Looping..... 1
SaveRDFNode: xxx 2020/08/14 12:02:50.251078 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.251085 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.251092 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.251097 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.251103 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.251109 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.251115 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:02:50.251119 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:02:50.251127 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000016ea0)}
SaveRDFNode: 2020/08/14 12:02:50.251131 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:02:50.251142 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.251146 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.251152 UID received  : DmJUBIP6TtCElMN03o5pvA==
grmgr: 2020/08/14 12:02:50.251470 Looping..... 2
grmgr: 2020/08/14 12:02:50.251650 Looping..... 3
grmgr: 2020/08/14 12:02:50.251835 Looping..... 4
grmgr: 2020/08/14 12:02:50.252014 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:02:50.252024 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 12:02:50.252029 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:02:50.252034 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/14 12:02:50.252038 Looping..... 0
unmarshalRDF2020/08/14 12:02:50.252053 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:02:50.252065 Looping..... 1
rdfLoader: 2020/08/14 12:02:50.252075 Add to SS . [Bentley]
unmarshalRDF2020/08/14 12:02:50.252110 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:02:50.252115 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:02:50.252126 Looping..... 2
grmgr: 2020/08/14 12:02:50.252173 Looping..... 3
grmgr: 2020/08/14 12:02:50.252358 Looping..... 4
grmgr: 2020/08/14 12:02:50.252534 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:02:50.252544 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 12:02:50.252552 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:02:50.252558 read from saveCH channel 3 
grmgr: 2020/08/14 12:02:50.252563 Looping..... 0
grmgr: 2020/08/14 12:02:50.252588 Looping..... 1
grmgr: 2020/08/14 12:02:50.252593 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:02:50.252597 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:02:50.252606 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.252641 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.252648 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.252656 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.252661 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.252667 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.252673 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:02:50.252694 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:02:50.252701 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/14 12:02:50.252706 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:02:50.252714 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.252718 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.252724 UID received  : hp+idGZzQh+1qMDCckdPHA==
DB: 2020/08/14 12:02:50.262357 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 11.138878ms
DB: 2020/08/14 12:02:50.267117 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.714621ms
DB: 2020/08/14 12:02:50.271865 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.536671ms
DB: 2020/08/14 12:02:50.276581 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.680035ms
DB: 2020/08/14 12:02:50.277851 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 25.098711ms
DB: 2020/08/14 12:02:50.281521 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.882242ms
SaveRDFNode: 2020/08/14 12:02:50.281538 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016ea0)}
rdfUIDdb: 2020/08/14 12:02:50.281546 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.281551 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.281558 Received UID: X18=
SaveRDFNode: 2020/08/14 12:02:50.281572 a: = db.Item{PKey:[]uint8{0xe, 0x62, 0x54, 0x4, 0x83, 0xfa, 0x4e, 0xd0, 0x84, 0x94, 0xc3, 0x74, 0xde, 0x8e, 0x69, 0xbc}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:02:50.282148 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.262912ms
DB: 2020/08/14 12:02:50.285630 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.449869ms
DB: 2020/08/14 12:02:50.286307 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.702575ms
SaveRDFNode: 2020/08/14 12:02:50.286325 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016ea0)}
rdfUIDdb: 2020/08/14 12:02:50.286343 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.286348 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.286354 Received UID: X18=
SaveRDFNode: 2020/08/14 12:02:50.286366 a: = db.Item{PKey:[]uint8{0xe, 0x62, 0x54, 0x4, 0x83, 0xfa, 0x4e, 0xd0, 0x84, 0x94, 0xc3, 0x74, 0xde, 0x8e, 0x69, 0xbc}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:02:50.291104 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.68334ms
SaveRDFNode: 2020/08/14 12:02:50.291117 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:02:50.291128 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:02:50.291134 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:02:50.291139 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:02:50.291146 read from saveCH channel 4 
grmgr: 2020/08/14 12:02:50.291151 Looping..... 0
grmgr: 2020/08/14 12:02:50.291169 Looping..... 1
grmgr: 2020/08/14 12:02:50.291224 Looping..... 2
grmgr: 2020/08/14 12:02:50.291231 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:02:50.291236 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:02:50.291246 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.291252 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.291258 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.291263 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.291271 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.291277 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.291283 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:02:50.291287 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:02:50.291294 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000379980)}
SaveRDFNode: 2020/08/14 12:02:50.291298 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:02:50.291307 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.291311 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.291317 UID received  : /EWMECJgTSC0GHQ3C1vqCA==
DB: 2020/08/14 12:02:50.292881 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.051432ms
DB: 2020/08/14 12:02:50.296051 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.70696ms
DB: 2020/08/14 12:02:50.296524 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.60656ms
SaveRDFNode: 2020/08/14 12:02:50.296539 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
rdfUIDdb: 2020/08/14 12:02:50.296545 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.296549 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.296555 Received UID: X18=
SaveRDFNode: 2020/08/14 12:02:50.296571 a: = db.Item{PKey:[]uint8{0x86, 0x9f, 0xa2, 0x74, 0x66, 0x73, 0x42, 0x1f, 0xb5, 0xa8, 0xc0, 0xc2, 0x72, 0x47, 0x4f, 0x1c}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:02:50.300487 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.883167ms
SaveRDFNode: 2020/08/14 12:02:50.300501 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
rdfUIDdb: 2020/08/14 12:02:50.300514 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.300518 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.300524 Received UID: X18=
SaveRDFNode: 2020/08/14 12:02:50.300534 a: = db.Item{PKey:[]uint8{0x86, 0x9f, 0xa2, 0x74, 0x66, 0x73, 0x42, 0x1f, 0xb5, 0xa8, 0xc0, 0xc2, 0x72, 0x47, 0x4f, 0x1c}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:02:50.301190 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.103864ms
DB: 2020/08/14 12:02:50.304005 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.438767ms
SaveRDFNode: 2020/08/14 12:02:50.304016 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:02:50.304024 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:02:50.304028 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:02:50.304034 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 12:02:50.304039 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 12:02:50.304061 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.304068 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.304076 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.304081 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.304111 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.304120 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:02:50.304126 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:02:50.304130 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:02:50.304136 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0002166c0)}
SaveRDFNode: 2020/08/14 12:02:50.304141 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:02:50.304149 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.304153 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.304159 UID received  : d22tVr1BRBOLwV/fkjZh7A==
grmgr: 2020/08/14 12:02:50.304343 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 12:02:50.306137 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.761245ms
DB: 2020/08/14 12:02:50.307626 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.44092ms
DB: 2020/08/14 12:02:50.311020 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.36091ms
DB: 2020/08/14 12:02:50.311731 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.557977ms
DB: 2020/08/14 12:02:50.314485 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.429058ms
DB: 2020/08/14 12:02:50.316656 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.886462ms
SaveRDFNode: 2020/08/14 12:02:50.317019 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000379980)}
rdfUIDdb: 2020/08/14 12:02:50.317032 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.317036 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.317042 Received UID: X18=
SaveRDFNode: 2020/08/14 12:02:50.317053 a: = db.Item{PKey:[]uint8{0xfc, 0x45, 0x8c, 0x10, 0x22, 0x60, 0x4d, 0x20, 0xb4, 0x18, 0x74, 0x37, 0xb, 0x5b, 0xea, 0x8}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:02:50.318196 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.6779ms
DB: 2020/08/14 12:02:50.321555 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.326178ms
SaveRDFNode: 2020/08/14 12:02:50.321570 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0002166c0)}
rdfUIDdb: 2020/08/14 12:02:50.321576 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.321580 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.321585 Received UID: X18=
SaveRDFNode: 2020/08/14 12:02:50.321596 a: = db.Item{PKey:[]uint8{0x77, 0x6d, 0xad, 0x56, 0xbd, 0x41, 0x44, 0x13, 0x8b, 0xc1, 0x5f, 0xdf, 0x92, 0x36, 0x61, 0xec}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:02:50.322098 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.006865ms
SaveRDFNode: 2020/08/14 12:02:50.322112 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000379980)}
rdfUIDdb: 2020/08/14 12:02:50.322117 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.322121 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.322127 Received UID: X18=
SaveRDFNode: 2020/08/14 12:02:50.322137 a: = db.Item{PKey:[]uint8{0xfc, 0x45, 0x8c, 0x10, 0x22, 0x60, 0x4d, 0x20, 0xb4, 0x18, 0x74, 0x37, 0xb, 0x5b, 0xea, 0x8}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:02:50.325050 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.425639ms
SaveRDFNode: 2020/08/14 12:02:50.325064 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0002166c0)}
rdfUIDdb: 2020/08/14 12:02:50.325069 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:02:50.325073 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:02:50.325079 Received UID: X18=
SaveRDFNode: 2020/08/14 12:02:50.325092 a: = db.Item{PKey:[]uint8{0x77, 0x6d, 0xad, 0x56, 0xbd, 0x41, 0x44, 0x13, 0x8b, 0xc1, 0x5f, 0xdf, 0x92, 0x36, 0x61, 0xec}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:02:50.326886 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.717214ms
SaveRDFNode: 2020/08/14 12:02:50.326896 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:02:50.326904 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 12:02:50.328578 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.458033ms
SaveRDFNode: 2020/08/14 12:02:50.328589 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 12:02:50.328596 saveNode finished waiting...exiting
grmgr: 2020/08/14 12:02:50.328603 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 12:02:50.328612 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 12:02:50.328617 Looping..... 0
grmgr: 2020/08/14 12:02:50.328636 Looping..... 1
grmgr: 2020/08/14 12:02:50.328717 Looping..... 2
grmgr: 2020/08/14 12:02:50.328895 Looping..... 3
grmgr: 2020/08/14 12:02:50.329073 Looping..... 4
grmgr: 2020/08/14 12:02:50.329252 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:02:50.329261 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:02:50.329268 goroutine about to start 1 cUID,pUID   DmJUBIP6TtCElMN03o5pvA==  hp+idGZzQh+1qMDCckdPHA==  
attachNode: 2020/08/14 12:02:50.329274 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 12:02:50.329279 Looping..... 0
grmgr: 2020/08/14 12:02:50.329299 Looping..... 1
grmgr: 2020/08/14 12:02:50.329304 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:02:50.329309 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:02:50.329313 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:02:50.329318 goroutine about to start 2 cUID,pUID   DmJUBIP6TtCElMN03o5pvA==  /EWMECJgTSC0GHQ3C1vqCA==  
attachNode: 2020/08/14 12:02:50.329331 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 12:02:50.329336 Looping..... 0
grmgr: 2020/08/14 12:02:50.330191 Looping..... 1
grmgr: 2020/08/14 12:02:50.330204 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:02:50.330209 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:02:50.330215 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:02:50.330225 goroutine about to start 3 cUID,pUID   hp+idGZzQh+1qMDCckdPHA==  DmJUBIP6TtCElMN03o5pvA==  
attachNode: 2020/08/14 12:02:50.330231 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 12:02:50.330236 Looping..... 0
grmgr: 2020/08/14 12:02:50.330737 Looping..... 1
grmgr: 2020/08/14 12:02:50.330749 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:02:50.330753 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:02:50.332055 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.662541ms
DB: 2020/08/14 12:02:50.334105 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.821258ms
DB: 2020/08/14 12:02:50.334803 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.004332ms
DB: 2020/08/14 12:02:50.339180 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.081331ms
DB: 2020/08/14 12:02:50.339851 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.708596ms
DB: 2020/08/14 12:02:50.345401 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 10.566689ms
DB: 2020/08/14 12:02:50.346154 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.740041ms
DB: 2020/08/14 12:02:50.348487 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.046ms
DB: 2020/08/14 12:02:50.359906 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 13.712261ms
DB: 2020/08/14 12:02:50.360487 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 15.462626ms
DB: 2020/08/14 12:02:50.363017 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 14.319773ms
DB: 2020/08/14 12:02:50.363377 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.855675ms
DB: 2020/08/14 12:02:50.365238 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.258149ms
DB: 2020/08/14 12:02:50.367395 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.949257ms
DB: 2020/08/14 12:02:50.368673 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.578325ms
DB: 2020/08/14 12:02:50.372501 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.382907ms
AttachNode: main 2020/08/14 12:02:50.372517 FetchForUpdate: for parent    hp+idGZzQh+1qMDCckdPHA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:02:50.372523 ** Cache FetchForUpdate Cache Key Value: [hp+idGZzQh+1qMDCckdPHA==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:02:50.372529  node: hp+idGZzQh+1qMDCckdPHA== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:02:50.372719 FetchForUpdate: for child    DmJUBIP6TtCElMN03o5pvA==
FetchForUpdate: 2020/08/14 12:02:50.372744 ** Cache FetchForUpdate Cache Key Value: [DmJUBIP6TtCElMN03o5pvA==]   sortk: A#
FetchNode: 2020/08/14 12:02:50.372776  node: DmJUBIP6TtCElMN03o5pvA== subKey: A#
DB: 2020/08/14 12:02:50.374649 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.683004ms
AttachNode: main 2020/08/14 12:02:50.374672 FetchForUpdate: for parent    /EWMECJgTSC0GHQ3C1vqCA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:02:50.374677 ** Cache FetchForUpdate Cache Key Value: [/EWMECJgTSC0GHQ3C1vqCA==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:02:50.374683  node: /EWMECJgTSC0GHQ3C1vqCA== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:02:50.374881 FetchForUpdate: for child    DmJUBIP6TtCElMN03o5pvA==
FetchForUpdate: 2020/08/14 12:02:50.374890 ** Cache FetchForUpdate Cache Key Value: [DmJUBIP6TtCElMN03o5pvA==]   sortk: A#
DB: 2020/08/14 12:02:50.375783 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.527456ms
AttachNode: main 2020/08/14 12:02:50.375795 FetchForUpdate: for parent    DmJUBIP6TtCElMN03o5pvA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:02:50.375800 ** Cache FetchForUpdate Cache Key Value: [DmJUBIP6TtCElMN03o5pvA==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:02:50.375809 FetchForUpdate: for child    hp+idGZzQh+1qMDCckdPHA==
FetchForUpdate: 2020/08/14 12:02:50.375814 ** Cache FetchForUpdate Cache Key Value: [hp+idGZzQh+1qMDCckdPHA==]   sortk: A#
DB: 2020/08/14 12:02:50.376161 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.598385ms
FetchForUpdate: 2020/08/14 12:02:50.376234 len(nb): 1
fetchItems: 2020/08/14 12:02:50.376245 +++  Cache FetchItems for sortk A#G#:S UID: [hp+idGZzQh+1qMDCckdPHA==] 
FetchNode: 2020/08/14 12:02:50.376249  node: hp+idGZzQh+1qMDCckdPHA== subKey: A#G#:S
DB: 2020/08/14 12:02:50.377647 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.930694ms
FetchForUpdate: 2020/08/14 12:02:50.377680 len(nb): 1
fetchItems: 2020/08/14 12:02:50.377686 +++  Cache FetchItems for sortk A#G#:S UID: [/EWMECJgTSC0GHQ3C1vqCA==] 
FetchNode: 2020/08/14 12:02:50.377711  node: /EWMECJgTSC0GHQ3C1vqCA== subKey: A#G#:S
DB: 2020/08/14 12:02:50.379989 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.709567ms
DB: 2020/08/14 12:02:50.381404 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.663427ms
DB: 2020/08/14 12:02:50.384501 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.432547ms
DB: 2020/08/14 12:02:50.386559 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 13.732963ms
FetchForUpdate: 2020/08/14 12:02:50.386705 len(nb): 7
fetchItems: 2020/08/14 12:02:50.386716 +++  Cache FetchItems for sortk A# UID: [DmJUBIP6TtCElMN03o5pvA==] 
FetchNode: 2020/08/14 12:02:50.386721  node: DmJUBIP6TtCElMN03o5pvA== subKey: A#
DB: 2020/08/14 12:02:50.387034 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.821966ms
DB: 2020/08/14 12:02:50.389705 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.938784ms
DB: 2020/08/14 12:02:50.407202 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.66546ms
DB: 2020/08/14 12:02:50.410866 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.592121ms
DB: 2020/08/14 12:02:50.414862 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.880307ms
DB: 2020/08/14 12:02:50.421355 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.425958ms
DB: 2020/08/14 12:02:50.425100 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.676964ms
DB: 2020/08/14 12:02:50.429038 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.859193ms
DB: 2020/08/14 12:02:50.435584 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.480263ms
DB: 2020/08/14 12:02:50.439534 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.870031ms
DB: 2020/08/14 12:02:50.443884 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.267671ms
DB: 2020/08/14 12:02:50.447835 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.880511ms
Cache: 2020/08/14 12:02:50.447852 In SetUpredAvailable: pUid, tUID:  hp+idGZzQh+1qMDCckdPHA== hp+idGZzQh+1qMDCckdPHA== A#G#:S
Cache: 2020/08/14 12:02:50.447858 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:02:50.451617 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.721437ms
Unlock: 2020/08/14 12:02:50.451630 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:02:50.451636 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:02:50.451834 +++  Cache FetchItems for sortk A# UID: [hp+idGZzQh+1qMDCckdPHA==] 
FetchNode: 2020/08/14 12:02:50.451872  node: hp+idGZzQh+1qMDCckdPHA== subKey: A#
fetchItems: 2020/08/14 12:02:50.452058 +++  Cache FetchItems for sortk A#G#:S UID: [DmJUBIP6TtCElMN03o5pvA==] 
FetchNode: 2020/08/14 12:02:50.452081  node: DmJUBIP6TtCElMN03o5pvA== subKey: A#G#:S
DB: 2020/08/14 12:02:50.455309 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.380604ms
fetchItems: 2020/08/14 12:02:50.455485 +++  Cache FetchItems for sortk A# UID: [hp+idGZzQh+1qMDCckdPHA==] 
FetchNode: 2020/08/14 12:02:50.455493  node: hp+idGZzQh+1qMDCckdPHA== subKey: A#
DB: 2020/08/14 12:02:50.456262 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.565308ms
grmgr: 2020/08/14 12:02:50.456280 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:02:50.456285 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:02:50.456291 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:02:50.456297 goroutine about to start 4 cUID,pUID   hp+idGZzQh+1qMDCckdPHA==  /EWMECJgTSC0GHQ3C1vqCA==  
attachNode: 2020/08/14 12:02:50.456303 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 12:02:50.456328 Looping..... 0
grmgr: 2020/08/14 12:02:50.456487 Looping..... 1
grmgr: 2020/08/14 12:02:50.456498 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:02:50.456502 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:02:50.459834 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 7.709307ms
DB: 2020/08/14 12:02:50.464903 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 9.377769ms
DB: 2020/08/14 12:02:50.469737 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 13.180557ms
DB: 2020/08/14 12:02:50.475617 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.8414ms
DB: 2020/08/14 12:02:50.487448 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 27.210974ms
DB: 2020/08/14 12:02:50.493968 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 18.112478ms
DB: 2020/08/14 12:02:50.497979 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.956101ms
DB: 2020/08/14 12:02:50.510290 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 21.761296ms
DB: 2020/08/14 12:02:50.515458 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.093459ms
DB: 2020/08/14 12:02:50.519352 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.765312ms
DB: 2020/08/14 12:02:50.525953 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.251413ms
DB: 2020/08/14 12:02:50.529996 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.724208ms
DB: 2020/08/14 12:02:50.534686 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.352915ms
DB: 2020/08/14 12:02:50.541166 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.162196ms
DB: 2020/08/14 12:02:50.544988 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.494337ms
DB: 2020/08/14 12:02:50.549578 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.887746ms
DB: 2020/08/14 12:02:50.553572 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.56545ms
Cache: 2020/08/14 12:02:50.553586 In SetUpredAvailable: pUid, tUID:  DmJUBIP6TtCElMN03o5pvA== DmJUBIP6TtCElMN03o5pvA== A#G#:S
Cache: 2020/08/14 12:02:50.553592 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:02:50.557163 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.531493ms
Unlock: 2020/08/14 12:02:50.557174 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:02:50.557180 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:02:50.557404 +++  Cache FetchItems for sortk A# UID: [DmJUBIP6TtCElMN03o5pvA==] 
FetchNode: 2020/08/14 12:02:50.557443  node: DmJUBIP6TtCElMN03o5pvA== subKey: A#
DB: 2020/08/14 12:02:50.561189 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.699324ms
DB: 2020/08/14 12:02:50.565708 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.469065ms
grmgr: 2020/08/14 12:02:50.565730 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:02:50.565737 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:02:50.565743 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:02:50.565750 goroutine about to start 5 cUID,pUID   /EWMECJgTSC0GHQ3C1vqCA==  DmJUBIP6TtCElMN03o5pvA==  
attachNode: 2020/08/14 12:02:50.565757 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 12:02:50.565762 Looping..... 0
grmgr: 2020/08/14 12:02:50.565956 Looping..... 1
grmgr: 2020/08/14 12:02:50.565967 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:02:50.565972 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:02:50.566379 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 68.341985ms
DB: 2020/08/14 12:02:50.568793 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.695531ms
DB: 2020/08/14 12:02:50.571272 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.405126ms
DB: 2020/08/14 12:02:50.572306 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.481027ms
DB: 2020/08/14 12:02:50.574965 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.524177ms
DB: 2020/08/14 12:02:50.575236 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.770777ms
DB: 2020/08/14 12:02:50.576392 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 9.830074ms
AttachNode: main 2020/08/14 12:02:50.576407 FetchForUpdate: for parent    /EWMECJgTSC0GHQ3C1vqCA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:02:50.576413 ** Cache FetchForUpdate Cache Key Value: [/EWMECJgTSC0GHQ3C1vqCA==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:02:50.576425 FetchForUpdate: for child    hp+idGZzQh+1qMDCckdPHA==
FetchForUpdate: 2020/08/14 12:02:50.576441 ** Cache FetchForUpdate Cache Key Value: [hp+idGZzQh+1qMDCckdPHA==]   sortk: A#
fetchItems: 2020/08/14 12:02:50.576447 +++  Cache FetchItems for sortk A# UID: [hp+idGZzQh+1qMDCckdPHA==] 
FetchNode: 2020/08/14 12:02:50.576460  node: hp+idGZzQh+1qMDCckdPHA== subKey: A#
DB: 2020/08/14 12:02:50.578540 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.540646ms
DB: 2020/08/14 12:02:50.580222 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.286354ms
DB: 2020/08/14 12:02:50.582068 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 5.539793ms
DB: 2020/08/14 12:02:50.582341 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.723258ms
DB: 2020/08/14 12:02:50.586103 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.538186ms
DB: 2020/08/14 12:02:50.588425 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.025609ms
AttachNode: main 2020/08/14 12:02:50.588440 FetchForUpdate: for parent    DmJUBIP6TtCElMN03o5pvA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:02:50.588445 ** Cache FetchForUpdate Cache Key Value: [DmJUBIP6TtCElMN03o5pvA==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:02:50.588458 FetchForUpdate: for child    /EWMECJgTSC0GHQ3C1vqCA==
FetchForUpdate: 2020/08/14 12:02:50.588463 ** Cache FetchForUpdate Cache Key Value: [/EWMECJgTSC0GHQ3C1vqCA==]   sortk: A#
DB: 2020/08/14 12:02:50.590278 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.099641ms
DB: 2020/08/14 12:02:50.594119 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.771218ms
DB: 2020/08/14 12:02:50.600292 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.102171ms
DB: 2020/08/14 12:02:50.604280 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.571576ms
DB: 2020/08/14 12:02:50.608232 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.871248ms
DB: 2020/08/14 12:02:50.611978 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.690405ms
Cache: 2020/08/14 12:02:50.611992 In SetUpredAvailable: pUid, tUID:  /EWMECJgTSC0GHQ3C1vqCA== /EWMECJgTSC0GHQ3C1vqCA== A#G#:S
Cache: 2020/08/14 12:02:50.611998 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:02:50.616347 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.313545ms
Unlock: 2020/08/14 12:02:50.616362 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:02:50.616368 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:02:50.616634 +++  Cache FetchItems for sortk A#G#:S UID: [/EWMECJgTSC0GHQ3C1vqCA==] 
FetchNode: 2020/08/14 12:02:50.616644  node: /EWMECJgTSC0GHQ3C1vqCA== subKey: A#G#:S
fetchItems: 2020/08/14 12:02:50.616817 +++  Cache FetchItems for sortk A#G#:S UID: [DmJUBIP6TtCElMN03o5pvA==] 
FetchNode: 2020/08/14 12:02:50.616839  node: DmJUBIP6TtCElMN03o5pvA== subKey: A#G#:S
DB: 2020/08/14 12:02:50.620793 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.114185ms
DB: 2020/08/14 12:02:50.621764 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.314598ms
grmgr: 2020/08/14 12:02:50.621782 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:02:50.621788 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:02:50.621795 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:02:50.621801 goroutine about to start 6 cUID,pUID   /EWMECJgTSC0GHQ3C1vqCA==  hp+idGZzQh+1qMDCckdPHA==  
rdfLoader: 2020/08/14 12:02:50.621838 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 12:02:50.622213 StartCh received for nodeAttach. rCnt = 3 
DB: 2020/08/14 12:02:50.626082 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.89047ms
DB: 2020/08/14 12:02:50.627133 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 10.260026ms
DB: 2020/08/14 12:02:50.628607 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.564407ms
DB: 2020/08/14 12:02:50.629847 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.726942ms
DB: 2020/08/14 12:02:50.629863 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.726942ms
DB: 2020/08/14 12:02:50.632873 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.233239ms
DB: 2020/08/14 12:02:50.633335 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.547881ms
DB: 2020/08/14 12:02:50.634999 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.102821ms
DB: 2020/08/14 12:02:50.635016 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.102821ms
DB: 2020/08/14 12:02:50.636649 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.566371ms
DB: 2020/08/14 12:02:50.638875 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.788703ms
DB: 2020/08/14 12:02:50.640078 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.689715ms
DB: 2020/08/14 12:02:50.640097 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.689715ms
DB: 2020/08/14 12:02:50.643945 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.781173ms
DB: 2020/08/14 12:02:50.643962 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.781173ms
DB: 2020/08/14 12:02:50.647250 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 8.298309ms
DB: 2020/08/14 12:02:50.648904 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.713601ms
DB: 2020/08/14 12:02:50.652332 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 15.647282ms
DB: 2020/08/14 12:02:50.653029 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.885039ms
DB: 2020/08/14 12:02:50.654691 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.747957ms
DB: 2020/08/14 12:02:50.657914 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.510205ms
DB: 2020/08/14 12:02:50.658765 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.635289ms
DB: 2020/08/14 12:02:50.663185 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.70119ms
DB: 2020/08/14 12:02:50.666826 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.610618ms
AttachNode: main 2020/08/14 12:02:50.666840 FetchForUpdate: for parent    hp+idGZzQh+1qMDCckdPHA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:02:50.666857 ** Cache FetchForUpdate Cache Key Value: [hp+idGZzQh+1qMDCckdPHA==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:02:50.666870 FetchForUpdate: for child    /EWMECJgTSC0GHQ3C1vqCA==
FetchForUpdate: 2020/08/14 12:02:50.666885 ** Cache FetchForUpdate Cache Key Value: [/EWMECJgTSC0GHQ3C1vqCA==]   sortk: A#
DB: 2020/08/14 12:02:50.670224 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.484894ms
DB: 2020/08/14 12:02:50.674753 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.902299ms
DB: 2020/08/14 12:02:50.679230 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.900701ms
DB: 2020/08/14 12:02:50.686166 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.376988ms
DB: 2020/08/14 12:02:50.690678 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.886078ms
DB: 2020/08/14 12:02:50.695054 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.80238ms
DB: 2020/08/14 12:02:50.699199 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.8112ms
Cache: 2020/08/14 12:02:50.699214 In SetUpredAvailable: pUid, tUID:  /EWMECJgTSC0GHQ3C1vqCA== KSM7K7BAQGKm16KaeckqwA== A#G#:S
Cache: 2020/08/14 12:02:50.699220 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:02:50.703104 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.849084ms
Unlock: 2020/08/14 12:02:50.703269 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:02:50.703282 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:02:50.703510 +++  Cache FetchItems for sortk A# UID: [/EWMECJgTSC0GHQ3C1vqCA==] 
FetchNode: 2020/08/14 12:02:50.703545  node: /EWMECJgTSC0GHQ3C1vqCA== subKey: A#
fetchItems: 2020/08/14 12:02:50.703794 +++  Cache FetchItems for sortk A#G#:S UID: [hp+idGZzQh+1qMDCckdPHA==] 
FetchNode: 2020/08/14 12:02:50.703803  node: hp+idGZzQh+1qMDCckdPHA== subKey: A#G#:S
DB: 2020/08/14 12:02:50.710194 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.852441ms
grmgr: 2020/08/14 12:02:50.710213 EndCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 12:02:50.713943 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 10.099452ms
DB: 2020/08/14 12:02:50.717975 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.867894ms
DB: 2020/08/14 12:02:50.720586 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 16.960114ms
DB: 2020/08/14 12:02:50.723471 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.420859ms
DB: 2020/08/14 12:02:50.723488 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.420859ms
DB: 2020/08/14 12:02:50.727356 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.838601ms
DB: 2020/08/14 12:02:50.727374 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.838601ms
DB: 2020/08/14 12:02:50.729865 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.692351ms
DB: 2020/08/14 12:02:50.732116 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.018039ms
DB: 2020/08/14 12:02:50.733821 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.771818ms
DB: 2020/08/14 12:02:50.736388 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.092318ms
DB: 2020/08/14 12:02:50.738249 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.694527ms
DB: 2020/08/14 12:02:50.745280 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.468427ms
DB: 2020/08/14 12:02:50.750562 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.749325ms
DB: 2020/08/14 12:02:50.757048 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.753894ms
DB: 2020/08/14 12:02:50.764253 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.462166ms
DB: 2020/08/14 12:02:50.770428 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.911167ms
DB: 2020/08/14 12:02:50.774563 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.770703ms
DB: 2020/08/14 12:02:50.778532 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.720288ms
Cache: 2020/08/14 12:02:50.778548 In SetUpredAvailable: pUid, tUID:  DmJUBIP6TtCElMN03o5pvA== 9NXtF176SraCeCTutJtGjA== A#G#:S
Cache: 2020/08/14 12:02:50.778554 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:02:50.782406 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.789298ms
Unlock: 2020/08/14 12:02:50.782418 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:02:50.782424 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:02:50.782640 +++  Cache FetchItems for sortk A# UID: [/EWMECJgTSC0GHQ3C1vqCA==] 
FetchNode: 2020/08/14 12:02:50.782699  node: /EWMECJgTSC0GHQ3C1vqCA== subKey: A#
DB: 2020/08/14 12:02:50.787145 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.665243ms
grmgr: 2020/08/14 12:02:50.787184 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 12:02:50.799420 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 16.65977ms
DB: 2020/08/14 12:02:50.810184 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.937676ms
DB: 2020/08/14 12:02:50.815271 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.024475ms
DB: 2020/08/14 12:02:50.819124 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.73042ms
DB: 2020/08/14 12:02:50.826136 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.942967ms
DB: 2020/08/14 12:02:50.830023 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.411076ms
DB: 2020/08/14 12:02:50.835077 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.373347ms
DB: 2020/08/14 12:02:50.854301 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 18.370348ms
DB: 2020/08/14 12:02:50.857952 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.548759ms
DB: 2020/08/14 12:02:50.861710 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.672126ms
DB: 2020/08/14 12:02:50.865557 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.787485ms
Cache: 2020/08/14 12:02:50.865572 In SetUpredAvailable: pUid, tUID:  hp+idGZzQh+1qMDCckdPHA== wxLKbMI2RNiEaIYdf/xGfA== A#G#:S
Cache: 2020/08/14 12:02:50.865577 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:02:50.869454 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.839476ms
Unlock: 2020/08/14 12:02:50.869470 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:02:50.869476 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 12:02:50.877988 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.420502ms
rdfLoader: 2020/08/14 12:02:50.878003 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 12:02:50.878009 cancel contexts
rdfLoader: 2020/08/14 12:02:50.878015 wait for autonomous goroutines to end
errlog: 2020/08/14 12:02:50.878021 Powering down...
grmgr: 2020/08/14 12:02:50.878028 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 12:02:50.878054 Powering down...
rdfuuid: 2020/08/14 12:02:50.878061 Powering down...
rdfLoader: 2020/08/14 12:02:50.878066 loader exists.....
DB:2020/08/14 12:03:30 log.go:18: ===============================================================================
errlog: 2020/08/14 12:03:30.005547 Powering on...
rdfLoader: 2020/08/14 12:03:30.005592 saveNode started......
rdfLoader: 2020/08/14 12:03:30.005598 define saveNode limiter......
rdfuuid: 2020/08/14 12:03:30.005609 Powering on...
grmgr: 2020/08/14 12:03:30.005627 Powering on...
rdfLoader: 2020/08/14 12:03:30.005638  principle goroutines started 
RDFreader: 2020/08/14 12:03:30.005661 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:03:30.005676 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 12:03:30.005682 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 12:03:30.005689 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 12:03:30.005694 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 12:03:30.005700 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 12:03:30.005704 spo read:      
RDFreader: 2020/08/14 12:03:30.005710 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 12:03:30.005715 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 12:03:30.005720 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 12:03:30.005725 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 12:03:30.005730 spo read:      
RDFreader: 2020/08/14 12:03:30.005736 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 12:03:30.005741 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 12:03:30.005746 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 12:03:30.005751 spo read:  b  Age  "58"
RDFreader: 2020/08/14 12:03:30.005761 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 12:03:30.005766 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 12:03:30.005772 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 12:03:30.005777 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 12:03:30.005783 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 12:03:30.005787 spo read:      
RDFreader: 2020/08/14 12:03:30.005792 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 12:03:30.005796 Send node batch on channel verifyCh
RDFreader: 2020/08/14 12:03:30.005802 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:03:30.005806 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 12:03:30.005812 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 12:03:30.005819 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 12:03:30.005825 spo read:  c  Age  "67"
RDFreader: 2020/08/14 12:03:30.005830 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 12:03:30.005835 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 12:03:30.005843 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 12:03:30.005848 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 12:03:30.005853 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 12:03:30.005858 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 12:03:30.005863 spo read:      
RDFreader: 2020/08/14 12:03:30.005868 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 12:03:30.005873 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 12:03:30.005878 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 12:03:30.005883 spo read:  d  Age  "36"
RDFreader: 2020/08/14 12:03:30.005889 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 12:03:30.005895 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 12:03:30.005899 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 12:03:30.005904 close verify channel
rdfLoader: 2020/08/14 12:03:30.005908 wait for goroutines to end
rdfLoader: 2020/08/14 12:03:30.005921 verify started....
rdfLoader: 2020/08/14 12:03:30.005926 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:03:30.005930 .  getType..
rdfLoader: 2020/08/14 12:03:30.005934 node.TyName : [Person]
DB: 2020/08/14 12:03:30.079182 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 73.179464ms
grmgr: 2020/08/14 12:03:30.079324 Looping..... 0
grmgr: 2020/08/14 12:03:30.079590 Looping..... 1
grmgr: 2020/08/14 12:03:30.079772 Looping..... 2
grmgr: 2020/08/14 12:03:30.079954 Looping..... 3
grmgr: 2020/08/14 12:03:30.080152 Looping..... 4
grmgr: 2020/08/14 12:03:30.080318 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:03:30.080331 .  getType..
rdfLoader: 2020/08/14 12:03:30.080336 node.TyName : [Person]
grmgr: 2020/08/14 12:03:30.080342 Looping..... 0
unmarshalRDF2020/08/14 12:03:30.080354 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:03:30.080364 Looping..... 1
grmgr: 2020/08/14 12:03:30.080371 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:03:30.080375 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:03:30.080382 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:03:30.080386 .  getType..
rdfLoader: 2020/08/14 12:03:30.080390 node.TyName : [Person]
grmgr: 2020/08/14 12:03:30.080395 Looping..... 0
rdfLoader: 2020/08/14 12:03:30.080405 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:03:30.080410 Add to SS . [Alfa]
unmarshalRDF2020/08/14 12:03:30.080474 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:03:30.080481 Exit  unmarshalRDF. 
saveNode: 2020/08/14 12:03:30.080487 read from saveCH channel 1 
unmarshalRDF2020/08/14 12:03:30.080496 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:03:30.080522 Looping..... 1
grmgr: 2020/08/14 12:03:30.080528 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:03:30.080532 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:03:30.080538 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:03:30.080543 Looping..... 0
rdfLoader: 2020/08/14 12:03:30.080551 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:03:30.080556 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 12:03:30.080597 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:03:30.080602 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 12:03:30.080608 .  getType..
rdfLoader: 2020/08/14 12:03:30.080612 node.TyName : [Person]
unmarshalRDF2020/08/14 12:03:30.080620 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:03:30.080632 Looping..... 1
rdfLoader: 2020/08/14 12:03:30.080641 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 12:03:30.080646 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 12:03:30.080650 Add to SS . [Honda]
unmarshalRDF2020/08/14 12:03:30.080694 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:03:30.080710 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:03:30.080735 Looping..... 2
grmgr: 2020/08/14 12:03:30.080918 Looping..... 3
grmgr: 2020/08/14 12:03:30.081096 Looping..... 4
grmgr: 2020/08/14 12:03:30.081280 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:03:30.081292 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:03:30.081297 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/14 12:03:30.081302 Looping..... 0
saveNode: 2020/08/14 12:03:30.081308 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:03:30.081314 read from saveCH channel 2 
grmgr: 2020/08/14 12:03:30.081340 Looping..... 1
SaveRDFNode: xxx 2020/08/14 12:03:30.081351 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.081357 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.081364 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.081370 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.081376 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.081381 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.081387 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:03:30.081391 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:03:30.081399 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0003781e0)}
SaveRDFNode: 2020/08/14 12:03:30.081403 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:03:30.081413 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.081418 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.081435 UID received  : njQ1D2B+S72PCI8b8Mb2aw==
grmgr: 2020/08/14 12:03:30.081710 Looping..... 2
grmgr: 2020/08/14 12:03:30.081887 Looping..... 3
grmgr: 2020/08/14 12:03:30.082064 Looping..... 4
grmgr: 2020/08/14 12:03:30.082273 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:03:30.082284 Looping..... 0
unmarshalRDF2020/08/14 12:03:30.082298 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:03:30.082309 Looping..... 1
rdfLoader: 2020/08/14 12:03:30.082319 Add to SS . [Bentley]
unmarshalRDF2020/08/14 12:03:30.082353 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:03:30.082359 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:03:30.082369 Looping..... 2
grmgr: 2020/08/14 12:03:30.082451 Looping..... 3
grmgr: 2020/08/14 12:03:30.082468 Looping..... 4
grmgr: 2020/08/14 12:03:30.082635 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:03:30.082651 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 12:03:30.082660 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:03:30.082665 read from saveCH channel 3 
grmgr: 2020/08/14 12:03:30.082671 Looping..... 0
grmgr: 2020/08/14 12:03:30.082817 Looping..... 1
grmgr: 2020/08/14 12:03:30.082827 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:03:30.082831 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:03:30.082841 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.082847 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.082853 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.082858 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.082866 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.082873 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.082879 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:03:30.082883 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:03:30.082889 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0003788a0)}
SaveRDFNode: 2020/08/14 12:03:30.082893 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:03:30.082900 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.082905 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.082910 UID received  : c1k1LHs4R9KEixsdhBX4WQ==
DB: 2020/08/14 12:03:30.090163 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.693974ms
DB: 2020/08/14 12:03:30.093587 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.38308ms
DB: 2020/08/14 12:03:30.096961 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.330455ms
DB: 2020/08/14 12:03:30.100899 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.695186ms
DB: 2020/08/14 12:03:30.104239 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.296541ms
SaveRDFNode: 2020/08/14 12:03:30.104255 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003781e0)}
rdfUIDdb: 2020/08/14 12:03:30.104263 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.104268 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.104274 Received UID: X18=
SaveRDFNode: 2020/08/14 12:03:30.104288 a: = db.Item{PKey:[]uint8{0x9e, 0x34, 0x35, 0xf, 0x60, 0x7e, 0x4b, 0xbd, 0x8f, 0x8, 0x8f, 0x1b, 0xf0, 0xc6, 0xf6, 0x6b}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:03:30.106486 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 23.548328ms
DB: 2020/08/14 12:03:30.107786 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.417172ms
SaveRDFNode: 2020/08/14 12:03:30.107804 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003781e0)}
rdfUIDdb: 2020/08/14 12:03:30.107811 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.107815 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.107821 Received UID: X18=
SaveRDFNode: 2020/08/14 12:03:30.107832 a: = db.Item{PKey:[]uint8{0x9e, 0x34, 0x35, 0xf, 0x60, 0x7e, 0x4b, 0xbd, 0x8f, 0x8, 0x8f, 0x1b, 0xf0, 0xc6, 0xf6, 0x6b}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:03:30.109900 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.347479ms
DB: 2020/08/14 12:03:30.111249 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.349802ms
SaveRDFNode: 2020/08/14 12:03:30.111261 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:03:30.111271 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:03:30.111277 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:03:30.111283 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:03:30.111289 read from saveCH channel 4 
grmgr: 2020/08/14 12:03:30.111294 Looping..... 0
grmgr: 2020/08/14 12:03:30.111348 Looping..... 1
grmgr: 2020/08/14 12:03:30.111356 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:03:30.111361 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:03:30.111370 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.111376 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.111385 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.111391 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.111396 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.111402 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.111408 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:03:30.111412 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:03:30.111418 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000016d20)}
SaveRDFNode: 2020/08/14 12:03:30.111422 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:03:30.111432 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.111439 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.111445 UID received  : w2slRLGrQtGYQFzZ6Bmoow==
DB: 2020/08/14 12:03:30.113190 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.252885ms
DB: 2020/08/14 12:03:30.115019 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.547127ms
DB: 2020/08/14 12:03:30.116662 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.108602ms
DB: 2020/08/14 12:03:30.118380 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.321521ms
DB: 2020/08/14 12:03:30.119724 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.024868ms
SaveRDFNode: 2020/08/14 12:03:30.119741 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003788a0)}
rdfUIDdb: 2020/08/14 12:03:30.119749 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.119753 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.119759 Received UID: X18=
SaveRDFNode: 2020/08/14 12:03:30.119776 a: = db.Item{PKey:[]uint8{0x73, 0x59, 0x35, 0x2c, 0x7b, 0x38, 0x47, 0xd2, 0x84, 0x8b, 0x1b, 0x1d, 0x84, 0x15, 0xf8, 0x59}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:03:30.121822 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.403076ms
DB: 2020/08/14 12:03:30.123145 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.310082ms
SaveRDFNode: 2020/08/14 12:03:30.123170 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003788a0)}
rdfUIDdb: 2020/08/14 12:03:30.123177 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.123181 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.123210 Received UID: X18=
SaveRDFNode: 2020/08/14 12:03:30.123222 a: = db.Item{PKey:[]uint8{0x73, 0x59, 0x35, 0x2c, 0x7b, 0x38, 0x47, 0xd2, 0x84, 0x8b, 0x1b, 0x1d, 0x84, 0x15, 0xf8, 0x59}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:03:30.125223 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.366501ms
DB: 2020/08/14 12:03:30.127601 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.349203ms
SaveRDFNode: 2020/08/14 12:03:30.127614 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:03:30.127623 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:03:30.127629 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:03:30.127635 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 12:03:30.127641 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 12:03:30.127669 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.127676 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.127703 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.127711 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.127717 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.127723 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:03:30.127729 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:03:30.127747 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:03:30.127752 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc00020ca80)}
SaveRDFNode: 2020/08/14 12:03:30.127757 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:03:30.127767 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.127771 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.127776 UID received  : nV2FHtGDTEKrmaturQPXFw==
grmgr: 2020/08/14 12:03:30.127970 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 12:03:30.128772 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.504275ms
SaveRDFNode: 2020/08/14 12:03:30.128957 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016d20)}
rdfUIDdb: 2020/08/14 12:03:30.128968 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.128973 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.128979 Received UID: X18=
SaveRDFNode: 2020/08/14 12:03:30.128990 a: = db.Item{PKey:[]uint8{0xc3, 0x6b, 0x25, 0x44, 0xb1, 0xab, 0x42, 0xd1, 0x98, 0x40, 0x5c, 0xd9, 0xe8, 0x19, 0xa8, 0xa3}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:03:30.130992 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.183172ms
DB: 2020/08/14 12:03:30.132387 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.364581ms
SaveRDFNode: 2020/08/14 12:03:30.132401 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016d20)}
rdfUIDdb: 2020/08/14 12:03:30.132420 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.132424 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.132441 Received UID: X18=
SaveRDFNode: 2020/08/14 12:03:30.132454 a: = db.Item{PKey:[]uint8{0xc3, 0x6b, 0x25, 0x44, 0xb1, 0xab, 0x42, 0xd1, 0x98, 0x40, 0x5c, 0xd9, 0xe8, 0x19, 0xa8, 0xa3}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:03:30.134282 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.256843ms
DB: 2020/08/14 12:03:30.135710 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.20679ms
SaveRDFNode: 2020/08/14 12:03:30.135722 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:03:30.135730 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 12:03:30.137277 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.963583ms
DB: 2020/08/14 12:03:30.140420 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.109424ms
DB: 2020/08/14 12:03:30.143802 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.34353ms
SaveRDFNode: 2020/08/14 12:03:30.143816 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00020ca80)}
rdfUIDdb: 2020/08/14 12:03:30.143823 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.143827 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.143833 Received UID: X18=
SaveRDFNode: 2020/08/14 12:03:30.143845 a: = db.Item{PKey:[]uint8{0x9d, 0x5d, 0x85, 0x1e, 0xd1, 0x83, 0x4c, 0x42, 0xab, 0x99, 0xab, 0x6e, 0xad, 0x3, 0xd7, 0x17}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:03:30.148728 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.850607ms
SaveRDFNode: 2020/08/14 12:03:30.148954 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00020ca80)}
rdfUIDdb: 2020/08/14 12:03:30.148967 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:03:30.148971 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:03:30.148978 Received UID: X18=
SaveRDFNode: 2020/08/14 12:03:30.148994 a: = db.Item{PKey:[]uint8{0x9d, 0x5d, 0x85, 0x1e, 0xd1, 0x83, 0x4c, 0x42, 0xab, 0x99, 0xab, 0x6e, 0xad, 0x3, 0xd7, 0x17}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:03:30.152474 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.444937ms
SaveRDFNode: 2020/08/14 12:03:30.152489 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 12:03:30.152498 saveNode finished waiting...exiting
grmgr: 2020/08/14 12:03:30.152506 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 12:03:30.152516 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 12:03:30.152521 Looping..... 0
grmgr: 2020/08/14 12:03:30.152542 Looping..... 1
grmgr: 2020/08/14 12:03:30.152582 Looping..... 2
grmgr: 2020/08/14 12:03:30.152763 Looping..... 3
grmgr: 2020/08/14 12:03:30.152940 Looping..... 4
grmgr: 2020/08/14 12:03:30.153118 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:03:30.153127 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:03:30.153133 goroutine about to start 1 cUID,pUID   njQ1D2B+S72PCI8b8Mb2aw==  c1k1LHs4R9KEixsdhBX4WQ==  
attachNode: 2020/08/14 12:03:30.153140 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 12:03:30.153145 Looping..... 0
grmgr: 2020/08/14 12:03:30.153165 Looping..... 1
grmgr: 2020/08/14 12:03:30.153171 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:03:30.153176 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:03:30.153180 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:03:30.153186 goroutine about to start 2 cUID,pUID   njQ1D2B+S72PCI8b8Mb2aw==  w2slRLGrQtGYQFzZ6Bmoow==  
attachNode: 2020/08/14 12:03:30.153191 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 12:03:30.153208 Looping..... 0
grmgr: 2020/08/14 12:03:30.154021 Looping..... 1
grmgr: 2020/08/14 12:03:30.154034 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:03:30.154039 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:03:30.154045 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:03:30.154054 goroutine about to start 3 cUID,pUID   c1k1LHs4R9KEixsdhBX4WQ==  njQ1D2B+S72PCI8b8Mb2aw==  
attachNode: 2020/08/14 12:03:30.154060 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 12:03:30.154065 Looping..... 0
DB: 2020/08/14 12:03:30.155431 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.164971ms
DB: 2020/08/14 12:03:30.159348 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.88377ms
DB: 2020/08/14 12:03:30.159624 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.510724ms
DB: 2020/08/14 12:03:30.161721 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.062882ms
DB: 2020/08/14 12:03:30.162110 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.714641ms
grmgr: 2020/08/14 12:03:30.162306 Looping..... 1
grmgr: 2020/08/14 12:03:30.162320 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:03:30.162325 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:03:30.164537 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.391259ms
DB: 2020/08/14 12:03:30.166202 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.439015ms
DB: 2020/08/14 12:03:30.172306 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 9.907969ms
DB: 2020/08/14 12:03:30.173377 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 8.735635ms
DB: 2020/08/14 12:03:30.175029 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 8.794013ms
DB: 2020/08/14 12:03:30.175646 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.303681ms
DB: 2020/08/14 12:03:30.178972 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.888577ms
DB: 2020/08/14 12:03:30.184355 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 8.649638ms
DB: 2020/08/14 12:03:30.187526 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.356195ms
AttachNode: main 2020/08/14 12:03:30.187548 FetchForUpdate: for parent    w2slRLGrQtGYQFzZ6Bmoow==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:03:30.187569 ** Cache FetchForUpdate Cache Key Value: [w2slRLGrQtGYQFzZ6Bmoow==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:03:30.187576  node: w2slRLGrQtGYQFzZ6Bmoow== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:03:30.187839 FetchForUpdate: for child    njQ1D2B+S72PCI8b8Mb2aw==
FetchForUpdate: 2020/08/14 12:03:30.187855 ** Cache FetchForUpdate Cache Key Value: [njQ1D2B+S72PCI8b8Mb2aw==]   sortk: A#
FetchNode: 2020/08/14 12:03:30.187868  node: njQ1D2B+S72PCI8b8Mb2aw== subKey: A#
DB: 2020/08/14 12:03:30.188232 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.841151ms
DB: 2020/08/14 12:03:30.188893 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 15.445658ms
AttachNode: main 2020/08/14 12:03:30.188912 FetchForUpdate: for parent    c1k1LHs4R9KEixsdhBX4WQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:03:30.188918 ** Cache FetchForUpdate Cache Key Value: [c1k1LHs4R9KEixsdhBX4WQ==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:03:30.188934  node: c1k1LHs4R9KEixsdhBX4WQ== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:03:30.189118 FetchForUpdate: for child    njQ1D2B+S72PCI8b8Mb2aw==
FetchForUpdate: 2020/08/14 12:03:30.189143 ** Cache FetchForUpdate Cache Key Value: [njQ1D2B+S72PCI8b8Mb2aw==]   sortk: A#
DB: 2020/08/14 12:03:30.189817 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.205434ms
FetchForUpdate: 2020/08/14 12:03:30.189881 len(nb): 1
fetchItems: 2020/08/14 12:03:30.189890 +++  Cache FetchItems for sortk A#G#:S UID: [w2slRLGrQtGYQFzZ6Bmoow==] 
FetchNode: 2020/08/14 12:03:30.189895  node: w2slRLGrQtGYQFzZ6Bmoow== subKey: A#G#:S
DB: 2020/08/14 12:03:30.192009 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.724687ms
DB: 2020/08/14 12:03:30.192919 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.993829ms
DB: 2020/08/14 12:03:30.196503 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.333793ms
DB: 2020/08/14 12:03:30.197872 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.63196ms
AttachNode: main 2020/08/14 12:03:30.197885 FetchForUpdate: for parent    njQ1D2B+S72PCI8b8Mb2aw==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:03:30.197890 ** Cache FetchForUpdate Cache Key Value: [njQ1D2B+S72PCI8b8Mb2aw==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:03:30.197901 FetchForUpdate: for child    c1k1LHs4R9KEixsdhBX4WQ==
FetchForUpdate: 2020/08/14 12:03:30.197906 ** Cache FetchForUpdate Cache Key Value: [c1k1LHs4R9KEixsdhBX4WQ==]   sortk: A#
DB: 2020/08/14 12:03:30.203097 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 15.181369ms
FetchForUpdate: 2020/08/14 12:03:30.203224 len(nb): 7
fetchItems: 2020/08/14 12:03:30.203234 +++  Cache FetchItems for sortk A# UID: [njQ1D2B+S72PCI8b8Mb2aw==] 
FetchNode: 2020/08/14 12:03:30.203239  node: njQ1D2B+S72PCI8b8Mb2aw== subKey: A#
DB: 2020/08/14 12:03:30.205273 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 16.306888ms
FetchForUpdate: 2020/08/14 12:03:30.205453 len(nb): 1
fetchItems: 2020/08/14 12:03:30.205465 +++  Cache FetchItems for sortk A#G#:S UID: [c1k1LHs4R9KEixsdhBX4WQ==] 
FetchNode: 2020/08/14 12:03:30.205489  node: c1k1LHs4R9KEixsdhBX4WQ== subKey: A#G#:S
DB: 2020/08/14 12:03:30.206394 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.125381ms
DB: 2020/08/14 12:03:30.208194 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.669268ms
DB: 2020/08/14 12:03:30.218349 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.044343ms
DB: 2020/08/14 12:03:30.221400 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.994496ms
DB: 2020/08/14 12:03:30.224908 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.398846ms
DB: 2020/08/14 12:03:30.230610 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.639715ms
DB: 2020/08/14 12:03:30.230919 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 17.85137ms
DB: 2020/08/14 12:03:30.233803 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.122069ms
DB: 2020/08/14 12:03:30.237238 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.365518ms
DB: 2020/08/14 12:03:30.243089 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.787476ms
DB: 2020/08/14 12:03:30.246303 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.15812ms
DB: 2020/08/14 12:03:30.249705 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.320233ms
DB: 2020/08/14 12:03:30.252878 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.119125ms
Cache: 2020/08/14 12:03:30.252895 In SetUpredAvailable: pUid, tUID:  w2slRLGrQtGYQFzZ6Bmoow== w2slRLGrQtGYQFzZ6Bmoow== A#G#:S
Cache: 2020/08/14 12:03:30.252902 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:03:30.256344 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.40372ms
Unlock: 2020/08/14 12:03:30.256355 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:03:30.256360 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:03:30.256566 +++  Cache FetchItems for sortk A#G#:S UID: [njQ1D2B+S72PCI8b8Mb2aw==] 
FetchNode: 2020/08/14 12:03:30.256575  node: njQ1D2B+S72PCI8b8Mb2aw== subKey: A#G#:S
DB: 2020/08/14 12:03:30.259597 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.974796ms
DB: 2020/08/14 12:03:30.260406 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.988504ms
grmgr: 2020/08/14 12:03:30.260423 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:03:30.260429 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:03:30.260435 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:03:30.260441 goroutine about to start 4 cUID,pUID   c1k1LHs4R9KEixsdhBX4WQ==  w2slRLGrQtGYQFzZ6Bmoow==  
attachNode: 2020/08/14 12:03:30.260448 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 12:03:30.260453 Looping..... 0
grmgr: 2020/08/14 12:03:30.260478 Looping..... 1
grmgr: 2020/08/14 12:03:30.260496 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:03:30.260501 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:03:30.262715 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.162389ms
DB: 2020/08/14 12:03:30.263959 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.123535ms
DB: 2020/08/14 12:03:30.264946 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.199363ms
DB: 2020/08/14 12:03:30.267912 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.804612ms
DB: 2020/08/14 12:03:30.270184 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.240677ms
DB: 2020/08/14 12:03:30.273834 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.563008ms
DB: 2020/08/14 12:03:30.278865 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.836355ms
AttachNode: main 2020/08/14 12:03:30.278881 FetchForUpdate: for parent    w2slRLGrQtGYQFzZ6Bmoow==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:03:30.278887 ** Cache FetchForUpdate Cache Key Value: [w2slRLGrQtGYQFzZ6Bmoow==]   sortk: A#G#:S
fetchItems: 2020/08/14 12:03:30.278892 +++  Cache FetchItems for sortk A#G#:S UID: [w2slRLGrQtGYQFzZ6Bmoow==] 
FetchNode: 2020/08/14 12:03:30.278897  node: w2slRLGrQtGYQFzZ6Bmoow== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:03:30.279075 FetchForUpdate: for child    c1k1LHs4R9KEixsdhBX4WQ==
FetchForUpdate: 2020/08/14 12:03:30.279085 ** Cache FetchForUpdate Cache Key Value: [c1k1LHs4R9KEixsdhBX4WQ==]   sortk: A#
DB: 2020/08/14 12:03:30.282992 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.060845ms
DB: 2020/08/14 12:03:30.286521 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.338988ms
DB: 2020/08/14 12:03:30.289768 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.16713ms
DB: 2020/08/14 12:03:30.289788 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.16713ms
DB: 2020/08/14 12:03:30.293196 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.372617ms
DB: 2020/08/14 12:03:30.293213 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.372617ms
DB: 2020/08/14 12:03:30.297071 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.653288ms
DB: 2020/08/14 12:03:30.300719 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.479922ms
DB:2020/08/14 12:04:08 log.go:18: ===============================================================================
errlog: 2020/08/14 12:04:08.310683 Powering on...
rdfLoader: 2020/08/14 12:04:08.311075 saveNode started......
rdfLoader: 2020/08/14 12:04:08.311086 define saveNode limiter......
rdfuuid: 2020/08/14 12:04:08.311098 Powering on...
grmgr: 2020/08/14 12:04:08.311116 Powering on...
rdfLoader: 2020/08/14 12:04:08.311127  principle goroutines started 
RDFreader: 2020/08/14 12:04:08.311151 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:04:08.311166 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 12:04:08.311173 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 12:04:08.311179 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 12:04:08.311185 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 12:04:08.311190 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 12:04:08.311195 spo read:      
RDFreader: 2020/08/14 12:04:08.311200 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 12:04:08.311206 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 12:04:08.311211 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 12:04:08.311216 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 12:04:08.311220 spo read:      
RDFreader: 2020/08/14 12:04:08.311226 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 12:04:08.311232 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 12:04:08.311237 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 12:04:08.311242 spo read:  b  Age  "58"
RDFreader: 2020/08/14 12:04:08.311248 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 12:04:08.311253 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 12:04:08.311259 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 12:04:08.311264 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 12:04:08.311269 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 12:04:08.311273 spo read:      
RDFreader: 2020/08/14 12:04:08.311279 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 12:04:08.311283 Send node batch on channel verifyCh
RDFreader: 2020/08/14 12:04:08.311288 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:04:08.311292 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 12:04:08.311298 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 12:04:08.311305 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 12:04:08.311311 spo read:  c  Age  "67"
RDFreader: 2020/08/14 12:04:08.311316 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 12:04:08.311321 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 12:04:08.311326 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 12:04:08.311332 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 12:04:08.311339 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 12:04:08.311344 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 12:04:08.311349 spo read:      
RDFreader: 2020/08/14 12:04:08.311354 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 12:04:08.311359 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 12:04:08.311364 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 12:04:08.311370 spo read:  d  Age  "36"
RDFreader: 2020/08/14 12:04:08.311375 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 12:04:08.311388 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 12:04:08.311392 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 12:04:08.311396 close verify channel
rdfLoader: 2020/08/14 12:04:08.311400 wait for goroutines to end
rdfLoader: 2020/08/14 12:04:08.311405 verify started....
rdfLoader: 2020/08/14 12:04:08.311409 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:04:08.311413 .  getType..
rdfLoader: 2020/08/14 12:04:08.311417 node.TyName : [Person]
DB: 2020/08/14 12:04:08.387039 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 75.545403ms
grmgr: 2020/08/14 12:04:08.387187 Looping..... 0
grmgr: 2020/08/14 12:04:08.387468 Looping..... 1
grmgr: 2020/08/14 12:04:08.387613 Looping..... 2
grmgr: 2020/08/14 12:04:08.387797 Looping..... 3
grmgr: 2020/08/14 12:04:08.387975 Looping..... 4
grmgr: 2020/08/14 12:04:08.388162 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:04:08.388174 .  getType..
rdfLoader: 2020/08/14 12:04:08.388179 node.TyName : [Person]
grmgr: 2020/08/14 12:04:08.388185 Looping..... 0
unmarshalRDF2020/08/14 12:04:08.388198 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:04:08.388208 Looping..... 1
grmgr: 2020/08/14 12:04:08.388214 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:04:08.388218 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:04:08.388225 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:04:08.388229 .  getType..
rdfLoader: 2020/08/14 12:04:08.388233 node.TyName : [Person]
grmgr: 2020/08/14 12:04:08.388238 Looping..... 0
rdfLoader: 2020/08/14 12:04:08.388248 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:04:08.388253 Add to SS . [Alfa]
unmarshalRDF2020/08/14 12:04:08.388312 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:04:08.388327 Exit  unmarshalRDF. 
saveNode: 2020/08/14 12:04:08.388332 read from saveCH channel 1 
unmarshalRDF2020/08/14 12:04:08.388342 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:04:08.388352 Looping..... 1
grmgr: 2020/08/14 12:04:08.388357 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:04:08.388361 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:04:08.388367 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:04:08.388371 Looping..... 0
rdfLoader: 2020/08/14 12:04:08.388380 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:04:08.388384 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 12:04:08.388421 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:04:08.388427 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 12:04:08.388432 .  getType..
rdfLoader: 2020/08/14 12:04:08.388436 node.TyName : [Person]
unmarshalRDF2020/08/14 12:04:08.388445 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:04:08.388456 Looping..... 1
rdfLoader: 2020/08/14 12:04:08.388464 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 12:04:08.388495 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 12:04:08.388500 Add to SS . [Honda]
unmarshalRDF2020/08/14 12:04:08.388533 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:04:08.388538 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:04:08.388549 Looping..... 2
grmgr: 2020/08/14 12:04:08.388670 Looping..... 3
grmgr: 2020/08/14 12:04:08.388848 Looping..... 4
grmgr: 2020/08/14 12:04:08.389081 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:04:08.389091 Looping..... 0
saveNode: 2020/08/14 12:04:08.389098 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:04:08.389105 read from saveCH channel 2 
grmgr: 2020/08/14 12:04:08.389132 Looping..... 1
SaveRDFNode: xxx 2020/08/14 12:04:08.389144 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.389150 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.389155 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.389162 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.389167 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.389173 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.389179 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:04:08.389211 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:04:08.389220 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0003801e0)}
SaveRDFNode: 2020/08/14 12:04:08.389225 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:04:08.389234 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.389239 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.389244 UID received  : uFJOOj43TwWf2mhcwn2QMw==
grmgr: 2020/08/14 12:04:08.389467 Looping..... 2
grmgr: 2020/08/14 12:04:08.389565 Looping..... 3
grmgr: 2020/08/14 12:04:08.389735 Looping..... 4
grmgr: 2020/08/14 12:04:08.389912 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:04:08.389920 Looping..... 0
unmarshalRDF2020/08/14 12:04:08.389935 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:04:08.389944 Looping..... 1
rdfLoader: 2020/08/14 12:04:08.389954 Add to SS . [Bentley]
unmarshalRDF2020/08/14 12:04:08.389987 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:04:08.389991 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:04:08.390001 Looping..... 2
grmgr: 2020/08/14 12:04:08.390092 Looping..... 3
grmgr: 2020/08/14 12:04:08.390270 Looping..... 4
grmgr: 2020/08/14 12:04:08.390447 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:04:08.390456 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 12:04:08.390461 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:04:08.390465 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 12:04:08.390472 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:04:08.390477 read from saveCH channel 3 
grmgr: 2020/08/14 12:04:08.390482 Looping..... 0
grmgr: 2020/08/14 12:04:08.390519 Looping..... 1
grmgr: 2020/08/14 12:04:08.390525 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:04:08.390529 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:04:08.390538 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.390544 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.390551 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.390557 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.390563 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.390569 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.390575 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:04:08.390579 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:04:08.390584 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0003808a0)}
SaveRDFNode: 2020/08/14 12:04:08.390604 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:04:08.390613 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.390617 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.390623 UID received  : yL6MMqtEQOu6rv5TD3gETQ==
DB: 2020/08/14 12:04:08.399347 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.073018ms
DB: 2020/08/14 12:04:08.404570 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.142519ms
DB: 2020/08/14 12:04:08.409734 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.947952ms
DB: 2020/08/14 12:04:08.413919 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 23.263395ms
DB: 2020/08/14 12:04:08.414748 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.968819ms
DB: 2020/08/14 12:04:08.417239 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.275526ms
DB: 2020/08/14 12:04:08.419673 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.887945ms
SaveRDFNode: 2020/08/14 12:04:08.419690 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003801e0)}
rdfUIDdb: 2020/08/14 12:04:08.419697 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.419701 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.419708 Received UID: X18=
SaveRDFNode: 2020/08/14 12:04:08.419721 a: = db.Item{PKey:[]uint8{0xb8, 0x52, 0x4e, 0x3a, 0x3e, 0x37, 0x4f, 0x5, 0x9f, 0xda, 0x68, 0x5c, 0xc2, 0x7d, 0x90, 0x33}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:04:08.420460 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.154202ms
DB: 2020/08/14 12:04:08.423972 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.320739ms
DB: 2020/08/14 12:04:08.424790 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.0359ms
SaveRDFNode: 2020/08/14 12:04:08.424805 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003801e0)}
rdfUIDdb: 2020/08/14 12:04:08.424811 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.424815 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.424821 Received UID: X18=
SaveRDFNode: 2020/08/14 12:04:08.424832 a: = db.Item{PKey:[]uint8{0xb8, 0x52, 0x4e, 0x3a, 0x3e, 0x37, 0x4f, 0x5, 0x9f, 0xda, 0x68, 0x5c, 0xc2, 0x7d, 0x90, 0x33}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:04:08.427311 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.295987ms
SaveRDFNode: 2020/08/14 12:04:08.427325 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003808a0)}
rdfUIDdb: 2020/08/14 12:04:08.427331 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.427335 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.427341 Received UID: X18=
SaveRDFNode: 2020/08/14 12:04:08.427356 a: = db.Item{PKey:[]uint8{0xc8, 0xbe, 0x8c, 0x32, 0xab, 0x44, 0x40, 0xeb, 0xba, 0xae, 0xfe, 0x53, 0xf, 0x78, 0x4, 0x4d}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:04:08.429876 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.01364ms
SaveRDFNode: 2020/08/14 12:04:08.429888 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:04:08.429897 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:04:08.429902 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:04:08.429908 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:04:08.429914 read from saveCH channel 4 
grmgr: 2020/08/14 12:04:08.429919 Looping..... 0
grmgr: 2020/08/14 12:04:08.429957 Looping..... 1
grmgr: 2020/08/14 12:04:08.429974 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:04:08.429979 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:04:08.429989 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.429995 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.430003 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.430008 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.430014 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.430020 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.430025 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:04:08.430029 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:04:08.430035 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000017980)}
SaveRDFNode: 2020/08/14 12:04:08.430039 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:04:08.430048 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.430052 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.430059 UID received  : vRSsRVh0RSqHnodWpPxsxQ==
DB: 2020/08/14 12:04:08.430601 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.204023ms
SaveRDFNode: 2020/08/14 12:04:08.430613 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003808a0)}
rdfUIDdb: 2020/08/14 12:04:08.430619 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.430629 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.430635 Received UID: X18=
SaveRDFNode: 2020/08/14 12:04:08.430645 a: = db.Item{PKey:[]uint8{0xc8, 0xbe, 0x8c, 0x32, 0xab, 0x44, 0x40, 0xeb, 0xba, 0xae, 0xfe, 0x53, 0xf, 0x78, 0x4, 0x4d}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:04:08.433880 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.206876ms
SaveRDFNode: 2020/08/14 12:04:08.433891 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:04:08.433898 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:04:08.433903 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:04:08.433908 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 12:04:08.433913 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 12:04:08.433933 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.433940 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.433946 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.433952 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.433957 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.433963 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:04:08.433969 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:04:08.433973 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:04:08.433978 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0002ac240)}
SaveRDFNode: 2020/08/14 12:04:08.433982 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:04:08.433989 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.433993 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.433999 UID received  : 1tYMOXQwT2aw7cJj6/zeMA==
grmgr: 2020/08/14 12:04:08.434161 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 12:04:08.434791 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.704171ms
DB: 2020/08/14 12:04:08.437349 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.322282ms
DB: 2020/08/14 12:04:08.439748 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.91768ms
DB: 2020/08/14 12:04:08.440977 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.250887ms
DB: 2020/08/14 12:04:08.444255 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.245801ms
DB: 2020/08/14 12:04:08.444629 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.846782ms
DB: 2020/08/14 12:04:08.447710 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.42406ms
DB: 2020/08/14 12:04:08.449467 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.804396ms
DB: 2020/08/14 12:04:08.451535 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.792243ms
SaveRDFNode: 2020/08/14 12:04:08.451549 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0002ac240)}
rdfUIDdb: 2020/08/14 12:04:08.451555 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.451559 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.451573 Received UID: X18=
SaveRDFNode: 2020/08/14 12:04:08.451584 a: = db.Item{PKey:[]uint8{0xd6, 0xd6, 0xc, 0x39, 0x74, 0x30, 0x4f, 0x66, 0xb0, 0xed, 0xc2, 0x63, 0xeb, 0xfc, 0xde, 0x30}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:04:08.454351 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.847162ms
SaveRDFNode: 2020/08/14 12:04:08.454504 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017980)}
rdfUIDdb: 2020/08/14 12:04:08.454516 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.454520 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.454525 Received UID: X18=
SaveRDFNode: 2020/08/14 12:04:08.454536 a: = db.Item{PKey:[]uint8{0xbd, 0x14, 0xac, 0x45, 0x58, 0x74, 0x45, 0x2a, 0x87, 0x9e, 0x87, 0x56, 0xa4, 0xfc, 0x6c, 0xc5}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:04:08.454940 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.326363ms
SaveRDFNode: 2020/08/14 12:04:08.454954 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0002ac240)}
rdfUIDdb: 2020/08/14 12:04:08.454959 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.454963 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.454969 Received UID: X18=
SaveRDFNode: 2020/08/14 12:04:08.454979 a: = db.Item{PKey:[]uint8{0xd6, 0xd6, 0xc, 0x39, 0x74, 0x30, 0x4f, 0x66, 0xb0, 0xed, 0xc2, 0x63, 0xeb, 0xfc, 0xde, 0x30}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:04:08.458318 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.309893ms
SaveRDFNode: 2020/08/14 12:04:08.458330 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:04:08.458338 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 12:04:08.459573 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.003823ms
SaveRDFNode: 2020/08/14 12:04:08.459591 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017980)}
rdfUIDdb: 2020/08/14 12:04:08.459598 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:04:08.459602 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:04:08.459608 Received UID: X18=
SaveRDFNode: 2020/08/14 12:04:08.459622 a: = db.Item{PKey:[]uint8{0xbd, 0x14, 0xac, 0x45, 0x58, 0x74, 0x45, 0x2a, 0x87, 0x9e, 0x87, 0x56, 0xa4, 0xfc, 0x6c, 0xc5}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:04:08.464535 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.855204ms
SaveRDFNode: 2020/08/14 12:04:08.464548 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 12:04:08.464556 saveNode finished waiting...exiting
grmgr: 2020/08/14 12:04:08.464567 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 12:04:08.464577 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 12:04:08.464581 Looping..... 0
grmgr: 2020/08/14 12:04:08.464601 Looping..... 1
grmgr: 2020/08/14 12:04:08.464634 Looping..... 2
grmgr: 2020/08/14 12:04:08.464818 Looping..... 3
grmgr: 2020/08/14 12:04:08.464993 Looping..... 4
grmgr: 2020/08/14 12:04:08.465200 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:04:08.465211 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:04:08.465218 goroutine about to start 1 cUID,pUID   uFJOOj43TwWf2mhcwn2QMw==  yL6MMqtEQOu6rv5TD3gETQ==  
attachNode: 2020/08/14 12:04:08.465224 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 12:04:08.465229 Looping..... 0
grmgr: 2020/08/14 12:04:08.465250 Looping..... 1
grmgr: 2020/08/14 12:04:08.465256 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:04:08.465260 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:04:08.465265 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:04:08.465278 goroutine about to start 2 cUID,pUID   uFJOOj43TwWf2mhcwn2QMw==  vRSsRVh0RSqHnodWpPxsxQ==  
attachNode: 2020/08/14 12:04:08.465283 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 12:04:08.465288 Looping..... 0
grmgr: 2020/08/14 12:04:08.466119 Looping..... 1
grmgr: 2020/08/14 12:04:08.466132 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:04:08.466137 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:04:08.466143 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:04:08.466149 goroutine about to start 3 cUID,pUID   yL6MMqtEQOu6rv5TD3gETQ==  uFJOOj43TwWf2mhcwn2QMw==  
attachNode: 2020/08/14 12:04:08.466155 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 12:04:08.466160 Looping..... 0
grmgr: 2020/08/14 12:04:08.466656 Looping..... 1
grmgr: 2020/08/14 12:04:08.466668 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:04:08.466673 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:04:08.468628 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.415957ms
DB: 2020/08/14 12:04:08.469255 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.899023ms
DB: 2020/08/14 12:04:08.472927 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.188643ms
DB: 2020/08/14 12:04:08.476769 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 8.106926ms
DB: 2020/08/14 12:04:08.477561 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 8.255548ms
DB: 2020/08/14 12:04:08.480637 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.820665ms
DB: 2020/08/14 12:04:08.482736 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.338627ms
DB: 2020/08/14 12:04:08.485534 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.861591ms
DB: 2020/08/14 12:04:08.486900 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.132058ms
DB: 2020/08/14 12:04:08.489198 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.608658ms
DB: 2020/08/14 12:04:08.491621 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 18.464162ms
DB: 2020/08/14 12:04:08.492066 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.111081ms
DB: 2020/08/14 12:04:08.494879 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.746018ms
DB: 2020/08/14 12:04:08.497671 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.754769ms
DB: 2020/08/14 12:04:08.497989 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.026762ms
AttachNode: main 2020/08/14 12:04:08.498006 FetchForUpdate: for parent    vRSsRVh0RSqHnodWpPxsxQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:04:08.498012 ** Cache FetchForUpdate Cache Key Value: [vRSsRVh0RSqHnodWpPxsxQ==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:04:08.498018  node: vRSsRVh0RSqHnodWpPxsxQ== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:04:08.498180 FetchForUpdate: for child    uFJOOj43TwWf2mhcwn2QMw==
FetchForUpdate: 2020/08/14 12:04:08.498205 ** Cache FetchForUpdate Cache Key Value: [uFJOOj43TwWf2mhcwn2QMw==]   sortk: A#
FetchNode: 2020/08/14 12:04:08.498218  node: uFJOOj43TwWf2mhcwn2QMw== subKey: A#
DB: 2020/08/14 12:04:08.500518 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.457916ms
FetchForUpdate: 2020/08/14 12:04:08.500597 len(nb): 1
fetchItems: 2020/08/14 12:04:08.500607 +++  Cache FetchItems for sortk A#G#:S UID: [vRSsRVh0RSqHnodWpPxsxQ==] 
FetchNode: 2020/08/14 12:04:08.500611  node: vRSsRVh0RSqHnodWpPxsxQ== subKey: A#G#:S
DB: 2020/08/14 12:04:08.501338 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.594721ms
DB: 2020/08/14 12:04:08.504266 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.981078ms
FetchForUpdate: 2020/08/14 12:04:08.504442 len(nb): 7
fetchItems: 2020/08/14 12:04:08.504453 +++  Cache FetchItems for sortk A# UID: [uFJOOj43TwWf2mhcwn2QMw==] 
FetchNode: 2020/08/14 12:04:08.504458  node: uFJOOj43TwWf2mhcwn2QMw== subKey: A#
DB: 2020/08/14 12:04:08.505296 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.630133ms
DB: 2020/08/14 12:04:08.508329 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.227315ms
AttachNode: main 2020/08/14 12:04:08.508343 FetchForUpdate: for parent    uFJOOj43TwWf2mhcwn2QMw==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:04:08.508349 ** Cache FetchForUpdate Cache Key Value: [uFJOOj43TwWf2mhcwn2QMw==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:04:08.508359 FetchForUpdate: for child    yL6MMqtEQOu6rv5TD3gETQ==
FetchForUpdate: 2020/08/14 12:04:08.508364 ** Cache FetchForUpdate Cache Key Value: [yL6MMqtEQOu6rv5TD3gETQ==]   sortk: A#
FetchNode: 2020/08/14 12:04:08.508376  node: yL6MMqtEQOu6rv5TD3gETQ== subKey: A#
DB: 2020/08/14 12:04:08.508894 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.381106ms
DB: 2020/08/14 12:04:08.518906 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 10.466541ms
FetchForUpdate: 2020/08/14 12:04:08.519057 len(nb): 7
fetchItems: 2020/08/14 12:04:08.519070 +++  Cache FetchItems for sortk A# UID: [yL6MMqtEQOu6rv5TD3gETQ==] 
FetchNode: 2020/08/14 12:04:08.519075  node: yL6MMqtEQOu6rv5TD3gETQ== subKey: A#
DB: 2020/08/14 12:04:08.519497 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 26.589556ms
AttachNode: main 2020/08/14 12:04:08.519510 FetchForUpdate: for parent    yL6MMqtEQOu6rv5TD3gETQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:04:08.519514 ** Cache FetchForUpdate Cache Key Value: [yL6MMqtEQOu6rv5TD3gETQ==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:04:08.519524 FetchForUpdate: for child    uFJOOj43TwWf2mhcwn2QMw==
FetchForUpdate: 2020/08/14 12:04:08.519528 ** Cache FetchForUpdate Cache Key Value: [uFJOOj43TwWf2mhcwn2QMw==]   sortk: A#
DB: 2020/08/14 12:04:08.524724 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 18.573774ms
DB: 2020/08/14 12:04:08.532468 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 13.252802ms
DB: 2020/08/14 12:04:08.542285 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 17.021653ms
DB: 2020/08/14 12:04:08.546086 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.592666ms
DB: 2020/08/14 12:04:08.549937 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.457943ms
DB: 2020/08/14 12:04:08.556077 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.793635ms
DB: 2020/08/14 12:04:08.559898 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.494737ms
DB: 2020/08/14 12:04:08.563663 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.420112ms
DB: 2020/08/14 12:04:08.569040 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.048699ms
DB: 2020/08/14 12:04:08.572769 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.302596ms
DB: 2020/08/14 12:04:08.577670 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.50516ms
DB: 2020/08/14 12:04:08.581460 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.545486ms
Cache: 2020/08/14 12:04:08.581475 In SetUpredAvailable: pUid, tUID:  vRSsRVh0RSqHnodWpPxsxQ== vRSsRVh0RSqHnodWpPxsxQ== A#G#:S
Cache: 2020/08/14 12:04:08.581481 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:04:08.584942 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.425109ms
Unlock: 2020/08/14 12:04:08.584954 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:04:08.584958 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:04:08.585244 +++  Cache FetchItems for sortk A#G#:S UID: [uFJOOj43TwWf2mhcwn2QMw==] 
FetchNode: 2020/08/14 12:04:08.585254  node: uFJOOj43TwWf2mhcwn2QMw== subKey: A#G#:S
DB: 2020/08/14 12:04:08.588308 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.001126ms
DB: 2020/08/14 12:04:08.591178 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.165097ms
grmgr: 2020/08/14 12:04:08.591196 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:04:08.591202 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:04:08.591209 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:04:08.591215 goroutine about to start 4 cUID,pUID   yL6MMqtEQOu6rv5TD3gETQ==  vRSsRVh0RSqHnodWpPxsxQ==  
attachNode: 2020/08/14 12:04:08.591222 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 12:04:08.591227 Looping..... 0
grmgr: 2020/08/14 12:04:08.591326 Looping..... 1
grmgr: 2020/08/14 12:04:08.591337 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:04:08.591342 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:04:08.592203 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.641542ms
DB: 2020/08/14 12:04:08.593890 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.493348ms
DB: 2020/08/14 12:04:08.596927 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.980253ms
DB: 2020/08/14 12:04:08.597630 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.008535ms
DB: 2020/08/14 12:04:08.599402 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.356627ms
DB: 2020/08/14 12:04:08.600912 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.233164ms
DB: 2020/08/14 12:04:08.601956 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.518446ms
DB: 2020/08/14 12:04:08.604961 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.933257ms
DB: 2020/08/14 12:04:08.607299 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.262008ms
DB: 2020/08/14 12:04:08.611136 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.618921ms
AttachNode: main 2020/08/14 12:04:08.611155 FetchForUpdate: for parent    vRSsRVh0RSqHnodWpPxsxQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:04:08.611162 ** Cache FetchForUpdate Cache Key Value: [vRSsRVh0RSqHnodWpPxsxQ==]   sortk: A#G#:S
fetchItems: 2020/08/14 12:04:08.611168 +++  Cache FetchItems for sortk A#G#:S UID: [vRSsRVh0RSqHnodWpPxsxQ==] 
FetchNode: 2020/08/14 12:04:08.611173  node: vRSsRVh0RSqHnodWpPxsxQ== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:04:08.611403 FetchForUpdate: for child    yL6MMqtEQOu6rv5TD3gETQ==
FetchForUpdate: 2020/08/14 12:04:08.611413 ** Cache FetchForUpdate Cache Key Value: [yL6MMqtEQOu6rv5TD3gETQ==]   sortk: A#
DB: 2020/08/14 12:04:08.611839 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.440586ms
DB: 2020/08/14 12:04:08.614042 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.804708ms
DB: 2020/08/14 12:04:08.615661 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.454756ms
DB: 2020/08/14 12:04:08.618120 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.717227ms
DB: 2020/08/14 12:04:08.619682 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.677173ms
DB: 2020/08/14 12:04:08.621387 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.232023ms
DB: 2020/08/14 12:04:08.621405 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.232023ms
DB: 2020/08/14 12:04:08.625124 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.686008ms
DB: 2020/08/14 12:04:08.625141 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.686008ms
DB: 2020/08/14 12:04:08.625552 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.532314ms
DB: 2020/08/14 12:04:08.629020 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.705389ms
DB: 2020/08/14 12:04:08.629486 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.617693ms
DB: 2020/08/14 12:04:08.632433 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.343451ms
DB: 2020/08/14 12:04:08.633321 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.768266ms
DB: 2020/08/14 12:04:08.637290 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.913069ms
Cache: 2020/08/14 12:04:08.637305 In SetUpredAvailable: pUid, tUID:  uFJOOj43TwWf2mhcwn2QMw== uFJOOj43TwWf2mhcwn2QMw== A#G#:S
Cache: 2020/08/14 12:04:08.637311 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:04:08.640761 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.413428ms
Unlock: 2020/08/14 12:04:08.640773 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:04:08.640778 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:04:08.640986 +++  Cache FetchItems for sortk A# UID: [uFJOOj43TwWf2mhcwn2QMw==] 
FetchNode: 2020/08/14 12:04:08.641020  node: uFJOOj43TwWf2mhcwn2QMw== subKey: A#
fetchItems: 2020/08/14 12:04:08.641187 +++  Cache FetchItems for sortk A#G#:S UID: [yL6MMqtEQOu6rv5TD3gETQ==] 
FetchNode: 2020/08/14 12:04:08.641210  node: yL6MMqtEQOu6rv5TD3gETQ== subKey: A#G#:S
DB: 2020/08/14 12:04:08.644335 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.270217ms
DB: 2020/08/14 12:04:08.647473 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.217026ms
DB: 2020/08/14 12:04:08.648458 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.605857ms
grmgr: 2020/08/14 12:04:08.648477 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:04:08.648482 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:04:08.648489 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:04:08.648495 goroutine about to start 5 cUID,pUID   vRSsRVh0RSqHnodWpPxsxQ==  uFJOOj43TwWf2mhcwn2QMw==  
attachNode: 2020/08/14 12:04:08.648511 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 12:04:08.648516 Looping..... 0
grmgr: 2020/08/14 12:04:08.648569 Looping..... 1
grmgr: 2020/08/14 12:04:08.648577 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:04:08.648581 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:04:08.651049 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.326481ms
DB: 2020/08/14 12:04:08.651727 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.020815ms
DB: 2020/08/14 12:04:08.654200 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.441976ms
DB: 2020/08/14 12:04:08.657072 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.68493ms
DB: 2020/08/14 12:04:08.657444 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.009724ms
DB: 2020/08/14 12:04:08.660026 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.919991ms
DB: 2020/08/14 12:04:08.660999 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.207841ms
DB: 2020/08/14 12:04:08.663551 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.471716ms
DB: 2020/08/14 12:04:08.664971 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.565851ms
DB: 2020/08/14 12:04:08.667652 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.719927ms
AttachNode: main 2020/08/14 12:04:08.667667 FetchForUpdate: for parent    uFJOOj43TwWf2mhcwn2QMw==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:04:08.667673 ** Cache FetchForUpdate Cache Key Value: [uFJOOj43TwWf2mhcwn2QMw==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:04:08.667685 FetchForUpdate: for child    vRSsRVh0RSqHnodWpPxsxQ==
FetchForUpdate: 2020/08/14 12:04:08.667691 ** Cache FetchForUpdate Cache Key Value: [vRSsRVh0RSqHnodWpPxsxQ==]   sortk: A#
DB: 2020/08/14 12:04:08.670959 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.918266ms
DB: 2020/08/14 12:04:08.674344 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.31148ms
DB: 2020/08/14 12:04:08.677959 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.53746ms
DB: 2020/08/14 12:04:08.683913 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.86694ms
DB: 2020/08/14 12:04:08.687293 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.319291ms
DB: 2020/08/14 12:04:08.691178 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.80642ms
DB: 2020/08/14 12:04:08.694713 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.468671ms
Cache: 2020/08/14 12:04:08.694728 In SetUpredAvailable: pUid, tUID:  yL6MMqtEQOu6rv5TD3gETQ== yL6MMqtEQOu6rv5TD3gETQ== A#G#:S
Cache: 2020/08/14 12:04:08.694736 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:04:08.698106 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.331659ms
Unlock: 2020/08/14 12:04:08.698118 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:04:08.698124 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:04:08.698327 +++  Cache FetchItems for sortk A# UID: [yL6MMqtEQOu6rv5TD3gETQ==] 
FetchNode: 2020/08/14 12:04:08.698365  node: yL6MMqtEQOu6rv5TD3gETQ== subKey: A#
fetchItems: 2020/08/14 12:04:08.698570 +++  Cache FetchItems for sortk A#G#:S UID: [uFJOOj43TwWf2mhcwn2QMw==] 
FetchNode: 2020/08/14 12:04:08.698593  node: uFJOOj43TwWf2mhcwn2QMw== subKey: A#G#:S
DB: 2020/08/14 12:04:08.701914 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.71686ms
grmgr: 2020/08/14 12:04:08.701937 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:04:08.701944 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:04:08.701950 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:04:08.701956 goroutine about to start 6 cUID,pUID   vRSsRVh0RSqHnodWpPxsxQ==  yL6MMqtEQOu6rv5TD3gETQ==  
rdfLoader: 2020/08/14 12:04:08.701962 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 12:04:08.702284 StartCh received for nodeAttach. rCnt = 3 
DB: 2020/08/14 12:04:08.705049 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 6.423573ms
DB: 2020/08/14 12:04:08.709327 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.896686ms
DB: 2020/08/14 12:04:08.712774 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.413508ms
DB: 2020/08/14 12:04:08.712791 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.413508ms
DB: 2020/08/14 12:04:08.715903 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 17.467703ms
DB: 2020/08/14 12:04:08.718358 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.513198ms
DB: 2020/08/14 12:04:08.718375 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.513198ms
DB: 2020/08/14 12:04:08.719487 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 17.39969ms
DB: 2020/08/14 12:04:08.721798 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.28047ms
DB: 2020/08/14 12:04:08.722384 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.788613ms
DB: 2020/08/14 12:04:08.724610 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.529109ms
DB: 2020/08/14 12:04:08.725800 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.176846ms
DB: 2020/08/14 12:04:08.728225 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.391397ms
DB: 2020/08/14 12:04:08.729602 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.616303ms
DB: 2020/08/14 12:04:08.732097 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.819869ms
DB: 2020/08/14 12:04:08.733938 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.234603ms
DB: 2020/08/14 12:04:08.737439 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.257791ms
AttachNode: main 2020/08/14 12:04:08.737614 FetchForUpdate: for parent    yL6MMqtEQOu6rv5TD3gETQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:04:08.737697 ** Cache FetchForUpdate Cache Key Value: [yL6MMqtEQOu6rv5TD3gETQ==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:04:08.737714 FetchForUpdate: for child    vRSsRVh0RSqHnodWpPxsxQ==
FetchForUpdate: 2020/08/14 12:04:08.737719 ** Cache FetchForUpdate Cache Key Value: [vRSsRVh0RSqHnodWpPxsxQ==]   sortk: A#
DB: 2020/08/14 12:04:08.738823 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 15.065409ms
DB: 2020/08/14 12:04:08.740621 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.171116ms
DB: 2020/08/14 12:04:08.744585 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.464241ms
DB: 2020/08/14 12:04:08.748729 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.596208ms
DB: 2020/08/14 12:04:08.754366 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.113434ms
DB: 2020/08/14 12:04:08.760039 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.058823ms
DB: 2020/08/14 12:04:08.764291 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.594028ms
DB: 2020/08/14 12:04:08.768261 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.645733ms
Cache: 2020/08/14 12:04:08.768842 In SetUpredAvailable: pUid, tUID:  vRSsRVh0RSqHnodWpPxsxQ== XiEcjZu6SvaE7s7ge78qag== A#G#:S
Cache: 2020/08/14 12:04:08.768849 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:04:08.772459 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.568123ms
Unlock: 2020/08/14 12:04:08.772653 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:04:08.772665 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:04:08.772927 +++  Cache FetchItems for sortk A# UID: [vRSsRVh0RSqHnodWpPxsxQ==] 
FetchNode: 2020/08/14 12:04:08.772978  node: vRSsRVh0RSqHnodWpPxsxQ== subKey: A#
fetchItems: 2020/08/14 12:04:08.773175 +++  Cache FetchItems for sortk A#G#:S UID: [yL6MMqtEQOu6rv5TD3gETQ==] 
FetchNode: 2020/08/14 12:04:08.773198  node: yL6MMqtEQOu6rv5TD3gETQ== subKey: A#G#:S
DB: 2020/08/14 12:04:08.775698 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.664673ms
DB: 2020/08/14 12:04:08.780219 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.459229ms
grmgr: 2020/08/14 12:04:08.780256 EndCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 12:04:08.781379 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 8.14833ms
DB: 2020/08/14 12:04:08.785407 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.459513ms
DB: 2020/08/14 12:04:08.785686 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.571728ms
DB: 2020/08/14 12:04:08.788699 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.255951ms
DB: 2020/08/14 12:04:08.790281 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.255951ms
DB: 2020/08/14 12:04:08.790611 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.56431ms
DB: 2020/08/14 12:04:08.796669 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.081699ms
DB: 2020/08/14 12:04:08.802611 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.400255ms
DB: 2020/08/14 12:04:08.806718 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 16.391298ms
DB: 2020/08/14 12:04:08.806893 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 16.391298ms
DB: 2020/08/14 12:04:08.807461 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.261541ms
DB: 2020/08/14 12:04:08.810929 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.790122ms
DB: 2020/08/14 12:04:08.812335 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.225386ms
DB: 2020/08/14 12:04:08.815035 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.799904ms
DB: 2020/08/14 12:04:08.818319 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.417859ms
DB: 2020/08/14 12:04:08.822414 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.505985ms
DB: 2020/08/14 12:04:08.826702 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.604229ms
DB: 2020/08/14 12:04:08.830461 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.446662ms
Cache: 2020/08/14 12:04:08.830475 In SetUpredAvailable: pUid, tUID:  uFJOOj43TwWf2mhcwn2QMw== T3dwYR0gRnuKjYNQU7/6LA== A#G#:S
Cache: 2020/08/14 12:04:08.830481 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:04:08.834040 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.521033ms
Unlock: 2020/08/14 12:04:08.834053 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:04:08.834057 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:04:08.834272 +++  Cache FetchItems for sortk A# UID: [vRSsRVh0RSqHnodWpPxsxQ==] 
FetchNode: 2020/08/14 12:04:08.834331  node: vRSsRVh0RSqHnodWpPxsxQ== subKey: A#
DB: 2020/08/14 12:04:08.842330 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.214112ms
grmgr: 2020/08/14 12:04:08.842514 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 12:04:08.851750 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 17.366692ms
DB: 2020/08/14 12:04:08.859475 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.162216ms
DB: 2020/08/14 12:04:08.862749 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.214874ms
DB: 2020/08/14 12:04:08.866223 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.358695ms
DB: 2020/08/14 12:04:08.872025 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.739955ms
DB: 2020/08/14 12:04:08.875377 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.289356ms
DB: 2020/08/14 12:04:08.879579 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.647164ms
DB: 2020/08/14 12:04:08.886068 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.893663ms
DB: 2020/08/14 12:04:08.889954 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.348361ms
DB: 2020/08/14 12:04:08.894136 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.369969ms
DB: 2020/08/14 12:04:08.902382 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.755572ms
Cache: 2020/08/14 12:04:08.902397 In SetUpredAvailable: pUid, tUID:  yL6MMqtEQOu6rv5TD3gETQ== 11t5T499R9qUqT18MX9kQg== A#G#:S
Cache: 2020/08/14 12:04:08.902403 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:04:08.905873 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.434957ms
Unlock: 2020/08/14 12:04:08.905885 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:04:08.905890 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 12:04:08.912389 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.417972ms
rdfLoader: 2020/08/14 12:04:08.912568 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 12:04:08.912580 cancel contexts
rdfLoader: 2020/08/14 12:04:08.912598 wait for autonomous goroutines to end
errlog: 2020/08/14 12:04:08.912625 Powering down...
grmgr: 2020/08/14 12:04:08.912634 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 12:04:08.912640 Powering down...
rdfuuid: 2020/08/14 12:04:08.912647 Powering down...
rdfLoader: 2020/08/14 12:04:08.912653 loader exists.....
DB:2020/08/14 12:14:44 log.go:18: ===============================================================================
errlog: 2020/08/14 12:14:44.303538 Powering on...
rdfLoader: 2020/08/14 12:14:44.304178 saveNode started......
rdfLoader: 2020/08/14 12:14:44.304193 define saveNode limiter......
rdfuuid: 2020/08/14 12:14:44.304205 Powering on...
grmgr: 2020/08/14 12:14:44.304223 Powering on...
rdfLoader: 2020/08/14 12:14:44.304234  principle goroutines started 
RDFreader: 2020/08/14 12:14:44.304258 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:14:44.304274 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 12:14:44.304280 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 12:14:44.304287 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 12:14:44.304292 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 12:14:44.304298 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 12:14:44.304302 spo read:      
RDFreader: 2020/08/14 12:14:44.304308 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 12:14:44.304313 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 12:14:44.304318 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 12:14:44.304324 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 12:14:44.304328 spo read:      
RDFreader: 2020/08/14 12:14:44.304334 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 12:14:44.304339 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 12:14:44.304344 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 12:14:44.304349 spo read:  b  Age  "58"
RDFreader: 2020/08/14 12:14:44.304355 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 12:14:44.304360 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 12:14:44.304366 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 12:14:44.304371 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 12:14:44.304376 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 12:14:44.304380 spo read:      
RDFreader: 2020/08/14 12:14:44.304385 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 12:14:44.304389 Send node batch on channel verifyCh
RDFreader: 2020/08/14 12:14:44.304394 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:14:44.304399 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 12:14:44.304404 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 12:14:44.304412 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 12:14:44.304417 spo read:  c  Age  "67"
RDFreader: 2020/08/14 12:14:44.304422 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 12:14:44.304428 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 12:14:44.304433 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 12:14:44.304438 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 12:14:44.304445 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 12:14:44.304450 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 12:14:44.304455 spo read:      
RDFreader: 2020/08/14 12:14:44.304461 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 12:14:44.304466 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 12:14:44.304471 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 12:14:44.304476 spo read:  d  Age  "36"
RDFreader: 2020/08/14 12:14:44.304481 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 12:14:44.304488 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 12:14:44.304492 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 12:14:44.304496 close verify channel
rdfLoader: 2020/08/14 12:14:44.304500 wait for goroutines to end
rdfLoader: 2020/08/14 12:14:44.304505 verify started....
rdfLoader: 2020/08/14 12:14:44.304510 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:14:44.304514 .  getType..
rdfLoader: 2020/08/14 12:14:44.304524 node.TyName : [Person]
DB: 2020/08/14 12:14:44.384145 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 79.52781ms
grmgr: 2020/08/14 12:14:44.384289 Looping..... 0
grmgr: 2020/08/14 12:14:44.384547 Looping..... 1
grmgr: 2020/08/14 12:14:44.384724 Looping..... 2
grmgr: 2020/08/14 12:14:44.384901 Looping..... 3
grmgr: 2020/08/14 12:14:44.385079 Looping..... 4
grmgr: 2020/08/14 12:14:44.385272 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:14:44.385284 .  getType..
rdfLoader: 2020/08/14 12:14:44.385289 node.TyName : [Person]
grmgr: 2020/08/14 12:14:44.385295 Looping..... 0
unmarshalRDF2020/08/14 12:14:44.385307 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:14:44.385319 Looping..... 1
grmgr: 2020/08/14 12:14:44.385325 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:14:44.385329 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:14:44.385337 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:14:44.385341 .  getType..
rdfLoader: 2020/08/14 12:14:44.385345 node.TyName : [Person]
grmgr: 2020/08/14 12:14:44.385350 Looping..... 0
rdfLoader: 2020/08/14 12:14:44.385360 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:14:44.385365 Add to SS . [Alfa]
unmarshalRDF2020/08/14 12:14:44.385427 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:14:44.385434 Exit  unmarshalRDF. 
saveNode: 2020/08/14 12:14:44.385440 read from saveCH channel 1 
unmarshalRDF2020/08/14 12:14:44.385449 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:14:44.385476 Looping..... 1
grmgr: 2020/08/14 12:14:44.385482 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:14:44.385486 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:14:44.385492 Looping..... 0
rdfLoader: 2020/08/14 12:14:44.385500 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:14:44.385505 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 12:14:44.385543 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:14:44.385548 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 12:14:44.385554 .  getType..
rdfLoader: 2020/08/14 12:14:44.385558 node.TyName : [Person]
unmarshalRDF2020/08/14 12:14:44.385567 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:14:44.385578 Looping..... 1
rdfLoader: 2020/08/14 12:14:44.385586 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 12:14:44.385591 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 12:14:44.385595 Add to SS . [Honda]
unmarshalRDF2020/08/14 12:14:44.385640 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:14:44.385656 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:14:44.385682 Looping..... 2
grmgr: 2020/08/14 12:14:44.385865 Looping..... 3
grmgr: 2020/08/14 12:14:44.386042 Looping..... 4
grmgr: 2020/08/14 12:14:44.386220 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:14:44.386231 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 12:14:44.386236 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:14:44.386240 Looping..... 0
saveNode: 2020/08/14 12:14:44.386246 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:14:44.386253 read from saveCH channel 2 
grmgr: 2020/08/14 12:14:44.386280 Looping..... 1
SaveRDFNode: xxx 2020/08/14 12:14:44.386291 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.386297 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.386304 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.386310 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.386316 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.386322 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.386327 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:14:44.386331 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:14:44.386349 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017440)}
SaveRDFNode: 2020/08/14 12:14:44.386355 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:14:44.386366 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.386370 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.386376 UID received  : kcc0oSSSSi6OrEbw0RJKSA==
grmgr: 2020/08/14 12:14:44.386633 Looping..... 2
grmgr: 2020/08/14 12:14:44.386813 Looping..... 3
grmgr: 2020/08/14 12:14:44.386991 Looping..... 4
grmgr: 2020/08/14 12:14:44.387172 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:14:44.387182 Looping..... 0
unmarshalRDF2020/08/14 12:14:44.387196 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:14:44.387206 Looping..... 1
rdfLoader: 2020/08/14 12:14:44.387215 Add to SS . [Bentley]
unmarshalRDF2020/08/14 12:14:44.387250 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:14:44.387255 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:14:44.387266 Looping..... 2
grmgr: 2020/08/14 12:14:44.387351 Looping..... 3
grmgr: 2020/08/14 12:14:44.387368 Looping..... 4
grmgr: 2020/08/14 12:14:44.387528 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:14:44.387538 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:14:44.387544 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 12:14:44.387550 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:14:44.387555 read from saveCH channel 3 
grmgr: 2020/08/14 12:14:44.387567 Looping..... 0
grmgr: 2020/08/14 12:14:44.387711 Looping..... 1
grmgr: 2020/08/14 12:14:44.387721 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:14:44.387726 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:14:44.387736 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.387742 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.387749 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.387755 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.387761 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.387767 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.387773 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:14:44.387777 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:14:44.387782 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017920)}
SaveRDFNode: 2020/08/14 12:14:44.387786 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:14:44.387794 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.387798 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.387803 UID received  : fcKgmSXSRr+zCOv6cm+Edg==
DB: 2020/08/14 12:14:44.397162 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.754924ms
DB: 2020/08/14 12:14:44.402061 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.861592ms
DB: 2020/08/14 12:14:44.407085 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.83274ms
DB: 2020/08/14 12:14:44.417051 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 29.207748ms
DB: 2020/08/14 12:14:44.420267 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 13.145034ms
DB: 2020/08/14 12:14:44.421889 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.803209ms
DB: 2020/08/14 12:14:44.425361 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.910231ms
SaveRDFNode: 2020/08/14 12:14:44.425378 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 12:14:44.425386 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.425390 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.425396 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:44.425410 a: = db.Item{PKey:[]uint8{0x91, 0xc7, 0x34, 0xa1, 0x24, 0x92, 0x4a, 0x2e, 0x8e, 0xac, 0x46, 0xf0, 0xd1, 0x12, 0x4a, 0x48}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:44.426508 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.583769ms
DB: 2020/08/14 12:14:44.430390 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.949222ms
SaveRDFNode: 2020/08/14 12:14:44.430405 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 12:14:44.430411 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.430415 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.430420 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:44.430430 a: = db.Item{PKey:[]uint8{0x91, 0xc7, 0x34, 0xa1, 0x24, 0x92, 0x4a, 0x2e, 0x8e, 0xac, 0x46, 0xf0, 0xd1, 0x12, 0x4a, 0x48}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:44.431338 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.797458ms
DB: 2020/08/14 12:14:44.435246 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.775173ms
SaveRDFNode: 2020/08/14 12:14:44.435259 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:14:44.435269 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:14:44.435275 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:14:44.435281 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:14:44.435287 read from saveCH channel 4 
grmgr: 2020/08/14 12:14:44.435292 Looping..... 0
grmgr: 2020/08/14 12:14:44.435351 Looping..... 1
grmgr: 2020/08/14 12:14:44.435359 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:14:44.435364 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:14:44.435373 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.435380 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.435385 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.435391 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.435399 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.435405 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.435411 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:14:44.435415 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:14:44.435421 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000383c20)}
SaveRDFNode: 2020/08/14 12:14:44.435425 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:14:44.435435 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.435439 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.435445 UID received  : T4A1I/zuRpCoNPVzqX/Vow==
DB: 2020/08/14 12:14:44.435923 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.552285ms
SaveRDFNode: 2020/08/14 12:14:44.435942 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017920)}
rdfUIDdb: 2020/08/14 12:14:44.435948 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.435953 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.435959 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:44.435977 a: = db.Item{PKey:[]uint8{0x7d, 0xc2, 0xa0, 0x99, 0x25, 0xd2, 0x46, 0xbf, 0xb3, 0x8, 0xeb, 0xfa, 0x72, 0x6f, 0x84, 0x76}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:44.440594 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.117861ms
DB: 2020/08/14 12:14:44.440850 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.840481ms
SaveRDFNode: 2020/08/14 12:14:44.440863 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017920)}
rdfUIDdb: 2020/08/14 12:14:44.440869 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.440873 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.440879 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:44.440890 a: = db.Item{PKey:[]uint8{0x7d, 0xc2, 0xa0, 0x99, 0x25, 0xd2, 0x46, 0xbf, 0xb3, 0x8, 0xeb, 0xfa, 0x72, 0x6f, 0x84, 0x76}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:44.445482 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.854889ms
DB: 2020/08/14 12:14:44.445962 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.023226ms
SaveRDFNode: 2020/08/14 12:14:44.445973 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:14:44.445981 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:14:44.445985 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:14:44.445990 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 12:14:44.445995 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 12:14:44.446019 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.446026 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.446031 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.446057 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.446065 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.446071 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:44.446077 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:14:44.446081 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:14:44.446088 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc00021a780)}
SaveRDFNode: 2020/08/14 12:14:44.446092 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:14:44.446100 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.446104 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.446110 UID received  : M9XkrELZT7+olCwjClAvhw==
grmgr: 2020/08/14 12:14:44.446302 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 12:14:44.450399 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.883376ms
DB: 2020/08/14 12:14:44.451032 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.895945ms
DB: 2020/08/14 12:14:44.455216 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.783885ms
DB: 2020/08/14 12:14:44.456180 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.115666ms
DB: 2020/08/14 12:14:44.460275 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.858592ms
SaveRDFNode: 2020/08/14 12:14:44.460291 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000383c20)}
rdfUIDdb: 2020/08/14 12:14:44.460298 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.460302 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.460309 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:44.460321 a: = db.Item{PKey:[]uint8{0x4f, 0x80, 0x35, 0x23, 0xfc, 0xee, 0x46, 0x90, 0xa8, 0x34, 0xf5, 0x73, 0xa9, 0x7f, 0xd5, 0xa3}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:44.460901 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.688515ms
DB: 2020/08/14 12:14:44.465201 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.849814ms
SaveRDFNode: 2020/08/14 12:14:44.465216 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000383c20)}
rdfUIDdb: 2020/08/14 12:14:44.465222 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.465238 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.465244 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:44.465255 a: = db.Item{PKey:[]uint8{0x4f, 0x80, 0x35, 0x23, 0xfc, 0xee, 0x46, 0x90, 0xa8, 0x34, 0xf5, 0x73, 0xa9, 0x7f, 0xd5, 0xa3}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:44.465602 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.657241ms
DB: 2020/08/14 12:14:44.470279 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.994874ms
SaveRDFNode: 2020/08/14 12:14:44.470304 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:14:44.470313 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 12:14:44.470838 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.200346ms
SaveRDFNode: 2020/08/14 12:14:44.471031 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00021a780)}
rdfUIDdb: 2020/08/14 12:14:44.471043 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.471048 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.471053 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:44.471065 a: = db.Item{PKey:[]uint8{0x33, 0xd5, 0xe4, 0xac, 0x42, 0xd9, 0x4f, 0xbf, 0xa8, 0x94, 0x2c, 0x23, 0xa, 0x50, 0x2f, 0x87}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:44.476031 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.934258ms
SaveRDFNode: 2020/08/14 12:14:44.476045 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00021a780)}
rdfUIDdb: 2020/08/14 12:14:44.476051 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:44.476056 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:44.476061 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:44.476076 a: = db.Item{PKey:[]uint8{0x33, 0xd5, 0xe4, 0xac, 0x42, 0xd9, 0x4f, 0xbf, 0xa8, 0x94, 0x2c, 0x23, 0xa, 0x50, 0x2f, 0x87}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:44.481102 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.992904ms
SaveRDFNode: 2020/08/14 12:14:44.481116 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 12:14:44.481125 saveNode finished waiting...exiting
grmgr: 2020/08/14 12:14:44.481132 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 12:14:44.481141 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 12:14:44.481147 Looping..... 0
grmgr: 2020/08/14 12:14:44.481167 Looping..... 1
grmgr: 2020/08/14 12:14:44.481391 Looping..... 2
grmgr: 2020/08/14 12:14:44.481571 Looping..... 3
grmgr: 2020/08/14 12:14:44.481751 Looping..... 4
grmgr: 2020/08/14 12:14:44.481931 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:14:44.481940 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:44.481947 goroutine about to start 1 cUID,pUID   kcc0oSSSSi6OrEbw0RJKSA==  fcKgmSXSRr+zCOv6cm+Edg==  
attachNode: 2020/08/14 12:14:44.481953 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 12:14:44.481958 Looping..... 0
grmgr: 2020/08/14 12:14:44.481979 Looping..... 1
grmgr: 2020/08/14 12:14:44.481984 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:14:44.481989 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:14:44.481994 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:44.481999 goroutine about to start 2 cUID,pUID   kcc0oSSSSi6OrEbw0RJKSA==  T4A1I/zuRpCoNPVzqX/Vow==  
attachNode: 2020/08/14 12:14:44.482004 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 12:14:44.482009 Looping..... 0
grmgr: 2020/08/14 12:14:44.482880 Looping..... 1
grmgr: 2020/08/14 12:14:44.482893 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:14:44.482898 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:14:44.482914 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:44.482920 goroutine about to start 3 cUID,pUID   fcKgmSXSRr+zCOv6cm+Edg==  kcc0oSSSSi6OrEbw0RJKSA==  
attachNode: 2020/08/14 12:14:44.482926 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 12:14:44.482932 Looping..... 0
grmgr: 2020/08/14 12:14:44.484753 Looping..... 1
grmgr: 2020/08/14 12:14:44.484768 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:14:44.484773 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:14:44.485385 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.318099ms
DB: 2020/08/14 12:14:44.486087 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.107434ms
DB: 2020/08/14 12:14:44.488714 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.892887ms
DB: 2020/08/14 12:14:44.490497 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.057552ms
DB: 2020/08/14 12:14:44.497211 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 8.457492ms
DB: 2020/08/14 12:14:44.497744 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 11.611485ms
DB: 2020/08/14 12:14:44.502759 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.005658ms
DB: 2020/08/14 12:14:44.505898 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.641092ms
DB: 2020/08/14 12:14:44.506656 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.841261ms
DB: 2020/08/14 12:14:44.518108 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 26.944378ms
DB: 2020/08/14 12:14:44.522179 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.022286ms
DB: 2020/08/14 12:14:44.524324 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 18.243843ms
DB: 2020/08/14 12:14:44.526897 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 20.18508ms
DB: 2020/08/14 12:14:44.528329 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.922065ms
DB: 2020/08/14 12:14:44.529865 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.45191ms
DB: 2020/08/14 12:14:44.535791 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.170644ms
AttachNode: main 2020/08/14 12:14:44.535809 FetchForUpdate: for parent    kcc0oSSSSi6OrEbw0RJKSA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:44.535814 ** Cache FetchForUpdate Cache Key Value: [kcc0oSSSSi6OrEbw0RJKSA==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:14:44.535821  node: kcc0oSSSSi6OrEbw0RJKSA== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:14:44.536001 FetchForUpdate: for child    fcKgmSXSRr+zCOv6cm+Edg==
FetchForUpdate: 2020/08/14 12:14:44.536010 ** Cache FetchForUpdate Cache Key Value: [fcKgmSXSRr+zCOv6cm+Edg==]   sortk: A#
FetchNode: 2020/08/14 12:14:44.536024  node: fcKgmSXSRr+zCOv6cm+Edg== subKey: A#
DB: 2020/08/14 12:14:44.537318 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.925709ms
AttachNode: main 2020/08/14 12:14:44.537332 FetchForUpdate: for parent    fcKgmSXSRr+zCOv6cm+Edg==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:44.537337 ** Cache FetchForUpdate Cache Key Value: [fcKgmSXSRr+zCOv6cm+Edg==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:14:44.537349 FetchForUpdate: for child    kcc0oSSSSi6OrEbw0RJKSA==
FetchForUpdate: 2020/08/14 12:14:44.537366 ** Cache FetchForUpdate Cache Key Value: [kcc0oSSSSi6OrEbw0RJKSA==]   sortk: A#
DB: 2020/08/14 12:14:44.538848 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.902961ms
AttachNode: main 2020/08/14 12:14:44.538866 FetchForUpdate: for parent    T4A1I/zuRpCoNPVzqX/Vow==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:44.538871 ** Cache FetchForUpdate Cache Key Value: [T4A1I/zuRpCoNPVzqX/Vow==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:14:44.538877  node: T4A1I/zuRpCoNPVzqX/Vow== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:14:44.539215 FetchForUpdate: for child    kcc0oSSSSi6OrEbw0RJKSA==
FetchForUpdate: 2020/08/14 12:14:44.539241 ** Cache FetchForUpdate Cache Key Value: [kcc0oSSSSi6OrEbw0RJKSA==]   sortk: A#
DB: 2020/08/14 12:14:44.539716 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.860183ms
FetchForUpdate: 2020/08/14 12:14:44.539785 len(nb): 1
fetchItems: 2020/08/14 12:14:44.539795 +++  Cache FetchItems for sortk A#G#:S UID: [kcc0oSSSSi6OrEbw0RJKSA==] 
FetchNode: 2020/08/14 12:14:44.539800  node: kcc0oSSSSi6OrEbw0RJKSA== subKey: A#G#:S
DB: 2020/08/14 12:14:44.541932 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.020577ms
FetchForUpdate: 2020/08/14 12:14:44.541966 len(nb): 1
fetchItems: 2020/08/14 12:14:44.541996 +++  Cache FetchItems for sortk A#G#:S UID: [T4A1I/zuRpCoNPVzqX/Vow==] 
FetchNode: 2020/08/14 12:14:44.542001  node: T4A1I/zuRpCoNPVzqX/Vow== subKey: A#G#:S
DB: 2020/08/14 12:14:44.544288 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.459711ms
DB: 2020/08/14 12:14:44.545952 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.921875ms
DB: 2020/08/14 12:14:44.550065 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.027395ms
DB: 2020/08/14 12:14:44.551489 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.864963ms
DB: 2020/08/14 12:14:44.555648 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 19.564376ms
FetchForUpdate: 2020/08/14 12:14:44.555917 len(nb): 7
fetchItems: 2020/08/14 12:14:44.555933 +++  Cache FetchItems for sortk A# UID: [fcKgmSXSRr+zCOv6cm+Edg==] 
FetchNode: 2020/08/14 12:14:44.555938  node: fcKgmSXSRr+zCOv6cm+Edg== subKey: A#
DB: 2020/08/14 12:14:44.559615 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.625033ms
DB: 2020/08/14 12:14:44.572221 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.683802ms
DB: 2020/08/14 12:14:44.577186 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.755236ms
DB: 2020/08/14 12:14:44.582935 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.330502ms
DB: 2020/08/14 12:14:44.589785 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.488257ms
DB: 2020/08/14 12:14:44.594789 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.935266ms
DB: 2020/08/14 12:14:44.600492 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.632073ms
DB: 2020/08/14 12:14:44.606917 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.360184ms
DB: 2020/08/14 12:14:44.611625 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.642309ms
DB: 2020/08/14 12:14:44.616639 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.94127ms
DB: 2020/08/14 12:14:44.621368 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.672793ms
Cache: 2020/08/14 12:14:44.621392 In SetUpredAvailable: pUid, tUID:  kcc0oSSSSi6OrEbw0RJKSA== kcc0oSSSSi6OrEbw0RJKSA== A#G#:S
Cache: 2020/08/14 12:14:44.621398 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:44.626489 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.057188ms
Unlock: 2020/08/14 12:14:44.626504 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:44.626511 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:14:44.626694 +++  Cache FetchItems for sortk A# UID: [kcc0oSSSSi6OrEbw0RJKSA==] 
FetchNode: 2020/08/14 12:14:44.626744  node: kcc0oSSSSi6OrEbw0RJKSA== subKey: A#
fetchItems: 2020/08/14 12:14:44.626921 +++  Cache FetchItems for sortk A#G#:S UID: [fcKgmSXSRr+zCOv6cm+Edg==] 
FetchNode: 2020/08/14 12:14:44.626945  node: fcKgmSXSRr+zCOv6cm+Edg== subKey: A#G#:S
DB: 2020/08/14 12:14:44.630707 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.91199ms
fetchItems: 2020/08/14 12:14:44.630893 +++  Cache FetchItems for sortk A# UID: [kcc0oSSSSi6OrEbw0RJKSA==] 
FetchNode: 2020/08/14 12:14:44.630901  node: kcc0oSSSSi6OrEbw0RJKSA== subKey: A#
DB: 2020/08/14 12:14:44.632926 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.356316ms
grmgr: 2020/08/14 12:14:44.633017 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:14:44.633029 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:14:44.633140 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:44.633148 goroutine about to start 4 cUID,pUID   fcKgmSXSRr+zCOv6cm+Edg==  T4A1I/zuRpCoNPVzqX/Vow==  
attachNode: 2020/08/14 12:14:44.633154 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 12:14:44.633166 Looping..... 0
grmgr: 2020/08/14 12:14:44.635504 Looping..... 1
grmgr: 2020/08/14 12:14:44.635517 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:14:44.635522 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:14:44.636454 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 9.457269ms
DB: 2020/08/14 12:14:44.638344 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 7.414033ms
DB: 2020/08/14 12:14:44.640614 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.039947ms
DB: 2020/08/14 12:14:44.645030 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.382524ms
DB: 2020/08/14 12:14:44.652236 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.841271ms
DB: 2020/08/14 12:14:44.655577 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.306269ms
DB: 2020/08/14 12:14:44.657481 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 19.802911ms
DB: 2020/08/14 12:14:44.660821 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.19436ms
DB: 2020/08/14 12:14:44.667147 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 20.323632ms
DB: 2020/08/14 12:14:44.669390 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.499947ms
AttachNode: main 2020/08/14 12:14:44.669404 FetchForUpdate: for parent    T4A1I/zuRpCoNPVzqX/Vow==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:44.669410 ** Cache FetchForUpdate Cache Key Value: [T4A1I/zuRpCoNPVzqX/Vow==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:14:44.669422 FetchForUpdate: for child    fcKgmSXSRr+zCOv6cm+Edg==
FetchForUpdate: 2020/08/14 12:14:44.669427 ** Cache FetchForUpdate Cache Key Value: [fcKgmSXSRr+zCOv6cm+Edg==]   sortk: A#
DB: 2020/08/14 12:14:44.671594 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.391869ms
DB: 2020/08/14 12:14:44.676604 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.895021ms
DB: 2020/08/14 12:14:44.683282 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.342269ms
DB: 2020/08/14 12:14:44.688003 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.655432ms
DB: 2020/08/14 12:14:44.692921 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.8446ms
DB: 2020/08/14 12:14:44.699168 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.180656ms
DB: 2020/08/14 12:14:44.703868 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.639852ms
DB: 2020/08/14 12:14:44.709057 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.801546ms
DB: 2020/08/14 12:14:44.713949 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.832308ms
Cache: 2020/08/14 12:14:44.713963 In SetUpredAvailable: pUid, tUID:  T4A1I/zuRpCoNPVzqX/Vow== T4A1I/zuRpCoNPVzqX/Vow== A#G#:S
Cache: 2020/08/14 12:14:44.713969 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:44.718813 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.80886ms
Unlock: 2020/08/14 12:14:44.718831 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:44.718838 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:14:44.719055 +++  Cache FetchItems for sortk A#G#:S UID: [T4A1I/zuRpCoNPVzqX/Vow==] 
FetchNode: 2020/08/14 12:14:44.719081  node: T4A1I/zuRpCoNPVzqX/Vow== subKey: A#G#:S
fetchItems: 2020/08/14 12:14:44.719249 +++  Cache FetchItems for sortk A# UID: [kcc0oSSSSi6OrEbw0RJKSA==] 
FetchNode: 2020/08/14 12:14:44.719290  node: kcc0oSSSSi6OrEbw0RJKSA== subKey: A#
DB: 2020/08/14 12:14:44.723624 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.70833ms
grmgr: 2020/08/14 12:14:44.723642 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:14:44.723648 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:14:44.723654 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:44.723660 goroutine about to start 5 cUID,pUID   T4A1I/zuRpCoNPVzqX/Vow==  kcc0oSSSSi6OrEbw0RJKSA==  
attachNode: 2020/08/14 12:14:44.723666 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 12:14:44.723671 Looping..... 0
grmgr: 2020/08/14 12:14:44.723764 Looping..... 1
grmgr: 2020/08/14 12:14:44.723774 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:14:44.723778 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:14:44.727186 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 7.848342ms
DB: 2020/08/14 12:14:44.731338 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.501668ms
DB: 2020/08/14 12:14:44.734970 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.598167ms
DB: 2020/08/14 12:14:44.738282 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 19.164877ms
DB: 2020/08/14 12:14:44.739182 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.858368ms
DB: 2020/08/14 12:14:44.742952 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.740129ms
DB: 2020/08/14 12:14:44.745560 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.723274ms
DB: 2020/08/14 12:14:44.748236 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.220792ms
DB: 2020/08/14 12:14:44.748923 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 21.471072ms
DB: 2020/08/14 12:14:44.750603 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.99747ms
DB: 2020/08/14 12:14:44.750624 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.99747ms
DB: 2020/08/14 12:14:44.753659 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.026401ms
AttachNode: main 2020/08/14 12:14:44.753675 FetchForUpdate: for parent    kcc0oSSSSi6OrEbw0RJKSA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:44.753680 ** Cache FetchForUpdate Cache Key Value: [kcc0oSSSSi6OrEbw0RJKSA==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:14:44.753695 FetchForUpdate: for child    T4A1I/zuRpCoNPVzqX/Vow==
FetchForUpdate: 2020/08/14 12:14:44.753700 ** Cache FetchForUpdate Cache Key Value: [T4A1I/zuRpCoNPVzqX/Vow==]   sortk: A#
DB: 2020/08/14 12:14:44.754166 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.787891ms
DB: 2020/08/14 12:14:44.755531 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.87256ms
DB: 2020/08/14 12:14:44.755548 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.87256ms
DB: 2020/08/14 12:14:44.759072 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.785727ms
DB: 2020/08/14 12:14:44.760755 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.125466ms
DB: 2020/08/14 12:14:44.766241 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.606381ms
DB: 2020/08/14 12:14:44.767137 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.150759ms
DB: 2020/08/14 12:14:44.771738 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.864529ms
DB: 2020/08/14 12:14:44.777401 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.084264ms
DB: 2020/08/14 12:14:44.784393 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.442018ms
DB: 2020/08/14 12:14:44.789829 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.80351ms
DB: 2020/08/14 12:14:44.795599 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.206057ms
DB: 2020/08/14 12:14:44.800920 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.004793ms
Cache: 2020/08/14 12:14:44.801103 In SetUpredAvailable: pUid, tUID:  fcKgmSXSRr+zCOv6cm+Edg== fcKgmSXSRr+zCOv6cm+Edg== A#G#:S
Cache: 2020/08/14 12:14:44.801115 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:44.806187 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.031709ms
Unlock: 2020/08/14 12:14:44.806200 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:44.806206 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:14:44.806471 +++  Cache FetchItems for sortk A# UID: [fcKgmSXSRr+zCOv6cm+Edg==] 
FetchNode: 2020/08/14 12:14:44.806505  node: fcKgmSXSRr+zCOv6cm+Edg== subKey: A#
fetchItems: 2020/08/14 12:14:44.806722 +++  Cache FetchItems for sortk A#G#:S UID: [kcc0oSSSSi6OrEbw0RJKSA==] 
FetchNode: 2020/08/14 12:14:44.806749  node: kcc0oSSSSi6OrEbw0RJKSA== subKey: A#G#:S
DB: 2020/08/14 12:14:44.811582 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.27078ms
grmgr: 2020/08/14 12:14:44.811601 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:14:44.811607 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:14:44.811614 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:44.811620 goroutine about to start 6 cUID,pUID   T4A1I/zuRpCoNPVzqX/Vow==  fcKgmSXSRr+zCOv6cm+Edg==  
rdfLoader: 2020/08/14 12:14:44.811625 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 12:14:44.812151 StartCh received for nodeAttach. rCnt = 3 
DB: 2020/08/14 12:14:44.815809 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 8.999561ms
DB: 2020/08/14 12:14:44.822108 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.192701ms
DB: 2020/08/14 12:14:44.827427 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 20.869885ms
DB: 2020/08/14 12:14:44.830022 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.680477ms
DB: 2020/08/14 12:14:44.830039 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.680477ms
DB: 2020/08/14 12:14:44.834537 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 22.60481ms
DB: 2020/08/14 12:14:44.834951 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.867065ms
DB: 2020/08/14 12:14:44.834967 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.867065ms
DB: 2020/08/14 12:14:44.836112 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.419264ms
DB: 2020/08/14 12:14:44.837945 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.374248ms
DB: 2020/08/14 12:14:44.840409 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.217502ms
DB: 2020/08/14 12:14:44.841318 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.860745ms
DB: 2020/08/14 12:14:44.843672 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.689456ms
DB: 2020/08/14 12:14:44.845437 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.965229ms
DB: 2020/08/14 12:14:44.847790 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.085745ms
DB: 2020/08/14 12:14:44.848038 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.615261ms
DB: 2020/08/14 12:14:44.852949 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.108857ms
DB: 2020/08/14 12:14:44.855107 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.503455ms
DB: 2020/08/14 12:14:44.858173 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.718039ms
AttachNode: main 2020/08/14 12:14:44.858188 FetchForUpdate: for parent    fcKgmSXSRr+zCOv6cm+Edg==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:44.858193 ** Cache FetchForUpdate Cache Key Value: [fcKgmSXSRr+zCOv6cm+Edg==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:14:44.858206 FetchForUpdate: for child    T4A1I/zuRpCoNPVzqX/Vow==
FetchForUpdate: 2020/08/14 12:14:44.858211 ** Cache FetchForUpdate Cache Key Value: [T4A1I/zuRpCoNPVzqX/Vow==]   sortk: A#
DB: 2020/08/14 12:14:44.860935 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.223743ms
DB: 2020/08/14 12:14:44.866570 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.068603ms
DB: 2020/08/14 12:14:44.873972 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.685405ms
DB: 2020/08/14 12:14:44.879710 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.075084ms
DB: 2020/08/14 12:14:44.885463 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.170443ms
DB: 2020/08/14 12:14:44.890861 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.075021ms
Cache: 2020/08/14 12:14:44.891027 In SetUpredAvailable: pUid, tUID:  T4A1I/zuRpCoNPVzqX/Vow== K6juJul7SSuhsGQGnXrAUA== A#G#:S
Cache: 2020/08/14 12:14:44.891038 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:44.896058 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.979824ms
Unlock: 2020/08/14 12:14:44.896069 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:44.896078 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:14:44.896342 +++  Cache FetchItems for sortk A# UID: [T4A1I/zuRpCoNPVzqX/Vow==] 
FetchNode: 2020/08/14 12:14:44.896378  node: T4A1I/zuRpCoNPVzqX/Vow== subKey: A#
fetchItems: 2020/08/14 12:14:44.896592 +++  Cache FetchItems for sortk A#G#:S UID: [fcKgmSXSRr+zCOv6cm+Edg==] 
FetchNode: 2020/08/14 12:14:44.896683  node: fcKgmSXSRr+zCOv6cm+Edg== subKey: A#G#:S
DB: 2020/08/14 12:14:44.901240 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.056927ms
grmgr: 2020/08/14 12:14:44.901260 EndCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 12:14:44.904884 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 8.163192ms
DB: 2020/08/14 12:14:44.910116 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.081881ms
DB: 2020/08/14 12:14:44.913822 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 17.389672ms
DB: 2020/08/14 12:14:44.918156 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.983254ms
DB: 2020/08/14 12:14:44.918181 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.983254ms
DB: 2020/08/14 12:14:44.924248 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.025353ms
DB: 2020/08/14 12:14:44.924266 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.025353ms
DB: 2020/08/14 12:14:44.924820 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.335812ms
DB: 2020/08/14 12:14:44.930776 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.27032ms
DB: 2020/08/14 12:14:44.931406 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.186279ms
DB: 2020/08/14 12:14:44.937245 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.097732ms
DB: 2020/08/14 12:14:44.938024 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.952451ms
DB: 2020/08/14 12:14:44.945284 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.709074ms
DB: 2020/08/14 12:14:44.950840 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.950942ms
DB: 2020/08/14 12:14:44.957102 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.205317ms
DB: 2020/08/14 12:14:44.965910 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.718321ms
DB: 2020/08/14 12:14:44.970881 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.880204ms
DB: 2020/08/14 12:14:44.977160 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.18734ms
DB: 2020/08/14 12:14:44.982158 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.929962ms
Cache: 2020/08/14 12:14:44.982176 In SetUpredAvailable: pUid, tUID:  kcc0oSSSSi6OrEbw0RJKSA== 1GpoM9B9TmuBZCiD3c3DNg== A#G#:S
Cache: 2020/08/14 12:14:44.982182 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:44.987229 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.003871ms
Unlock: 2020/08/14 12:14:44.987246 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:44.987252 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:14:44.987688 +++  Cache FetchItems for sortk A# UID: [T4A1I/zuRpCoNPVzqX/Vow==] 
FetchNode: 2020/08/14 12:14:44.987724  node: T4A1I/zuRpCoNPVzqX/Vow== subKey: A#
DB: 2020/08/14 12:14:44.992802 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.285419ms
grmgr: 2020/08/14 12:14:44.992820 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 12:14:45.006315 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 18.515636ms
DB: 2020/08/14 12:14:45.015838 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.730305ms
DB: 2020/08/14 12:14:45.021073 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.788499ms
DB: 2020/08/14 12:14:45.027286 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.199719ms
DB: 2020/08/14 12:14:45.034672 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.635133ms
DB: 2020/08/14 12:14:45.040111 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.849956ms
DB: 2020/08/14 12:14:45.045482 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.897825ms
DB: 2020/08/14 12:14:45.052548 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.50171ms
DB: 2020/08/14 12:14:45.057813 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.714007ms
DB: 2020/08/14 12:14:45.063653 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.274487ms
DB: 2020/08/14 12:14:45.069071 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.982028ms
Cache: 2020/08/14 12:14:45.069086 In SetUpredAvailable: pUid, tUID:  fcKgmSXSRr+zCOv6cm+Edg== 3VHOd4SXRDmOw+VrlSlneQ== A#G#:S
Cache: 2020/08/14 12:14:45.069091 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:45.074373 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.246291ms
Unlock: 2020/08/14 12:14:45.074386 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:45.074391 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 12:14:45.082747 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.275057ms
rdfLoader: 2020/08/14 12:14:45.082764 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 12:14:45.082771 cancel contexts
rdfLoader: 2020/08/14 12:14:45.082777 wait for autonomous goroutines to end
errlog: 2020/08/14 12:14:45.082784 Powering down...
grmgr: 2020/08/14 12:14:45.082803 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 12:14:45.082808 Powering down...
rdfuuid: 2020/08/14 12:14:45.082814 Powering down...
rdfLoader: 2020/08/14 12:14:45.082819 loader exists.....
DB:2020/08/14 12:14:50 log.go:18: ===============================================================================
errlog: 2020/08/14 12:14:50.626347 Powering on...
rdfLoader: 2020/08/14 12:14:50.626760 saveNode started......
rdfLoader: 2020/08/14 12:14:50.626771 define saveNode limiter......
rdfuuid: 2020/08/14 12:14:50.626783 Powering on...
grmgr: 2020/08/14 12:14:50.626800 Powering on...
rdfLoader: 2020/08/14 12:14:50.626811  principle goroutines started 
RDFreader: 2020/08/14 12:14:50.626834 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:14:50.626849 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 12:14:50.626855 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 12:14:50.626861 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 12:14:50.626867 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 12:14:50.626872 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 12:14:50.626877 spo read:      
RDFreader: 2020/08/14 12:14:50.626882 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 12:14:50.626887 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 12:14:50.626892 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 12:14:50.626897 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 12:14:50.626901 spo read:      
RDFreader: 2020/08/14 12:14:50.626906 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 12:14:50.626911 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 12:14:50.626916 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 12:14:50.626921 spo read:  b  Age  "58"
RDFreader: 2020/08/14 12:14:50.626927 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 12:14:50.626931 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 12:14:50.626937 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 12:14:50.626942 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 12:14:50.626947 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 12:14:50.626951 spo read:      
RDFreader: 2020/08/14 12:14:50.626956 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 12:14:50.626960 Send node batch on channel verifyCh
RDFreader: 2020/08/14 12:14:50.626965 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:14:50.626969 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 12:14:50.626974 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 12:14:50.626981 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 12:14:50.626986 spo read:  c  Age  "67"
RDFreader: 2020/08/14 12:14:50.626991 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 12:14:50.626996 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 12:14:50.627001 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 12:14:50.627006 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 12:14:50.627013 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 12:14:50.627018 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 12:14:50.627023 spo read:      
RDFreader: 2020/08/14 12:14:50.627028 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 12:14:50.627033 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 12:14:50.627038 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 12:14:50.627043 spo read:  d  Age  "36"
RDFreader: 2020/08/14 12:14:50.627048 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 12:14:50.627054 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 12:14:50.627058 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 12:14:50.627062 close verify channel
rdfLoader: 2020/08/14 12:14:50.627066 wait for goroutines to end
rdfLoader: 2020/08/14 12:14:50.627070 verify started....
rdfLoader: 2020/08/14 12:14:50.627075 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:14:50.627079 .  getType..
rdfLoader: 2020/08/14 12:14:50.627083 node.TyName : [Person]
DB: 2020/08/14 12:14:50.702445 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 75.294907ms
grmgr: 2020/08/14 12:14:50.702599 Looping..... 0
grmgr: 2020/08/14 12:14:50.702874 Looping..... 1
grmgr: 2020/08/14 12:14:50.703058 Looping..... 2
grmgr: 2020/08/14 12:14:50.703181 Looping..... 3
grmgr: 2020/08/14 12:14:50.703358 Looping..... 4
grmgr: 2020/08/14 12:14:50.703538 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:14:50.703550 .  getType..
rdfLoader: 2020/08/14 12:14:50.703555 node.TyName : [Person]
grmgr: 2020/08/14 12:14:50.703560 Looping..... 0
unmarshalRDF2020/08/14 12:14:50.703585 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:14:50.703600 Looping..... 1
grmgr: 2020/08/14 12:14:50.703606 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:14:50.703610 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:14:50.703618 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:14:50.703623 .  getType..
rdfLoader: 2020/08/14 12:14:50.703627 node.TyName : [Person]
grmgr: 2020/08/14 12:14:50.703631 Looping..... 0
rdfLoader: 2020/08/14 12:14:50.703642 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:14:50.703647 Add to SS . [Alfa]
unmarshalRDF2020/08/14 12:14:50.703713 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:14:50.703721 Exit  unmarshalRDF. 
saveNode: 2020/08/14 12:14:50.703727 read from saveCH channel 1 
unmarshalRDF2020/08/14 12:14:50.703736 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:14:50.703768 Looping..... 1
grmgr: 2020/08/14 12:14:50.703774 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:14:50.703778 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:14:50.703784 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:14:50.703788 Looping..... 0
rdfLoader: 2020/08/14 12:14:50.703797 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:14:50.703802 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 12:14:50.703855 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:14:50.703860 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 12:14:50.703865 .  getType..
rdfLoader: 2020/08/14 12:14:50.703870 node.TyName : [Person]
unmarshalRDF2020/08/14 12:14:50.703878 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:14:50.703889 Looping..... 1
rdfLoader: 2020/08/14 12:14:50.703897 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 12:14:50.703902 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 12:14:50.703906 Add to SS . [Honda]
unmarshalRDF2020/08/14 12:14:50.703961 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:14:50.703973 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:14:50.703995 Looping..... 2
grmgr: 2020/08/14 12:14:50.704149 Looping..... 3
grmgr: 2020/08/14 12:14:50.704327 Looping..... 4
grmgr: 2020/08/14 12:14:50.704505 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:14:50.704515 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:14:50.704520 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/14 12:14:50.704525 Looping..... 0
saveNode: 2020/08/14 12:14:50.704531 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:14:50.704537 read from saveCH channel 2 
grmgr: 2020/08/14 12:14:50.704564 Looping..... 1
SaveRDFNode: xxx 2020/08/14 12:14:50.704575 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.704581 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.704587 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.704594 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.704600 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.704606 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.704612 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:14:50.704616 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:14:50.704624 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017440)}
SaveRDFNode: 2020/08/14 12:14:50.704628 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:14:50.704639 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.704643 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.704659 UID received  : EGKagb91SECBopNXmxPm6A==
grmgr: 2020/08/14 12:14:50.704995 Looping..... 2
grmgr: 2020/08/14 12:14:50.705014 Looping..... 3
grmgr: 2020/08/14 12:14:50.705134 Looping..... 4
grmgr: 2020/08/14 12:14:50.705312 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:14:50.705321 Looping..... 0
unmarshalRDF2020/08/14 12:14:50.705335 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:14:50.705346 Looping..... 1
rdfLoader: 2020/08/14 12:14:50.705355 Add to SS . [Bentley]
unmarshalRDF2020/08/14 12:14:50.705389 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:14:50.705393 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:14:50.705408 Looping..... 2
grmgr: 2020/08/14 12:14:50.705493 Looping..... 3
grmgr: 2020/08/14 12:14:50.705671 Looping..... 4
grmgr: 2020/08/14 12:14:50.705688 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:14:50.705694 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 12:14:50.705702 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:14:50.705707 read from saveCH channel 3 
grmgr: 2020/08/14 12:14:50.705712 Looping..... 0
grmgr: 2020/08/14 12:14:50.705736 Looping..... 1
grmgr: 2020/08/14 12:14:50.705741 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:14:50.705752 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:14:50.705761 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.705768 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.705775 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.705781 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.705786 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.705792 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.705798 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:14:50.705802 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:14:50.705807 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017920)}
SaveRDFNode: 2020/08/14 12:14:50.705828 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:14:50.705837 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.705841 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.705848 UID received  : T+4hXcaGSJWqdtiYrJB/BA==
DB: 2020/08/14 12:14:50.712237 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.542609ms
DB: 2020/08/14 12:14:50.715883 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.98742ms
DB: 2020/08/14 12:14:50.719465 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.535143ms
DB: 2020/08/14 12:14:50.723346 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.615558ms
DB: 2020/08/14 12:14:50.726910 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.527209ms
DB: 2020/08/14 12:14:50.728244 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 15.965764ms
DB: 2020/08/14 12:14:50.730613 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.597051ms
SaveRDFNode: 2020/08/14 12:14:50.730628 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017920)}
rdfUIDdb: 2020/08/14 12:14:50.730636 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.730640 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.730646 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:50.730660 a: = db.Item{PKey:[]uint8{0x4f, 0xee, 0x21, 0x5d, 0xc6, 0x86, 0x48, 0x95, 0xaa, 0x76, 0xd8, 0x98, 0xac, 0x90, 0x7f, 0x4}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:50.733735 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.456243ms
DB: 2020/08/14 12:14:50.734258 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.55561ms
SaveRDFNode: 2020/08/14 12:14:50.734272 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017920)}
rdfUIDdb: 2020/08/14 12:14:50.734278 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.734282 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.734288 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:50.734299 a: = db.Item{PKey:[]uint8{0x4f, 0xee, 0x21, 0x5d, 0xc6, 0x86, 0x48, 0x95, 0xaa, 0x76, 0xd8, 0x98, 0xac, 0x90, 0x7f, 0x4}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:50.737486 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.715215ms
DB: 2020/08/14 12:14:50.737954 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.626796ms
SaveRDFNode: 2020/08/14 12:14:50.737966 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:14:50.737977 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:14:50.737982 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:14:50.737989 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:14:50.737994 read from saveCH channel 4 
grmgr: 2020/08/14 12:14:50.737999 Looping..... 0
grmgr: 2020/08/14 12:14:50.738054 Looping..... 1
grmgr: 2020/08/14 12:14:50.738061 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:14:50.738066 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:14:50.738079 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.738087 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.738094 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.738099 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.738105 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.738111 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.738119 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:14:50.738123 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:14:50.738129 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0001b8120)}
SaveRDFNode: 2020/08/14 12:14:50.738133 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:14:50.738143 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.738147 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.738152 UID received  : Ngl9+G8rTKeeh+rC3tX86g==
DB: 2020/08/14 12:14:50.741301 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.582129ms
SaveRDFNode: 2020/08/14 12:14:50.741316 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 12:14:50.741323 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.741327 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.741333 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:50.741348 a: = db.Item{PKey:[]uint8{0x10, 0x62, 0x9a, 0x81, 0xbf, 0x75, 0x48, 0x40, 0x81, 0xa2, 0x93, 0x57, 0x9b, 0x13, 0xe6, 0xe8}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:50.741657 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.478682ms
DB: 2020/08/14 12:14:50.745085 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.707446ms
SaveRDFNode: 2020/08/14 12:14:50.745100 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017440)}
rdfUIDdb: 2020/08/14 12:14:50.745106 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.745110 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.745159 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:50.745174 a: = db.Item{PKey:[]uint8{0x10, 0x62, 0x9a, 0x81, 0xbf, 0x75, 0x48, 0x40, 0x81, 0xa2, 0x93, 0x57, 0x9b, 0x13, 0xe6, 0xe8}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:50.745446 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.752022ms
DB: 2020/08/14 12:14:50.749077 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.870323ms
SaveRDFNode: 2020/08/14 12:14:50.749123 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:14:50.749134 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:14:50.749139 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:14:50.749145 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 12:14:50.749150 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 12:14:50.749175 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.749182 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.749188 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.749195 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.749201 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.749207 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:14:50.749213 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:14:50.749217 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:14:50.749223 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0001b8c60)}
SaveRDFNode: 2020/08/14 12:14:50.749227 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:14:50.749236 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.749240 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.749246 UID received  : XLAC8JxOQcWYpFWGb1aYYA==
grmgr: 2020/08/14 12:14:50.749488 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 12:14:50.749603 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.078621ms
DB: 2020/08/14 12:14:50.752728 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.432877ms
DB: 2020/08/14 12:14:50.753290 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.627531ms
DB: 2020/08/14 12:14:50.756646 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.882835ms
DB: 2020/08/14 12:14:50.757053 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.580671ms
SaveRDFNode: 2020/08/14 12:14:50.757067 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001b8120)}
rdfUIDdb: 2020/08/14 12:14:50.757074 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.757111 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.757118 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:50.757130 a: = db.Item{PKey:[]uint8{0x36, 0x9, 0x7d, 0xf8, 0x6f, 0x2b, 0x4c, 0xa7, 0x9e, 0x87, 0xea, 0xc2, 0xde, 0xd5, 0xfc, 0xea}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:50.760298 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.617664ms
DB: 2020/08/14 12:14:50.760754 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.59267ms
SaveRDFNode: 2020/08/14 12:14:50.760768 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001b8120)}
rdfUIDdb: 2020/08/14 12:14:50.760777 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.760781 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.760787 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:50.760798 a: = db.Item{PKey:[]uint8{0x36, 0x9, 0x7d, 0xf8, 0x6f, 0x2b, 0x4c, 0xa7, 0x9e, 0x87, 0xea, 0xc2, 0xde, 0xd5, 0xfc, 0xea}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:50.764379 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.540588ms
SaveRDFNode: 2020/08/14 12:14:50.764392 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:14:50.764401 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 12:14:50.764769 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.427184ms
DB: 2020/08/14 12:14:50.768210 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.389091ms
SaveRDFNode: 2020/08/14 12:14:50.768225 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001b8c60)}
rdfUIDdb: 2020/08/14 12:14:50.768232 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.768236 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.768241 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:50.768253 a: = db.Item{PKey:[]uint8{0x5c, 0xb0, 0x2, 0xf0, 0x9c, 0x4e, 0x41, 0xc5, 0x98, 0xa4, 0x55, 0x86, 0x6f, 0x56, 0x98, 0x60}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:50.772237 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.945703ms
SaveRDFNode: 2020/08/14 12:14:50.772459 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001b8c60)}
rdfUIDdb: 2020/08/14 12:14:50.772815 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:14:50.772831 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:14:50.772839 Received UID: X18=
SaveRDFNode: 2020/08/14 12:14:50.772896 a: = db.Item{PKey:[]uint8{0x5c, 0xb0, 0x2, 0xf0, 0x9c, 0x4e, 0x41, 0xc5, 0x98, 0xa4, 0x55, 0x86, 0x6f, 0x56, 0x98, 0x60}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:14:50.776602 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.591965ms
SaveRDFNode: 2020/08/14 12:14:50.776615 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 12:14:50.776622 saveNode finished waiting...exiting
grmgr: 2020/08/14 12:14:50.776629 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 12:14:50.776638 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 12:14:50.776644 Looping..... 0
grmgr: 2020/08/14 12:14:50.776807 Looping..... 1
grmgr: 2020/08/14 12:14:50.776842 Looping..... 2
grmgr: 2020/08/14 12:14:50.777027 Looping..... 3
grmgr: 2020/08/14 12:14:50.777170 Looping..... 4
grmgr: 2020/08/14 12:14:50.777349 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:14:50.777358 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:50.777377 goroutine about to start 1 cUID,pUID   EGKagb91SECBopNXmxPm6A==  T+4hXcaGSJWqdtiYrJB/BA==  
attachNode: 2020/08/14 12:14:50.777384 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 12:14:50.777389 Looping..... 0
grmgr: 2020/08/14 12:14:50.777407 Looping..... 1
grmgr: 2020/08/14 12:14:50.777412 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:14:50.777417 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:14:50.777421 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:50.777426 goroutine about to start 2 cUID,pUID   EGKagb91SECBopNXmxPm6A==  Ngl9+G8rTKeeh+rC3tX86g==  
attachNode: 2020/08/14 12:14:50.777431 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 12:14:50.777435 Looping..... 0
grmgr: 2020/08/14 12:14:50.778246 Looping..... 1
grmgr: 2020/08/14 12:14:50.778258 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:14:50.778263 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:14:50.778270 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:50.778309 goroutine about to start 3 cUID,pUID   T+4hXcaGSJWqdtiYrJB/BA==  EGKagb91SECBopNXmxPm6A==  
attachNode: 2020/08/14 12:14:50.778315 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 12:14:50.778320 Looping..... 0
grmgr: 2020/08/14 12:14:50.778855 Looping..... 1
grmgr: 2020/08/14 12:14:50.778867 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:14:50.778872 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:14:50.780152 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.642389ms
DB: 2020/08/14 12:14:50.787117 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 8.187041ms
DB: 2020/08/14 12:14:50.791338 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 11.150829ms
DB: 2020/08/14 12:14:50.795259 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 16.891678ms
DB: 2020/08/14 12:14:50.795569 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.728861ms
DB: 2020/08/14 12:14:50.798680 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.081305ms
DB: 2020/08/14 12:14:50.800835 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 13.685263ms
DB: 2020/08/14 12:14:50.802417 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.661501ms
DB: 2020/08/14 12:14:50.804468 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.201448ms
DB: 2020/08/14 12:14:50.807850 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.348908ms
DB: 2020/08/14 12:14:50.809555 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.52346ms
AttachNode: main 2020/08/14 12:14:50.809570 FetchForUpdate: for parent    T+4hXcaGSJWqdtiYrJB/BA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:50.809575 ** Cache FetchForUpdate Cache Key Value: [T+4hXcaGSJWqdtiYrJB/BA==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:14:50.809582  node: T+4hXcaGSJWqdtiYrJB/BA== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:14:50.809759 FetchForUpdate: for child    EGKagb91SECBopNXmxPm6A==
FetchForUpdate: 2020/08/14 12:14:50.809792 ** Cache FetchForUpdate Cache Key Value: [EGKagb91SECBopNXmxPm6A==]   sortk: A#
FetchNode: 2020/08/14 12:14:50.809822  node: EGKagb91SECBopNXmxPm6A== subKey: A#
DB: 2020/08/14 12:14:50.810667 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 15.355724ms
DB: 2020/08/14 12:14:50.811986 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.932486ms
DB: 2020/08/14 12:14:50.812389 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.775593ms
FetchForUpdate: 2020/08/14 12:14:50.812435 len(nb): 1
fetchItems: 2020/08/14 12:14:50.812443 +++  Cache FetchItems for sortk A#G#:S UID: [T+4hXcaGSJWqdtiYrJB/BA==] 
FetchNode: 2020/08/14 12:14:50.812448  node: T+4hXcaGSJWqdtiYrJB/BA== subKey: A#G#:S
DB: 2020/08/14 12:14:50.814231 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.149486ms
DB: 2020/08/14 12:14:50.815226 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.750335ms
DB: 2020/08/14 12:14:50.816787 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.524735ms
DB: 2020/08/14 12:14:50.817724 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.677038ms
AttachNode: main 2020/08/14 12:14:50.817738 FetchForUpdate: for parent    EGKagb91SECBopNXmxPm6A==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:50.817753 ** Cache FetchForUpdate Cache Key Value: [EGKagb91SECBopNXmxPm6A==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:14:50.817763 FetchForUpdate: for child    T+4hXcaGSJWqdtiYrJB/BA==
FetchForUpdate: 2020/08/14 12:14:50.817768 ** Cache FetchForUpdate Cache Key Value: [T+4hXcaGSJWqdtiYrJB/BA==]   sortk: A#
DB: 2020/08/14 12:14:50.819729 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.849917ms
DB: 2020/08/14 12:14:50.820855 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.007564ms
DB: 2020/08/14 12:14:50.825281 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 15.407695ms
FetchForUpdate: 2020/08/14 12:14:50.825396 len(nb): 7
fetchItems: 2020/08/14 12:14:50.825406 +++  Cache FetchItems for sortk A# UID: [EGKagb91SECBopNXmxPm6A==] 
FetchNode: 2020/08/14 12:14:50.825411  node: EGKagb91SECBopNXmxPm6A== subKey: A#
DB: 2020/08/14 12:14:50.827612 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.080252ms
AttachNode: main 2020/08/14 12:14:50.827625 FetchForUpdate: for parent    Ngl9+G8rTKeeh+rC3tX86g==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:50.827630 ** Cache FetchForUpdate Cache Key Value: [Ngl9+G8rTKeeh+rC3tX86g==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:14:50.827636  node: Ngl9+G8rTKeeh+rC3tX86g== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:14:50.827800 FetchForUpdate: for child    EGKagb91SECBopNXmxPm6A==
FetchForUpdate: 2020/08/14 12:14:50.827825 ** Cache FetchForUpdate Cache Key Value: [EGKagb91SECBopNXmxPm6A==]   sortk: A#
DB: 2020/08/14 12:14:50.828654 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.213887ms
DB: 2020/08/14 12:14:50.830556 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.890261ms
FetchForUpdate: 2020/08/14 12:14:50.830614 len(nb): 1
fetchItems: 2020/08/14 12:14:50.830623 +++  Cache FetchItems for sortk A#G#:S UID: [Ngl9+G8rTKeeh+rC3tX86g==] 
FetchNode: 2020/08/14 12:14:50.830628  node: Ngl9+G8rTKeeh+rC3tX86g== subKey: A#G#:S
DB: 2020/08/14 12:14:50.833759 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.082732ms
DB: 2020/08/14 12:14:50.839972 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.865442ms
DB: 2020/08/14 12:14:50.841530 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.415709ms
DB: 2020/08/14 12:14:50.845393 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.658496ms
DB: 2020/08/14 12:14:50.849815 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.01444ms
DB: 2020/08/14 12:14:50.856624 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.466903ms
DB: 2020/08/14 12:14:50.861093 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.075089ms
DB: 2020/08/14 12:14:50.865598 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.151611ms
DB: 2020/08/14 12:14:50.872416 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.434046ms
DB: 2020/08/14 12:14:50.876882 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.074152ms
DB: 2020/08/14 12:14:50.881109 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.149104ms
DB: 2020/08/14 12:14:50.885022 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.851216ms
Cache: 2020/08/14 12:14:50.885037 In SetUpredAvailable: pUid, tUID:  T+4hXcaGSJWqdtiYrJB/BA== T+4hXcaGSJWqdtiYrJB/BA== A#G#:S
Cache: 2020/08/14 12:14:50.885075 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:50.888961 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.850328ms
Unlock: 2020/08/14 12:14:50.888973 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:50.888978 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:14:50.889179 +++  Cache FetchItems for sortk A# UID: [T+4hXcaGSJWqdtiYrJB/BA==] 
FetchNode: 2020/08/14 12:14:50.889215  node: T+4hXcaGSJWqdtiYrJB/BA== subKey: A#
fetchItems: 2020/08/14 12:14:50.889396 +++  Cache FetchItems for sortk A#G#:S UID: [EGKagb91SECBopNXmxPm6A==] 
FetchNode: 2020/08/14 12:14:50.889418  node: EGKagb91SECBopNXmxPm6A== subKey: A#G#:S
DB: 2020/08/14 12:14:50.892514 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.252564ms
fetchItems: 2020/08/14 12:14:50.892693 +++  Cache FetchItems for sortk A# UID: [T+4hXcaGSJWqdtiYrJB/BA==] 
FetchNode: 2020/08/14 12:14:50.892701  node: T+4hXcaGSJWqdtiYrJB/BA== subKey: A#
DB: 2020/08/14 12:14:50.896052 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.603055ms
DB: 2020/08/14 12:14:50.896764 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.72678ms
grmgr: 2020/08/14 12:14:50.896794 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:14:50.896801 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:14:50.896807 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:50.896813 goroutine about to start 4 cUID,pUID   T+4hXcaGSJWqdtiYrJB/BA==  Ngl9+G8rTKeeh+rC3tX86g==  
attachNode: 2020/08/14 12:14:50.896819 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 12:14:50.896824 Looping..... 0
grmgr: 2020/08/14 12:14:50.896858 Looping..... 1
grmgr: 2020/08/14 12:14:50.896864 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:14:50.896868 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:14:50.902221 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 9.470974ms
DB: 2020/08/14 12:14:50.906089 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.888568ms
DB: 2020/08/14 12:14:50.909427 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.302406ms
DB: 2020/08/14 12:14:50.912305 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.76598ms
DB: 2020/08/14 12:14:50.915006 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.663669ms
DB: 2020/08/14 12:14:50.917100 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 19.21565ms
DB: 2020/08/14 12:14:50.919086 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.023508ms
DB: 2020/08/14 12:14:50.923692 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.411853ms
AttachNode: main 2020/08/14 12:14:50.923708 FetchForUpdate: for parent    Ngl9+G8rTKeeh+rC3tX86g==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:50.923714 ** Cache FetchForUpdate Cache Key Value: [Ngl9+G8rTKeeh+rC3tX86g==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:14:50.923727 FetchForUpdate: for child    T+4hXcaGSJWqdtiYrJB/BA==
FetchForUpdate: 2020/08/14 12:14:50.923745 ** Cache FetchForUpdate Cache Key Value: [T+4hXcaGSJWqdtiYrJB/BA==]   sortk: A#
DB: 2020/08/14 12:14:50.923894 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.334672ms
DB: 2020/08/14 12:14:50.927788 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.704947ms
DB: 2020/08/14 12:14:50.932174 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.965564ms
DB: 2020/08/14 12:14:50.938750 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.239814ms
DB: 2020/08/14 12:14:50.942919 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.786203ms
DB: 2020/08/14 12:14:50.947455 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.923954ms
DB: 2020/08/14 12:14:50.954012 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.228748ms
DB: 2020/08/14 12:14:50.957993 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.645005ms
DB: 2020/08/14 12:14:50.962349 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.782261ms
DB: 2020/08/14 12:14:50.966470 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.642714ms
Cache: 2020/08/14 12:14:50.966494 In SetUpredAvailable: pUid, tUID:  EGKagb91SECBopNXmxPm6A== EGKagb91SECBopNXmxPm6A== A#G#:S
Cache: 2020/08/14 12:14:50.966501 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:50.970191 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.650056ms
Unlock: 2020/08/14 12:14:50.970203 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:50.970209 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:14:50.970410 +++  Cache FetchItems for sortk A# UID: [EGKagb91SECBopNXmxPm6A==] 
FetchNode: 2020/08/14 12:14:50.970447  node: EGKagb91SECBopNXmxPm6A== subKey: A#
fetchItems: 2020/08/14 12:14:50.970614 +++  Cache FetchItems for sortk A# UID: [T+4hXcaGSJWqdtiYrJB/BA==] 
FetchNode: 2020/08/14 12:14:50.970643  node: T+4hXcaGSJWqdtiYrJB/BA== subKey: A#
DB: 2020/08/14 12:14:50.974810 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.309017ms
DB: 2020/08/14 12:14:50.978207 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.933346ms
grmgr: 2020/08/14 12:14:50.978243 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:14:50.978249 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:14:50.978256 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:50.978262 goroutine about to start 5 cUID,pUID   Ngl9+G8rTKeeh+rC3tX86g==  EGKagb91SECBopNXmxPm6A==  
attachNode: 2020/08/14 12:14:50.978267 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 12:14:50.978273 Looping..... 0
grmgr: 2020/08/14 12:14:50.978594 Looping..... 1
grmgr: 2020/08/14 12:14:50.978606 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:14:50.978611 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:14:50.979822 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 9.137267ms
DB: 2020/08/14 12:14:50.983939 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.887237ms
DB: 2020/08/14 12:14:50.984751 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.090669ms
DB: 2020/08/14 12:14:50.987562 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.77262ms
DB: 2020/08/14 12:14:50.988067 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.63112ms
DB: 2020/08/14 12:14:50.993747 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.883598ms
DB: 2020/08/14 12:14:51.003336 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 15.563491ms
DB: 2020/08/14 12:14:51.007185 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.607665ms
DB: 2020/08/14 12:14:51.012989 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.725095ms
DB: 2020/08/14 12:14:51.013807 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 19.492352ms
DB: 2020/08/14 12:14:51.017574 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.688853ms
DB: 2020/08/14 12:14:51.021761 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.112346ms
DB: 2020/08/14 12:14:51.023162 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 9.685826ms
AttachNode: main 2020/08/14 12:14:51.023177 FetchForUpdate: for parent    EGKagb91SECBopNXmxPm6A==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:51.023182 ** Cache FetchForUpdate Cache Key Value: [EGKagb91SECBopNXmxPm6A==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:14:51.023197 FetchForUpdate: for child    Ngl9+G8rTKeeh+rC3tX86g==
FetchForUpdate: 2020/08/14 12:14:51.023202 ** Cache FetchForUpdate Cache Key Value: [Ngl9+G8rTKeeh+rC3tX86g==]   sortk: A#
DB: 2020/08/14 12:14:51.028578 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.746315ms
DB: 2020/08/14 12:14:51.032429 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.320868ms
DB: 2020/08/14 12:14:51.036504 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.518075ms
DB: 2020/08/14 12:14:51.040214 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.392526ms
Cache: 2020/08/14 12:14:51.040379 In SetUpredAvailable: pUid, tUID:  Ngl9+G8rTKeeh+rC3tX86g== Ngl9+G8rTKeeh+rC3tX86g== A#G#:S
Cache: 2020/08/14 12:14:51.040390 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:51.043813 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.385566ms
Unlock: 2020/08/14 12:14:51.043824 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:51.043829 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:14:51.044055 +++  Cache FetchItems for sortk A#G#:S UID: [Ngl9+G8rTKeeh+rC3tX86g==] 
FetchNode: 2020/08/14 12:14:51.044109  node: Ngl9+G8rTKeeh+rC3tX86g== subKey: A#G#:S
fetchItems: 2020/08/14 12:14:51.044813 +++  Cache FetchItems for sortk A#G#:S UID: [EGKagb91SECBopNXmxPm6A==] 
FetchNode: 2020/08/14 12:14:51.044825  node: EGKagb91SECBopNXmxPm6A== subKey: A#G#:S
DB: 2020/08/14 12:14:51.048456 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.549837ms
grmgr: 2020/08/14 12:14:51.048473 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:14:51.048478 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:14:51.048484 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:14:51.048490 goroutine about to start 6 cUID,pUID   Ngl9+G8rTKeeh+rC3tX86g==  T+4hXcaGSJWqdtiYrJB/BA==  
rdfLoader: 2020/08/14 12:14:51.048495 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 12:14:51.049043 StartCh received for nodeAttach. rCnt = 3 
DB: 2020/08/14 12:14:51.052853 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 7.969337ms
DB: 2020/08/14 12:14:51.057334 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 8.505668ms
DB: 2020/08/14 12:14:51.057963 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 13.812369ms
DB: 2020/08/14 12:14:51.061089 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.510241ms
DB: 2020/08/14 12:14:51.063667 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.384348ms
DB: 2020/08/14 12:14:51.064374 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.842199ms
DB: 2020/08/14 12:14:51.068180 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.772979ms
DB: 2020/08/14 12:14:51.068196 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.772979ms
DB: 2020/08/14 12:14:51.070834 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 17.384208ms
DB: 2020/08/14 12:14:51.072099 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.871754ms
DB: 2020/08/14 12:14:51.072147 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.871754ms
DB: 2020/08/14 12:14:51.074367 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.502373ms
DB: 2020/08/14 12:14:51.074534 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.502373ms
DB: 2020/08/14 12:14:51.076510 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.029655ms
DB: 2020/08/14 12:14:51.078153 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.577884ms
DB: 2020/08/14 12:14:51.078169 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.577884ms
DB: 2020/08/14 12:14:51.079934 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 16.234878ms
DB: 2020/08/14 12:14:51.080702 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.969079ms
DB: 2020/08/14 12:14:51.082355 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.967837ms
DB: 2020/08/14 12:14:51.083495 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.490756ms
DB: 2020/08/14 12:14:51.086298 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.73811ms
DB: 2020/08/14 12:14:51.087056 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.651119ms
DB: 2020/08/14 12:14:51.090986 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.621782ms
DB: 2020/08/14 12:14:51.092129 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.32423ms
AttachNode: main 2020/08/14 12:14:51.092143 FetchForUpdate: for parent    T+4hXcaGSJWqdtiYrJB/BA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:14:51.092148 ** Cache FetchForUpdate Cache Key Value: [T+4hXcaGSJWqdtiYrJB/BA==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:14:51.092160 FetchForUpdate: for child    Ngl9+G8rTKeeh+rC3tX86g==
FetchForUpdate: 2020/08/14 12:14:51.092165 ** Cache FetchForUpdate Cache Key Value: [Ngl9+G8rTKeeh+rC3tX86g==]   sortk: A#
DB: 2020/08/14 12:14:51.095642 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.782745ms
DB: 2020/08/14 12:14:51.102341 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.107366ms
DB: 2020/08/14 12:14:51.106877 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.467138ms
DB: 2020/08/14 12:14:51.110862 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.892195ms
DB: 2020/08/14 12:14:51.116949 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.968647ms
DB: 2020/08/14 12:14:51.120431 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.402174ms
DB: 2020/08/14 12:14:51.124458 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.680274ms
DB: 2020/08/14 12:14:51.128022 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.358545ms
Cache: 2020/08/14 12:14:51.128036 In SetUpredAvailable: pUid, tUID:  Ngl9+G8rTKeeh+rC3tX86g== SpAGEbtOS/eUlXWLUlJcJw== A#G#:S
Cache: 2020/08/14 12:14:51.128041 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:51.131558 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.480404ms
Unlock: 2020/08/14 12:14:51.131576 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:51.131584 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:14:51.131850 +++  Cache FetchItems for sortk A# UID: [Ngl9+G8rTKeeh+rC3tX86g==] 
FetchNode: 2020/08/14 12:14:51.131879  node: Ngl9+G8rTKeeh+rC3tX86g== subKey: A#
fetchItems: 2020/08/14 12:14:51.132092 +++  Cache FetchItems for sortk A#G#:S UID: [T+4hXcaGSJWqdtiYrJB/BA==] 
FetchNode: 2020/08/14 12:14:51.132103  node: T+4hXcaGSJWqdtiYrJB/BA== subKey: A#G#:S
DB: 2020/08/14 12:14:51.135724 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.036807ms
grmgr: 2020/08/14 12:14:51.135744 EndCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 12:14:51.139736 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 7.415624ms
DB: 2020/08/14 12:14:51.143909 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.481297ms
DB: 2020/08/14 12:14:51.147325 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.381551ms
DB: 2020/08/14 12:14:51.147374 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.381551ms
DB: 2020/08/14 12:14:51.148230 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 16.303955ms
DB: 2020/08/14 12:14:51.152159 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.740682ms
DB: 2020/08/14 12:14:51.152178 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.740682ms
DB: 2020/08/14 12:14:51.159913 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.006264ms
DB: 2020/08/14 12:14:51.163500 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.515683ms
DB: 2020/08/14 12:14:51.167566 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.940646ms
DB: 2020/08/14 12:14:51.170842 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 16.419271ms
DB: 2020/08/14 12:14:51.174190 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.286218ms
DB: 2020/08/14 12:14:51.175624 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.611226ms
DB: 2020/08/14 12:14:51.178048 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.53313ms
DB: 2020/08/14 12:14:51.182893 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.503709ms
DB: 2020/08/14 12:14:51.190254 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.02311ms
DB: 2020/08/14 12:14:51.195147 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.232608ms
DB: 2020/08/14 12:14:51.199465 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.978748ms
DB: 2020/08/14 12:14:51.203440 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.772855ms
Cache: 2020/08/14 12:14:51.203454 In SetUpredAvailable: pUid, tUID:  EGKagb91SECBopNXmxPm6A== 6t4OTC1QQo+MFRjrAGHwVw== A#G#:S
Cache: 2020/08/14 12:14:51.203460 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:51.207397 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.902338ms
Unlock: 2020/08/14 12:14:51.207416 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:51.207422 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:14:51.207689 +++  Cache FetchItems for sortk A# UID: [Ngl9+G8rTKeeh+rC3tX86g==] 
FetchNode: 2020/08/14 12:14:51.207717  node: Ngl9+G8rTKeeh+rC3tX86g== subKey: A#
DB: 2020/08/14 12:14:51.211200 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.436927ms
DB: 2020/08/14 12:14:51.215800 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.254932ms
grmgr: 2020/08/14 12:14:51.215819 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 12:14:51.219577 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.483096ms
DB: 2020/08/14 12:14:51.223465 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.684298ms
DB: 2020/08/14 12:14:51.228077 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.89787ms
DB: 2020/08/14 12:14:51.234971 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.395898ms
DB: 2020/08/14 12:14:51.239654 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.165117ms
DB: 2020/08/14 12:14:51.244951 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.485876ms
DB: 2020/08/14 12:14:51.251712 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.401701ms
DB: 2020/08/14 12:14:51.255738 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.685701ms
DB: 2020/08/14 12:14:51.260353 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.237285ms
DB: 2020/08/14 12:14:51.264328 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.767023ms
Cache: 2020/08/14 12:14:51.264342 In SetUpredAvailable: pUid, tUID:  T+4hXcaGSJWqdtiYrJB/BA== 5k8jCdMPQKihNFhAt1wc7g== A#G#:S
Cache: 2020/08/14 12:14:51.264348 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:14:51.268225 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.836287ms
Unlock: 2020/08/14 12:14:51.268239 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:14:51.268244 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 12:14:51.276700 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.351618ms
rdfLoader: 2020/08/14 12:14:51.276722 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 12:14:51.276729 cancel contexts
rdfLoader: 2020/08/14 12:14:51.276735 wait for autonomous goroutines to end
errlog: 2020/08/14 12:14:51.276741 Powering down...
grmgr: 2020/08/14 12:14:51.276749 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 12:14:51.276755 Powering down...
rdfuuid: 2020/08/14 12:14:51.276761 Powering down...
rdfLoader: 2020/08/14 12:14:51.276777 loader exists.....
DB:2020/08/14 12:15:06 log.go:18: ===============================================================================
errlog: 2020/08/14 12:15:06.090721 Powering on...
rdfLoader: 2020/08/14 12:15:06.091028 saveNode started......
rdfLoader: 2020/08/14 12:15:06.091038 define saveNode limiter......
rdfuuid: 2020/08/14 12:15:06.091049 Powering on...
grmgr: 2020/08/14 12:15:06.091066 Powering on...
rdfLoader: 2020/08/14 12:15:06.091077  principle goroutines started 
RDFreader: 2020/08/14 12:15:06.091100 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:15:06.091115 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 12:15:06.091121 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 12:15:06.091127 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 12:15:06.091133 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 12:15:06.091138 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 12:15:06.091143 spo read:      
RDFreader: 2020/08/14 12:15:06.091148 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 12:15:06.091153 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 12:15:06.091158 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 12:15:06.091163 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 12:15:06.091167 spo read:      
RDFreader: 2020/08/14 12:15:06.091173 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 12:15:06.091178 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 12:15:06.091183 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 12:15:06.091188 spo read:  b  Age  "58"
RDFreader: 2020/08/14 12:15:06.091193 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 12:15:06.091198 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 12:15:06.091204 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 12:15:06.091209 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 12:15:06.091213 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 12:15:06.091218 spo read:      
RDFreader: 2020/08/14 12:15:06.091223 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 12:15:06.091226 Send node batch on channel verifyCh
RDFreader: 2020/08/14 12:15:06.091231 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:15:06.091235 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 12:15:06.091240 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 12:15:06.091247 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 12:15:06.091253 spo read:  c  Age  "67"
RDFreader: 2020/08/14 12:15:06.091258 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 12:15:06.091263 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 12:15:06.091268 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 12:15:06.091273 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 12:15:06.091280 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 12:15:06.091285 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 12:15:06.091289 spo read:      
RDFreader: 2020/08/14 12:15:06.091294 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 12:15:06.091300 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 12:15:06.091305 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 12:15:06.091310 spo read:  d  Age  "36"
RDFreader: 2020/08/14 12:15:06.091315 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 12:15:06.091321 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 12:15:06.091325 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 12:15:06.091329 close verify channel
rdfLoader: 2020/08/14 12:15:06.091333 wait for goroutines to end
rdfLoader: 2020/08/14 12:15:06.091337 verify started....
rdfLoader: 2020/08/14 12:15:06.091346 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:15:06.091350 .  getType..
rdfLoader: 2020/08/14 12:15:06.091354 node.TyName : [Person]
DB: 2020/08/14 12:15:06.166875 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 75.453937ms
grmgr: 2020/08/14 12:15:06.167038 Looping..... 0
grmgr: 2020/08/14 12:15:06.167345 Looping..... 1
grmgr: 2020/08/14 12:15:06.167376 Looping..... 2
grmgr: 2020/08/14 12:15:06.167498 Looping..... 3
grmgr: 2020/08/14 12:15:06.167675 Looping..... 4
grmgr: 2020/08/14 12:15:06.167854 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:15:06.167866 .  getType..
rdfLoader: 2020/08/14 12:15:06.167871 node.TyName : [Person]
grmgr: 2020/08/14 12:15:06.167876 Looping..... 0
unmarshalRDF2020/08/14 12:15:06.167889 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:15:06.167899 Looping..... 1
grmgr: 2020/08/14 12:15:06.167905 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:15:06.167909 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:15:06.167917 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:15:06.167921 .  getType..
rdfLoader: 2020/08/14 12:15:06.167925 node.TyName : [Person]
grmgr: 2020/08/14 12:15:06.167930 Looping..... 0
rdfLoader: 2020/08/14 12:15:06.167940 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:15:06.167945 Add to SS . [Alfa]
unmarshalRDF2020/08/14 12:15:06.168006 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:15:06.168014 Exit  unmarshalRDF. 
saveNode: 2020/08/14 12:15:06.168020 read from saveCH channel 1 
unmarshalRDF2020/08/14 12:15:06.168029 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:15:06.168050 Looping..... 1
grmgr: 2020/08/14 12:15:06.168055 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:15:06.168060 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:15:06.168065 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:15:06.168070 Looping..... 0
rdfLoader: 2020/08/14 12:15:06.168078 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:15:06.168083 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 12:15:06.168118 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:15:06.168123 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 12:15:06.168128 .  getType..
rdfLoader: 2020/08/14 12:15:06.168133 node.TyName : [Person]
unmarshalRDF2020/08/14 12:15:06.168141 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:15:06.168168 Looping..... 1
rdfLoader: 2020/08/14 12:15:06.168180 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 12:15:06.168185 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 12:15:06.168189 Add to SS . [Honda]
unmarshalRDF2020/08/14 12:15:06.168224 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:15:06.168229 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:15:06.168261 Looping..... 2
grmgr: 2020/08/14 12:15:06.168443 Looping..... 3
grmgr: 2020/08/14 12:15:06.168621 Looping..... 4
grmgr: 2020/08/14 12:15:06.168797 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:15:06.168807 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:15:06.168812 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/14 12:15:06.168817 Looping..... 0
saveNode: 2020/08/14 12:15:06.168823 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:15:06.168829 read from saveCH channel 2 
grmgr: 2020/08/14 12:15:06.168856 Looping..... 1
SaveRDFNode: xxx 2020/08/14 12:15:06.168868 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.168874 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.168881 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.168886 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.168892 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.168897 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.168903 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:15:06.168907 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:15:06.168915 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017680)}
SaveRDFNode: 2020/08/14 12:15:06.168919 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:15:06.168940 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.168946 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.168952 UID received  : WMAuJiB7SOuTWBuYop3a1A==
grmgr: 2020/08/14 12:15:06.169282 Looping..... 2
grmgr: 2020/08/14 12:15:06.169420 Looping..... 3
grmgr: 2020/08/14 12:15:06.169604 Looping..... 4
grmgr: 2020/08/14 12:15:06.169784 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:15:06.169793 Looping..... 0
unmarshalRDF2020/08/14 12:15:06.169807 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:15:06.169818 Looping..... 1
rdfLoader: 2020/08/14 12:15:06.169827 Add to SS . [Bentley]
unmarshalRDF2020/08/14 12:15:06.169863 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:15:06.169867 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:15:06.169878 Looping..... 2
grmgr: 2020/08/14 12:15:06.169965 Looping..... 3
grmgr: 2020/08/14 12:15:06.170142 Looping..... 4
grmgr: 2020/08/14 12:15:06.170319 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:15:06.170328 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 12:15:06.170338 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:15:06.170343 read from saveCH channel 3 
grmgr: 2020/08/14 12:15:06.170349 Looping..... 0
grmgr: 2020/08/14 12:15:06.170373 Looping..... 1
grmgr: 2020/08/14 12:15:06.170378 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:15:06.170382 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:15:06.170392 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.170404 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.170411 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.170417 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.170423 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.170429 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.170435 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:15:06.170439 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:15:06.170445 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017da0)}
SaveRDFNode: 2020/08/14 12:15:06.170449 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:15:06.170457 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.170472 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.170479 UID received  : SaDsKA5dRFedIaHwHQaZUg==
DB: 2020/08/14 12:15:06.175284 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.29575ms
DB: 2020/08/14 12:15:06.178474 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.965857ms
DB: 2020/08/14 12:15:06.182729 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.401594ms
DB: 2020/08/14 12:15:06.186647 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.712124ms
DB: 2020/08/14 12:15:06.191304 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.606631ms
DB: 2020/08/14 12:15:06.196754 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 18.24264ms
DB: 2020/08/14 12:15:06.200025 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.234299ms
DB: 2020/08/14 12:15:06.203155 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.090613ms
DB: 2020/08/14 12:15:06.206379 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.189368ms
SaveRDFNode: 2020/08/14 12:15:06.206396 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 12:15:06.206404 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.206408 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.206414 Received UID: X18=
SaveRDFNode: 2020/08/14 12:15:06.206428 a: = db.Item{PKey:[]uint8{0x49, 0xa0, 0xec, 0x28, 0xe, 0x5d, 0x44, 0x57, 0x9d, 0x21, 0xa1, 0xf0, 0x1d, 0x6, 0x99, 0x52}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:15:06.209344 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 18.000099ms
SaveRDFNode: 2020/08/14 12:15:06.209359 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 12:15:06.209365 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.209368 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.209374 Received UID: X18=
SaveRDFNode: 2020/08/14 12:15:06.209385 a: = db.Item{PKey:[]uint8{0x58, 0xc0, 0x2e, 0x26, 0x20, 0x7b, 0x48, 0xeb, 0x93, 0x58, 0x1b, 0x98, 0xa2, 0x9d, 0xda, 0xd4}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:15:06.209722 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.261242ms
SaveRDFNode: 2020/08/14 12:15:06.209745 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 12:15:06.209751 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.209755 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.209761 Received UID: X18=
SaveRDFNode: 2020/08/14 12:15:06.209771 a: = db.Item{PKey:[]uint8{0x49, 0xa0, 0xec, 0x28, 0xe, 0x5d, 0x44, 0x57, 0x9d, 0x21, 0xa1, 0xf0, 0x1d, 0x6, 0x99, 0x52}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:15:06.212793 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.378406ms
SaveRDFNode: 2020/08/14 12:15:06.212807 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 12:15:06.212813 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.212817 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.212822 Received UID: X18=
SaveRDFNode: 2020/08/14 12:15:06.212832 a: = db.Item{PKey:[]uint8{0x58, 0xc0, 0x2e, 0x26, 0x20, 0x7b, 0x48, 0xeb, 0x93, 0x58, 0x1b, 0x98, 0xa2, 0x9d, 0xda, 0xd4}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:15:06.213186 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.3797ms
SaveRDFNode: 2020/08/14 12:15:06.213203 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:15:06.213230 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:15:06.213236 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:15:06.213242 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:15:06.213252 read from saveCH channel 4 
grmgr: 2020/08/14 12:15:06.213257 Looping..... 0
grmgr: 2020/08/14 12:15:06.213295 Looping..... 1
grmgr: 2020/08/14 12:15:06.213301 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:15:06.213305 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:15:06.213314 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.213324 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.213330 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.213335 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.213341 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.213347 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.213353 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:15:06.213357 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:15:06.213362 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000380b40)}
SaveRDFNode: 2020/08/14 12:15:06.213366 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:15:06.213386 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.213391 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.213397 UID received  : upwdZrq7TKWqH2Q8fZZ/Mw==
DB: 2020/08/14 12:15:06.216325 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.460378ms
SaveRDFNode: 2020/08/14 12:15:06.216484 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:15:06.216497 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:15:06.216502 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:15:06.216507 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 12:15:06.216519 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 12:15:06.216543 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.216549 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.216558 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.216564 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.216571 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.216577 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:15:06.216583 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:15:06.216587 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:15:06.216593 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000381020)}
SaveRDFNode: 2020/08/14 12:15:06.216615 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:15:06.216642 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.216647 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.216653 UID received  : wzjtS+9PSp2ggGKLnNxlqg==
grmgr: 2020/08/14 12:15:06.216855 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 12:15:06.216938 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.514132ms
DB: 2020/08/14 12:15:06.220077 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.393981ms
DB: 2020/08/14 12:15:06.220370 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.33001ms
DB: 2020/08/14 12:15:06.223546 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.145015ms
DB: 2020/08/14 12:15:06.223824 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.690776ms
DB: 2020/08/14 12:15:06.226886 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.308809ms
DB: 2020/08/14 12:15:06.227244 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.387748ms
DB: 2020/08/14 12:15:06.230205 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.220315ms
SaveRDFNode: 2020/08/14 12:15:06.230221 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000380b40)}
rdfUIDdb: 2020/08/14 12:15:06.230229 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.230234 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.230240 Received UID: X18=
SaveRDFNode: 2020/08/14 12:15:06.230253 a: = db.Item{PKey:[]uint8{0xba, 0x9c, 0x1d, 0x66, 0xba, 0xbb, 0x4c, 0xa5, 0xaa, 0x1f, 0x64, 0x3c, 0x7d, 0x96, 0x7f, 0x33}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:15:06.230636 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.340885ms
DB: 2020/08/14 12:15:06.234286 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.999862ms
SaveRDFNode: 2020/08/14 12:15:06.234466 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000380b40)}
rdfUIDdb: 2020/08/14 12:15:06.234479 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.234483 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.234489 Received UID: X18=
SaveRDFNode: 2020/08/14 12:15:06.234501 a: = db.Item{PKey:[]uint8{0xba, 0x9c, 0x1d, 0x66, 0xba, 0xbb, 0x4c, 0xa5, 0xaa, 0x1f, 0x64, 0x3c, 0x7d, 0x96, 0x7f, 0x33}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:15:06.234821 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.154541ms
SaveRDFNode: 2020/08/14 12:15:06.234845 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000381020)}
rdfUIDdb: 2020/08/14 12:15:06.234851 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.234855 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.234860 Received UID: X18=
SaveRDFNode: 2020/08/14 12:15:06.234871 a: = db.Item{PKey:[]uint8{0xc3, 0x38, 0xed, 0x4b, 0xef, 0x4f, 0x4a, 0x9d, 0xa0, 0x80, 0x62, 0x8b, 0x9c, 0xdc, 0x65, 0xaa}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:15:06.237799 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.255484ms
SaveRDFNode: 2020/08/14 12:15:06.237812 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:15:06.237821 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 12:15:06.238313 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.410815ms
SaveRDFNode: 2020/08/14 12:15:06.238347 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000381020)}
rdfUIDdb: 2020/08/14 12:15:06.238354 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:15:06.238359 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:15:06.238365 Received UID: X18=
SaveRDFNode: 2020/08/14 12:15:06.238376 a: = db.Item{PKey:[]uint8{0xc3, 0x38, 0xed, 0x4b, 0xef, 0x4f, 0x4a, 0x9d, 0xa0, 0x80, 0x62, 0x8b, 0x9c, 0xdc, 0x65, 0xaa}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:15:06.241708 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.298267ms
SaveRDFNode: 2020/08/14 12:15:06.241720 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 12:15:06.241727 saveNode finished waiting...exiting
grmgr: 2020/08/14 12:15:06.241734 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 12:15:06.241744 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 12:15:06.241749 Looping..... 0
grmgr: 2020/08/14 12:15:06.241764 Looping..... 1
grmgr: 2020/08/14 12:15:06.241862 Looping..... 2
grmgr: 2020/08/14 12:15:06.242039 Looping..... 3
grmgr: 2020/08/14 12:15:06.242217 Looping..... 4
grmgr: 2020/08/14 12:15:06.242395 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:15:06.242404 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:15:06.242410 goroutine about to start 1 cUID,pUID   WMAuJiB7SOuTWBuYop3a1A==  SaDsKA5dRFedIaHwHQaZUg==  
attachNode: 2020/08/14 12:15:06.242417 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 12:15:06.242422 Looping..... 0
grmgr: 2020/08/14 12:15:06.242441 Looping..... 1
grmgr: 2020/08/14 12:15:06.242446 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:15:06.242451 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:15:06.242456 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:15:06.242461 goroutine about to start 2 cUID,pUID   WMAuJiB7SOuTWBuYop3a1A==  upwdZrq7TKWqH2Q8fZZ/Mw==  
attachNode: 2020/08/14 12:15:06.242466 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 12:15:06.242470 Looping..... 0
grmgr: 2020/08/14 12:15:06.243438 Looping..... 1
grmgr: 2020/08/14 12:15:06.243451 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:15:06.243456 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:15:06.243462 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:15:06.243467 goroutine about to start 3 cUID,pUID   SaDsKA5dRFedIaHwHQaZUg==  WMAuJiB7SOuTWBuYop3a1A==  
attachNode: 2020/08/14 12:15:06.243473 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 12:15:06.243488 Looping..... 0
grmgr: 2020/08/14 12:15:06.243981 Looping..... 1
grmgr: 2020/08/14 12:15:06.243993 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:15:06.243998 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:15:06.244999 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.37874ms
DB: 2020/08/14 12:15:06.247912 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.865567ms
DB: 2020/08/14 12:15:06.250522 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.48857ms
DB: 2020/08/14 12:15:06.254491 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.547572ms
DB: 2020/08/14 12:15:06.258804 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.972736ms
DB: 2020/08/14 12:15:06.259121 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 15.557429ms
DB: 2020/08/14 12:15:06.261926 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.072946ms
DB: 2020/08/14 12:15:06.262306 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.147689ms
DB: 2020/08/14 12:15:06.265581 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.867736ms
DB: 2020/08/14 12:15:06.266968 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 13.810116ms
DB: 2020/08/14 12:15:06.267820 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.202116ms
DB: 2020/08/14 12:15:06.269315 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.312688ms
DB: 2020/08/14 12:15:06.272654 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.77857ms
DB: 2020/08/14 12:15:06.274093 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.728752ms
DB: 2020/08/14 12:15:06.278941 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 16.960228ms
DB: 2020/08/14 12:15:06.281288 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.133188ms
AttachNode: main 2020/08/14 12:15:06.281304 FetchForUpdate: for parent    SaDsKA5dRFedIaHwHQaZUg==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:15:06.281309 ** Cache FetchForUpdate Cache Key Value: [SaDsKA5dRFedIaHwHQaZUg==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:15:06.281315  node: SaDsKA5dRFedIaHwHQaZUg== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:15:06.281513 FetchForUpdate: for child    WMAuJiB7SOuTWBuYop3a1A==
FetchForUpdate: 2020/08/14 12:15:06.281540 ** Cache FetchForUpdate Cache Key Value: [WMAuJiB7SOuTWBuYop3a1A==]   sortk: A#
FetchNode: 2020/08/14 12:15:06.281562  node: WMAuJiB7SOuTWBuYop3a1A== subKey: A#
DB: 2020/08/14 12:15:06.284011 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.661934ms
FetchForUpdate: 2020/08/14 12:15:06.284194 len(nb): 1
fetchItems: 2020/08/14 12:15:06.284231 +++  Cache FetchItems for sortk A#G#:S UID: [SaDsKA5dRFedIaHwHQaZUg==] 
FetchNode: 2020/08/14 12:15:06.284236  node: SaDsKA5dRFedIaHwHQaZUg== subKey: A#G#:S
DB: 2020/08/14 12:15:06.285012 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.011477ms
AttachNode: main 2020/08/14 12:15:06.285024 FetchForUpdate: for parent    WMAuJiB7SOuTWBuYop3a1A==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:15:06.285029 ** Cache FetchForUpdate Cache Key Value: [WMAuJiB7SOuTWBuYop3a1A==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:15:06.285090 FetchForUpdate: for child    SaDsKA5dRFedIaHwHQaZUg==
FetchForUpdate: 2020/08/14 12:15:06.285097 ** Cache FetchForUpdate Cache Key Value: [SaDsKA5dRFedIaHwHQaZUg==]   sortk: A#
DB: 2020/08/14 12:15:06.286902 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.635462ms
DB: 2020/08/14 12:15:06.290820 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 17.410954ms
AttachNode: main 2020/08/14 12:15:06.290835 FetchForUpdate: for parent    upwdZrq7TKWqH2Q8fZZ/Mw==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:15:06.290840 ** Cache FetchForUpdate Cache Key Value: [upwdZrq7TKWqH2Q8fZZ/Mw==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:15:06.290846  node: upwdZrq7TKWqH2Q8fZZ/Mw== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:15:06.291125 FetchForUpdate: for child    WMAuJiB7SOuTWBuYop3a1A==
FetchForUpdate: 2020/08/14 12:15:06.291141 ** Cache FetchForUpdate Cache Key Value: [WMAuJiB7SOuTWBuYop3a1A==]   sortk: A#
DB: 2020/08/14 12:15:06.291212 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.623103ms
DB: 2020/08/14 12:15:06.295335 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.457986ms
FetchForUpdate: 2020/08/14 12:15:06.295371 len(nb): 1
fetchItems: 2020/08/14 12:15:06.295379 +++  Cache FetchItems for sortk A#G#:S UID: [upwdZrq7TKWqH2Q8fZZ/Mw==] 
FetchNode: 2020/08/14 12:15:06.295383  node: upwdZrq7TKWqH2Q8fZZ/Mw== subKey: A#G#:S
DB: 2020/08/14 12:15:06.296712 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 15.088751ms
FetchForUpdate: 2020/08/14 12:15:06.296841 len(nb): 7
fetchItems: 2020/08/14 12:15:06.296850 +++  Cache FetchItems for sortk A# UID: [WMAuJiB7SOuTWBuYop3a1A==] 
FetchNode: 2020/08/14 12:15:06.296855  node: WMAuJiB7SOuTWBuYop3a1A== subKey: A#
DB: 2020/08/14 12:15:06.298049 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.637687ms
DB: 2020/08/14 12:15:06.300512 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.627661ms
DB: 2020/08/14 12:15:06.302157 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.41823ms
DB: 2020/08/14 12:15:06.306488 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.788351ms
DB: 2020/08/14 12:15:06.309952 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.40878ms
DB: 2020/08/14 12:15:06.316017 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.161553ms
DB: 2020/08/14 12:15:06.322703 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.368941ms
DB: 2020/08/14 12:15:06.327490 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.323436ms
DB: 2020/08/14 12:15:06.332303 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.479475ms
DB: 2020/08/14 12:15:06.340058 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.030735ms
DB: 2020/08/14 12:15:06.343669 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.286066ms
DB: 2020/08/14 12:15:06.347425 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.419566ms
DB: 2020/08/14 12:15:06.351043 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.416475ms
Cache: 2020/08/14 12:15:06.351090 In SetUpredAvailable: pUid, tUID:  SaDsKA5dRFedIaHwHQaZUg== SaDsKA5dRFedIaHwHQaZUg== A#G#:S
Cache: 2020/08/14 12:15:06.351098 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:15:06.354571 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.424951ms
Unlock: 2020/08/14 12:15:06.354583 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:15:06.354589 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:15:06.354901 +++  Cache FetchItems for sortk A# UID: [SaDsKA5dRFedIaHwHQaZUg==] 
FetchNode: 2020/08/14 12:15:06.354923  node: SaDsKA5dRFedIaHwHQaZUg== subKey: A#
fetchItems: 2020/08/14 12:15:06.355129 +++  Cache FetchItems for sortk A# UID: [WMAuJiB7SOuTWBuYop3a1A==] 
FetchNode: 2020/08/14 12:15:06.355177  node: WMAuJiB7SOuTWBuYop3a1A== subKey: A#
DB: 2020/08/14 12:15:06.357884 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.915356ms
fetchItems: 2020/08/14 12:15:06.358250 +++  Cache FetchItems for sortk A# UID: [SaDsKA5dRFedIaHwHQaZUg==] 
FetchNode: 2020/08/14 12:15:06.358262  node: SaDsKA5dRFedIaHwHQaZUg== subKey: A#
DB: 2020/08/14 12:15:06.359836 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.147486ms
grmgr: 2020/08/14 12:15:06.359852 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:15:06.359858 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:15:06.359863 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:15:06.359869 goroutine about to start 4 cUID,pUID   SaDsKA5dRFedIaHwHQaZUg==  upwdZrq7TKWqH2Q8fZZ/Mw==  
attachNode: 2020/08/14 12:15:06.359876 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 12:15:06.359881 Looping..... 0
grmgr: 2020/08/14 12:15:06.359982 Looping..... 1
grmgr: 2020/08/14 12:15:06.359992 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:15:06.359997 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:15:06.361124 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.896589ms
DB: 2020/08/14 12:15:06.365547 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 7.253141ms
DB: 2020/08/14 12:15:06.366625 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.458463ms
DB: 2020/08/14 12:15:06.383158 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 16.497343ms
DB: 2020/08/14 12:15:06.386418 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.045917ms
DB: 2020/08/14 12:15:06.389093 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 15.588369ms
DB: 2020/08/14 12:15:06.389983 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.506418ms
DB: 2020/08/14 12:15:06.392565 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.248301ms
DB: 2020/08/14 12:15:06.393859 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.818295ms
DB: 2020/08/14 12:15:06.396508 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.477953ms
DB: 2020/08/14 12:15:06.401378 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.332461ms
AttachNode: main 2020/08/14 12:15:06.401397 FetchForUpdate: for parent    upwdZrq7TKWqH2Q8fZZ/Mw==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:15:06.401404 ** Cache FetchForUpdate Cache Key Value: [upwdZrq7TKWqH2Q8fZZ/Mw==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:15:06.401418 FetchForUpdate: for child    SaDsKA5dRFedIaHwHQaZUg==
FetchForUpdate: 2020/08/14 12:15:06.401424 ** Cache FetchForUpdate Cache Key Value: [SaDsKA5dRFedIaHwHQaZUg==]   sortk: A#
DB: 2020/08/14 12:15:06.403001 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.171473ms
DB: 2020/08/14 12:15:06.407078 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.728326ms
DB: 2020/08/14 12:15:06.411048 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.632198ms
DB: 2020/08/14 12:15:06.417705 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.17074ms
DB: 2020/08/14 12:15:06.421441 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.412123ms
DB: 2020/08/14 12:15:06.425389 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.615846ms
DB: 2020/08/14 12:15:06.429380 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.764301ms
Cache: 2020/08/14 12:15:06.429394 In SetUpredAvailable: pUid, tUID:  upwdZrq7TKWqH2Q8fZZ/Mw== upwdZrq7TKWqH2Q8fZZ/Mw== A#G#:S
Cache: 2020/08/14 12:15:06.429400 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:15:06.439091 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 9.653646ms
Unlock: 2020/08/14 12:15:06.439109 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:15:06.439116 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:15:06.439396 +++  Cache FetchItems for sortk A#G#:S UID: [upwdZrq7TKWqH2Q8fZZ/Mw==] 
FetchNode: 2020/08/14 12:15:06.439430  node: upwdZrq7TKWqH2Q8fZZ/Mw== subKey: A#G#:S
fetchItems: 2020/08/14 12:15:06.439819 +++  Cache FetchItems for sortk A#G#:S UID: [WMAuJiB7SOuTWBuYop3a1A==] 
FetchNode: 2020/08/14 12:15:06.439829  node: WMAuJiB7SOuTWBuYop3a1A== subKey: A#G#:S
DB: 2020/08/14 12:15:06.443411 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.184567ms
grmgr: 2020/08/14 12:15:06.443429 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:15:06.443435 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:15:06.443441 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:15:06.443448 goroutine about to start 5 cUID,pUID   upwdZrq7TKWqH2Q8fZZ/Mw==  WMAuJiB7SOuTWBuYop3a1A==  
attachNode: 2020/08/14 12:15:06.443454 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 12:15:06.443459 Looping..... 0
grmgr: 2020/08/14 12:15:06.443562 Looping..... 1
grmgr: 2020/08/14 12:15:06.443571 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:15:06.443576 has ASKed. Cnt is above limit. Mark nodeAttach as waiting
DB: 2020/08/14 12:15:06.445933 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 6.469004ms
DB: 2020/08/14 12:15:06.447046 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 7.160551ms
DB: 2020/08/14 12:15:06.449412 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.687443ms
DB: 2020/08/14 12:15:06.453757 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.296589ms
DB: 2020/08/14 12:15:06.457012 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.55944ms
DB: 2020/08/14 12:15:06.457305 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 10.802957ms
DB: 2020/08/14 12:15:06.460772 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.402474ms
DB: 2020/08/14 12:15:06.460789 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.402474ms
DB: 2020/08/14 12:15:06.462214 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.102306ms
DB: 2020/08/14 12:15:06.464014 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.19412ms
DB: 2020/08/14 12:15:06.464030 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.19412ms
DB: 2020/08/14 12:15:06.464574 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.318663ms
DB: 2020/08/14 12:15:06.467796 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.702046ms
DB: 2020/08/14 12:15:06.468309 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.656292ms
DB: 2020/08/14 12:15:06.471576 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.558144ms
DB: 2020/08/14 12:15:06.475346 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.582714ms
AttachNode: main 2020/08/14 12:15:06.475525 FetchForUpdate: for parent    WMAuJiB7SOuTWBuYop3a1A==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:15:06.475536 ** Cache FetchForUpdate Cache Key Value: [WMAuJiB7SOuTWBuYop3a1A==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:15:06.475551 FetchForUpdate: for child    upwdZrq7TKWqH2Q8fZZ/Mw==
FetchForUpdate: 2020/08/14 12:15:06.475556 ** Cache FetchForUpdate Cache Key Value: [upwdZrq7TKWqH2Q8fZZ/Mw==]   sortk: A#
DB: 2020/08/14 12:15:06.477149 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 18.951349ms
DB: 2020/08/14 12:15:06.480889 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.392228ms
DB: 2020/08/14 12:15:06.485212 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.557959ms
DB: 2020/08/14 12:15:06.492153 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.376715ms
DB: 2020/08/14 12:15:06.496195 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.348145ms
DB: 2020/08/14 12:15:06.500418 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.641409ms
DB: 2020/08/14 12:15:06.507419 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.317778ms
DB: 2020/08/14 12:15:06.512240 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.778615ms
DB: 2020/08/14 12:15:06.515698 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.382188ms
DB: 2020/08/14 12:15:06.519194 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.438462ms
Cache: 2020/08/14 12:15:06.519208 In SetUpredAvailable: pUid, tUID:  WMAuJiB7SOuTWBuYop3a1A== WMAuJiB7SOuTWBuYop3a1A== A#G#:S
Cache: 2020/08/14 12:15:06.519214 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:15:06.522573 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.323921ms
Unlock: 2020/08/14 12:15:06.522585 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:15:06.522590 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:15:06.522803 +++  Cache FetchItems for sortk A#G#:S UID: [WMAuJiB7SOuTWBuYop3a1A==] 
FetchNode: 2020/08/14 12:15:06.522889  node: WMAuJiB7SOuTWBuYop3a1A== subKey: A#G#:S
fetchItems: 2020/08/14 12:15:06.523098 +++  Cache FetchItems for sortk A# UID: [SaDsKA5dRFedIaHwHQaZUg==] 
FetchNode: 2020/08/14 12:15:06.523131  node: SaDsKA5dRFedIaHwHQaZUg== subKey: A#
DB: 2020/08/14 12:15:06.527048 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.402225ms
grmgr: 2020/08/14 12:15:06.527237 EndCh received for nodeAttach. rCnt = 2 
grmgr: 2020/08/14 12:15:06.527248 Send ack to waiting nodeAttach...
attachNode: 2020/08/14 12:15:06.527265 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:15:06.527291 goroutine about to start 6 cUID,pUID   upwdZrq7TKWqH2Q8fZZ/Mw==  SaDsKA5dRFedIaHwHQaZUg==  
rdfLoader: 2020/08/14 12:15:06.527298 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 12:15:06.527870 StartCh received for nodeAttach. rCnt = 3 
DB: 2020/08/14 12:15:06.530644 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 7.275992ms
DB: 2020/08/14 12:15:06.535125 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.576717ms
DB: 2020/08/14 12:15:06.537564 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.38361ms
DB: 2020/08/14 12:15:06.540224 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.460932ms
DB: 2020/08/14 12:15:06.540625 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 17.697416ms
DB: 2020/08/14 12:15:06.541586 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.926365ms
DB: 2020/08/14 12:15:06.543701 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.444239ms
DB: 2020/08/14 12:15:06.545339 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.703254ms
DB: 2020/08/14 12:15:06.546341 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.082285ms
DB: 2020/08/14 12:15:06.547307 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.524265ms
DB: 2020/08/14 12:15:06.549880 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.50517ms
DB: 2020/08/14 12:15:06.549897 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.50517ms
DB: 2020/08/14 12:15:06.550208 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.14925ms
DB: 2020/08/14 12:15:06.553144 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.538451ms
AttachNode: main 2020/08/14 12:15:06.553160 FetchForUpdate: for parent    SaDsKA5dRFedIaHwHQaZUg==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:15:06.553166 ** Cache FetchForUpdate Cache Key Value: [SaDsKA5dRFedIaHwHQaZUg==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:15:06.553179 FetchForUpdate: for child    upwdZrq7TKWqH2Q8fZZ/Mw==
FetchForUpdate: 2020/08/14 12:15:06.553184 ** Cache FetchForUpdate Cache Key Value: [upwdZrq7TKWqH2Q8fZZ/Mw==]   sortk: A#
DB: 2020/08/14 12:15:06.553410 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.481495ms
DB: 2020/08/14 12:15:06.553430 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.481495ms
DB: 2020/08/14 12:15:06.556212 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.450293ms
DB: 2020/08/14 12:15:06.557369 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.721153ms
DB: 2020/08/14 12:15:06.560773 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.068175ms
DB: 2020/08/14 12:15:06.561830 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.234075ms
DB: 2020/08/14 12:15:06.565617 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.06055ms
DB: 2020/08/14 12:15:06.571564 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.3545ms
DB: 2020/08/14 12:15:06.575286 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.232125ms
DB: 2020/08/14 12:15:06.580381 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.391568ms
DB: 2020/08/14 12:15:06.584222 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.780014ms
Cache: 2020/08/14 12:15:06.584238 In SetUpredAvailable: pUid, tUID:  upwdZrq7TKWqH2Q8fZZ/Mw== MjgXSFwIQvaoFHYIbDnGcQ== A#G#:S
Cache: 2020/08/14 12:15:06.584243 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:15:06.587823 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.528622ms
Unlock: 2020/08/14 12:15:06.587834 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:15:06.587840 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:15:06.588052 +++  Cache FetchItems for sortk A# UID: [upwdZrq7TKWqH2Q8fZZ/Mw==] 
FetchNode: 2020/08/14 12:15:06.588085  node: upwdZrq7TKWqH2Q8fZZ/Mw== subKey: A#
fetchItems: 2020/08/14 12:15:06.588292 +++  Cache FetchItems for sortk A#G#:S UID: [SaDsKA5dRFedIaHwHQaZUg==] 
FetchNode: 2020/08/14 12:15:06.588315  node: SaDsKA5dRFedIaHwHQaZUg== subKey: A#G#:S
DB: 2020/08/14 12:15:06.592199 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.284496ms
grmgr: 2020/08/14 12:15:06.592221 EndCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 12:15:06.594792 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 6.424417ms
DB: 2020/08/14 12:15:06.599411 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.844175ms
DB: 2020/08/14 12:15:06.603159 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.536984ms
DB: 2020/08/14 12:15:06.603178 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.536984ms
DB: 2020/08/14 12:15:06.604384 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 16.230216ms
DB: 2020/08/14 12:15:06.607588 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.375844ms
DB: 2020/08/14 12:15:06.607606 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.375844ms
DB: 2020/08/14 12:15:06.611713 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.86757ms
DB: 2020/08/14 12:15:06.613169 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.461955ms
DB: 2020/08/14 12:15:06.615327 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.39839ms
DB: 2020/08/14 12:15:06.617379 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.91924ms
DB: 2020/08/14 12:15:06.622586 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.283317ms
DB: 2020/08/14 12:15:06.629207 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.973896ms
DB: 2020/08/14 12:15:06.633040 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.343005ms
DB: 2020/08/14 12:15:06.637450 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.715674ms
DB: 2020/08/14 12:15:06.644032 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.033569ms
DB: 2020/08/14 12:15:06.648021 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.470729ms
DB: 2020/08/14 12:15:06.652591 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.782316ms
DB: 2020/08/14 12:15:06.655979 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.310906ms
Cache: 2020/08/14 12:15:06.655993 In SetUpredAvailable: pUid, tUID:  WMAuJiB7SOuTWBuYop3a1A== OgV5qK1GRSKxxywRPzg3Iw== A#G#:S
Cache: 2020/08/14 12:15:06.655999 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:15:06.659270 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.234482ms
Unlock: 2020/08/14 12:15:06.659283 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:15:06.659289 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:15:06.659510 +++  Cache FetchItems for sortk A# UID: [upwdZrq7TKWqH2Q8fZZ/Mw==] 
FetchNode: 2020/08/14 12:15:06.659545  node: upwdZrq7TKWqH2Q8fZZ/Mw== subKey: A#
DB: 2020/08/14 12:15:06.663538 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.171586ms
grmgr: 2020/08/14 12:15:06.663561 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 12:15:06.677602 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 18.002771ms
DB: 2020/08/14 12:15:06.685807 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.713693ms
DB: 2020/08/14 12:15:06.691117 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.918294ms
DB: 2020/08/14 12:15:06.695738 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.894575ms
DB: 2020/08/14 12:15:06.701862 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.351648ms
DB: 2020/08/14 12:15:06.705901 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.531483ms
DB: 2020/08/14 12:15:06.710535 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.800269ms
DB: 2020/08/14 12:15:06.716624 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.023128ms
DB: 2020/08/14 12:15:06.720069 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.376762ms
DB: 2020/08/14 12:15:06.724230 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.960538ms
DB: 2020/08/14 12:15:06.728376 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.90338ms
Cache: 2020/08/14 12:15:06.728391 In SetUpredAvailable: pUid, tUID:  SaDsKA5dRFedIaHwHQaZUg== BfcIGDAIRW6pC9Hx/2bGKg== A#G#:S
Cache: 2020/08/14 12:15:06.728397 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:15:06.732367 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.929128ms
Unlock: 2020/08/14 12:15:06.732378 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:15:06.732383 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 12:15:06.737910 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.444879ms
rdfLoader: 2020/08/14 12:15:06.737933 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 12:15:06.737941 cancel contexts
rdfLoader: 2020/08/14 12:15:06.737947 wait for autonomous goroutines to end
errlog: 2020/08/14 12:15:06.737952 Powering down...
grmgr: 2020/08/14 12:15:06.737961 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 12:15:06.737966 Powering down...
rdfuuid: 2020/08/14 12:15:06.737972 Powering down...
rdfLoader: 2020/08/14 12:15:06.737977 loader exists.....
DB:2020/08/14 12:16:15 log.go:18: ===============================================================================
errlog: 2020/08/14 12:16:15.732775 Powering on...
rdfLoader: 2020/08/14 12:16:15.732828 saveNode started......
rdfLoader: 2020/08/14 12:16:15.732834 define saveNode limiter......
rdfuuid: 2020/08/14 12:16:15.732845 Powering on...
grmgr: 2020/08/14 12:16:15.732863 Powering on...
rdfLoader: 2020/08/14 12:16:15.732876  principle goroutines started 
RDFreader: 2020/08/14 12:16:15.732899 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:16:15.732914 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 12:16:15.732920 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 12:16:15.732926 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 12:16:15.732931 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 12:16:15.732936 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 12:16:15.732941 spo read:      
RDFreader: 2020/08/14 12:16:15.732946 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 12:16:15.732951 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 12:16:15.732955 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 12:16:15.732960 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 12:16:15.732964 spo read:      
RDFreader: 2020/08/14 12:16:15.732970 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 12:16:15.732975 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 12:16:15.732980 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 12:16:15.732985 spo read:  b  Age  "58"
RDFreader: 2020/08/14 12:16:15.732990 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 12:16:15.732994 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 12:16:15.733000 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 12:16:15.733005 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 12:16:15.733009 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 12:16:15.733013 spo read:      
RDFreader: 2020/08/14 12:16:15.733018 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 12:16:15.733022 Send node batch on channel verifyCh
RDFreader: 2020/08/14 12:16:15.733027 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:16:15.733031 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 12:16:15.733036 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 12:16:15.733043 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 12:16:15.733049 spo read:  c  Age  "67"
RDFreader: 2020/08/14 12:16:15.733054 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 12:16:15.733059 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 12:16:15.733063 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 12:16:15.733068 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 12:16:15.733075 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 12:16:15.733080 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 12:16:15.733085 spo read:      
RDFreader: 2020/08/14 12:16:15.733089 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 12:16:15.733094 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 12:16:15.733099 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 12:16:15.733104 spo read:  d  Age  "36"
RDFreader: 2020/08/14 12:16:15.733109 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 12:16:15.733115 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 12:16:15.733119 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 12:16:15.733123 close verify channel
rdfLoader: 2020/08/14 12:16:15.733127 wait for goroutines to end
rdfLoader: 2020/08/14 12:16:15.733131 verify started....
rdfLoader: 2020/08/14 12:16:15.733136 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:16:15.733139 .  getType..
rdfLoader: 2020/08/14 12:16:15.733143 node.TyName : [Person]
DB: 2020/08/14 12:16:15.807387 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 74.179327ms
grmgr: 2020/08/14 12:16:15.807537 Looping..... 0
grmgr: 2020/08/14 12:16:15.807856 Looping..... 1
grmgr: 2020/08/14 12:16:15.807880 Looping..... 2
grmgr: 2020/08/14 12:16:15.808001 Looping..... 3
grmgr: 2020/08/14 12:16:15.808159 Looping..... 4
grmgr: 2020/08/14 12:16:15.808338 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:16:15.808361 .  getType..
rdfLoader: 2020/08/14 12:16:15.808366 node.TyName : [Person]
grmgr: 2020/08/14 12:16:15.808372 Looping..... 0
unmarshalRDF2020/08/14 12:16:15.808385 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:16:15.808395 Looping..... 1
grmgr: 2020/08/14 12:16:15.808401 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:16:15.808405 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:16:15.808413 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:16:15.808417 .  getType..
rdfLoader: 2020/08/14 12:16:15.808421 node.TyName : [Person]
grmgr: 2020/08/14 12:16:15.808426 Looping..... 0
rdfLoader: 2020/08/14 12:16:15.808436 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:16:15.808441 Add to SS . [Alfa]
unmarshalRDF2020/08/14 12:16:15.808505 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:16:15.808512 Exit  unmarshalRDF. 
saveNode: 2020/08/14 12:16:15.808517 read from saveCH channel 1 
unmarshalRDF2020/08/14 12:16:15.808527 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:16:15.808552 Looping..... 1
grmgr: 2020/08/14 12:16:15.808559 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:16:15.808566 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:16:15.808571 Looping..... 0
rdfLoader: 2020/08/14 12:16:15.808579 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:16:15.808584 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 12:16:15.808622 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:16:15.808627 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 12:16:15.808633 .  getType..
rdfLoader: 2020/08/14 12:16:15.808637 node.TyName : [Person]
unmarshalRDF2020/08/14 12:16:15.808646 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:16:15.808657 Looping..... 1
rdfLoader: 2020/08/14 12:16:15.808665 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 12:16:15.808670 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 12:16:15.808675 Add to SS . [Honda]
unmarshalRDF2020/08/14 12:16:15.808719 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:16:15.808725 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:16:15.808749 Looping..... 2
grmgr: 2020/08/14 12:16:15.808975 Looping..... 3
grmgr: 2020/08/14 12:16:15.809124 Looping..... 4
grmgr: 2020/08/14 12:16:15.809303 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:16:15.809322 Looping..... 0
saveNode: 2020/08/14 12:16:15.809329 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:16:15.809336 read from saveCH channel 2 
grmgr: 2020/08/14 12:16:15.809362 Looping..... 1
SaveRDFNode: xxx 2020/08/14 12:16:15.809373 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.809379 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.809386 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.809392 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.809397 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.809403 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.809409 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:16:15.809413 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:16:15.809421 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017680)}
SaveRDFNode: 2020/08/14 12:16:15.809425 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:16:15.809436 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.809440 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.809457 UID received  : zlfOt6kyT2m8SZF8+AGexQ==
grmgr: 2020/08/14 12:16:15.809711 Looping..... 2
grmgr: 2020/08/14 12:16:15.809897 Looping..... 3
grmgr: 2020/08/14 12:16:15.810074 Looping..... 4
grmgr: 2020/08/14 12:16:15.810256 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:16:15.810267 Looping..... 0
unmarshalRDF2020/08/14 12:16:15.810282 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:16:15.810293 Looping..... 1
rdfLoader: 2020/08/14 12:16:15.810302 Add to SS . [Bentley]
unmarshalRDF2020/08/14 12:16:15.810338 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:16:15.810343 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:16:15.810353 Looping..... 2
grmgr: 2020/08/14 12:16:15.810436 Looping..... 3
grmgr: 2020/08/14 12:16:15.810614 Looping..... 4
grmgr: 2020/08/14 12:16:15.810792 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:16:15.810802 EndCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/14 12:16:15.810807 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/14 12:16:15.810811 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:16:15.810816 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 12:16:15.810823 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:16:15.810828 read from saveCH channel 3 
grmgr: 2020/08/14 12:16:15.810833 Looping..... 0
grmgr: 2020/08/14 12:16:15.810860 Looping..... 1
grmgr: 2020/08/14 12:16:15.810865 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:16:15.810869 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:16:15.810878 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.810884 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.810899 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.810905 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.810911 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.810917 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.810923 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:16:15.810927 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:16:15.810939 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017da0)}
SaveRDFNode: 2020/08/14 12:16:15.810949 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:16:15.810957 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.810961 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.810967 UID received  : qbH8nPfKQgi6kekIuHsRyQ==
DB: 2020/08/14 12:16:15.817348 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.856824ms
DB: 2020/08/14 12:16:15.820809 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.81346ms
DB: 2020/08/14 12:16:15.825574 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.718009ms
DB: 2020/08/14 12:16:15.831180 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.017103ms
DB: 2020/08/14 12:16:15.834431 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.212474ms
DB: 2020/08/14 12:16:15.834853 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 17.469077ms
DB: 2020/08/14 12:16:15.837692 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.226524ms
SaveRDFNode: 2020/08/14 12:16:15.837707 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 12:16:15.837715 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.837719 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.837725 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:15.837739 a: = db.Item{PKey:[]uint8{0xa9, 0xb1, 0xfc, 0x9c, 0xf7, 0xca, 0x42, 0x8, 0xba, 0x91, 0xe9, 0x8, 0xb8, 0x7b, 0x11, 0xc9}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:15.838284 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.396471ms
DB: 2020/08/14 12:16:15.841712 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.393742ms
DB: 2020/08/14 12:16:15.842092 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.322958ms
SaveRDFNode: 2020/08/14 12:16:15.842106 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017da0)}
rdfUIDdb: 2020/08/14 12:16:15.842113 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.842117 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.842122 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:15.842152 a: = db.Item{PKey:[]uint8{0xa9, 0xb1, 0xfc, 0x9c, 0xf7, 0xca, 0x42, 0x8, 0xba, 0x91, 0xe9, 0x8, 0xb8, 0x7b, 0x11, 0xc9}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:15.845033 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.282324ms
SaveRDFNode: 2020/08/14 12:16:15.845176 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 12:16:15.845198 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.845203 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.845209 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:15.845221 a: = db.Item{PKey:[]uint8{0xce, 0x57, 0xce, 0xb7, 0xa9, 0x32, 0x4f, 0x69, 0xbc, 0x49, 0x91, 0x7c, 0xf8, 0x1, 0x9e, 0xc5}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:15.845527 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.342606ms
SaveRDFNode: 2020/08/14 12:16:15.845537 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:16:15.845546 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:16:15.845551 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:16:15.845557 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:16:15.845563 read from saveCH channel 4 
grmgr: 2020/08/14 12:16:15.845568 Looping..... 0
grmgr: 2020/08/14 12:16:15.845617 Looping..... 1
grmgr: 2020/08/14 12:16:15.845625 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:16:15.845629 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:16:15.845639 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.845645 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.845654 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.845660 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.845666 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.845671 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.845677 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:16:15.845681 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:16:15.845687 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc00037aba0)}
SaveRDFNode: 2020/08/14 12:16:15.845691 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:16:15.845700 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.845704 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.845709 UID received  : x68fvkP+RKK6/ioCifXvQA==
DB: 2020/08/14 12:16:15.848658 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.404956ms
SaveRDFNode: 2020/08/14 12:16:15.848672 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
rdfUIDdb: 2020/08/14 12:16:15.848678 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.848682 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.848688 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:15.848698 a: = db.Item{PKey:[]uint8{0xce, 0x57, 0xce, 0xb7, 0xa9, 0x32, 0x4f, 0x69, 0xbc, 0x49, 0x91, 0x7c, 0xf8, 0x1, 0x9e, 0xc5}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:15.849042 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.306108ms
DB: 2020/08/14 12:16:15.851913 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.182918ms
SaveRDFNode: 2020/08/14 12:16:15.851925 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:16:15.851932 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:16:15.851936 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:16:15.851945 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 12:16:15.851957 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 12:16:15.851979 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.851986 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.852015 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.852023 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.852029 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.852035 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:15.852041 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:16:15.852045 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:16:15.852051 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc00037b800)}
SaveRDFNode: 2020/08/14 12:16:15.852055 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:16:15.852063 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.852067 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.852073 UID received  : ewhs+/+JQqS9VNzKiibX9g==
grmgr: 2020/08/14 12:16:15.852284 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 12:16:15.852401 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.327233ms
DB: 2020/08/14 12:16:15.855337 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.238866ms
DB: 2020/08/14 12:16:15.855628 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.191899ms
DB: 2020/08/14 12:16:15.858590 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.221132ms
DB: 2020/08/14 12:16:15.859017 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.357733ms
DB: 2020/08/14 12:16:15.861977 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.245845ms
DB: 2020/08/14 12:16:15.862381 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.298062ms
SaveRDFNode: 2020/08/14 12:16:15.862396 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00037aba0)}
rdfUIDdb: 2020/08/14 12:16:15.862402 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.862427 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.862434 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:15.862445 a: = db.Item{PKey:[]uint8{0xc7, 0xaf, 0x1f, 0xbe, 0x43, 0xfe, 0x44, 0xa2, 0xba, 0xfe, 0x2a, 0x2, 0x89, 0xf5, 0xef, 0x40}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:15.865249 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.124686ms
DB: 2020/08/14 12:16:15.865615 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.140032ms
SaveRDFNode: 2020/08/14 12:16:15.865628 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00037aba0)}
rdfUIDdb: 2020/08/14 12:16:15.865634 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.865638 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.865643 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:15.865653 a: = db.Item{PKey:[]uint8{0xc7, 0xaf, 0x1f, 0xbe, 0x43, 0xfe, 0x44, 0xa2, 0xba, 0xfe, 0x2a, 0x2, 0x89, 0xf5, 0xef, 0x40}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:15.868499 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.213733ms
SaveRDFNode: 2020/08/14 12:16:15.868513 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00037b800)}
rdfUIDdb: 2020/08/14 12:16:15.868519 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.868523 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.868528 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:15.868539 a: = db.Item{PKey:[]uint8{0x7b, 0x8, 0x6c, 0xfb, 0xff, 0x89, 0x42, 0xa4, 0xbd, 0x54, 0xdc, 0xca, 0x8a, 0x26, 0xd7, 0xf6}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:15.868918 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.228646ms
SaveRDFNode: 2020/08/14 12:16:15.868994 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:16:15.869004 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 12:16:15.871828 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.251431ms
SaveRDFNode: 2020/08/14 12:16:15.871840 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00037b800)}
rdfUIDdb: 2020/08/14 12:16:15.871847 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:15.871851 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:15.871856 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:15.871883 a: = db.Item{PKey:[]uint8{0x7b, 0x8, 0x6c, 0xfb, 0xff, 0x89, 0x42, 0xa4, 0xbd, 0x54, 0xdc, 0xca, 0x8a, 0x26, 0xd7, 0xf6}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:15.875275 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.359857ms
SaveRDFNode: 2020/08/14 12:16:15.875449 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 12:16:15.875464 saveNode finished waiting...exiting
grmgr: 2020/08/14 12:16:15.875473 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 12:16:15.875483 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 12:16:15.875489 Looping..... 0
grmgr: 2020/08/14 12:16:15.875507 Looping..... 1
grmgr: 2020/08/14 12:16:15.875632 Looping..... 2
grmgr: 2020/08/14 12:16:15.875809 Looping..... 3
grmgr: 2020/08/14 12:16:15.876002 Looping..... 4
grmgr: 2020/08/14 12:16:15.876180 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:15.876192 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:15.876198 goroutine about to start 1 cUID,pUID   zlfOt6kyT2m8SZF8+AGexQ==  qbH8nPfKQgi6kekIuHsRyQ==  
attachNode: 2020/08/14 12:16:15.876205 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 12:16:15.876210 Looping..... 0
grmgr: 2020/08/14 12:16:15.876229 Looping..... 1
grmgr: 2020/08/14 12:16:15.876235 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:16:15.876239 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:15.876244 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:15.876249 goroutine about to start 2 cUID,pUID   zlfOt6kyT2m8SZF8+AGexQ==  x68fvkP+RKK6/ioCifXvQA==  
attachNode: 2020/08/14 12:16:15.876254 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 12:16:15.876259 Looping..... 0
DB: 2020/08/14 12:16:15.878519 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.202682ms
grmgr: 2020/08/14 12:16:15.879229 Looping..... 1
grmgr: 2020/08/14 12:16:15.879242 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:16:15.879248 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:15.879254 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:15.879260 goroutine about to start 3 cUID,pUID   qbH8nPfKQgi6kekIuHsRyQ==  zlfOt6kyT2m8SZF8+AGexQ==  
attachNode: 2020/08/14 12:16:15.879266 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 12:16:15.879280 Looping..... 0
grmgr: 2020/08/14 12:16:15.879688 Looping..... 1
grmgr: 2020/08/14 12:16:15.879711 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:16:15.879716 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:15.879722 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:15.879746 goroutine about to start 4 cUID,pUID   qbH8nPfKQgi6kekIuHsRyQ==  x68fvkP+RKK6/ioCifXvQA==  
attachNode: 2020/08/14 12:16:15.879753 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 12:16:15.879759 Looping..... 0
grmgr: 2020/08/14 12:16:15.879810 Looping..... 1
grmgr: 2020/08/14 12:16:15.879820 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:16:15.879824 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:15.879830 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:15.879835 goroutine about to start 5 cUID,pUID   x68fvkP+RKK6/ioCifXvQA==  zlfOt6kyT2m8SZF8+AGexQ==  
attachNode: 2020/08/14 12:16:15.879840 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 12:16:15.879845 Looping..... 0
grmgr: 2020/08/14 12:16:15.879863 Looping..... 1
grmgr: 2020/08/14 12:16:15.879868 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:16:15.879872 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:15.879877 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:15.879882 goroutine about to start 6 cUID,pUID   x68fvkP+RKK6/ioCifXvQA==  qbH8nPfKQgi6kekIuHsRyQ==  
rdfLoader: 2020/08/14 12:16:15.879887 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 12:16:15.879901 StartCh received for nodeAttach. rCnt = 6 
DB: 2020/08/14 12:16:15.881503 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.567653ms
DB: 2020/08/14 12:16:15.884631 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.010462ms
DB: 2020/08/14 12:16:15.887391 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.493884ms
DB: 2020/08/14 12:16:15.896128 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 12.930971ms
DB: 2020/08/14 12:16:15.896904 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 16.959638ms
DB: 2020/08/14 12:16:15.899350 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 11.906061ms
DB: 2020/08/14 12:16:15.900126 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 16.246719ms
DB: 2020/08/14 12:16:15.900484 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.545898ms
DB: 2020/08/14 12:16:15.906134 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 21.779436ms
DB: 2020/08/14 12:16:15.906606 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.741812ms
DB: 2020/08/14 12:16:15.906919 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.742056ms
DB: 2020/08/14 12:16:15.908254 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 23.589342ms
DB: 2020/08/14 12:16:15.908748 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.577924ms
DB: 2020/08/14 12:16:15.910694 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 14.366793ms
DB: 2020/08/14 12:16:15.912785 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.049235ms
DB: 2020/08/14 12:16:15.913038 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.218ms
DB: 2020/08/14 12:16:15.914071 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 14.229905ms
DB: 2020/08/14 12:16:15.914922 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.099771ms
DB: 2020/08/14 12:16:15.916228 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.12502ms
DB: 2020/08/14 12:16:15.918363 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.391478ms
DB: 2020/08/14 12:16:15.919831 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.552448ms
DB: 2020/08/14 12:16:15.920262 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.486692ms
AttachNode: main 2020/08/14 12:16:15.920277 FetchForUpdate: for parent    qbH8nPfKQgi6kekIuHsRyQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:15.920283 ** Cache FetchForUpdate Cache Key Value: [qbH8nPfKQgi6kekIuHsRyQ==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:16:15.920289  node: qbH8nPfKQgi6kekIuHsRyQ== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:16:15.920489 FetchForUpdate: for child    zlfOt6kyT2m8SZF8+AGexQ==
FetchForUpdate: 2020/08/14 12:16:15.920499 ** Cache FetchForUpdate Cache Key Value: [zlfOt6kyT2m8SZF8+AGexQ==]   sortk: A#
FetchNode: 2020/08/14 12:16:15.920512  node: zlfOt6kyT2m8SZF8+AGexQ== subKey: A#
DB: 2020/08/14 12:16:15.922870 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 16.232095ms
DB: 2020/08/14 12:16:15.923389 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.061227ms
FetchForUpdate: 2020/08/14 12:16:15.923440 len(nb): 1
fetchItems: 2020/08/14 12:16:15.923448 +++  Cache FetchItems for sortk A#G#:S UID: [qbH8nPfKQgi6kekIuHsRyQ==] 
FetchNode: 2020/08/14 12:16:15.923453  node: qbH8nPfKQgi6kekIuHsRyQ== subKey: A#G#:S
DB: 2020/08/14 12:16:15.923883 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.321584ms
FetchForUpdate: 2020/08/14 12:16:15.924011 len(nb): 7
fetchItems: 2020/08/14 12:16:15.924021 +++  Cache FetchItems for sortk A# UID: [zlfOt6kyT2m8SZF8+AGexQ==] 
FetchNode: 2020/08/14 12:16:15.924025  node: zlfOt6kyT2m8SZF8+AGexQ== subKey: A#
DB: 2020/08/14 12:16:15.924387 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 17.417189ms
DB: 2020/08/14 12:16:15.927785 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.728736ms
DB: 2020/08/14 12:16:15.930879 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 7.395453ms
DB: 2020/08/14 12:16:15.931200 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 12.284931ms
AttachNode: main 2020/08/14 12:16:15.931216 FetchForUpdate: for parent    zlfOt6kyT2m8SZF8+AGexQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:15.931221 ** Cache FetchForUpdate Cache Key Value: [zlfOt6kyT2m8SZF8+AGexQ==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:16:15.931255 FetchForUpdate: for child    x68fvkP+RKK6/ioCifXvQA==
FetchForUpdate: 2020/08/14 12:16:15.931264 ** Cache FetchForUpdate Cache Key Value: [x68fvkP+RKK6/ioCifXvQA==]   sortk: A#
FetchNode: 2020/08/14 12:16:15.931277  node: x68fvkP+RKK6/ioCifXvQA== subKey: A#
DB: 2020/08/14 12:16:15.931969 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 22.927789ms
DB: 2020/08/14 12:16:15.935016 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 13.969932ms
AttachNode: main 2020/08/14 12:16:15.935031 FetchForUpdate: for parent    x68fvkP+RKK6/ioCifXvQA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:15.935046 ** Cache FetchForUpdate Cache Key Value: [x68fvkP+RKK6/ioCifXvQA==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:16:15.935056 FetchForUpdate: for child    qbH8nPfKQgi6kekIuHsRyQ==
FetchForUpdate: 2020/08/14 12:16:15.935080 ** Cache FetchForUpdate Cache Key Value: [qbH8nPfKQgi6kekIuHsRyQ==]   sortk: A#
DB: 2020/08/14 12:16:15.937923 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 14.997129ms
DB: 2020/08/14 12:16:15.938555 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.553347ms
DB: 2020/08/14 12:16:15.938898 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 14.481013ms
DB: 2020/08/14 12:16:15.939312 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 7.950093ms
FetchForUpdate: 2020/08/14 12:16:15.939465 len(nb): 7
fetchItems: 2020/08/14 12:16:15.939476 +++  Cache FetchItems for sortk A# UID: [x68fvkP+RKK6/ioCifXvQA==] 
FetchNode: 2020/08/14 12:16:15.939480  node: x68fvkP+RKK6/ioCifXvQA== subKey: A#
DB: 2020/08/14 12:16:15.942686 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.036743ms
DB: 2020/08/14 12:16:15.943603 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.65857ms
DB: 2020/08/14 12:16:15.947970 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.693491ms
AttachNode: main 2020/08/14 12:16:15.948138 FetchForUpdate: for parent    zlfOt6kyT2m8SZF8+AGexQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:15.948187 ** Cache FetchForUpdate Cache Key Value: [zlfOt6kyT2m8SZF8+AGexQ==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:16:15.948202 FetchForUpdate: for child    qbH8nPfKQgi6kekIuHsRyQ==
FetchForUpdate: 2020/08/14 12:16:15.948208 ** Cache FetchForUpdate Cache Key Value: [qbH8nPfKQgi6kekIuHsRyQ==]   sortk: A#
DB: 2020/08/14 12:16:15.950723 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.04021ms
AttachNode: main 2020/08/14 12:16:15.950755 FetchForUpdate: for parent    qbH8nPfKQgi6kekIuHsRyQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:15.950769 ** Cache FetchForUpdate Cache Key Value: [qbH8nPfKQgi6kekIuHsRyQ==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:16:15.950781 FetchForUpdate: for child    x68fvkP+RKK6/ioCifXvQA==
FetchForUpdate: 2020/08/14 12:16:15.950785 ** Cache FetchForUpdate Cache Key Value: [x68fvkP+RKK6/ioCifXvQA==]   sortk: A#
DB: 2020/08/14 12:16:15.951049 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 11.541134ms
DB: 2020/08/14 12:16:15.955790 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 15.154221ms
AttachNode: main 2020/08/14 12:16:15.955812 FetchForUpdate: for parent    x68fvkP+RKK6/ioCifXvQA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:15.955818 ** Cache FetchForUpdate Cache Key Value: [x68fvkP+RKK6/ioCifXvQA==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:16:15.955831 FetchForUpdate: for child    zlfOt6kyT2m8SZF8+AGexQ==
FetchForUpdate: 2020/08/14 12:16:15.955835 ** Cache FetchForUpdate Cache Key Value: [zlfOt6kyT2m8SZF8+AGexQ==]   sortk: A#
DB: 2020/08/14 12:16:15.957725 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 16.109496ms
DB: 2020/08/14 12:16:15.975172 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 17.332818ms
DB: 2020/08/14 12:16:15.978560 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.309061ms
DB: 2020/08/14 12:16:15.982305 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.623997ms
DB: 2020/08/14 12:16:15.988694 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.023621ms
DB: 2020/08/14 12:16:15.992375 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.345029ms
DB: 2020/08/14 12:16:15.996346 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.619552ms
DB: 2020/08/14 12:16:16.002756 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.061534ms
DB: 2020/08/14 12:16:16.006805 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.686315ms
DB: 2020/08/14 12:16:16.010834 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.672739ms
DB: 2020/08/14 12:16:16.014681 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.618854ms
Cache: 2020/08/14 12:16:16.014700 In SetUpredAvailable: pUid, tUID:  qbH8nPfKQgi6kekIuHsRyQ== qbH8nPfKQgi6kekIuHsRyQ== A#G#:S
Cache: 2020/08/14 12:16:16.014706 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:16:16.018437 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.690351ms
Unlock: 2020/08/14 12:16:16.018451 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:16:16.018459 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:16:16.018723 +++  Cache FetchItems for sortk A# UID: [qbH8nPfKQgi6kekIuHsRyQ==] 
FetchNode: 2020/08/14 12:16:16.018745  node: qbH8nPfKQgi6kekIuHsRyQ== subKey: A#
fetchItems: 2020/08/14 12:16:16.018943 +++  Cache FetchItems for sortk A#G#:S UID: [zlfOt6kyT2m8SZF8+AGexQ==] 
FetchNode: 2020/08/14 12:16:16.018966  node: zlfOt6kyT2m8SZF8+AGexQ== subKey: A#G#:S
DB: 2020/08/14 12:16:16.021606 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.805089ms
fetchItems: 2020/08/14 12:16:16.021817 +++  Cache FetchItems for sortk A# UID: [qbH8nPfKQgi6kekIuHsRyQ==] 
FetchNode: 2020/08/14 12:16:16.021829  node: qbH8nPfKQgi6kekIuHsRyQ== subKey: A#
DB: 2020/08/14 12:16:16.025095 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.059533ms
DB: 2020/08/14 12:16:16.025564 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.025287ms
grmgr: 2020/08/14 12:16:16.025581 EndCh received for nodeAttach. rCnt = 5 
DB: 2020/08/14 12:16:16.028698 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 6.836676ms
DB: 2020/08/14 12:16:16.030555 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.711319ms
DB: 2020/08/14 12:16:16.037436 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.049606ms
DB: 2020/08/14 12:16:16.041134 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.512383ms
DB: 2020/08/14 12:16:16.045617 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.813252ms
DB: 2020/08/14 12:16:16.052406 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.070249ms
DB: 2020/08/14 12:16:16.056329 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.422084ms
DB: 2020/08/14 12:16:16.060740 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.840877ms
DB: 2020/08/14 12:16:16.067079 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.608008ms
DB: 2020/08/14 12:16:16.071199 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.814972ms
DB: 2020/08/14 12:16:16.075301 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.782172ms
DB: 2020/08/14 12:16:16.078989 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.470359ms
Cache: 2020/08/14 12:16:16.079017 In SetUpredAvailable: pUid, tUID:  zlfOt6kyT2m8SZF8+AGexQ== zlfOt6kyT2m8SZF8+AGexQ== A#G#:S
Cache: 2020/08/14 12:16:16.079022 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:16:16.082621 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.560914ms
Unlock: 2020/08/14 12:16:16.082632 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:16:16.082639 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:16:16.082851 +++  Cache FetchItems for sortk A#G#:S UID: [zlfOt6kyT2m8SZF8+AGexQ==] 
FetchNode: 2020/08/14 12:16:16.082893  node: zlfOt6kyT2m8SZF8+AGexQ== subKey: A#G#:S
fetchItems: 2020/08/14 12:16:16.083102 +++  Cache FetchItems for sortk A#G#:S UID: [x68fvkP+RKK6/ioCifXvQA==] 
FetchNode: 2020/08/14 12:16:16.083123  node: x68fvkP+RKK6/ioCifXvQA== subKey: A#G#:S
DB: 2020/08/14 12:16:16.086598 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.895232ms
grmgr: 2020/08/14 12:16:16.086623 EndCh received for nodeAttach. rCnt = 4 
DB: 2020/08/14 12:16:16.089762 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.582223ms
DB: 2020/08/14 12:16:16.093874 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.733123ms
DB: 2020/08/14 12:16:16.100409 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 17.470395ms
DB: 2020/08/14 12:16:16.102990 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.507386ms
DB: 2020/08/14 12:16:16.105585 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.361026ms
DB: 2020/08/14 12:16:16.107010 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.550686ms
DB: 2020/08/14 12:16:16.109051 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.430593ms
DB: 2020/08/14 12:16:16.109068 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.430593ms
DB: 2020/08/14 12:16:16.110640 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.531261ms
DB: 2020/08/14 12:16:16.112301 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.200433ms
DB: 2020/08/14 12:16:16.112317 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.200433ms
DB: 2020/08/14 12:16:16.116026 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.628133ms
DB: 2020/08/14 12:16:16.117303 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.104448ms
DB: 2020/08/14 12:16:16.119608 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.517104ms
DB: 2020/08/14 12:16:16.120733 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.368548ms
DB: 2020/08/14 12:16:16.124752 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.487156ms
DB: 2020/08/14 12:16:16.131174 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.890327ms
DB: 2020/08/14 12:16:16.135033 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.374494ms
DB: 2020/08/14 12:16:16.139203 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.503231ms
DB: 2020/08/14 12:16:16.142826 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.29827ms
Cache: 2020/08/14 12:16:16.142839 In SetUpredAvailable: pUid, tUID:  x68fvkP+RKK6/ioCifXvQA== x68fvkP+RKK6/ioCifXvQA== A#G#:S
Cache: 2020/08/14 12:16:16.142845 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:16:16.146263 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.357952ms
Unlock: 2020/08/14 12:16:16.146274 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:16:16.146280 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:16:16.146546 +++  Cache FetchItems for sortk A# UID: [x68fvkP+RKK6/ioCifXvQA==] 
FetchNode: 2020/08/14 12:16:16.146566  node: x68fvkP+RKK6/ioCifXvQA== subKey: A#
fetchItems: 2020/08/14 12:16:16.146771 +++  Cache FetchItems for sortk A# UID: [qbH8nPfKQgi6kekIuHsRyQ==] 
FetchNode: 2020/08/14 12:16:16.146800  node: qbH8nPfKQgi6kekIuHsRyQ== subKey: A#
DB: 2020/08/14 12:16:16.153473 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.119637ms
grmgr: 2020/08/14 12:16:16.153673 EndCh received for nodeAttach. rCnt = 3 
DB: 2020/08/14 12:16:16.156747 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 9.906249ms
DB: 2020/08/14 12:16:16.164045 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 17.427906ms
DB: 2020/08/14 12:16:16.165759 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.838812ms
DB: 2020/08/14 12:16:16.170885 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.84742ms
DB: 2020/08/14 12:16:16.175450 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.719ms
DB: 2020/08/14 12:16:16.182064 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.067192ms
DB: 2020/08/14 12:16:16.186402 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.841271ms
DB: 2020/08/14 12:16:16.190724 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.618783ms
DB: 2020/08/14 12:16:16.197123 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.89574ms
DB: 2020/08/14 12:16:16.200932 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.331242ms
DB: 2020/08/14 12:16:16.205031 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.435393ms
DB: 2020/08/14 12:16:16.208829 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.355499ms
Cache: 2020/08/14 12:16:16.208843 In SetUpredAvailable: pUid, tUID:  zlfOt6kyT2m8SZF8+AGexQ== zZ5FdakUQR2BUCulvXirUA== A#G#:S
Cache: 2020/08/14 12:16:16.208849 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:16:16.212265 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.362051ms
Unlock: 2020/08/14 12:16:16.212276 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:16:16.212282 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:16:16.213134 +++  Cache FetchItems for sortk A# UID: [zlfOt6kyT2m8SZF8+AGexQ==] 
FetchNode: 2020/08/14 12:16:16.213158  node: zlfOt6kyT2m8SZF8+AGexQ== subKey: A#
fetchItems: 2020/08/14 12:16:16.213368 +++  Cache FetchItems for sortk A#G#:S UID: [qbH8nPfKQgi6kekIuHsRyQ==] 
FetchNode: 2020/08/14 12:16:16.213392  node: qbH8nPfKQgi6kekIuHsRyQ== subKey: A#G#:S
DB: 2020/08/14 12:16:16.220416 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.07687ms
grmgr: 2020/08/14 12:16:16.220440 EndCh received for nodeAttach. rCnt = 2 
DB: 2020/08/14 12:16:16.223273 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 9.786141ms
DB: 2020/08/14 12:16:16.227998 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.591592ms
DB: 2020/08/14 12:16:16.230052 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 16.838017ms
DB: 2020/08/14 12:16:16.231862 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.828753ms
DB: 2020/08/14 12:16:16.231885 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.828753ms
DB: 2020/08/14 12:16:16.236310 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.389051ms
DB: 2020/08/14 12:16:16.236327 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.389051ms
DB: 2020/08/14 12:16:16.240633 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.089713ms
DB: 2020/08/14 12:16:16.247043 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.052349ms
DB: 2020/08/14 12:16:16.253163 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.048167ms
DB: 2020/08/14 12:16:16.256769 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.549064ms
DB: 2020/08/14 12:16:16.260417 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.514189ms
DB: 2020/08/14 12:16:16.266428 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.945457ms
DB: 2020/08/14 12:16:16.270227 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.294759ms
DB: 2020/08/14 12:16:16.274277 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.466804ms
DB: 2020/08/14 12:16:16.281435 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.299978ms
DB: 2020/08/14 12:16:16.285523 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.521153ms
DB: 2020/08/14 12:16:16.289692 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.591208ms
DB: 2020/08/14 12:16:16.293576 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.374963ms
Cache: 2020/08/14 12:16:16.293592 In SetUpredAvailable: pUid, tUID:  qbH8nPfKQgi6kekIuHsRyQ== a8GeGmWGQGOcJp/sfq7osQ== A#G#:S
Cache: 2020/08/14 12:16:16.293598 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:16:16.297001 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.368013ms
Unlock: 2020/08/14 12:16:16.297013 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:16:16.297018 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:16:16.297288 +++  Cache FetchItems for sortk A#G#:S UID: [x68fvkP+RKK6/ioCifXvQA==] 
FetchNode: 2020/08/14 12:16:16.297298  node: x68fvkP+RKK6/ioCifXvQA== subKey: A#G#:S
DB: 2020/08/14 12:16:16.303406 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.328135ms
grmgr: 2020/08/14 12:16:16.303423 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/14 12:16:16.312456 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 15.093371ms
DB: 2020/08/14 12:16:16.317741 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.475686ms
DB: 2020/08/14 12:16:16.321209 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.431759ms
DB: 2020/08/14 12:16:16.321226 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.431759ms
DB: 2020/08/14 12:16:16.324618 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.360377ms
DB: 2020/08/14 12:16:16.324635 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.360377ms
DB: 2020/08/14 12:16:16.328767 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.052113ms
DB: 2020/08/14 12:16:16.332583 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.741517ms
DB: 2020/08/14 12:16:16.339572 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.216522ms
DB: 2020/08/14 12:16:16.343142 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.510187ms
DB: 2020/08/14 12:16:16.347578 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.71847ms
DB: 2020/08/14 12:16:16.354624 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.279923ms
DB: 2020/08/14 12:16:16.358540 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.414648ms
DB: 2020/08/14 12:16:16.363106 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.011048ms
DB: 2020/08/14 12:16:16.370107 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.246637ms
DB: 2020/08/14 12:16:16.374104 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.474883ms
DB: 2020/08/14 12:16:16.378473 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.789105ms
DB: 2020/08/14 12:16:16.382581 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.60868ms
Cache: 2020/08/14 12:16:16.382600 In SetUpredAvailable: pUid, tUID:  x68fvkP+RKK6/ioCifXvQA== W22d8CLjQ1ervV8mVYIM+w== A#G#:S
Cache: 2020/08/14 12:16:16.382607 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:16:16.386548 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.903513ms
Unlock: 2020/08/14 12:16:16.386562 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:16:16.386568 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/14 12:16:16.392799 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.174482ms
rdfLoader: 2020/08/14 12:16:16.392816 saveNode finished waiting...exiting
rdfLoader: 2020/08/14 12:16:16.392822 cancel contexts
rdfLoader: 2020/08/14 12:16:16.392828 wait for autonomous goroutines to end
errlog: 2020/08/14 12:16:16.392834 Powering down...
grmgr: 2020/08/14 12:16:16.392842 EndCh received for nodeAttach. rCnt = 0 
grmgr: 2020/08/14 12:16:16.392848 Powering down...
rdfuuid: 2020/08/14 12:16:16.392854 Powering down...
rdfLoader: 2020/08/14 12:16:16.392858 loader exists.....
DB:2020/08/14 12:16:23 log.go:18: ===============================================================================
errlog: 2020/08/14 12:16:23.856914 Powering on...
rdfLoader: 2020/08/14 12:16:23.856954 saveNode started......
rdfLoader: 2020/08/14 12:16:23.856981 define saveNode limiter......
rdfuuid: 2020/08/14 12:16:23.856995 Powering on...
grmgr: 2020/08/14 12:16:23.857013 Powering on...
rdfLoader: 2020/08/14 12:16:23.857031  principle goroutines started 
RDFreader: 2020/08/14 12:16:23.857054 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:16:23.857081 spo read:  abc  __type  "Person"
RDFreader: 2020/08/14 12:16:23.857087 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/14 12:16:23.857093 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/14 12:16:23.857098 spo read:  abc  Age  "62"
RDFreader: 2020/08/14 12:16:23.857104 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/14 12:16:23.857108 spo read:      
RDFreader: 2020/08/14 12:16:23.857113 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/14 12:16:23.857118 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/14 12:16:23.857123 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/14 12:16:23.857128 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/14 12:16:23.857132 spo read:      
RDFreader: 2020/08/14 12:16:23.857140 spo read:  b  __type  "Person"
RDFreader: 2020/08/14 12:16:23.857145 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/14 12:16:23.857150 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/14 12:16:23.857155 spo read:  b  Age  "58"
RDFreader: 2020/08/14 12:16:23.857160 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/14 12:16:23.857165 spo read:  b  Siblings  _:c
RDFreader: 2020/08/14 12:16:23.857171 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/14 12:16:23.857176 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/14 12:16:23.857180 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/14 12:16:23.857184 spo read:      
RDFreader: 2020/08/14 12:16:23.857189 spo read:  c  __type  "Person"
rdfLoader: 2020/08/14 12:16:23.857193 Send node batch on channel verifyCh
RDFreader: 2020/08/14 12:16:23.857198 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/14 12:16:23.857202 spo read:  c  __type  "Person"
RDFreader: 2020/08/14 12:16:23.857207 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/14 12:16:23.857215 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/14 12:16:23.857220 spo read:  c  Age  "67"
RDFreader: 2020/08/14 12:16:23.857225 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/14 12:16:23.857230 spo read:  c  Siblings  _:b
RDFreader: 2020/08/14 12:16:23.857235 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/14 12:16:23.857240 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/14 12:16:23.857247 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/14 12:16:23.857252 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/14 12:16:23.857257 spo read:      
RDFreader: 2020/08/14 12:16:23.857261 spo read:  d  __type  "Person"
RDFreader: 2020/08/14 12:16:23.857266 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/14 12:16:23.857271 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/14 12:16:23.857276 spo read:  d  Age  "36"
RDFreader: 2020/08/14 12:16:23.857281 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/14 12:16:23.857287 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/14 12:16:23.857291 Send node batch on channel verifyCh
rdfLoader: 2020/08/14 12:16:23.857295 close verify channel
rdfLoader: 2020/08/14 12:16:23.857299 wait for goroutines to end
rdfLoader: 2020/08/14 12:16:23.857304 verify started....
rdfLoader: 2020/08/14 12:16:23.857308 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:16:23.857312 .  getType..
rdfLoader: 2020/08/14 12:16:23.857316 node.TyName : [Person]
DB: 2020/08/14 12:16:23.936248 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 78.852472ms
grmgr: 2020/08/14 12:16:23.936392 Looping..... 0
grmgr: 2020/08/14 12:16:23.936722 Looping..... 1
grmgr: 2020/08/14 12:16:23.936747 Looping..... 2
grmgr: 2020/08/14 12:16:23.936871 Looping..... 3
grmgr: 2020/08/14 12:16:23.937049 Looping..... 4
grmgr: 2020/08/14 12:16:23.937228 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:16:23.937240 .  getType..
rdfLoader: 2020/08/14 12:16:23.937245 node.TyName : [Person]
grmgr: 2020/08/14 12:16:23.937251 Looping..... 0
unmarshalRDF2020/08/14 12:16:23.937264 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:16:23.937274 Looping..... 1
grmgr: 2020/08/14 12:16:23.937291 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:16:23.937295 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/14 12:16:23.937304 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/14 12:16:23.937308 .  getType..
rdfLoader: 2020/08/14 12:16:23.937312 node.TyName : [Person]
grmgr: 2020/08/14 12:16:23.937317 Looping..... 0
rdfLoader: 2020/08/14 12:16:23.937328 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:16:23.937333 Add to SS . [Alfa]
unmarshalRDF2020/08/14 12:16:23.937396 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:16:23.937403 Exit  unmarshalRDF. 
saveNode: 2020/08/14 12:16:23.937409 read from saveCH channel 1 
unmarshalRDF2020/08/14 12:16:23.937418 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:16:23.937444 Looping..... 1
grmgr: 2020/08/14 12:16:23.937450 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/14 12:16:23.937454 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:16:23.937460 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:16:23.937465 Looping..... 0
rdfLoader: 2020/08/14 12:16:23.937473 Add to SS . [Honda]
rdfLoader: 2020/08/14 12:16:23.937478 Add to SS . [VW Golf]
unmarshalRDF2020/08/14 12:16:23.937517 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:16:23.937523 Exit  unmarshalRDF. 
rdfLoader: 2020/08/14 12:16:23.937529 .  getType..
rdfLoader: 2020/08/14 12:16:23.937533 node.TyName : [Person]
unmarshalRDF2020/08/14 12:16:23.937542 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:16:23.937554 Looping..... 1
rdfLoader: 2020/08/14 12:16:23.937563 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/14 12:16:23.937567 Add to SS . [Ford Laser]
rdfLoader: 2020/08/14 12:16:23.937572 Add to SS . [Honda]
unmarshalRDF2020/08/14 12:16:23.937615 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:16:23.937621 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:16:23.937646 Looping..... 2
grmgr: 2020/08/14 12:16:23.937872 Looping..... 3
grmgr: 2020/08/14 12:16:23.938023 Looping..... 4
grmgr: 2020/08/14 12:16:23.938200 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:16:23.938209 Looping..... 0
saveNode: 2020/08/14 12:16:23.938216 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:16:23.938222 read from saveCH channel 2 
grmgr: 2020/08/14 12:16:23.938248 Looping..... 1
SaveRDFNode: xxx 2020/08/14 12:16:23.938266 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.938274 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.938279 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.938285 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.938291 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.938297 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.938303 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:16:23.938307 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:16:23.938314 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000382420)}
SaveRDFNode: 2020/08/14 12:16:23.938318 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:16:23.938329 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:23.938333 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:23.938340 UID received  : YE9A+vjCRTOoUMCv0wXlhA==
grmgr: 2020/08/14 12:16:23.938600 Looping..... 2
grmgr: 2020/08/14 12:16:23.938782 Looping..... 3
grmgr: 2020/08/14 12:16:23.938960 Looping..... 4
grmgr: 2020/08/14 12:16:23.939157 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/14 12:16:23.939169 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:16:23.939174 Looping..... 0
unmarshalRDF2020/08/14 12:16:23.939190 Entered unmarshalRDF. 
grmgr: 2020/08/14 12:16:23.939201 Looping..... 1
rdfLoader: 2020/08/14 12:16:23.939211 Add to SS . [Bentley]
unmarshalRDF2020/08/14 12:16:23.939245 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/14 12:16:23.939250 Exit  unmarshalRDF. 
grmgr: 2020/08/14 12:16:23.939260 Looping..... 2
grmgr: 2020/08/14 12:16:23.939322 Looping..... 3
grmgr: 2020/08/14 12:16:23.939500 Looping..... 4
grmgr: 2020/08/14 12:16:23.939678 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/14 12:16:23.939688 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/14 12:16:23.939693 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/14 12:16:23.939700 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:16:23.939706 read from saveCH channel 3 
grmgr: 2020/08/14 12:16:23.939711 Looping..... 0
grmgr: 2020/08/14 12:16:23.939736 Looping..... 1
grmgr: 2020/08/14 12:16:23.939742 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:16:23.939746 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:16:23.939756 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.939762 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.939768 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.939775 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.939787 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.939793 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.939799 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:16:23.939803 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:16:23.939809 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000382ae0)}
SaveRDFNode: 2020/08/14 12:16:23.939813 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:16:23.939833 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:23.939838 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:23.939844 UID received  : PPprOx1hQYCVduyYBt078A==
DB: 2020/08/14 12:16:23.947625 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.242479ms
DB: 2020/08/14 12:16:23.951414 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.750042ms
DB: 2020/08/14 12:16:23.955341 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.892173ms
DB: 2020/08/14 12:16:23.959254 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.711922ms
DB: 2020/08/14 12:16:23.963250 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.947294ms
SaveRDFNode: 2020/08/14 12:16:23.963266 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000382420)}
rdfUIDdb: 2020/08/14 12:16:23.963272 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:23.963277 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:23.963282 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:23.963321 a: = db.Item{PKey:[]uint8{0x60, 0x4f, 0x40, 0xfa, 0xf8, 0xc2, 0x45, 0x33, 0xa8, 0x50, 0xc0, 0xaf, 0xd3, 0x5, 0xe5, 0x84}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:23.964267 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 24.394919ms
DB: 2020/08/14 12:16:23.967147 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.788997ms
SaveRDFNode: 2020/08/14 12:16:23.967162 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000382420)}
rdfUIDdb: 2020/08/14 12:16:23.967167 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:23.967172 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:23.967177 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:23.967189 a: = db.Item{PKey:[]uint8{0x60, 0x4f, 0x40, 0xfa, 0xf8, 0xc2, 0x45, 0x33, 0xa8, 0x50, 0xc0, 0xaf, 0xd3, 0x5, 0xe5, 0x84}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:23.967690 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.390729ms
DB: 2020/08/14 12:16:23.970974 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.754622ms
SaveRDFNode: 2020/08/14 12:16:23.971165 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:16:23.971182 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:16:23.971187 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:16:23.971193 limiter has ACK and will start goroutine...
saveNode: 2020/08/14 12:16:23.971198 read from saveCH channel 4 
grmgr: 2020/08/14 12:16:23.971203 Looping..... 0
grmgr: 2020/08/14 12:16:23.971236 Looping..... 1
grmgr: 2020/08/14 12:16:23.971242 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/14 12:16:23.971247 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/14 12:16:23.971256 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.971282 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.971310 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.971317 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.971323 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.971329 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.971335 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:16:23.971339 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:16:23.971345 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/14 12:16:23.971349 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:16:23.971358 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:23.971362 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:23.971368 UID received  : VcqkGWFCR9+mQConXnBKJQ==
DB: 2020/08/14 12:16:23.971663 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.937103ms
DB: 2020/08/14 12:16:23.975194 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.79843ms
DB: 2020/08/14 12:16:23.975492 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.795552ms
DB: 2020/08/14 12:16:23.978788 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.559905ms
DB: 2020/08/14 12:16:23.979079 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.557229ms
SaveRDFNode: 2020/08/14 12:16:23.979092 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000382ae0)}
rdfUIDdb: 2020/08/14 12:16:23.979099 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:23.979103 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:23.979108 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:23.979123 a: = db.Item{PKey:[]uint8{0x3c, 0xfa, 0x6b, 0x3b, 0x1d, 0x61, 0x41, 0x80, 0x95, 0x76, 0xec, 0x98, 0x6, 0xdd, 0x3b, 0xf0}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:23.982526 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.693642ms
DB: 2020/08/14 12:16:23.982816 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.660052ms
SaveRDFNode: 2020/08/14 12:16:23.982830 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000382ae0)}
rdfUIDdb: 2020/08/14 12:16:23.982836 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:23.982840 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:23.982846 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:23.982857 a: = db.Item{PKey:[]uint8{0x3c, 0xfa, 0x6b, 0x3b, 0x1d, 0x61, 0x41, 0x80, 0x95, 0x76, 0xec, 0x98, 0x6, 0xdd, 0x3b, 0xf0}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:23.986371 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.48478ms
SaveRDFNode: 2020/08/14 12:16:23.986583 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:16:23.986686 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/14 12:16:23.986696 Send ack to waiting saveNode...
saveNode: 2020/08/14 12:16:23.986702 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/14 12:16:23.986708 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/14 12:16:23.986766 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.986774 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.986782 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.986787 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.986793 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.986800 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/14 12:16:23.986806 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/14 12:16:23.986810 SaveRDFNode : 7 
SaveRDFNode: 2020/08/14 12:16:23.986816 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc00046ec60)}
SaveRDFNode: 2020/08/14 12:16:23.986820 Waiting for UID ......................
rdfUIDdb: 2020/08/14 12:16:23.986829 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:23.986833 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:23.986839 UID received  : qM87QtuJQwi2nuPDZvaCOw==
grmgr: 2020/08/14 12:16:23.987052 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/14 12:16:23.987261 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.681273ms
DB: 2020/08/14 12:16:23.990237 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.371056ms
DB: 2020/08/14 12:16:23.991529 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.229498ms
SaveRDFNode: 2020/08/14 12:16:23.991545 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
rdfUIDdb: 2020/08/14 12:16:23.991639 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:23.991645 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:23.991652 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:23.991672 a: = db.Item{PKey:[]uint8{0x55, 0xca, 0xa4, 0x19, 0x61, 0x42, 0x47, 0xdf, 0xa6, 0x40, 0x2a, 0x27, 0x5e, 0x70, 0x4a, 0x25}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:23.994467 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.193463ms
DB: 2020/08/14 12:16:23.997821 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.085687ms
SaveRDFNode: 2020/08/14 12:16:23.997839 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
rdfUIDdb: 2020/08/14 12:16:23.997859 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:23.997864 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:23.997870 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:23.997883 a: = db.Item{PKey:[]uint8{0x55, 0xca, 0xa4, 0x19, 0x61, 0x42, 0x47, 0xdf, 0xa6, 0x40, 0x2a, 0x27, 0x5e, 0x70, 0x4a, 0x25}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:23.998158 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.654644ms
DB: 2020/08/14 12:16:24.001843 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.652789ms
DB: 2020/08/14 12:16:24.002102 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.186403ms
SaveRDFNode: 2020/08/14 12:16:24.002113 Returned.+++++++++++ No error
grmgr: 2020/08/14 12:16:24.002122 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/14 12:16:24.005281 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.402579ms
SaveRDFNode: 2020/08/14 12:16:24.005507 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00046ec60)}
rdfUIDdb: 2020/08/14 12:16:24.005522 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:24.005526 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:24.005533 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:24.005545 a: = db.Item{PKey:[]uint8{0xa8, 0xcf, 0x3b, 0x42, 0xdb, 0x89, 0x43, 0x8, 0xb6, 0x9e, 0xe3, 0xc3, 0x66, 0xf6, 0x82, 0x3b}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:24.009009 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.431815ms
SaveRDFNode: 2020/08/14 12:16:24.009023 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00046ec60)}
rdfUIDdb: 2020/08/14 12:16:24.009029 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/14 12:16:24.009033 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/14 12:16:24.009039 Received UID: X18=
SaveRDFNode: 2020/08/14 12:16:24.009050 a: = db.Item{PKey:[]uint8{0xa8, 0xcf, 0x3b, 0x42, 0xdb, 0x89, 0x43, 0x8, 0xb6, 0x9e, 0xe3, 0xc3, 0x66, 0xf6, 0x82, 0x3b}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/14 12:16:24.012647 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.565871ms
SaveRDFNode: 2020/08/14 12:16:24.012659 Returned.+++++++++++ No error
rdfLoader: 2020/08/14 12:16:24.012666 saveNode finished waiting...exiting
grmgr: 2020/08/14 12:16:24.012674 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/14 12:16:24.012683 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/14 12:16:24.012688 Looping..... 0
grmgr: 2020/08/14 12:16:24.012705 Looping..... 1
grmgr: 2020/08/14 12:16:24.012770 Looping..... 2
grmgr: 2020/08/14 12:16:24.012948 Looping..... 3
grmgr: 2020/08/14 12:16:24.013138 Looping..... 4
grmgr: 2020/08/14 12:16:24.013305 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:24.013314 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:24.013321 goroutine about to start 1 cUID,pUID   YE9A+vjCRTOoUMCv0wXlhA==  PPprOx1hQYCVduyYBt078A==  
attachNode: 2020/08/14 12:16:24.013329 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/14 12:16:24.013334 Looping..... 0
grmgr: 2020/08/14 12:16:24.013356 Looping..... 1
grmgr: 2020/08/14 12:16:24.013362 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:16:24.013366 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:24.013371 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:24.013376 goroutine about to start 2 cUID,pUID   YE9A+vjCRTOoUMCv0wXlhA==  VcqkGWFCR9+mQConXnBKJQ==  
attachNode: 2020/08/14 12:16:24.013380 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/14 12:16:24.013385 Looping..... 0
grmgr: 2020/08/14 12:16:24.014241 Looping..... 1
grmgr: 2020/08/14 12:16:24.014254 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:16:24.014266 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:24.014273 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:24.014278 goroutine about to start 3 cUID,pUID   PPprOx1hQYCVduyYBt078A==  YE9A+vjCRTOoUMCv0wXlhA==  
attachNode: 2020/08/14 12:16:24.014284 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/14 12:16:24.014307 Looping..... 0
grmgr: 2020/08/14 12:16:24.014772 Looping..... 1
grmgr: 2020/08/14 12:16:24.014784 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:16:24.014789 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:24.014795 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:24.014801 goroutine about to start 4 cUID,pUID   PPprOx1hQYCVduyYBt078A==  VcqkGWFCR9+mQConXnBKJQ==  
attachNode: 2020/08/14 12:16:24.014813 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/14 12:16:24.014819 Looping..... 0
grmgr: 2020/08/14 12:16:24.015499 Looping..... 1
grmgr: 2020/08/14 12:16:24.015512 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:16:24.015518 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:24.015524 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:24.015530 goroutine about to start 5 cUID,pUID   VcqkGWFCR9+mQConXnBKJQ==  YE9A+vjCRTOoUMCv0wXlhA==  
attachNode: 2020/08/14 12:16:24.015536 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/14 12:16:24.015541 Looping..... 0
DB: 2020/08/14 12:16:24.016292 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.84959ms
grmgr: 2020/08/14 12:16:24.017241 Looping..... 1
grmgr: 2020/08/14 12:16:24.017268 CAUGHT - goroutine started by previous Ask for nodeAttach
grmgr: 2020/08/14 12:16:24.017273 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/14 12:16:24.017279 limiter has ACK and will start goroutine...
AttachNode: 2020/08/14 12:16:24.017285 goroutine about to start 6 cUID,pUID   VcqkGWFCR9+mQConXnBKJQ==  PPprOx1hQYCVduyYBt078A==  
rdfLoader: 2020/08/14 12:16:24.017291 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/14 12:16:24.017676 StartCh received for nodeAttach. rCnt = 6 
DB: 2020/08/14 12:16:24.018861 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.992283ms
DB: 2020/08/14 12:16:24.022239 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.318752ms
DB: 2020/08/14 12:16:24.025560 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 11.203779ms
DB: 2020/08/14 12:16:24.026429 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 10.072845ms
DB: 2020/08/14 12:16:24.028500 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 10.773601ms
DB: 2020/08/14 12:16:24.029381 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 10.489314ms
DB: 2020/08/14 12:16:24.042856 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 14.305044ms
DB: 2020/08/14 12:16:24.044226 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 17.395319ms
DB: 2020/08/14 12:16:24.046872 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 24.430611ms
DB: 2020/08/14 12:16:24.047509 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 29.075222ms
DB: 2020/08/14 12:16:24.048127 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 22.532645ms
DB: 2020/08/14 12:16:24.048716 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.341385ms
DB: 2020/08/14 12:16:24.049971 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.423155ms
DB: 2020/08/14 12:16:24.050751 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.003469ms
DB: 2020/08/14 12:16:24.051291 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.804023ms
DB: 2020/08/14 12:16:24.052652 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.367784ms
DB: 2020/08/14 12:16:24.053006 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 23.312639ms
DB: 2020/08/14 12:16:24.054088 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.746472ms
DB: 2020/08/14 12:16:24.055480 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.776132ms
DB: 2020/08/14 12:16:24.055998 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.188141ms
DB: 2020/08/14 12:16:24.057836 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.689514ms
DB: 2020/08/14 12:16:24.058989 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.438724ms
DB: 2020/08/14 12:16:24.059362 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.326547ms
DB: 2020/08/14 12:16:24.061998 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 14.788968ms
DB: 2020/08/14 12:16:24.062335 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 18.07291ms
DB: 2020/08/14 12:16:24.063659 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.039435ms
AttachNode: main 2020/08/14 12:16:24.063673 FetchForUpdate: for parent    YE9A+vjCRTOoUMCv0wXlhA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:24.063678 ** Cache FetchForUpdate Cache Key Value: [YE9A+vjCRTOoUMCv0wXlhA==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:16:24.063684  node: YE9A+vjCRTOoUMCv0wXlhA== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:16:24.063918 FetchForUpdate: for child    VcqkGWFCR9+mQConXnBKJQ==
FetchForUpdate: 2020/08/14 12:16:24.063970 ** Cache FetchForUpdate Cache Key Value: [VcqkGWFCR9+mQConXnBKJQ==]   sortk: A#
FetchNode: 2020/08/14 12:16:24.063989  node: VcqkGWFCR9+mQConXnBKJQ== subKey: A#
DB: 2020/08/14 12:16:24.064299 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.386343ms
AttachNode: main 2020/08/14 12:16:24.064312 FetchForUpdate: for parent    VcqkGWFCR9+mQConXnBKJQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:24.064317 ** Cache FetchForUpdate Cache Key Value: [VcqkGWFCR9+mQConXnBKJQ==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:16:24.064326 FetchForUpdate: for child    YE9A+vjCRTOoUMCv0wXlhA==
FetchForUpdate: 2020/08/14 12:16:24.064331 ** Cache FetchForUpdate Cache Key Value: [YE9A+vjCRTOoUMCv0wXlhA==]   sortk: A#
DB: 2020/08/14 12:16:24.064391 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.343617ms
AttachNode: main 2020/08/14 12:16:24.064400 FetchForUpdate: for parent    PPprOx1hQYCVduyYBt078A==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:24.064405 ** Cache FetchForUpdate Cache Key Value: [PPprOx1hQYCVduyYBt078A==]   sortk: A#G#:S
FetchNode: 2020/08/14 12:16:24.064410  node: PPprOx1hQYCVduyYBt078A== subKey: A#G#:S
AttachNode: gr1 2020/08/14 12:16:24.064636 FetchForUpdate: for child    VcqkGWFCR9+mQConXnBKJQ==
FetchForUpdate: 2020/08/14 12:16:24.064646 ** Cache FetchForUpdate Cache Key Value: [VcqkGWFCR9+mQConXnBKJQ==]   sortk: A#
DB: 2020/08/14 12:16:24.064719 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.306017ms
DB: 2020/08/14 12:16:24.065170 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.126731ms
DB: 2020/08/14 12:16:24.066252 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.847489ms
DB: 2020/08/14 12:16:24.066623 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.906735ms
FetchForUpdate: 2020/08/14 12:16:24.066667 len(nb): 1
fetchItems: 2020/08/14 12:16:24.066675 +++  Cache FetchItems for sortk A#G#:S UID: [YE9A+vjCRTOoUMCv0wXlhA==] 
FetchNode: 2020/08/14 12:16:24.066679  node: YE9A+vjCRTOoUMCv0wXlhA== subKey: A#G#:S
DB: 2020/08/14 12:16:24.067378 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.9358ms
FetchForUpdate: 2020/08/14 12:16:24.067424 len(nb): 1
fetchItems: 2020/08/14 12:16:24.067431 +++  Cache FetchItems for sortk A#G#:S UID: [PPprOx1hQYCVduyYBt078A==] 
FetchNode: 2020/08/14 12:16:24.067435  node: PPprOx1hQYCVduyYBt078A== subKey: A#G#:S
DB: 2020/08/14 12:16:24.069370 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.151435ms
DB: 2020/08/14 12:16:24.070363 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.900458ms
DB: 2020/08/14 12:16:24.071323 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.608493ms
DB: 2020/08/14 12:16:24.072026 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.332753ms
AttachNode: main 2020/08/14 12:16:24.072039 FetchForUpdate: for parent    YE9A+vjCRTOoUMCv0wXlhA==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:24.072082 ** Cache FetchForUpdate Cache Key Value: [YE9A+vjCRTOoUMCv0wXlhA==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:16:24.072099 FetchForUpdate: for child    PPprOx1hQYCVduyYBt078A==
FetchForUpdate: 2020/08/14 12:16:24.072104 ** Cache FetchForUpdate Cache Key Value: [PPprOx1hQYCVduyYBt078A==]   sortk: A#
DB: 2020/08/14 12:16:24.073731 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.403839ms
AttachNode: main 2020/08/14 12:16:24.073745 FetchForUpdate: for parent    PPprOx1hQYCVduyYBt078A==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:24.073750 ** Cache FetchForUpdate Cache Key Value: [PPprOx1hQYCVduyYBt078A==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:16:24.073760 FetchForUpdate: for child    YE9A+vjCRTOoUMCv0wXlhA==
FetchForUpdate: 2020/08/14 12:16:24.073765 ** Cache FetchForUpdate Cache Key Value: [YE9A+vjCRTOoUMCv0wXlhA==]   sortk: A#
DB: 2020/08/14 12:16:24.074519 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.523177ms
DB: 2020/08/14 12:16:24.075793 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.614564ms
DB: 2020/08/14 12:16:24.078134 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.096938ms
AttachNode: main 2020/08/14 12:16:24.078153 FetchForUpdate: for parent    VcqkGWFCR9+mQConXnBKJQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/14 12:16:24.078158 ** Cache FetchForUpdate Cache Key Value: [VcqkGWFCR9+mQConXnBKJQ==]   sortk: A#G#:S
AttachNode: gr1 2020/08/14 12:16:24.078168 FetchForUpdate: for child    PPprOx1hQYCVduyYBt078A==
FetchForUpdate: 2020/08/14 12:16:24.078173 ** Cache FetchForUpdate Cache Key Value: [PPprOx1hQYCVduyYBt078A==]   sortk: A#
DB: 2020/08/14 12:16:24.081378 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 17.341531ms
FetchForUpdate: 2020/08/14 12:16:24.081506 len(nb): 7
fetchItems: 2020/08/14 12:16:24.081516 +++  Cache FetchItems for sortk A# UID: [VcqkGWFCR9+mQConXnBKJQ==] 
FetchNode: 2020/08/14 12:16:24.081521  node: VcqkGWFCR9+mQConXnBKJQ== subKey: A#
DB: 2020/08/14 12:16:24.084910 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.359372ms
DB: 2020/08/14 12:16:24.096827 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.670058ms
DB: 2020/08/14 12:16:24.102085 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.051418ms
DB: 2020/08/14 12:16:24.107108 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.60817ms
DB: 2020/08/14 12:16:24.113712 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.250189ms
DB: 2020/08/14 12:16:24.118249 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.140804ms
DB: 2020/08/14 12:16:24.123323 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.725636ms
DB: 2020/08/14 12:16:24.128989 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.31211ms
DB: 2020/08/14 12:16:24.132839 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.514572ms
DB: 2020/08/14 12:16:24.136997 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.826149ms
DB: 2020/08/14 12:16:24.140872 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.665622ms
Cache: 2020/08/14 12:16:24.140887 In SetUpredAvailable: pUid, tUID:  YE9A+vjCRTOoUMCv0wXlhA== YE9A+vjCRTOoUMCv0wXlhA== A#G#:S
Cache: 2020/08/14 12:16:24.140892 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/14 12:16:24.144712 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.782887ms
Unlock: 2020/08/14 12:16:24.144728 ******* IN UNLOCK NC ********************
Unlock: 2020/08/14 12:16:24.144734 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
fetchItems: 2020/08/14 12:16:24.144986 +++  Cache FetchItems for sortk A# UID: [YE9A+vjCRTOoUMCv0wXlhA==] 
FetchNode: 2020/08/14 12:16:24.145027  node: YE9A+vjCRTOoUMCv0wXlhA== subKey: A#
fetchItems: 2020/08/14 12:16:24.145231 +++  Cache FetchItems for sortk A#G#:S UID: [VcqkGWFCR9+mQConXnBKJQ==] 
FetchNode: 2020/08/14 12:16:24.145255  node: VcqkGWFCR9+mQConXnBKJQ== subKey: A#G#:S
DB: 2020/08/14 12:16:24.147912 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.826466ms
fetchItems: 2020/08/14 12:16:24.148115 +++  Cache FetchItems for sortk A# UID: [YE9A+vjCRTOoUMCv0wXlhA==] 
FetchNode: 2020/08/14 12:16:24.148126  node: YE9A+vjCRTOoUMCv0wXlhA== subKey: A#
DB: 2020/08/14 12:16:24.148925 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.109603ms
grmgr: 2020/08/14 12:16:24.148943 EndCh received for nodeAttach. rCnt = 5 
DB: 2020/08/14 12:16:24.151595 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.437985ms
DB: 2020/08/14 12:16:24.153229 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 7.910617ms
DB: 2020/08/14 12:16:24.177630 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 18.091213ms
DB:2020/08/15 02:24:41 log.go:18: ===============================================================================
errlog: 2020/08/15 02:24:41.843376 Powering on...
rdfLoader: 2020/08/15 02:24:41.844021 saveNode started......
rdfLoader: 2020/08/15 02:24:41.844032 define saveNode limiter......
rdfuuid: 2020/08/15 02:24:41.844039 Powering on...
grmgr: 2020/08/15 02:24:41.844058 Powering on...
rdfLoader: 2020/08/15 02:24:41.844068  principle goroutines started 
RDFreader: 2020/08/15 02:24:41.844091 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 02:24:41.844106 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 02:24:41.844112 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 02:24:41.844118 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 02:24:41.844124 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 02:24:41.844129 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 02:24:41.844134 spo read:      
RDFreader: 2020/08/15 02:24:41.844139 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 02:24:41.844156 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 02:24:41.844161 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 02:24:41.844166 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 02:24:41.844171 spo read:      
RDFreader: 2020/08/15 02:24:41.844176 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 02:24:41.844189 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 02:24:41.844195 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 02:24:41.844200 spo read:  b  Age  "58"
RDFreader: 2020/08/15 02:24:41.844205 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 02:24:41.844209 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 02:24:41.844215 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 02:24:41.844220 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 02:24:41.844224 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 02:24:41.844228 spo read:      
RDFreader: 2020/08/15 02:24:41.844233 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 02:24:41.844237 Send node batch on channel verifyCh
RDFreader: 2020/08/15 02:24:41.844242 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 02:24:41.844246 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 02:24:41.844251 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 02:24:41.844259 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 02:24:41.844264 spo read:  c  Age  "67"
RDFreader: 2020/08/15 02:24:41.844269 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 02:24:41.844273 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 02:24:41.844278 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 02:24:41.844286 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 02:24:41.844293 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 02:24:41.844298 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 02:24:41.844302 spo read:      
RDFreader: 2020/08/15 02:24:41.844307 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 02:24:41.844311 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 02:24:41.844316 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 02:24:41.844321 spo read:  d  Age  "36"
RDFreader: 2020/08/15 02:24:41.844326 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 02:24:41.844332 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 02:24:41.844336 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 02:24:41.844340 close verify channel
rdfLoader: 2020/08/15 02:24:41.844344 wait for goroutines to end
rdfLoader: 2020/08/15 02:24:41.844348 verify started....
rdfLoader: 2020/08/15 02:24:41.844352 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 02:24:41.844356 .  getType..
rdfLoader: 2020/08/15 02:24:41.844360 node.TyName : [Person]
DB: 2020/08/15 02:24:41.937839 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 93.416336ms
grmgr: 2020/08/15 02:24:41.937972 Looping..... 0
grmgr: 2020/08/15 02:24:41.938232 Looping..... 1
grmgr: 2020/08/15 02:24:41.938258 Looping..... 2
grmgr: 2020/08/15 02:24:41.938407 Looping..... 3
grmgr: 2020/08/15 02:24:41.938586 Looping..... 4
grmgr: 2020/08/15 02:24:41.938765 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 02:24:41.938776 .  getType..
rdfLoader: 2020/08/15 02:24:41.938780 node.TyName : [Person]
grmgr: 2020/08/15 02:24:41.938786 Looping..... 0
unmarshalRDF2020/08/15 02:24:41.938801 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:24:41.938811 Looping..... 1
grmgr: 2020/08/15 02:24:41.938816 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 02:24:41.938820 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 02:24:41.938828 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 02:24:41.938832 .  getType..
rdfLoader: 2020/08/15 02:24:41.938836 node.TyName : [Person]
grmgr: 2020/08/15 02:24:41.938841 Looping..... 0
rdfLoader: 2020/08/15 02:24:41.938850 Add to SS . [Honda]
rdfLoader: 2020/08/15 02:24:41.938855 Add to SS . [Alfa]
unmarshalRDF2020/08/15 02:24:41.938904 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:24:41.938930 Exit  unmarshalRDF. 
saveNode: 2020/08/15 02:24:41.938936 read from saveCH channel 1 
unmarshalRDF2020/08/15 02:24:41.938945 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:24:41.938970 Looping..... 1
grmgr: 2020/08/15 02:24:41.938976 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 02:24:41.938980 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 02:24:41.938985 Looping..... 0
rdfLoader: 2020/08/15 02:24:41.938993 Add to SS . [Honda]
rdfLoader: 2020/08/15 02:24:41.938997 Add to SS . [VW Golf]
unmarshalRDF2020/08/15 02:24:41.939037 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:24:41.939041 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 02:24:41.939047 .  getType..
rdfLoader: 2020/08/15 02:24:41.939051 node.TyName : [Person]
unmarshalRDF2020/08/15 02:24:41.939059 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:24:41.939069 Looping..... 1
rdfLoader: 2020/08/15 02:24:41.939077 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 02:24:41.939082 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 02:24:41.939086 Add to SS . [Honda]
unmarshalRDF2020/08/15 02:24:41.939130 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:24:41.939136 Exit  unmarshalRDF. 
grmgr: 2020/08/15 02:24:41.939159 Looping..... 2
grmgr: 2020/08/15 02:24:41.939346 Looping..... 3
grmgr: 2020/08/15 02:24:41.939524 Looping..... 4
grmgr: 2020/08/15 02:24:41.939711 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 02:24:41.939721 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/15 02:24:41.939726 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 02:24:41.939731 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/15 02:24:41.939735 Looping..... 0
saveNode: 2020/08/15 02:24:41.939740 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 02:24:41.939747 read from saveCH channel 2 
grmgr: 2020/08/15 02:24:41.939879 Looping..... 1
SaveRDFNode: xxx 2020/08/15 02:24:41.939893 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.939901 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.939906 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.939912 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.939918 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.939928 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.939934 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:24:41.939938 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:24:41.939946 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000372420)}
SaveRDFNode: 2020/08/15 02:24:41.939950 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:24:41.939960 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:41.939964 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:41.939970 UID received  : o3HvyZJ7TVK3F3EscbgY6w==
grmgr: 2020/08/15 02:24:41.940221 Looping..... 2
grmgr: 2020/08/15 02:24:41.940403 Looping..... 3
grmgr: 2020/08/15 02:24:41.940578 Looping..... 4
grmgr: 2020/08/15 02:24:41.940754 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 02:24:41.940763 Looping..... 0
unmarshalRDF2020/08/15 02:24:41.940779 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:24:41.940789 Looping..... 1
rdfLoader: 2020/08/15 02:24:41.940798 Add to SS . [Bentley]
unmarshalRDF2020/08/15 02:24:41.940832 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:24:41.940837 Exit  unmarshalRDF. 
grmgr: 2020/08/15 02:24:41.940847 Looping..... 2
grmgr: 2020/08/15 02:24:41.940942 Looping..... 3
grmgr: 2020/08/15 02:24:41.941105 Looping..... 4
grmgr: 2020/08/15 02:24:41.941280 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 02:24:41.941289 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/15 02:24:41.941296 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 02:24:41.941301 read from saveCH channel 3 
grmgr: 2020/08/15 02:24:41.941306 Looping..... 0
grmgr: 2020/08/15 02:24:41.941329 Looping..... 1
grmgr: 2020/08/15 02:24:41.941334 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 02:24:41.941339 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 02:24:41.941347 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.941353 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.941360 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.941366 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.941371 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.941377 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.941383 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:24:41.941386 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:24:41.941392 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000372960)}
SaveRDFNode: 2020/08/15 02:24:41.941396 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:24:41.941403 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:41.941407 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:41.941418 UID received  : phorpudTSGa0Ge/WLKdm6g==
DB: 2020/08/15 02:24:41.950565 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.563618ms
DB: 2020/08/15 02:24:41.955452 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 13.993054ms
DB: 2020/08/15 02:24:41.960344 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.725674ms
DB: 2020/08/15 02:24:41.965807 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.429152ms
DB: 2020/08/15 02:24:41.970329 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.490848ms
DB: 2020/08/15 02:24:41.972928 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 22.327657ms
DB: 2020/08/15 02:24:41.975130 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.769973ms
SaveRDFNode: 2020/08/15 02:24:41.975144 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372960)}
rdfUIDdb: 2020/08/15 02:24:41.975152 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:41.975156 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:41.975162 Received UID: X18=
SaveRDFNode: 2020/08/15 02:24:41.975180 a: = db.Item{PKey:[]uint8{0xa6, 0x1a, 0x2b, 0xa6, 0xe7, 0x53, 0x48, 0x66, 0xb4, 0x19, 0xef, 0xd6, 0x2c, 0xa7, 0x66, 0xea}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:24:41.977618 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.523648ms
DB: 2020/08/15 02:24:41.979723 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.51007ms
SaveRDFNode: 2020/08/15 02:24:41.979736 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372960)}
rdfUIDdb: 2020/08/15 02:24:41.979742 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:41.979746 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:41.979751 Received UID: X18=
SaveRDFNode: 2020/08/15 02:24:41.979762 a: = db.Item{PKey:[]uint8{0xa6, 0x1a, 0x2b, 0xa6, 0xe7, 0x53, 0x48, 0x66, 0xb4, 0x19, 0xef, 0xd6, 0x2c, 0xa7, 0x66, 0xea}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:24:41.982356 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.704611ms
DB: 2020/08/15 02:24:41.984574 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.783405ms
SaveRDFNode: 2020/08/15 02:24:41.984585 Returned.+++++++++++ No error
grmgr: 2020/08/15 02:24:41.984596 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 02:24:41.984601 Send ack to waiting saveNode...
saveNode: 2020/08/15 02:24:41.984607 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 02:24:41.984612 read from saveCH channel 4 
grmgr: 2020/08/15 02:24:41.984617 Looping..... 0
grmgr: 2020/08/15 02:24:41.984651 Looping..... 1
grmgr: 2020/08/15 02:24:41.984667 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 02:24:41.984673 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 02:24:41.984683 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.984691 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.984697 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.984703 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.984709 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.984724 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.984731 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:24:41.984735 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:24:41.984743 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc00020a000)}
SaveRDFNode: 2020/08/15 02:24:41.984747 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:24:41.984757 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:41.984761 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:41.984766 UID received  : tVw5zLKASsCN6xQFBe+5rQ==
DB: 2020/08/15 02:24:41.986906 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.518322ms
SaveRDFNode: 2020/08/15 02:24:41.986918 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372420)}
rdfUIDdb: 2020/08/15 02:24:41.986923 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:41.986928 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:41.986933 Received UID: X18=
SaveRDFNode: 2020/08/15 02:24:41.986948 a: = db.Item{PKey:[]uint8{0xa3, 0x71, 0xef, 0xc9, 0x92, 0x7b, 0x4d, 0x52, 0xb7, 0x17, 0x71, 0x2c, 0x71, 0xb8, 0x18, 0xeb}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:24:41.989857 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.065277ms
DB: 2020/08/15 02:24:41.992102 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.123291ms
SaveRDFNode: 2020/08/15 02:24:41.992120 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372420)}
rdfUIDdb: 2020/08/15 02:24:41.992126 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:41.992130 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:41.992135 Received UID: X18=
SaveRDFNode: 2020/08/15 02:24:41.992146 a: = db.Item{PKey:[]uint8{0xa3, 0x71, 0xef, 0xc9, 0x92, 0x7b, 0x4d, 0x52, 0xb7, 0x17, 0x71, 0x2c, 0x71, 0xb8, 0x18, 0xeb}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:24:41.994745 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.844998ms
DB: 2020/08/15 02:24:41.997354 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.178491ms
SaveRDFNode: 2020/08/15 02:24:41.997364 Returned.+++++++++++ No error
grmgr: 2020/08/15 02:24:41.997373 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 02:24:41.997378 Send ack to waiting saveNode...
saveNode: 2020/08/15 02:24:41.997383 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/15 02:24:41.997389 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/15 02:24:41.997415 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.997422 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.997429 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.997435 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.997463 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.997471 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:24:41.997477 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:24:41.997490 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:24:41.997496 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc00020ab40)}
SaveRDFNode: 2020/08/15 02:24:41.997500 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:24:41.997510 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:41.997514 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:41.997519 UID received  : oAawzwUrSJyBbZcaWzFQmw==
grmgr: 2020/08/15 02:24:41.997695 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 02:24:41.999263 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.487302ms
DB: 2020/08/15 02:24:42.003968 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.67252ms
DB: 2020/08/15 02:24:42.005590 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.042922ms
DB: 2020/08/15 02:24:42.009532 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.526252ms
SaveRDFNode: 2020/08/15 02:24:42.009547 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00020a000)}
rdfUIDdb: 2020/08/15 02:24:42.009554 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:42.009558 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:42.009564 Received UID: X18=
SaveRDFNode: 2020/08/15 02:24:42.009576 a: = db.Item{PKey:[]uint8{0xb5, 0x5c, 0x39, 0xcc, 0xb2, 0x80, 0x4a, 0xc0, 0x8d, 0xeb, 0x14, 0x5, 0x5, 0xef, 0xb9, 0xad}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:24:42.010534 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.767217ms
DB: 2020/08/15 02:24:42.014366 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.755061ms
SaveRDFNode: 2020/08/15 02:24:42.014379 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00020a000)}
rdfUIDdb: 2020/08/15 02:24:42.014385 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:42.014389 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:42.014395 Received UID: X18=
SaveRDFNode: 2020/08/15 02:24:42.014405 a: = db.Item{PKey:[]uint8{0xb5, 0x5c, 0x39, 0xcc, 0xb2, 0x80, 0x4a, 0xc0, 0x8d, 0xeb, 0x14, 0x5, 0x5, 0xef, 0xb9, 0xad}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:24:42.015130 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.564469ms
DB: 2020/08/15 02:24:42.019814 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.378717ms
SaveRDFNode: 2020/08/15 02:24:42.019825 Returned.+++++++++++ No error
grmgr: 2020/08/15 02:24:42.019834 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 02:24:42.019956 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.792748ms
DB: 2020/08/15 02:24:42.024879 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.88987ms
SaveRDFNode: 2020/08/15 02:24:42.025406 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00020ab40)}
rdfUIDdb: 2020/08/15 02:24:42.025419 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:42.025423 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:42.025429 Received UID: X18=
SaveRDFNode: 2020/08/15 02:24:42.025445 a: = db.Item{PKey:[]uint8{0xa0, 0x6, 0xb0, 0xcf, 0x5, 0x2b, 0x48, 0x9c, 0x81, 0x6d, 0x97, 0x1a, 0x5b, 0x31, 0x50, 0x9b}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:24:42.030443 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.963443ms
SaveRDFNode: 2020/08/15 02:24:42.030457 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00020ab40)}
rdfUIDdb: 2020/08/15 02:24:42.030472 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:24:42.030476 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:24:42.030481 Received UID: X18=
SaveRDFNode: 2020/08/15 02:24:42.030495 a: = db.Item{PKey:[]uint8{0xa0, 0x6, 0xb0, 0xcf, 0x5, 0x2b, 0x48, 0x9c, 0x81, 0x6d, 0x97, 0x1a, 0x5b, 0x31, 0x50, 0x9b}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:24:42.035166 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.641378ms
SaveRDFNode: 2020/08/15 02:24:42.035176 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 02:24:42.035184 saveNode finished waiting...exiting
grmgr: 2020/08/15 02:24:42.035191 EndCh received for saveNode. rCnt = 0 
DB:2020/08/15 02:27:25 log.go:18: ===============================================================================
errlog: 2020/08/15 02:27:25.758344 Powering on...
rdfLoader: 2020/08/15 02:27:25.758384 saveNode started......
rdfLoader: 2020/08/15 02:27:25.758389 define saveNode limiter......
rdfuuid: 2020/08/15 02:27:25.758396 Powering on...
grmgr: 2020/08/15 02:27:25.758413 Powering on...
rdfLoader: 2020/08/15 02:27:25.758423  principle goroutines started 
RDFreader: 2020/08/15 02:27:25.758444 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 02:27:25.758463 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 02:27:25.758469 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 02:27:25.758475 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 02:27:25.758480 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 02:27:25.758485 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 02:27:25.758490 spo read:      
RDFreader: 2020/08/15 02:27:25.758495 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 02:27:25.758500 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 02:27:25.758505 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 02:27:25.758510 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 02:27:25.758514 spo read:      
RDFreader: 2020/08/15 02:27:25.758519 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 02:27:25.758524 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 02:27:25.758529 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 02:27:25.758535 spo read:  b  Age  "58"
RDFreader: 2020/08/15 02:27:25.758540 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 02:27:25.758545 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 02:27:25.758550 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 02:27:25.758555 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 02:27:25.758560 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 02:27:25.758563 spo read:      
RDFreader: 2020/08/15 02:27:25.758568 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 02:27:25.758572 Send node batch on channel verifyCh
RDFreader: 2020/08/15 02:27:25.758577 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 02:27:25.758581 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 02:27:25.758586 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 02:27:25.758594 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 02:27:25.758600 spo read:  c  Age  "67"
RDFreader: 2020/08/15 02:27:25.758605 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 02:27:25.758609 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 02:27:25.758614 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 02:27:25.758619 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 02:27:25.758626 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 02:27:25.758631 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 02:27:25.758635 spo read:      
RDFreader: 2020/08/15 02:27:25.758640 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 02:27:25.758645 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 02:27:25.758650 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 02:27:25.758655 spo read:  d  Age  "36"
RDFreader: 2020/08/15 02:27:25.758660 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 02:27:25.758667 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 02:27:25.758676 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 02:27:25.758680 close verify channel
rdfLoader: 2020/08/15 02:27:25.758684 wait for goroutines to end
rdfLoader: 2020/08/15 02:27:25.758688 verify started....
rdfLoader: 2020/08/15 02:27:25.758692 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 02:27:25.758696 .  getType..
rdfLoader: 2020/08/15 02:27:25.758700 node.TyName : [Person]
DB: 2020/08/15 02:27:25.828083 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 69.30165ms
grmgr: 2020/08/15 02:27:25.828218 Looping..... 0
grmgr: 2020/08/15 02:27:25.828437 Looping..... 1
grmgr: 2020/08/15 02:27:25.828454 Looping..... 2
grmgr: 2020/08/15 02:27:25.828626 Looping..... 3
grmgr: 2020/08/15 02:27:25.828801 Looping..... 4
grmgr: 2020/08/15 02:27:25.828974 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 02:27:25.828984 .  getType..
rdfLoader: 2020/08/15 02:27:25.828988 node.TyName : [Person]
grmgr: 2020/08/15 02:27:25.828993 Looping..... 0
unmarshalRDF2020/08/15 02:27:25.829004 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:27:25.829025 Looping..... 1
grmgr: 2020/08/15 02:27:25.829030 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 02:27:25.829034 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 02:27:25.829042 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 02:27:25.829045 .  getType..
rdfLoader: 2020/08/15 02:27:25.829049 node.TyName : [Person]
grmgr: 2020/08/15 02:27:25.829054 Looping..... 0
rdfLoader: 2020/08/15 02:27:25.829063 Add to SS . [Honda]
rdfLoader: 2020/08/15 02:27:25.829068 Add to SS . [Alfa]
unmarshalRDF2020/08/15 02:27:25.829138 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:27:25.829145 Exit  unmarshalRDF. 
saveNode: 2020/08/15 02:27:25.829150 read from saveCH channel 1 
unmarshalRDF2020/08/15 02:27:25.829159 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:27:25.829184 Looping..... 1
grmgr: 2020/08/15 02:27:25.829189 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 02:27:25.829193 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 02:27:25.829199 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 02:27:25.829203 Looping..... 0
rdfLoader: 2020/08/15 02:27:25.829212 Add to SS . [Honda]
rdfLoader: 2020/08/15 02:27:25.829216 Add to SS . [VW Golf]
unmarshalRDF2020/08/15 02:27:25.829252 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:27:25.829257 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 02:27:25.829262 .  getType..
rdfLoader: 2020/08/15 02:27:25.829266 node.TyName : [Person]
unmarshalRDF2020/08/15 02:27:25.829275 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:27:25.829285 Looping..... 1
rdfLoader: 2020/08/15 02:27:25.829293 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 02:27:25.829297 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 02:27:25.829312 Add to SS . [Honda]
unmarshalRDF2020/08/15 02:27:25.829356 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:27:25.829361 Exit  unmarshalRDF. 
grmgr: 2020/08/15 02:27:25.829385 Looping..... 2
grmgr: 2020/08/15 02:27:25.829564 Looping..... 3
grmgr: 2020/08/15 02:27:25.829739 Looping..... 4
grmgr: 2020/08/15 02:27:25.829924 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 02:27:25.829932 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 02:27:25.829937 Looping..... 0
saveNode: 2020/08/15 02:27:25.829943 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 02:27:25.829948 read from saveCH channel 2 
grmgr: 2020/08/15 02:27:25.829979 Looping..... 1
SaveRDFNode: xxx 2020/08/15 02:27:25.829989 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.829996 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.830002 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.830007 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.830013 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.830018 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.830024 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:27:25.830027 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:27:25.830035 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0000176e0)}
SaveRDFNode: 2020/08/15 02:27:25.830039 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:27:25.830048 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.830053 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.830058 UID received  : W4mHutKBTJCaEL8NIuVjtw==
grmgr: 2020/08/15 02:27:25.830311 Looping..... 2
grmgr: 2020/08/15 02:27:25.830507 Looping..... 3
grmgr: 2020/08/15 02:27:25.830685 Looping..... 4
grmgr: 2020/08/15 02:27:25.830868 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 02:27:25.830876 Looping..... 0
unmarshalRDF2020/08/15 02:27:25.830890 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:27:25.830899 Looping..... 1
rdfLoader: 2020/08/15 02:27:25.830908 Add to SS . [Bentley]
unmarshalRDF2020/08/15 02:27:25.830944 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:27:25.830949 Exit  unmarshalRDF. 
grmgr: 2020/08/15 02:27:25.830958 Looping..... 2
grmgr: 2020/08/15 02:27:25.831060 Looping..... 3
grmgr: 2020/08/15 02:27:25.831237 Looping..... 4
grmgr: 2020/08/15 02:27:25.831425 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 02:27:25.831433 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 02:27:25.831438 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/15 02:27:25.831444 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 02:27:25.831449 read from saveCH channel 3 
grmgr: 2020/08/15 02:27:25.831454 Looping..... 0
grmgr: 2020/08/15 02:27:25.831490 Looping..... 1
grmgr: 2020/08/15 02:27:25.831496 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 02:27:25.831500 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 02:27:25.831508 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.831514 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.831521 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.831527 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.831533 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.831538 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.831544 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:27:25.831548 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:27:25.831554 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017e00)}
SaveRDFNode: 2020/08/15 02:27:25.831557 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:27:25.831565 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.831579 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.831585 UID received  : 9XW9wkffR7y+RZr8rALMuQ==
DB: 2020/08/15 02:27:25.837052 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.952771ms
DB: 2020/08/15 02:27:25.840208 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.595746ms
DB: 2020/08/15 02:27:25.843243 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.000962ms
DB: 2020/08/15 02:27:25.846349 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.068917ms
DB: 2020/08/15 02:27:25.849697 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.179518ms
DB: 2020/08/15 02:27:25.853058 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.270689ms
SaveRDFNode: 2020/08/15 02:27:25.853071 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017e00)}
rdfUIDdb: 2020/08/15 02:27:25.853077 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.853081 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.853087 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:25.853099 a: = db.Item{PKey:[]uint8{0xf5, 0x75, 0xbd, 0xc2, 0x47, 0xdf, 0x47, 0xbc, 0xbe, 0x45, 0x9a, 0xfc, 0xac, 0x2, 0xcc, 0xb9}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:25.856290 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.160174ms
SaveRDFNode: 2020/08/15 02:27:25.856303 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017e00)}
rdfUIDdb: 2020/08/15 02:27:25.856309 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.856313 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.856318 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:25.856335 a: = db.Item{PKey:[]uint8{0xf5, 0x75, 0xbd, 0xc2, 0x47, 0xdf, 0x47, 0xbc, 0xbe, 0x45, 0x9a, 0xfc, 0xac, 0x2, 0xcc, 0xb9}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:25.856626 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 19.53886ms
DB: 2020/08/15 02:27:25.859808 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.413769ms
SaveRDFNode: 2020/08/15 02:27:25.859848 Returned.+++++++++++ No error
grmgr: 2020/08/15 02:27:25.859865 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 02:27:25.859870 Send ack to waiting saveNode...
saveNode: 2020/08/15 02:27:25.859875 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 02:27:25.859881 read from saveCH channel 4 
grmgr: 2020/08/15 02:27:25.859898 Looping..... 0
grmgr: 2020/08/15 02:27:25.859928 Looping..... 1
grmgr: 2020/08/15 02:27:25.859934 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 02:27:25.859938 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 02:27:25.859946 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.859952 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.859959 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.859965 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.859970 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.859975 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.859992 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:27:25.859997 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:27:25.860012 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0004ceba0)}
SaveRDFNode: 2020/08/15 02:27:25.860017 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:27:25.860025 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.860028 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.860034 UID received  : yi4yAdNwRW6dL/1zZtbM+Q==
DB: 2020/08/15 02:27:25.860266 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.592219ms
DB: 2020/08/15 02:27:25.863165 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.100934ms
DB: 2020/08/15 02:27:25.863944 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.637291ms
DB: 2020/08/15 02:27:25.866185 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 2.986017ms
DB: 2020/08/15 02:27:25.867640 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.66435ms
SaveRDFNode: 2020/08/15 02:27:25.867683 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000176e0)}
rdfUIDdb: 2020/08/15 02:27:25.867692 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.867696 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.867702 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:25.867715 a: = db.Item{PKey:[]uint8{0x5b, 0x89, 0x87, 0xba, 0xd2, 0x81, 0x4c, 0x90, 0x9a, 0x10, 0xbf, 0xd, 0x22, 0xe5, 0x63, 0xb7}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:25.870714 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.497853ms
DB: 2020/08/15 02:27:25.871483 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.739521ms
SaveRDFNode: 2020/08/15 02:27:25.871494 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000176e0)}
rdfUIDdb: 2020/08/15 02:27:25.871500 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.871504 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.871510 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:25.871520 a: = db.Item{PKey:[]uint8{0x5b, 0x89, 0x87, 0xba, 0xd2, 0x81, 0x4c, 0x90, 0x9a, 0x10, 0xbf, 0xd, 0x22, 0xe5, 0x63, 0xb7}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:25.873858 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.105301ms
DB: 2020/08/15 02:27:25.875073 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.525857ms
SaveRDFNode: 2020/08/15 02:27:25.875083 Returned.+++++++++++ No error
grmgr: 2020/08/15 02:27:25.875089 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 02:27:25.875094 Send ack to waiting saveNode...
saveNode: 2020/08/15 02:27:25.875098 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/15 02:27:25.875103 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/15 02:27:25.875124 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.875130 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.875155 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.875161 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.875168 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.875174 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:25.875179 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:27:25.875183 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:27:25.875188 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0004cfe60)}
SaveRDFNode: 2020/08/15 02:27:25.875192 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:27:25.875200 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.875204 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.875209 UID received  : /VEMXTUlTliYkF5+9Yc+LQ==
grmgr: 2020/08/15 02:27:25.875401 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 02:27:25.877050 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.16341ms
SaveRDFNode: 2020/08/15 02:27:25.877061 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0004ceba0)}
rdfUIDdb: 2020/08/15 02:27:25.877066 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.877070 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.877074 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:25.877083 a: = db.Item{PKey:[]uint8{0xca, 0x2e, 0x32, 0x1, 0xd3, 0x70, 0x45, 0x6e, 0x9d, 0x2f, 0xfd, 0x73, 0x66, 0xd6, 0xcc, 0xf9}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:25.878602 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.346754ms
DB: 2020/08/15 02:27:25.880553 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.441383ms
SaveRDFNode: 2020/08/15 02:27:25.880568 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0004ceba0)}
rdfUIDdb: 2020/08/15 02:27:25.880607 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.880612 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.880620 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:25.880638 a: = db.Item{PKey:[]uint8{0xca, 0x2e, 0x32, 0x1, 0xd3, 0x70, 0x45, 0x6e, 0x9d, 0x2f, 0xfd, 0x73, 0x66, 0xd6, 0xcc, 0xf9}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:25.882406 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.650123ms
DB: 2020/08/15 02:27:25.883932 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.249054ms
SaveRDFNode: 2020/08/15 02:27:25.883943 Returned.+++++++++++ No error
grmgr: 2020/08/15 02:27:25.883950 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 02:27:25.885544 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.103219ms
DB: 2020/08/15 02:27:25.888451 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 2.874349ms
DB: 2020/08/15 02:27:25.891363 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.876228ms
SaveRDFNode: 2020/08/15 02:27:25.891376 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0004cfe60)}
rdfUIDdb: 2020/08/15 02:27:25.891382 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.891386 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.891412 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:25.891424 a: = db.Item{PKey:[]uint8{0xfd, 0x51, 0xc, 0x5d, 0x35, 0x25, 0x4e, 0x58, 0x98, 0x90, 0x5e, 0x7e, 0xf5, 0x87, 0x3e, 0x2d}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:25.894533 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.078092ms
SaveRDFNode: 2020/08/15 02:27:25.894686 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0004cfe60)}
rdfUIDdb: 2020/08/15 02:27:25.894697 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:25.894702 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:25.894708 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:25.894719 a: = db.Item{PKey:[]uint8{0xfd, 0x51, 0xc, 0x5d, 0x35, 0x25, 0x4e, 0x58, 0x98, 0x90, 0x5e, 0x7e, 0xf5, 0x87, 0x3e, 0x2d}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:25.901653 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.900725ms
SaveRDFNode: 2020/08/15 02:27:25.901664 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 02:27:25.901671 saveNode finished waiting...exiting
grmgr: 2020/08/15 02:27:25.901678 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/15 02:27:25.917258 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/15 02:27:25.917277 Looping..... 0
grmgr: 2020/08/15 02:27:25.917426 Looping..... 1
grmgr: 2020/08/15 02:27:25.917605 Looping..... 2
grmgr: 2020/08/15 02:27:25.917788 Looping..... 3
grmgr: 2020/08/15 02:27:25.917964 Looping..... 4
grmgr: 2020/08/15 02:27:25.918147 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 02:27:25.918156 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 02:27:25.918162 goroutine about to start 1 cUID,pUID   W4mHutKBTJCaEL8NIuVjtw==  9XW9wkffR7y+RZr8rALMuQ==  
grmgr: 2020/08/15 02:27:25.918395 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 02:27:25.921320 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.085611ms
DB: 2020/08/15 02:27:25.923720 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.368282ms
DB: 2020/08/15 02:27:25.926058 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.021998ms
DB: 2020/08/15 02:27:25.986476 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 60.369239ms
DB: 2020/08/15 02:27:25.991203 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.418501ms
DB: 2020/08/15 02:27:26.002868 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 10.954474ms
AttachNode: main 2020/08/15 02:27:26.003002 FetchForUpdate: for parent    9XW9wkffR7y+RZr8rALMuQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 02:27:26.003012 ** Cache FetchForUpdate Cache Key Value: [9XW9wkffR7y+RZr8rALMuQ==]   sortk: A#G#:S
FetchNode: 2020/08/15 02:27:26.003019  node: 9XW9wkffR7y+RZr8rALMuQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 02:27:26.003205 FetchForUpdate: for child    W4mHutKBTJCaEL8NIuVjtw==
FetchForUpdate: 2020/08/15 02:27:26.003213 ** Cache FetchForUpdate Cache Key Value: [W4mHutKBTJCaEL8NIuVjtw==]   sortk: A#
FetchNode: 2020/08/15 02:27:26.003243  node: W4mHutKBTJCaEL8NIuVjtw== subKey: A#
DB: 2020/08/15 02:27:26.008599 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.547086ms
FetchForUpdate: 2020/08/15 02:27:26.008663 len(nb): 1
fetchItems: 2020/08/15 02:27:26.008672 +++  Cache FetchItems for sortk A#G#:S UID: [9XW9wkffR7y+RZr8rALMuQ==] 
FetchNode: 2020/08/15 02:27:26.008677  node: 9XW9wkffR7y+RZr8rALMuQ== subKey: A#G#:S
DB: 2020/08/15 02:27:26.013506 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.799335ms
DB: 2020/08/15 02:27:26.018571 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.234908ms
DB: 2020/08/15 02:27:26.019760 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 16.449726ms
FetchForUpdate: 2020/08/15 02:27:26.019884 len(nb): 7
fetchItems: 2020/08/15 02:27:26.019893 +++  Cache FetchItems for sortk A# UID: [W4mHutKBTJCaEL8NIuVjtw==] 
FetchNode: 2020/08/15 02:27:26.019898  node: W4mHutKBTJCaEL8NIuVjtw== subKey: A#
DB: 2020/08/15 02:27:26.023123 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.161849ms
DB: 2020/08/15 02:27:26.034063 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.674197ms
DB: 2020/08/15 02:27:26.037302 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.179587ms
DB: 2020/08/15 02:27:26.041258 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.810877ms
DB: 2020/08/15 02:27:26.047120 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.779015ms
DB: 2020/08/15 02:27:26.050498 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.321501ms
DB: 2020/08/15 02:27:26.054079 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.517348ms
DB: 2020/08/15 02:27:26.059773 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.626757ms
DB: 2020/08/15 02:27:26.062982 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.15274ms
DB: 2020/08/15 02:27:26.066453 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.405546ms
DB: 2020/08/15 02:27:26.069995 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.474502ms
Cache: 2020/08/15 02:27:26.070025 In SetUpredAvailable: pUid, tUID:  9XW9wkffR7y+RZr8rALMuQ== 9XW9wkffR7y+RZr8rALMuQ== A#G#:S
Cache: 2020/08/15 02:27:26.070037 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 02:27:26.073669 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.570512ms
Unlock: 2020/08/15 02:27:26.073689 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 02:27:26.073694 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 02:27:26.080101 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.351333ms
grmgr: 2020/08/15 02:27:26.080119 EndCh received for nodeAttach. rCnt = 0 
DB:2020/08/15 02:27:56 log.go:18: ===============================================================================
errlog: 2020/08/15 02:27:56.632297 Powering on...
rdfLoader: 2020/08/15 02:27:56.632337 saveNode started......
rdfLoader: 2020/08/15 02:27:56.632342 define saveNode limiter......
rdfuuid: 2020/08/15 02:27:56.632349 Powering on...
grmgr: 2020/08/15 02:27:56.632365 Powering on...
rdfLoader: 2020/08/15 02:27:56.632376  principle goroutines started 
RDFreader: 2020/08/15 02:27:56.632401 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 02:27:56.632416 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 02:27:56.632423 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 02:27:56.632428 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 02:27:56.632433 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 02:27:56.632439 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 02:27:56.632443 spo read:      
RDFreader: 2020/08/15 02:27:56.632448 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 02:27:56.632453 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 02:27:56.632458 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 02:27:56.632462 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 02:27:56.632466 spo read:      
RDFreader: 2020/08/15 02:27:56.632471 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 02:27:56.632476 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 02:27:56.632481 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 02:27:56.632486 spo read:  b  Age  "58"
RDFreader: 2020/08/15 02:27:56.632491 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 02:27:56.632496 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 02:27:56.632501 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 02:27:56.632506 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 02:27:56.632511 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 02:27:56.632514 spo read:      
RDFreader: 2020/08/15 02:27:56.632519 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 02:27:56.632523 Send node batch on channel verifyCh
RDFreader: 2020/08/15 02:27:56.632528 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 02:27:56.632532 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 02:27:56.632536 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 02:27:56.632543 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 02:27:56.632548 spo read:  c  Age  "67"
RDFreader: 2020/08/15 02:27:56.632553 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 02:27:56.632557 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 02:27:56.632562 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 02:27:56.632567 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 02:27:56.632575 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 02:27:56.632579 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 02:27:56.632584 spo read:      
RDFreader: 2020/08/15 02:27:56.632588 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 02:27:56.632593 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 02:27:56.632598 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 02:27:56.632602 spo read:  d  Age  "36"
RDFreader: 2020/08/15 02:27:56.632607 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 02:27:56.632614 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 02:27:56.632618 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 02:27:56.632621 close verify channel
rdfLoader: 2020/08/15 02:27:56.632625 wait for goroutines to end
rdfLoader: 2020/08/15 02:27:56.632630 verify started....
rdfLoader: 2020/08/15 02:27:56.632634 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 02:27:56.632644 .  getType..
rdfLoader: 2020/08/15 02:27:56.632648 node.TyName : [Person]
DB: 2020/08/15 02:27:56.703898 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 71.185502ms
grmgr: 2020/08/15 02:27:56.704047 Looping..... 0
grmgr: 2020/08/15 02:27:56.704300 Looping..... 1
grmgr: 2020/08/15 02:27:56.704319 Looping..... 2
grmgr: 2020/08/15 02:27:56.704484 Looping..... 3
grmgr: 2020/08/15 02:27:56.704662 Looping..... 4
grmgr: 2020/08/15 02:27:56.704842 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 02:27:56.704853 .  getType..
rdfLoader: 2020/08/15 02:27:56.704857 node.TyName : [Person]
grmgr: 2020/08/15 02:27:56.704863 Looping..... 0
unmarshalRDF2020/08/15 02:27:56.704876 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:27:56.704885 Looping..... 1
grmgr: 2020/08/15 02:27:56.704890 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 02:27:56.704894 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 02:27:56.704902 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 02:27:56.704906 .  getType..
rdfLoader: 2020/08/15 02:27:56.704910 node.TyName : [Person]
grmgr: 2020/08/15 02:27:56.704915 Looping..... 0
rdfLoader: 2020/08/15 02:27:56.704924 Add to SS . [Honda]
rdfLoader: 2020/08/15 02:27:56.704930 Add to SS . [Alfa]
unmarshalRDF2020/08/15 02:27:56.705000 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:27:56.705007 Exit  unmarshalRDF. 
saveNode: 2020/08/15 02:27:56.705012 read from saveCH channel 1 
unmarshalRDF2020/08/15 02:27:56.705021 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:27:56.705045 Looping..... 1
grmgr: 2020/08/15 02:27:56.705051 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 02:27:56.705055 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 02:27:56.705060 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 02:27:56.705064 Looping..... 0
rdfLoader: 2020/08/15 02:27:56.705073 Add to SS . [Honda]
rdfLoader: 2020/08/15 02:27:56.705077 Add to SS . [VW Golf]
unmarshalRDF2020/08/15 02:27:56.705119 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:27:56.705124 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 02:27:56.705129 .  getType..
rdfLoader: 2020/08/15 02:27:56.705134 node.TyName : [Person]
unmarshalRDF2020/08/15 02:27:56.705142 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:27:56.705153 Looping..... 1
rdfLoader: 2020/08/15 02:27:56.705162 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 02:27:56.705166 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 02:27:56.705170 Add to SS . [Honda]
unmarshalRDF2020/08/15 02:27:56.705212 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:27:56.705228 Exit  unmarshalRDF. 
grmgr: 2020/08/15 02:27:56.705251 Looping..... 2
grmgr: 2020/08/15 02:27:56.705444 Looping..... 3
grmgr: 2020/08/15 02:27:56.705623 Looping..... 4
grmgr: 2020/08/15 02:27:56.705801 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 02:27:56.705810 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 02:27:56.705815 Looping..... 0
saveNode: 2020/08/15 02:27:56.705821 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 02:27:56.705827 read from saveCH channel 2 
grmgr: 2020/08/15 02:27:56.705859 Looping..... 1
SaveRDFNode: xxx 2020/08/15 02:27:56.705870 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.705876 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.705883 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.705888 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.705894 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.705899 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.705905 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:27:56.705909 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:27:56.705917 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000372420)}
SaveRDFNode: 2020/08/15 02:27:56.705921 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:27:56.705931 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.705935 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.705940 UID received  : 7eefE8MQR+2Oy7FkZ9rA+A==
grmgr: 2020/08/15 02:27:56.706182 Looping..... 2
grmgr: 2020/08/15 02:27:56.706363 Looping..... 3
grmgr: 2020/08/15 02:27:56.706558 Looping..... 4
grmgr: 2020/08/15 02:27:56.706736 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 02:27:56.706745 Looping..... 0
unmarshalRDF2020/08/15 02:27:56.706760 Entered unmarshalRDF. 
grmgr: 2020/08/15 02:27:56.706770 Looping..... 1
rdfLoader: 2020/08/15 02:27:56.706779 Add to SS . [Bentley]
unmarshalRDF2020/08/15 02:27:56.706814 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 02:27:56.706818 Exit  unmarshalRDF. 
grmgr: 2020/08/15 02:27:56.706828 Looping..... 2
grmgr: 2020/08/15 02:27:56.706917 Looping..... 3
grmgr: 2020/08/15 02:27:56.707106 Looping..... 4
grmgr: 2020/08/15 02:27:56.707282 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 02:27:56.707290 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 02:27:56.707295 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/15 02:27:56.707300 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 02:27:56.707310 read from saveCH channel 3 
grmgr: 2020/08/15 02:27:56.707315 Looping..... 0
grmgr: 2020/08/15 02:27:56.707338 Looping..... 1
grmgr: 2020/08/15 02:27:56.707343 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 02:27:56.707347 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 02:27:56.707356 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.707361 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.707368 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.707373 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.707378 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.707383 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.707388 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:27:56.707392 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:27:56.707397 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000372960)}
SaveRDFNode: 2020/08/15 02:27:56.707413 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:27:56.707420 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.707435 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.707441 UID received  : nfuv0R4USb2YsoW7vZBxzA==
DB: 2020/08/15 02:27:56.712610 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.629529ms
DB: 2020/08/15 02:27:56.731191 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 23.719624ms
DB: 2020/08/15 02:27:56.732694 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 20.048873ms
DB: 2020/08/15 02:27:56.734868 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.635871ms
DB: 2020/08/15 02:27:56.735839 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.110692ms
DB: 2020/08/15 02:27:56.737947 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.046417ms
DB: 2020/08/15 02:27:56.739059 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.190212ms
DB: 2020/08/15 02:27:56.741024 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.046119ms
DB: 2020/08/15 02:27:56.742498 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.385673ms
SaveRDFNode: 2020/08/15 02:27:56.742511 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372420)}
rdfUIDdb: 2020/08/15 02:27:56.742519 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.742523 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.742528 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:56.742541 a: = db.Item{PKey:[]uint8{0xed, 0xe7, 0x9f, 0x13, 0xc3, 0x10, 0x47, 0xed, 0x8e, 0xcb, 0xb1, 0x64, 0x67, 0xda, 0xc0, 0xf8}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:56.744012 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 2.956628ms
SaveRDFNode: 2020/08/15 02:27:56.744024 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372960)}
rdfUIDdb: 2020/08/15 02:27:56.744031 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.744043 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.744049 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:56.744059 a: = db.Item{PKey:[]uint8{0x9d, 0xfb, 0xaf, 0xd1, 0x1e, 0x14, 0x49, 0xbd, 0x98, 0xb2, 0x85, 0xbb, 0xbd, 0x90, 0x71, 0xcc}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:56.745846 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.274167ms
SaveRDFNode: 2020/08/15 02:27:56.745858 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372420)}
rdfUIDdb: 2020/08/15 02:27:56.745864 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.745868 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.745873 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:56.745883 a: = db.Item{PKey:[]uint8{0xed, 0xe7, 0x9f, 0x13, 0xc3, 0x10, 0x47, 0xed, 0x8e, 0xcb, 0xb1, 0x64, 0x67, 0xda, 0xc0, 0xf8}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:56.747196 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.107454ms
SaveRDFNode: 2020/08/15 02:27:56.747339 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372960)}
rdfUIDdb: 2020/08/15 02:27:56.747351 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.747355 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.747361 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:56.747371 a: = db.Item{PKey:[]uint8{0x9d, 0xfb, 0xaf, 0xd1, 0x1e, 0x14, 0x49, 0xbd, 0x98, 0xb2, 0x85, 0xbb, 0xbd, 0x90, 0x71, 0xcc}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:56.749205 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.293587ms
SaveRDFNode: 2020/08/15 02:27:56.749229 Returned.+++++++++++ No error
grmgr: 2020/08/15 02:27:56.749249 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 02:27:56.749254 Send ack to waiting saveNode...
saveNode: 2020/08/15 02:27:56.749260 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 02:27:56.749266 read from saveCH channel 4 
grmgr: 2020/08/15 02:27:56.749271 Looping..... 0
grmgr: 2020/08/15 02:27:56.749322 Looping..... 1
grmgr: 2020/08/15 02:27:56.749329 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 02:27:56.749333 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 02:27:56.749342 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.749348 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.749356 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.749361 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.749367 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.749375 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.749381 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:27:56.749385 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:27:56.749390 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000016c00)}
SaveRDFNode: 2020/08/15 02:27:56.749394 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:27:56.749402 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.749406 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.749411 UID received  : /I7xOorMTU+3j45d6eGW2w==
DB: 2020/08/15 02:27:56.750467 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.034525ms
SaveRDFNode: 2020/08/15 02:27:56.750476 Returned.+++++++++++ No error
grmgr: 2020/08/15 02:27:56.750483 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 02:27:56.750487 Send ack to waiting saveNode...
saveNode: 2020/08/15 02:27:56.750492 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/15 02:27:56.750497 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/15 02:27:56.750517 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.750524 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.750530 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.750536 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.750541 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.750547 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 02:27:56.750552 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 02:27:56.750575 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 02:27:56.750582 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000017500)}
SaveRDFNode: 2020/08/15 02:27:56.750586 Waiting for UID ......................
rdfUIDdb: 2020/08/15 02:27:56.750593 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.750597 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.750603 UID received  : TQOKzHH4Q++kZdD4EoC7Yg==
grmgr: 2020/08/15 02:27:56.750774 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 02:27:56.752705 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.262133ms
DB: 2020/08/15 02:27:56.753631 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.004198ms
DB: 2020/08/15 02:27:56.755976 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.23754ms
DB: 2020/08/15 02:27:56.760444 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.436453ms
DB: 2020/08/15 02:27:56.760723 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.0304ms
DB: 2020/08/15 02:27:56.763830 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.346879ms
DB: 2020/08/15 02:27:56.764221 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.462094ms
DB: 2020/08/15 02:27:56.767167 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.1942ms
SaveRDFNode: 2020/08/15 02:27:56.767180 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016c00)}
rdfUIDdb: 2020/08/15 02:27:56.767186 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.767191 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.767196 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:56.767207 a: = db.Item{PKey:[]uint8{0xfc, 0x8e, 0xf1, 0x3a, 0x8a, 0xcc, 0x4d, 0x4f, 0xb7, 0x8f, 0x8e, 0x5d, 0xe9, 0xe1, 0x96, 0xdb}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:56.767552 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.300394ms
DB: 2020/08/15 02:27:56.770585 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.350429ms
SaveRDFNode: 2020/08/15 02:27:56.770604 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016c00)}
rdfUIDdb: 2020/08/15 02:27:56.770610 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.770614 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.770619 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:56.770630 a: = db.Item{PKey:[]uint8{0xfc, 0x8e, 0xf1, 0x3a, 0x8a, 0xcc, 0x4d, 0x4f, 0xb7, 0x8f, 0x8e, 0x5d, 0xe9, 0xe1, 0x96, 0xdb}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:56.770962 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.378627ms
SaveRDFNode: 2020/08/15 02:27:56.770974 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017500)}
rdfUIDdb: 2020/08/15 02:27:56.770980 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.770984 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.770990 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:56.771000 a: = db.Item{PKey:[]uint8{0x4d, 0x3, 0x8a, 0xcc, 0x71, 0xf8, 0x43, 0xef, 0xa4, 0x65, 0xd0, 0xf8, 0x12, 0x80, 0xbb, 0x62}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:56.773912 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.255138ms
SaveRDFNode: 2020/08/15 02:27:56.773923 Returned.+++++++++++ No error
grmgr: 2020/08/15 02:27:56.773930 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 02:27:56.799939 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 28.886625ms
SaveRDFNode: 2020/08/15 02:27:56.800479 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017500)}
rdfUIDdb: 2020/08/15 02:27:56.800492 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 02:27:56.800496 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 02:27:56.800501 Received UID: X18=
SaveRDFNode: 2020/08/15 02:27:56.800512 a: = db.Item{PKey:[]uint8{0x4d, 0x3, 0x8a, 0xcc, 0x71, 0xf8, 0x43, 0xef, 0xa4, 0x65, 0xd0, 0xf8, 0x12, 0x80, 0xbb, 0x62}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 02:27:56.804117 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.575213ms
SaveRDFNode: 2020/08/15 02:27:56.804127 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 02:27:56.804133 saveNode finished waiting...exiting
grmgr: 2020/08/15 02:27:56.804140 EndCh received for saveNode. rCnt = 0 
attachNode: 2020/08/15 02:27:56.819626 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/15 02:27:56.819643 Looping..... 0
grmgr: 2020/08/15 02:27:56.819773 Looping..... 1
grmgr: 2020/08/15 02:27:56.819952 Looping..... 2
grmgr: 2020/08/15 02:27:56.820127 Looping..... 3
grmgr: 2020/08/15 02:27:56.820303 Looping..... 4
grmgr: 2020/08/15 02:27:56.820478 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 02:27:56.820488 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 02:27:56.820494 goroutine about to start 1 cUID,pUID   7eefE8MQR+2Oy7FkZ9rA+A==  nfuv0R4USb2YsoW7vZBxzA==  
grmgr: 2020/08/15 02:27:56.820709 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 02:27:56.822942 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.381116ms
DB: 2020/08/15 02:27:56.825138 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.147079ms
DB: 2020/08/15 02:27:56.832598 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.127749ms
DB: 2020/08/15 02:27:56.834723 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.090612ms
DB: 2020/08/15 02:27:56.838290 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.514347ms
DB: 2020/08/15 02:27:56.845195 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.82793ms
AttachNode: main 2020/08/15 02:27:56.845218 FetchForUpdate: for parent    nfuv0R4USb2YsoW7vZBxzA==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 02:27:56.845224 ** Cache FetchForUpdate Cache Key Value: [nfuv0R4USb2YsoW7vZBxzA==]   sortk: A#G#:S
FetchNode: 2020/08/15 02:27:56.845230  node: nfuv0R4USb2YsoW7vZBxzA== subKey: A#G#:S
AttachNode: gr1 2020/08/15 02:27:56.845421 FetchForUpdate: for child    7eefE8MQR+2Oy7FkZ9rA+A==
FetchForUpdate: 2020/08/15 02:27:56.845434 ** Cache FetchForUpdate Cache Key Value: [7eefE8MQR+2Oy7FkZ9rA+A==]   sortk: A#
FetchNode: 2020/08/15 02:27:56.845446  node: 7eefE8MQR+2Oy7FkZ9rA+A== subKey: A#
DB: 2020/08/15 02:27:56.848234 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.972829ms
FetchForUpdate: 2020/08/15 02:27:56.848301 len(nb): 1
fetchItems: 2020/08/15 02:27:56.848310 +++  Cache FetchItems for sortk A#G#:S UID: [nfuv0R4USb2YsoW7vZBxzA==] 
FetchNode: 2020/08/15 02:27:56.848314  node: nfuv0R4USb2YsoW7vZBxzA== subKey: A#G#:S
DB: 2020/08/15 02:27:56.850988 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.645082ms
DB: 2020/08/15 02:27:56.856157 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.290718ms
DB: 2020/08/15 02:27:56.861090 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 15.588744ms
FetchForUpdate: 2020/08/15 02:27:56.861233 len(nb): 7
fetchItems: 2020/08/15 02:27:56.861243 +++  Cache FetchItems for sortk A# UID: [7eefE8MQR+2Oy7FkZ9rA+A==] 
FetchNode: 2020/08/15 02:27:56.861247  node: 7eefE8MQR+2Oy7FkZ9rA+A== subKey: A#
DB: 2020/08/15 02:27:56.863648 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.37187ms
DB: 2020/08/15 02:27:56.874249 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.061146ms
DB: 2020/08/15 02:27:56.878620 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.204548ms
DB: 2020/08/15 02:27:56.882566 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.583632ms
DB: 2020/08/15 02:27:56.888449 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.59486ms
DB: 2020/08/15 02:27:56.891834 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.081394ms
DB: 2020/08/15 02:27:56.895397 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.258995ms
DB: 2020/08/15 02:27:56.901390 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.668123ms
DB: 2020/08/15 02:27:56.904820 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.115269ms
DB: 2020/08/15 02:27:56.908625 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.505773ms
DB: 2020/08/15 02:27:56.912132 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.298602ms
Cache: 2020/08/15 02:27:56.912147 In SetUpredAvailable: pUid, tUID:  nfuv0R4USb2YsoW7vZBxzA== nfuv0R4USb2YsoW7vZBxzA== A#G#:S
Cache: 2020/08/15 02:27:56.912152 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 02:27:56.915393 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.205011ms
Unlock: 2020/08/15 02:27:56.915403 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 02:27:56.915407 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 02:27:56.922351 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.89102ms
grmgr: 2020/08/15 02:27:56.922375 EndCh received for nodeAttach. rCnt = 0 

DB:2020/08/15 04:33:17 log.go:18: ===============================================================================
errlog: 2020/08/15 04:33:17.413915 Powering on...
rdfLoader: 2020/08/15 04:33:17.414311 saveNode started......
rdfLoader: 2020/08/15 04:33:17.414322 define saveNode limiter......
rdfuuid: 2020/08/15 04:33:17.414330 Powering on...
grmgr: 2020/08/15 04:33:17.414348 Powering on...
rdfLoader: 2020/08/15 04:33:17.414358  principle goroutines started 
RDFreader: 2020/08/15 04:33:17.414382 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 04:33:17.414396 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 04:33:17.414402 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 04:33:17.414408 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 04:33:17.414413 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 04:33:17.414418 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 04:33:17.414422 spo read:      
RDFreader: 2020/08/15 04:33:17.414427 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 04:33:17.414432 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 04:33:17.414437 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 04:33:17.414442 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 04:33:17.414446 spo read:      
RDFreader: 2020/08/15 04:33:17.414451 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 04:33:17.414456 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 04:33:17.414460 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 04:33:17.414465 spo read:  b  Age  "58"
RDFreader: 2020/08/15 04:33:17.414470 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 04:33:17.414475 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 04:33:17.414480 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 04:33:17.414485 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 04:33:17.414489 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 04:33:17.414493 spo read:      
RDFreader: 2020/08/15 04:33:17.414498 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 04:33:17.414502 Send node batch on channel verifyCh
RDFreader: 2020/08/15 04:33:17.414507 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 04:33:17.414511 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 04:33:17.414515 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 04:33:17.414522 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 04:33:17.414527 spo read:  c  Age  "67"
RDFreader: 2020/08/15 04:33:17.414532 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 04:33:17.414537 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 04:33:17.414541 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 04:33:17.414546 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 04:33:17.414557 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 04:33:17.414562 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 04:33:17.414566 spo read:      
RDFreader: 2020/08/15 04:33:17.414571 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 04:33:17.414576 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 04:33:17.414581 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 04:33:17.414586 spo read:  d  Age  "36"
RDFreader: 2020/08/15 04:33:17.414590 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 04:33:17.414596 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 04:33:17.414600 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 04:33:17.414604 close verify channel
rdfLoader: 2020/08/15 04:33:17.414608 wait for goroutines to end
rdfLoader: 2020/08/15 04:33:17.414612 verify started....
rdfLoader: 2020/08/15 04:33:17.414616 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 04:33:17.414620 .  getType..
rdfLoader: 2020/08/15 04:33:17.414624 node.TyName : [Person]
DB: 2020/08/15 04:33:17.487330 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 72.641351ms
grmgr: 2020/08/15 04:33:17.487470 Looping..... 0
grmgr: 2020/08/15 04:33:17.487722 Looping..... 1
grmgr: 2020/08/15 04:33:17.487743 Looping..... 2
grmgr: 2020/08/15 04:33:17.487907 Looping..... 3
grmgr: 2020/08/15 04:33:17.488088 Looping..... 4
grmgr: 2020/08/15 04:33:17.488267 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 04:33:17.488278 .  getType..
rdfLoader: 2020/08/15 04:33:17.488282 node.TyName : [Person]
grmgr: 2020/08/15 04:33:17.488288 Looping..... 0
unmarshalRDF2020/08/15 04:33:17.488300 Entered unmarshalRDF. 
grmgr: 2020/08/15 04:33:17.488309 Looping..... 1
grmgr: 2020/08/15 04:33:17.488315 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 04:33:17.488319 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 04:33:17.488327 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 04:33:17.488331 .  getType..
rdfLoader: 2020/08/15 04:33:17.488335 node.TyName : [Person]
grmgr: 2020/08/15 04:33:17.488339 Looping..... 0
rdfLoader: 2020/08/15 04:33:17.488350 Add to SS . [Honda]
rdfLoader: 2020/08/15 04:33:17.488354 Add to SS . [Alfa]
uuidAttach: 2020/08/15 04:33:17.488388 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.488396 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 04:33:17.488441 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 04:33:17.488447 Exit  unmarshalRDF. 
saveNode: 2020/08/15 04:33:17.488452 read from saveCH channel 1 
unmarshalRDF2020/08/15 04:33:17.488461 Entered unmarshalRDF. 
grmgr: 2020/08/15 04:33:17.488486 Looping..... 1
grmgr: 2020/08/15 04:33:17.488492 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 04:33:17.488496 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 04:33:17.488500 Looping..... 0
rdfLoader: 2020/08/15 04:33:17.488509 Add to SS . [Honda]
rdfLoader: 2020/08/15 04:33:17.488513 Add to SS . [VW Golf]
uuidAttach: 2020/08/15 04:33:17.488529 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.488535 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 04:33:17.488563 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 04:33:17.488567 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 04:33:17.488573 .  getType..
rdfLoader: 2020/08/15 04:33:17.488577 node.TyName : [Person]
unmarshalRDF2020/08/15 04:33:17.488586 Entered unmarshalRDF. 
grmgr: 2020/08/15 04:33:17.488596 Looping..... 1
rdfLoader: 2020/08/15 04:33:17.488604 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 04:33:17.488609 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 04:33:17.488613 Add to SS . [Honda]
uuidAttach: 2020/08/15 04:33:17.488625 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.488641 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 04:33:17.488667 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 04:33:17.488677 Exit  unmarshalRDF. 
grmgr: 2020/08/15 04:33:17.488702 Looping..... 2
grmgr: 2020/08/15 04:33:17.488885 Looping..... 3
grmgr: 2020/08/15 04:33:17.489064 Looping..... 4
grmgr: 2020/08/15 04:33:17.489242 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 04:33:17.489250 Looping..... 0
saveNode: 2020/08/15 04:33:17.489256 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 04:33:17.489263 read from saveCH channel 2 
grmgr: 2020/08/15 04:33:17.489293 Looping..... 1
SaveRDFNode: xxx 2020/08/15 04:33:17.489303 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.489310 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.489316 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.489322 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.489327 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.489333 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.489338 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 04:33:17.489342 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 04:33:17.489350 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000372420)}
SaveRDFNode: 2020/08/15 04:33:17.489355 Waiting for UID ......................
rdfUIDdb: 2020/08/15 04:33:17.489364 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.489368 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.489374 UID received  : SsFvxPgmTqe3fN7kHWJ/kw==
grmgr: 2020/08/15 04:33:17.489638 Looping..... 2
grmgr: 2020/08/15 04:33:17.489804 Looping..... 3
grmgr: 2020/08/15 04:33:17.489982 Looping..... 4
grmgr: 2020/08/15 04:33:17.490161 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 04:33:17.490169 Looping..... 0
unmarshalRDF2020/08/15 04:33:17.490183 Entered unmarshalRDF. 
grmgr: 2020/08/15 04:33:17.490193 Looping..... 1
rdfLoader: 2020/08/15 04:33:17.490202 Add to SS . [Bentley]
unmarshalRDF2020/08/15 04:33:17.490236 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 04:33:17.490241 Exit  unmarshalRDF. 
grmgr: 2020/08/15 04:33:17.490251 Looping..... 2
grmgr: 2020/08/15 04:33:17.490343 Looping..... 3
grmgr: 2020/08/15 04:33:17.490521 Looping..... 4
grmgr: 2020/08/15 04:33:17.490699 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 04:33:17.490708 EndCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/15 04:33:17.490713 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/15 04:33:17.490718 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 04:33:17.490727 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/15 04:33:17.490734 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 04:33:17.490740 read from saveCH channel 3 
grmgr: 2020/08/15 04:33:17.490744 Looping..... 0
grmgr: 2020/08/15 04:33:17.490772 Looping..... 1
grmgr: 2020/08/15 04:33:17.490778 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 04:33:17.490782 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 04:33:17.490791 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.490798 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.490804 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.490809 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.490814 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.490820 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.490826 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 04:33:17.490829 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 04:33:17.490835 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000372960)}
SaveRDFNode: 2020/08/15 04:33:17.490839 Waiting for UID ......................
rdfUIDdb: 2020/08/15 04:33:17.490857 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.490861 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.490866 UID received  : 2V/UywZIRdm62ZbCBxkjCw==
DB: 2020/08/15 04:33:17.497542 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.125072ms
DB: 2020/08/15 04:33:17.500896 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.314836ms
DB: 2020/08/15 04:33:17.504181 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.247022ms
DB: 2020/08/15 04:33:17.508845 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.493362ms
DB: 2020/08/15 04:33:17.513260 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.380471ms
SaveRDFNode: 2020/08/15 04:33:17.513275 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372420)}
rdfUIDdb: 2020/08/15 04:33:17.513282 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.513287 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.513293 Received UID: X18=
SaveRDFNode: 2020/08/15 04:33:17.513311 a: = db.Item{PKey:[]uint8{0x4a, 0xc1, 0x6f, 0xc4, 0xf8, 0x26, 0x4e, 0xa7, 0xb7, 0x7c, 0xde, 0xe4, 0x1d, 0x62, 0x7f, 0x93}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 04:33:17.516914 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.572698ms
SaveRDFNode: 2020/08/15 04:33:17.516927 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372420)}
rdfUIDdb: 2020/08/15 04:33:17.516934 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.516938 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.516944 Received UID: X18=
SaveRDFNode: 2020/08/15 04:33:17.516954 a: = db.Item{PKey:[]uint8{0x4a, 0xc1, 0x6f, 0xc4, 0xf8, 0x26, 0x4e, 0xa7, 0xb7, 0x7c, 0xde, 0xe4, 0x1d, 0x62, 0x7f, 0x93}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 04:33:17.517990 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 27.097461ms
DB: 2020/08/15 04:33:17.520312 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.329401ms
SaveRDFNode: 2020/08/15 04:33:17.520445 Returned.+++++++++++ No error
grmgr: 2020/08/15 04:33:17.520461 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 04:33:17.520466 Send ack to waiting saveNode...
saveNode: 2020/08/15 04:33:17.520472 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 04:33:17.520477 read from saveCH channel 4 
grmgr: 2020/08/15 04:33:17.520482 Looping..... 0
grmgr: 2020/08/15 04:33:17.520518 Looping..... 1
grmgr: 2020/08/15 04:33:17.520523 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 04:33:17.520528 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 04:33:17.520538 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.520544 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.520553 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.520558 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.520564 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.520570 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.520575 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 04:33:17.520579 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 04:33:17.520602 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000017560)}
SaveRDFNode: 2020/08/15 04:33:17.520606 Waiting for UID ......................
rdfUIDdb: 2020/08/15 04:33:17.520616 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.520619 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.520625 UID received  : 41MDJv22S4a7VZ0reg+sXQ==
DB: 2020/08/15 04:33:17.521311 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.278006ms
DB: 2020/08/15 04:33:17.523999 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.343265ms
DB: 2020/08/15 04:33:17.524308 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 2.966152ms
DB: 2020/08/15 04:33:17.527230 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.192764ms
DB: 2020/08/15 04:33:17.527614 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.276111ms
DB: 2020/08/15 04:33:17.530494 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.232847ms
DB: 2020/08/15 04:33:17.530930 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.285289ms
SaveRDFNode: 2020/08/15 04:33:17.530943 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372960)}
rdfUIDdb: 2020/08/15 04:33:17.530949 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.530953 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.530958 Received UID: X18=
SaveRDFNode: 2020/08/15 04:33:17.530973 a: = db.Item{PKey:[]uint8{0xd9, 0x5f, 0xd4, 0xcb, 0x6, 0x48, 0x45, 0xd9, 0xba, 0xd9, 0x96, 0xc2, 0x7, 0x19, 0x23, 0xb}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 04:33:17.533771 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.240738ms
DB: 2020/08/15 04:33:17.534162 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.158601ms
SaveRDFNode: 2020/08/15 04:33:17.534178 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372960)}
rdfUIDdb: 2020/08/15 04:33:17.534184 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.534188 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.534194 Received UID: X18=
SaveRDFNode: 2020/08/15 04:33:17.534205 a: = db.Item{PKey:[]uint8{0xd9, 0x5f, 0xd4, 0xcb, 0x6, 0x48, 0x45, 0xd9, 0xba, 0xd9, 0x96, 0xc2, 0x7, 0x19, 0x23, 0xb}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 04:33:17.537393 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.58237ms
SaveRDFNode: 2020/08/15 04:33:17.537523 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017560)}
rdfUIDdb: 2020/08/15 04:33:17.537534 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.537538 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.537544 Received UID: X18=
SaveRDFNode: 2020/08/15 04:33:17.537555 a: = db.Item{PKey:[]uint8{0xe3, 0x53, 0x3, 0x26, 0xfd, 0xb6, 0x4b, 0x86, 0xbb, 0x55, 0x9d, 0x2b, 0x7a, 0xf, 0xac, 0x5d}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 04:33:17.537849 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.612917ms
SaveRDFNode: 2020/08/15 04:33:17.537859 Returned.+++++++++++ No error
grmgr: 2020/08/15 04:33:17.537866 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 04:33:17.537870 Send ack to waiting saveNode...
saveNode: 2020/08/15 04:33:17.537876 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/15 04:33:17.537881 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/15 04:33:17.537904 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.537911 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.537917 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.537922 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.537929 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.537935 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 04:33:17.537941 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 04:33:17.537945 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 04:33:17.537950 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc00047cfc0)}
SaveRDFNode: 2020/08/15 04:33:17.537954 Waiting for UID ......................
rdfUIDdb: 2020/08/15 04:33:17.537963 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.537967 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.537972 UID received  : c32VodBBT6i0lHji0DUimQ==
grmgr: 2020/08/15 04:33:17.538186 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 04:33:17.541221 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.636254ms
SaveRDFNode: 2020/08/15 04:33:17.541233 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017560)}
rdfUIDdb: 2020/08/15 04:33:17.541239 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.541243 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.541249 Received UID: X18=
SaveRDFNode: 2020/08/15 04:33:17.541259 a: = db.Item{PKey:[]uint8{0xe3, 0x53, 0x3, 0x26, 0xfd, 0xb6, 0x4b, 0x86, 0xbb, 0x55, 0x9d, 0x2b, 0x7a, 0xf, 0xac, 0x5d}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 04:33:17.541895 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.87474ms
DB: 2020/08/15 04:33:17.545489 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.170257ms
SaveRDFNode: 2020/08/15 04:33:17.545501 Returned.+++++++++++ No error
grmgr: 2020/08/15 04:33:17.545525 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 04:33:17.545901 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.97319ms
DB: 2020/08/15 04:33:17.549418 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.477985ms
DB: 2020/08/15 04:33:17.552649 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.186249ms
DB: 2020/08/15 04:33:17.555593 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.91156ms
SaveRDFNode: 2020/08/15 04:33:17.555609 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00047cfc0)}
rdfUIDdb: 2020/08/15 04:33:17.555616 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.555620 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.555626 Received UID: X18=
SaveRDFNode: 2020/08/15 04:33:17.555637 a: = db.Item{PKey:[]uint8{0x73, 0x7d, 0x95, 0xa1, 0xd0, 0x41, 0x4f, 0xa8, 0xb4, 0x94, 0x78, 0xe2, 0xd0, 0x35, 0x22, 0x99}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 04:33:17.560175 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.486278ms
SaveRDFNode: 2020/08/15 04:33:17.560189 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00047cfc0)}
rdfUIDdb: 2020/08/15 04:33:17.560194 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 04:33:17.560198 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 04:33:17.560204 Received UID: X18=
SaveRDFNode: 2020/08/15 04:33:17.560214 a: = db.Item{PKey:[]uint8{0x73, 0x7d, 0x95, 0xa1, 0xd0, 0x41, 0x4f, 0xa8, 0xb4, 0x94, 0x78, 0xe2, 0xd0, 0x35, 0x22, 0x99}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 04:33:17.563596 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.352016ms
SaveRDFNode: 2020/08/15 04:33:17.563606 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 04:33:17.563612 saveNode finished waiting...exiting
grmgr: 2020/08/15 04:33:17.563619 EndCh received for saveNode. rCnt = 0 
uuidAttach: 2020/08/15 04:33:17.563630 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.563635 check for attachDone..... 0
uuidAttach: 2020/08/15 04:33:17.568813 check for attachDone..... 1
uuidAttach: 2020/08/15 04:33:17.573986 check for attachDone..... 2
uuidAttach: 2020/08/15 04:33:17.579183 About to run AttachNodeCh: abc  b  SsFvxPgmTqe3fN7kHWJ/kw== 2V/UywZIRdm62ZbCBxkjCw==
uuidAttach: 2020/08/15 04:33:17.579205 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.579210 check for attachDone..... 0
attachNode: 2020/08/15 04:33:17.579217 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/15 04:33:17.579223 Looping..... 0
grmgr: 2020/08/15 04:33:17.579347 Looping..... 1
grmgr: 2020/08/15 04:33:17.579521 Looping..... 2
grmgr: 2020/08/15 04:33:17.579708 Looping..... 3
grmgr: 2020/08/15 04:33:17.579887 Looping..... 4
grmgr: 2020/08/15 04:33:17.580066 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 04:33:17.580075 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 04:33:17.580081 goroutine about to start 1 cUID,pUID   SsFvxPgmTqe3fN7kHWJ/kw==  2V/UywZIRdm62ZbCBxkjCw==  
grmgr: 2020/08/15 04:33:17.580307 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 04:33:17.582536 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.38752ms
uuidAttach: 2020/08/15 04:33:17.584361 check for attachDone..... 1
DB: 2020/08/15 04:33:17.585178 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.612826ms
DB: 2020/08/15 04:33:17.588459 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.226487ms
uuidAttach: 2020/08/15 04:33:17.589523 check for attachDone..... 2
uuidAttach: 2020/08/15 04:33:17.594715 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.594726 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.594730 continue x 
uuidAttach: 2020/08/15 04:33:17.594735 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.594740 check for attachDone..... 0
DB: 2020/08/15 04:33:17.596331 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.311006ms
AttachNode: main 2020/08/15 04:33:17.596342 FetchForUpdate: for parent    2V/UywZIRdm62ZbCBxkjCw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 04:33:17.596346 ** Cache FetchForUpdate Cache Key Value: [2V/UywZIRdm62ZbCBxkjCw==]   sortk: A#G#:S
FetchNode: 2020/08/15 04:33:17.596352  node: 2V/UywZIRdm62ZbCBxkjCw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 04:33:17.596541 FetchForUpdate: for child    SsFvxPgmTqe3fN7kHWJ/kw==
FetchForUpdate: 2020/08/15 04:33:17.596583 ** Cache FetchForUpdate Cache Key Value: [SsFvxPgmTqe3fN7kHWJ/kw==]   sortk: A#
FetchNode: 2020/08/15 04:33:17.596601  node: SsFvxPgmTqe3fN7kHWJ/kw== subKey: A#
DB: 2020/08/15 04:33:17.599348 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.932713ms
FetchForUpdate: 2020/08/15 04:33:17.599409 len(nb): 1
fetchItems: 2020/08/15 04:33:17.599418 +++  Cache FetchItems for sortk A#G#:S UID: [2V/UywZIRdm62ZbCBxkjCw==] 
FetchNode: 2020/08/15 04:33:17.599423  node: 2V/UywZIRdm62ZbCBxkjCw== subKey: A#G#:S
DB: 2020/08/15 04:33:17.599848 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.200825ms
FetchForUpdate: 2020/08/15 04:33:17.599970 len(nb): 7
fetchItems: 2020/08/15 04:33:17.599979 +++  Cache FetchItems for sortk A# UID: [SsFvxPgmTqe3fN7kHWJ/kw==] 
FetchNode: 2020/08/15 04:33:17.599983  node: SsFvxPgmTqe3fN7kHWJ/kw== subKey: A#
uuidAttach: 2020/08/15 04:33:17.600179 check for attachDone..... 1
DB: 2020/08/15 04:33:17.602566 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.11496ms
DB: 2020/08/15 04:33:17.603122 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.110972ms
uuidAttach: 2020/08/15 04:33:17.606328 check for attachDone..... 2
DB: 2020/08/15 04:33:17.607416 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.821521ms
uuidAttach: 2020/08/15 04:33:17.611429 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.611440 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.611444 continue x 
uuidAttach: 2020/08/15 04:33:17.611449 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.611454 check for attachDone..... 0
DB: 2020/08/15 04:33:17.613183 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.700513ms
uuidAttach: 2020/08/15 04:33:17.616599 check for attachDone..... 1
DB: 2020/08/15 04:33:17.616946 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.692279ms
DB: 2020/08/15 04:33:17.620996 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.94055ms
uuidAttach: 2020/08/15 04:33:17.621758 check for attachDone..... 2
DB: 2020/08/15 04:33:17.626519 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.238472ms
uuidAttach: 2020/08/15 04:33:17.627299 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.627309 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.627313 continue x 
uuidAttach: 2020/08/15 04:33:17.627318 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.627323 check for attachDone..... 0
DB: 2020/08/15 04:33:17.630157 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.320918ms
uuidAttach: 2020/08/15 04:33:17.632468 check for attachDone..... 1
DB: 2020/08/15 04:33:17.634030 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.570214ms
uuidAttach: 2020/08/15 04:33:17.637621 check for attachDone..... 2
DB: 2020/08/15 04:33:17.640164 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.837724ms
uuidAttach: 2020/08/15 04:33:17.642781 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.642792 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.642796 continue x 
uuidAttach: 2020/08/15 04:33:17.642801 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.642806 check for attachDone..... 0
DB: 2020/08/15 04:33:17.644082 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.586651ms
uuidAttach: 2020/08/15 04:33:17.647949 check for attachDone..... 1
DB: 2020/08/15 04:33:17.648152 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.759482ms
DB: 2020/08/15 04:33:17.652300 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.826992ms
Cache: 2020/08/15 04:33:17.652312 In SetUpredAvailable: pUid, tUID:  2V/UywZIRdm62ZbCBxkjCw== 2V/UywZIRdm62ZbCBxkjCw== A#G#:S
Cache: 2020/08/15 04:33:17.652317 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 04:33:17.653058 check for attachDone..... 2
DB: 2020/08/15 04:33:17.655892 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.539766ms
Unlock: 2020/08/15 04:33:17.655906 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 04:33:17.655911 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 04:33:17.658237 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.658251 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.658255 continue x 
uuidAttach: 2020/08/15 04:33:17.658260 for loop finished 0  6 
uuidAttach: 2020/08/15 04:33:17.658266 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.658272 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.658277 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.658281 check for attachDone..... 0
DB: 2020/08/15 04:33:17.662980 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.007953ms
grmgr: 2020/08/15 04:33:17.662995 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 04:33:17.663416 check for attachDone..... 1
uuidAttach: 2020/08/15 04:33:17.663426 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 04:33:17.663432 check for attachDone..... 2
uuidAttach: 2020/08/15 04:33:17.668609 About to run AttachNodeCh: abc  c  SsFvxPgmTqe3fN7kHWJ/kw== 41MDJv22S4a7VZ0reg+sXQ==
uuidAttach: 2020/08/15 04:33:17.668626 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.668631 check for attachDone..... 0
attachNode: 2020/08/15 04:33:17.668637 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/15 04:33:17.668644 Looping..... 0
grmgr: 2020/08/15 04:33:17.668782 Looping..... 1
grmgr: 2020/08/15 04:33:17.668958 Looping..... 2
grmgr: 2020/08/15 04:33:17.669143 Looping..... 3
grmgr: 2020/08/15 04:33:17.669311 Looping..... 4
grmgr: 2020/08/15 04:33:17.669486 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 04:33:17.669494 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 04:33:17.669500 goroutine about to start 2 cUID,pUID   SsFvxPgmTqe3fN7kHWJ/kw==  41MDJv22S4a7VZ0reg+sXQ==  
grmgr: 2020/08/15 04:33:17.669887 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 04:33:17.672495 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.354953ms
uuidAttach: 2020/08/15 04:33:17.673782 check for attachDone..... 1
DB: 2020/08/15 04:33:17.675461 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.929918ms
uuidAttach: 2020/08/15 04:33:17.678932 check for attachDone..... 2
DB: 2020/08/15 04:33:17.679106 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.590314ms
DB: 2020/08/15 04:33:17.683808 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.763168ms
AttachNode: main 2020/08/15 04:33:17.683822 FetchForUpdate: for parent    41MDJv22S4a7VZ0reg+sXQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 04:33:17.683828 ** Cache FetchForUpdate Cache Key Value: [41MDJv22S4a7VZ0reg+sXQ==]   sortk: A#G#:S
FetchNode: 2020/08/15 04:33:17.683834  node: 41MDJv22S4a7VZ0reg+sXQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 04:33:17.684091 FetchForUpdate: for child    SsFvxPgmTqe3fN7kHWJ/kw==
FetchForUpdate: 2020/08/15 04:33:17.684100 ** Cache FetchForUpdate Cache Key Value: [SsFvxPgmTqe3fN7kHWJ/kw==]   sortk: A#
fetchItems: 2020/08/15 04:33:17.684106 +++  Cache FetchItems for sortk A# UID: [SsFvxPgmTqe3fN7kHWJ/kw==] 
FetchNode: 2020/08/15 04:33:17.684119  node: SsFvxPgmTqe3fN7kHWJ/kw== subKey: A#
uuidAttach: 2020/08/15 04:33:17.684324 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.684332 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.684336 continue x 
uuidAttach: 2020/08/15 04:33:17.684341 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.684350 check for attachDone..... 0
DB: 2020/08/15 04:33:17.686560 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.677039ms
FetchForUpdate: 2020/08/15 04:33:17.686624 len(nb): 1
fetchItems: 2020/08/15 04:33:17.686633 +++  Cache FetchItems for sortk A#G#:S UID: [41MDJv22S4a7VZ0reg+sXQ==] 
FetchNode: 2020/08/15 04:33:17.686637  node: 41MDJv22S4a7VZ0reg+sXQ== subKey: A#G#:S
DB: 2020/08/15 04:33:17.687223 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.058756ms
DB: 2020/08/15 04:33:17.689497 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.831491ms
uuidAttach: 2020/08/15 04:33:17.690576 check for attachDone..... 1
DB: 2020/08/15 04:33:17.693754 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.650704ms
uuidAttach: 2020/08/15 04:33:17.695695 check for attachDone..... 2
DB: 2020/08/15 04:33:17.699867 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.782902ms
uuidAttach: 2020/08/15 04:33:17.700868 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.700879 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.700882 continue x 
uuidAttach: 2020/08/15 04:33:17.700903 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.700910 check for attachDone..... 0
DB: 2020/08/15 04:33:17.703417 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.369608ms
uuidAttach: 2020/08/15 04:33:17.706089 check for attachDone..... 1
DB: 2020/08/15 04:33:17.707642 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.700978ms
uuidAttach: 2020/08/15 04:33:17.711240 check for attachDone..... 2
DB: 2020/08/15 04:33:17.714270 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.311699ms
uuidAttach: 2020/08/15 04:33:17.716399 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.716410 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.716414 continue x 
uuidAttach: 2020/08/15 04:33:17.716419 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.716424 check for attachDone..... 0
DB: 2020/08/15 04:33:17.717541 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.207418ms
DB: 2020/08/15 04:33:17.721280 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.67131ms
uuidAttach: 2020/08/15 04:33:17.721650 check for attachDone..... 1
uuidAttach: 2020/08/15 04:33:17.726825 check for attachDone..... 2
DB: 2020/08/15 04:33:17.727290 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.94431ms
DB: 2020/08/15 04:33:17.730921 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.571097ms
uuidAttach: 2020/08/15 04:33:17.732017 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.732027 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.732031 continue x 
uuidAttach: 2020/08/15 04:33:17.732036 for loop finished 1  6 
uuidAttach: 2020/08/15 04:33:17.732041 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.732059 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.732064 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.732069 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.732074 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.732078 check for attachDone..... 0
DB: 2020/08/15 04:33:17.734470 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.472285ms
uuidAttach: 2020/08/15 04:33:17.737242 check for attachDone..... 1
DB: 2020/08/15 04:33:17.737859 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.331624ms
Cache: 2020/08/15 04:33:17.737870 In SetUpredAvailable: pUid, tUID:  41MDJv22S4a7VZ0reg+sXQ== 41MDJv22S4a7VZ0reg+sXQ== A#G#:S
Cache: 2020/08/15 04:33:17.737875 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 04:33:17.741501 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.592368ms
Unlock: 2020/08/15 04:33:17.741511 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 04:33:17.741515 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 04:33:17.742416 check for attachDone..... 2
DB: 2020/08/15 04:33:17.745359 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.790809ms
grmgr: 2020/08/15 04:33:17.745375 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 04:33:17.747576 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.747584 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.747588 continue x 
uuidAttach: 2020/08/15 04:33:17.747593 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.747598 check for attachDone..... 0
uuidAttach: 2020/08/15 04:33:17.747603 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 04:33:17.747608 check for attachDone..... 1
uuidAttach: 2020/08/15 04:33:17.752783 check for attachDone..... 2
uuidAttach: 2020/08/15 04:33:17.757949 About to run AttachNodeCh: b  c  2V/UywZIRdm62ZbCBxkjCw== 41MDJv22S4a7VZ0reg+sXQ==
uuidAttach: 2020/08/15 04:33:17.757979 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.757986 check for attachDone..... 0
attachNode: 2020/08/15 04:33:17.757992 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/15 04:33:17.757999 Looping..... 0
grmgr: 2020/08/15 04:33:17.758013 Looping..... 1
grmgr: 2020/08/15 04:33:17.758125 Looping..... 2
grmgr: 2020/08/15 04:33:17.758309 Looping..... 3
grmgr: 2020/08/15 04:33:17.758486 Looping..... 4
grmgr: 2020/08/15 04:33:17.758666 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 04:33:17.758675 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 04:33:17.758682 goroutine about to start 3 cUID,pUID   2V/UywZIRdm62ZbCBxkjCw==  41MDJv22S4a7VZ0reg+sXQ==  
grmgr: 2020/08/15 04:33:17.759083 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 04:33:17.761314 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.412816ms
uuidAttach: 2020/08/15 04:33:17.763155 check for attachDone..... 1
DB: 2020/08/15 04:33:17.763515 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.171497ms
DB: 2020/08/15 04:33:17.767203 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.619871ms
uuidAttach: 2020/08/15 04:33:17.768311 check for attachDone..... 2
DB: 2020/08/15 04:33:17.771065 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.686603ms
AttachNode: main 2020/08/15 04:33:17.771078 FetchForUpdate: for parent    41MDJv22S4a7VZ0reg+sXQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 04:33:17.771083 ** Cache FetchForUpdate Cache Key Value: [41MDJv22S4a7VZ0reg+sXQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 04:33:17.771089 +++  Cache FetchItems for sortk A#G#:S UID: [41MDJv22S4a7VZ0reg+sXQ==] 
FetchNode: 2020/08/15 04:33:17.771095  node: 41MDJv22S4a7VZ0reg+sXQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 04:33:17.771294 FetchForUpdate: for child    2V/UywZIRdm62ZbCBxkjCw==
FetchForUpdate: 2020/08/15 04:33:17.771303 ** Cache FetchForUpdate Cache Key Value: [2V/UywZIRdm62ZbCBxkjCw==]   sortk: A#
fetchItems: 2020/08/15 04:33:17.771329 +++  Cache FetchItems for sortk A# UID: [2V/UywZIRdm62ZbCBxkjCw==] 
FetchNode: 2020/08/15 04:33:17.771343  node: 2V/UywZIRdm62ZbCBxkjCw== subKey: A#
uuidAttach: 2020/08/15 04:33:17.773430 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.773443 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.773448 continue x 
uuidAttach: 2020/08/15 04:33:17.773456 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.773462 check for attachDone..... 0
DB: 2020/08/15 04:33:17.774224 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.092392ms
DB: 2020/08/15 04:33:17.775171 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.76931ms
fetchItems: 2020/08/15 04:33:17.775382 +++  Cache FetchItems for sortk A# UID: [2V/UywZIRdm62ZbCBxkjCw==] 
FetchNode: 2020/08/15 04:33:17.775391  node: 2V/UywZIRdm62ZbCBxkjCw== subKey: A#
DB: 2020/08/15 04:33:17.778020 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.408511ms
DB: 2020/08/15 04:33:17.778748 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.323756ms
uuidAttach: 2020/08/15 04:33:17.779539 check for attachDone..... 1
DB: 2020/08/15 04:33:17.781600 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.545236ms
DB: 2020/08/15 04:33:17.781616 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.545236ms
uuidAttach: 2020/08/15 04:33:17.784707 check for attachDone..... 2
DB: 2020/08/15 04:33:17.784978 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.321404ms
DB: 2020/08/15 04:33:17.784991 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.321404ms
DB: 2020/08/15 04:33:17.788973 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.771372ms
uuidAttach: 2020/08/15 04:33:17.789874 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.789884 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.789888 continue x 
uuidAttach: 2020/08/15 04:33:17.789893 for loop finished 2  6 
uuidAttach: 2020/08/15 04:33:17.789898 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.789906 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.789910 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.789916 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.789920 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.789924 check for attachDone..... 0
DB: 2020/08/15 04:33:17.793339 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.055135ms
uuidAttach: 2020/08/15 04:33:17.795718 check for attachDone..... 1
DB: 2020/08/15 04:33:17.799730 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.845039ms
uuidAttach: 2020/08/15 04:33:17.800878 check for attachDone..... 2
DB: 2020/08/15 04:33:17.803277 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.249096ms
uuidAttach: 2020/08/15 04:33:17.806036 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.806049 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.806053 continue x 
uuidAttach: 2020/08/15 04:33:17.806062 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.806069 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.806074 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.806079 check for attachDone..... 0
DB: 2020/08/15 04:33:17.807610 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.601981ms
uuidAttach: 2020/08/15 04:33:17.811232 check for attachDone..... 1
DB: 2020/08/15 04:33:17.814809 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.758203ms
uuidAttach: 2020/08/15 04:33:17.816423 check for attachDone..... 2
DB: 2020/08/15 04:33:17.818914 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.619488ms
uuidAttach: 2020/08/15 04:33:17.821593 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.821734 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.821744 continue x 
uuidAttach: 2020/08/15 04:33:17.821751 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.821758 check for attachDone..... 0
DB: 2020/08/15 04:33:17.824281 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.860915ms
uuidAttach: 2020/08/15 04:33:17.826912 check for attachDone..... 1
DB: 2020/08/15 04:33:17.830510 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.748842ms
uuidAttach: 2020/08/15 04:33:17.832076 check for attachDone..... 2
DB: 2020/08/15 04:33:17.834214 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.282445ms
uuidAttach: 2020/08/15 04:33:17.837268 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.837294 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.837299 continue x 
uuidAttach: 2020/08/15 04:33:17.837304 for loop finished 2  6 
uuidAttach: 2020/08/15 04:33:17.837310 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.837317 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.837322 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.837328 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.837333 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.837337 check for attachDone..... 0
DB: 2020/08/15 04:33:17.841065 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.389574ms
uuidAttach: 2020/08/15 04:33:17.842493 check for attachDone..... 1
DB: 2020/08/15 04:33:17.845063 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.718329ms
Cache: 2020/08/15 04:33:17.845076 In SetUpredAvailable: pUid, tUID:  41MDJv22S4a7VZ0reg+sXQ== mHfWmB2xRjOpExYkPLjOwQ== A#G#:S
Cache: 2020/08/15 04:33:17.845080 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 04:33:17.847554 check for attachDone..... 2
DB: 2020/08/15 04:33:17.850104 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.988387ms
Unlock: 2020/08/15 04:33:17.850113 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 04:33:17.850118 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 04:33:17.852724 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.852736 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.852740 continue x 
uuidAttach: 2020/08/15 04:33:17.852746 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.852752 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.852757 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.852761 check for attachDone..... 0
DB: 2020/08/15 04:33:17.854354 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.159354ms
grmgr: 2020/08/15 04:33:17.854369 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 04:33:17.857916 check for attachDone..... 1
uuidAttach: 2020/08/15 04:33:17.857928 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 04:33:17.857935 check for attachDone..... 2
uuidAttach: 2020/08/15 04:33:17.863107 About to run AttachNodeCh: c  abc  41MDJv22S4a7VZ0reg+sXQ== SsFvxPgmTqe3fN7kHWJ/kw==
uuidAttach: 2020/08/15 04:33:17.863122 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.863127 check for attachDone..... 0
attachNode: 2020/08/15 04:33:17.863133 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/15 04:33:17.863139 Looping..... 0
grmgr: 2020/08/15 04:33:17.863291 Looping..... 1
grmgr: 2020/08/15 04:33:17.863476 Looping..... 2
grmgr: 2020/08/15 04:33:17.863650 Looping..... 3
grmgr: 2020/08/15 04:33:17.863828 Looping..... 4
grmgr: 2020/08/15 04:33:17.864003 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 04:33:17.864012 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 04:33:17.864017 goroutine about to start 4 cUID,pUID   41MDJv22S4a7VZ0reg+sXQ==  SsFvxPgmTqe3fN7kHWJ/kw==  
grmgr: 2020/08/15 04:33:17.864238 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 04:33:17.866550 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.473038ms
uuidAttach: 2020/08/15 04:33:17.868278 check for attachDone..... 1
DB: 2020/08/15 04:33:17.868902 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.322506ms
DB: 2020/08/15 04:33:17.873142 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.058203ms
uuidAttach: 2020/08/15 04:33:17.873632 check for attachDone..... 2
DB: 2020/08/15 04:33:17.877274 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.878288ms
AttachNode: main 2020/08/15 04:33:17.877287 FetchForUpdate: for parent    SsFvxPgmTqe3fN7kHWJ/kw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 04:33:17.877293 ** Cache FetchForUpdate Cache Key Value: [SsFvxPgmTqe3fN7kHWJ/kw==]   sortk: A#G#:S
fetchItems: 2020/08/15 04:33:17.877299 +++  Cache FetchItems for sortk A#G#:S UID: [SsFvxPgmTqe3fN7kHWJ/kw==] 
FetchNode: 2020/08/15 04:33:17.877303  node: SsFvxPgmTqe3fN7kHWJ/kw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 04:33:17.877505 FetchForUpdate: for child    41MDJv22S4a7VZ0reg+sXQ==
FetchForUpdate: 2020/08/15 04:33:17.877513 ** Cache FetchForUpdate Cache Key Value: [41MDJv22S4a7VZ0reg+sXQ==]   sortk: A#
fetchItems: 2020/08/15 04:33:17.877538 +++  Cache FetchItems for sortk A# UID: [41MDJv22S4a7VZ0reg+sXQ==] 
FetchNode: 2020/08/15 04:33:17.877551  node: 41MDJv22S4a7VZ0reg+sXQ== subKey: A#
uuidAttach: 2020/08/15 04:33:17.878807 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.878816 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.878819 continue x 
uuidAttach: 2020/08/15 04:33:17.878824 for loop finished 3  6 
uuidAttach: 2020/08/15 04:33:17.878829 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.878835 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.878839 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.878844 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.878849 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.878853 check for attachDone..... 0
DB: 2020/08/15 04:33:17.879771 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.406782ms
DB: 2020/08/15 04:33:17.880740 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.145598ms
DB: 2020/08/15 04:33:17.883622 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.46492ms
uuidAttach: 2020/08/15 04:33:17.884398 check for attachDone..... 1
uuidAttach: 2020/08/15 04:33:17.889572 check for attachDone..... 2
DB: 2020/08/15 04:33:17.890177 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.969346ms
DB: 2020/08/15 04:33:17.893677 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.250851ms
uuidAttach: 2020/08/15 04:33:17.894735 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.894745 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.894749 continue x 
uuidAttach: 2020/08/15 04:33:17.894754 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.894761 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.894765 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.894770 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.894775 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.894779 check for attachDone..... 0
DB: 2020/08/15 04:33:17.897946 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.692039ms
uuidAttach: 2020/08/15 04:33:17.899934 check for attachDone..... 1
DB: 2020/08/15 04:33:17.903997 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.562039ms
uuidAttach: 2020/08/15 04:33:17.905136 check for attachDone..... 2
DB: 2020/08/15 04:33:17.907970 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.54737ms
uuidAttach: 2020/08/15 04:33:17.910298 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.910308 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.910312 continue x 
uuidAttach: 2020/08/15 04:33:17.910316 for loop finished 3  6 
uuidAttach: 2020/08/15 04:33:17.910322 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.910328 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.910333 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.910338 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.910343 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.910347 check for attachDone..... 0
DB: 2020/08/15 04:33:17.913644 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.151136ms
uuidAttach: 2020/08/15 04:33:17.915520 check for attachDone..... 1
DB: 2020/08/15 04:33:17.920033 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.919912ms
uuidAttach: 2020/08/15 04:33:17.920987 check for attachDone..... 2
DB: 2020/08/15 04:33:17.924100 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.303385ms
uuidAttach: 2020/08/15 04:33:17.926149 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.926159 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.926163 continue x 
uuidAttach: 2020/08/15 04:33:17.926169 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.926176 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.926181 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.926186 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.926191 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.926195 check for attachDone..... 0
DB: 2020/08/15 04:33:17.927922 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.755931ms
DB: 2020/08/15 04:33:17.931530 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.555195ms
Cache: 2020/08/15 04:33:17.931545 In SetUpredAvailable: pUid, tUID:  SsFvxPgmTqe3fN7kHWJ/kw== SsFvxPgmTqe3fN7kHWJ/kw== A#G#:S
Cache: 2020/08/15 04:33:17.931551 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 04:33:17.931919 check for attachDone..... 1
DB: 2020/08/15 04:33:17.935313 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.727573ms
Unlock: 2020/08/15 04:33:17.935323 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 04:33:17.935327 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 04:33:17.937114 check for attachDone..... 2
DB: 2020/08/15 04:33:17.939389 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.007933ms
grmgr: 2020/08/15 04:33:17.939406 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 04:33:17.942298 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.942307 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.942311 continue x 
uuidAttach: 2020/08/15 04:33:17.942316 for loop finished 3  6 
uuidAttach: 2020/08/15 04:33:17.942322 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.942328 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.942342 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.942348 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.942353 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.942357 check for attachDone..... 0
uuidAttach: 2020/08/15 04:33:17.942362 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 04:33:17.942378 check for attachDone..... 1
uuidAttach: 2020/08/15 04:33:17.947559 check for attachDone..... 2
uuidAttach: 2020/08/15 04:33:17.952737 About to run AttachNodeCh: b  abc  2V/UywZIRdm62ZbCBxkjCw== SsFvxPgmTqe3fN7kHWJ/kw==
uuidAttach: 2020/08/15 04:33:17.952753 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.952759 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.952763 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.952769 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.952773 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.952778 check for attachDone..... 0
attachNode: 2020/08/15 04:33:17.952784 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/15 04:33:17.952790 Looping..... 0
grmgr: 2020/08/15 04:33:17.952911 Looping..... 1
grmgr: 2020/08/15 04:33:17.953084 Looping..... 2
grmgr: 2020/08/15 04:33:17.953262 Looping..... 3
grmgr: 2020/08/15 04:33:17.953444 Looping..... 4
grmgr: 2020/08/15 04:33:17.953611 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 04:33:17.953620 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 04:33:17.953626 goroutine about to start 5 cUID,pUID   2V/UywZIRdm62ZbCBxkjCw==  SsFvxPgmTqe3fN7kHWJ/kw==  
grmgr: 2020/08/15 04:33:17.954147 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 04:33:17.956356 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.429329ms
uuidAttach: 2020/08/15 04:33:17.957940 check for attachDone..... 1
DB: 2020/08/15 04:33:17.959329 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.942743ms
DB: 2020/08/15 04:33:17.963252 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.858353ms
uuidAttach: 2020/08/15 04:33:17.963907 check for attachDone..... 2
DB: 2020/08/15 04:33:17.967473 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.844852ms
AttachNode: main 2020/08/15 04:33:17.967486 FetchForUpdate: for parent    SsFvxPgmTqe3fN7kHWJ/kw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 04:33:17.967491 ** Cache FetchForUpdate Cache Key Value: [SsFvxPgmTqe3fN7kHWJ/kw==]   sortk: A#G#:S
fetchItems: 2020/08/15 04:33:17.967496 +++  Cache FetchItems for sortk A#G#:S UID: [SsFvxPgmTqe3fN7kHWJ/kw==] 
FetchNode: 2020/08/15 04:33:17.967501  node: SsFvxPgmTqe3fN7kHWJ/kw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 04:33:17.967708 FetchForUpdate: for child    2V/UywZIRdm62ZbCBxkjCw==
FetchForUpdate: 2020/08/15 04:33:17.967755 ** Cache FetchForUpdate Cache Key Value: [2V/UywZIRdm62ZbCBxkjCw==]   sortk: A#
fetchItems: 2020/08/15 04:33:17.967761 +++  Cache FetchItems for sortk A# UID: [2V/UywZIRdm62ZbCBxkjCw==] 
FetchNode: 2020/08/15 04:33:17.967774  node: 2V/UywZIRdm62ZbCBxkjCw== subKey: A#
uuidAttach: 2020/08/15 04:33:17.969075 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969085 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.969089 continue x 
uuidAttach: 2020/08/15 04:33:17.969094 for loop finished 4  6 
uuidAttach: 2020/08/15 04:33:17.969099 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969107 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969121 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969126 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969131 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969137 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969142 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969147 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969151 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969156 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969161 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.969165 check for attachDone..... 0
DB: 2020/08/15 04:33:17.970172 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.636015ms
DB: 2020/08/15 04:33:17.971626 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.807276ms
DB: 2020/08/15 04:33:17.974169 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.483876ms
uuidAttach: 2020/08/15 04:33:17.974364 check for attachDone..... 1
DB: 2020/08/15 04:33:17.977688 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.484122ms
DB: 2020/08/15 04:33:17.977706 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.484122ms
uuidAttach: 2020/08/15 04:33:17.979552 check for attachDone..... 2
DB: 2020/08/15 04:33:17.981351 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.606886ms
DB: 2020/08/15 04:33:17.981367 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.606886ms
uuidAttach: 2020/08/15 04:33:17.984719 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984730 	dontrun = true
uuidAttach: 2020/08/15 04:33:17.984734 continue x 
uuidAttach: 2020/08/15 04:33:17.984739 for loop finished 4  6 
uuidAttach: 2020/08/15 04:33:17.984744 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984751 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984756 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984761 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984766 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984771 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984775 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984780 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984785 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984791 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984795 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:17.984800 check for attachDone..... 0
DB: 2020/08/15 04:33:17.985360 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.772461ms
DB: 2020/08/15 04:33:17.989090 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.534796ms
uuidAttach: 2020/08/15 04:33:17.989881 check for attachDone..... 1
uuidAttach: 2020/08/15 04:33:17.995048 check for attachDone..... 2
DB: 2020/08/15 04:33:17.995925 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.27737ms
DB: 2020/08/15 04:33:18.000141 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.954706ms
uuidAttach: 2020/08/15 04:33:18.000930 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.000945 	dontrun = true
uuidAttach: 2020/08/15 04:33:18.000949 continue x 
uuidAttach: 2020/08/15 04:33:18.000953 for loop finished 4  6 
uuidAttach: 2020/08/15 04:33:18.000959 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.000966 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.000971 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.000976 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.000981 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.000986 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.000991 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.000996 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.001001 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.001006 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.001010 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.001014 check for attachDone..... 0
DB: 2020/08/15 04:33:18.004412 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.67876ms
uuidAttach: 2020/08/15 04:33:18.006164 check for attachDone..... 1
DB: 2020/08/15 04:33:18.010395 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.459526ms
uuidAttach: 2020/08/15 04:33:18.011371 check for attachDone..... 2
DB: 2020/08/15 04:33:18.014287 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.347801ms
uuidAttach: 2020/08/15 04:33:18.016536 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016547 	dontrun = true
uuidAttach: 2020/08/15 04:33:18.016551 continue x 
uuidAttach: 2020/08/15 04:33:18.016557 for loop finished 4  6 
uuidAttach: 2020/08/15 04:33:18.016562 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016569 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016574 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016579 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016584 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016589 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016594 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016603 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016608 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016613 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016618 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.016622 check for attachDone..... 0
DB: 2020/08/15 04:33:18.018392 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.60151ms
uuidAttach: 2020/08/15 04:33:18.021737 check for attachDone..... 1
DB: 2020/08/15 04:33:18.024731 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.836153ms
uuidAttach: 2020/08/15 04:33:18.026938 check for attachDone..... 2
DB: 2020/08/15 04:33:18.028680 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.343281ms
DB: 2020/08/15 04:33:18.032286 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.524066ms
uuidAttach: 2020/08/15 04:33:18.032642 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032669 	dontrun = true
uuidAttach: 2020/08/15 04:33:18.032674 continue x 
uuidAttach: 2020/08/15 04:33:18.032678 for loop finished 4  6 
uuidAttach: 2020/08/15 04:33:18.032684 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032691 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032696 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032701 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032705 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032711 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032715 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032720 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032729 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032734 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032739 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.032743 check for attachDone..... 0
DB: 2020/08/15 04:33:18.035669 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.327524ms
Cache: 2020/08/15 04:33:18.035699 In SetUpredAvailable: pUid, tUID:  SsFvxPgmTqe3fN7kHWJ/kw== iSRwX4sKQjuPLPKunby+PA== A#G#:S
Cache: 2020/08/15 04:33:18.035706 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 04:33:18.037905 check for attachDone..... 1
DB: 2020/08/15 04:33:18.039064 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.320168ms
Unlock: 2020/08/15 04:33:18.039073 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 04:33:18.039077 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 04:33:18.043090 check for attachDone..... 2
DB: 2020/08/15 04:33:18.043567 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.43146ms
grmgr: 2020/08/15 04:33:18.043582 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 04:33:18.048476 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048485 	dontrun = true
uuidAttach: 2020/08/15 04:33:18.048500 continue x 
uuidAttach: 2020/08/15 04:33:18.048504 for loop finished 4  6 
uuidAttach: 2020/08/15 04:33:18.048510 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048516 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048520 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048525 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048530 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048535 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048540 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048545 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048549 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048563 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048568 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 04:33:18.048572 check for attachDone..... 0
uuidAttach: 2020/08/15 04:33:18.048577 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 04:33:18.048581 check for attachDone..... 1
uuidAttach: 2020/08/15 04:33:18.053757 check for attachDone..... 2
uuidAttach: 2020/08/15 04:33:18.058944 About to run AttachNodeCh: c  b  41MDJv22S4a7VZ0reg+sXQ== 2V/UywZIRdm62ZbCBxkjCw==
uuidAttach: 2020/08/15 04:33:18.059052 for loop finished 5  6 
uuidAttach: 2020/08/15 04:33:18.059060  break....
attachNode: 2020/08/15 04:33:18.059066 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/15 04:33:18.059072 Looping..... 0
grmgr: 2020/08/15 04:33:18.059289 Looping..... 1
grmgr: 2020/08/15 04:33:18.059473 Looping..... 2
grmgr: 2020/08/15 04:33:18.059644 Looping..... 3
grmgr: 2020/08/15 04:33:18.059819 Looping..... 4
grmgr: 2020/08/15 04:33:18.059994 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 04:33:18.060002 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 04:33:18.060008 goroutine about to start 6 cUID,pUID   41MDJv22S4a7VZ0reg+sXQ==  2V/UywZIRdm62ZbCBxkjCw==  
rdfLoader: 2020/08/15 04:33:18.060014 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/15 04:33:18.060586 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 04:33:18.063673 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.319119ms
DB: 2020/08/15 04:33:18.066776 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.04681ms
DB: 2020/08/15 04:33:18.070494 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.665116ms
DB: 2020/08/15 04:33:18.074777 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.964334ms
AttachNode: main 2020/08/15 04:33:18.074906 FetchForUpdate: for parent    2V/UywZIRdm62ZbCBxkjCw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 04:33:18.074917 ** Cache FetchForUpdate Cache Key Value: [2V/UywZIRdm62ZbCBxkjCw==]   sortk: A#G#:S
fetchItems: 2020/08/15 04:33:18.074923 +++  Cache FetchItems for sortk A#G#:S UID: [2V/UywZIRdm62ZbCBxkjCw==] 
FetchNode: 2020/08/15 04:33:18.074930  node: 2V/UywZIRdm62ZbCBxkjCw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 04:33:18.075118 FetchForUpdate: for child    41MDJv22S4a7VZ0reg+sXQ==
FetchForUpdate: 2020/08/15 04:33:18.075127 ** Cache FetchForUpdate Cache Key Value: [41MDJv22S4a7VZ0reg+sXQ==]   sortk: A#
fetchItems: 2020/08/15 04:33:18.075133 +++  Cache FetchItems for sortk A# UID: [41MDJv22S4a7VZ0reg+sXQ==] 
FetchNode: 2020/08/15 04:33:18.075145  node: 41MDJv22S4a7VZ0reg+sXQ== subKey: A#
DB: 2020/08/15 04:33:18.077760 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.791817ms
DB: 2020/08/15 04:33:18.078856 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.647892ms
DB: 2020/08/15 04:33:18.082740 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.439244ms
DB: 2020/08/15 04:33:18.086376 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.605022ms
DB: 2020/08/15 04:33:18.086392 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.605022ms
DB: 2020/08/15 04:33:18.089682 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.257082ms
DB: 2020/08/15 04:33:18.089697 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.257082ms
DB: 2020/08/15 04:33:18.095036 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.040668ms
DB: 2020/08/15 04:33:18.099038 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.676137ms
DB: 2020/08/15 04:33:18.105675 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.101042ms
DB: 2020/08/15 04:33:18.109270 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.295481ms
DB: 2020/08/15 04:33:18.113618 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.646474ms
DB: 2020/08/15 04:33:18.120516 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.271468ms
DB: 2020/08/15 04:33:18.124332 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.36411ms
DB: 2020/08/15 04:33:18.128408 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.600069ms
DB: 2020/08/15 04:33:18.137590 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.603861ms
DB: 2020/08/15 04:33:18.143790 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.979119ms
DB: 2020/08/15 04:33:18.148141 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.230985ms
DB: 2020/08/15 04:33:18.151791 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.596645ms
Cache: 2020/08/15 04:33:18.151803 In SetUpredAvailable: pUid, tUID:  2V/UywZIRdm62ZbCBxkjCw== rcOzZ7gSSOOIN7U6YVCWgw== A#G#:S
Cache: 2020/08/15 04:33:18.151808 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 04:33:18.155640 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.778765ms
Unlock: 2020/08/15 04:33:18.155767 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 04:33:18.155789 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 04:33:18.159765 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.89066ms
uuidAttach: 2020/08/15 04:33:18.159782 received on attachDoneCh: uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/15 04:33:18.159791 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/15 04:33:18.159797 saveNode finished waiting...exiting
rdfLoader: 2020/08/15 04:33:18.159802 cancel contexts
rdfLoader: 2020/08/15 04:33:18.159808 wait for autonomous goroutines to end
errlog: 2020/08/15 04:33:18.159813 Powering down...
grmgr: 2020/08/15 04:33:18.159817 Powering down...
rdfuuid: 2020/08/15 04:33:18.159822 Powering down...
rdfLoader: 2020/08/15 04:33:18.159826 loader exists.....
DB:2020/08/15 05:00:59 log.go:18: ===============================================================================
errlog: 2020/08/15 05:00:59.956301 Powering on...
rdfLoader: 2020/08/15 05:00:59.956342 saveNode started......
rdfLoader: 2020/08/15 05:00:59.956347 define saveNode limiter......
rdfuuid: 2020/08/15 05:00:59.956355 Powering on...
grmgr: 2020/08/15 05:00:59.956373 Powering on...
rdfLoader: 2020/08/15 05:00:59.956383  principle goroutines started 
RDFreader: 2020/08/15 05:00:59.956403 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 05:00:59.956417 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 05:00:59.956423 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 05:00:59.956429 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 05:00:59.956434 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 05:00:59.956440 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 05:00:59.956444 spo read:      
RDFreader: 2020/08/15 05:00:59.956449 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 05:00:59.956454 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 05:00:59.956464 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 05:00:59.956469 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 05:00:59.956473 spo read:      
RDFreader: 2020/08/15 05:00:59.956478 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 05:00:59.956483 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 05:00:59.956488 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 05:00:59.956493 spo read:  b  Age  "58"
RDFreader: 2020/08/15 05:00:59.956498 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 05:00:59.956502 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 05:00:59.956508 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 05:00:59.956512 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 05:00:59.956517 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 05:00:59.956521 spo read:      
RDFreader: 2020/08/15 05:00:59.956526 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 05:00:59.956530 Send node batch on channel verifyCh
RDFreader: 2020/08/15 05:00:59.956535 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 05:00:59.956538 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 05:00:59.956543 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 05:00:59.956550 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 05:00:59.956555 spo read:  c  Age  "67"
RDFreader: 2020/08/15 05:00:59.956560 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 05:00:59.956565 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 05:00:59.956569 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 05:00:59.956574 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 05:00:59.956580 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 05:00:59.956585 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 05:00:59.956593 spo read:      
RDFreader: 2020/08/15 05:00:59.956599 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 05:00:59.956604 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 05:00:59.956609 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 05:00:59.956613 spo read:  d  Age  "36"
RDFreader: 2020/08/15 05:00:59.956618 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 05:00:59.956624 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 05:00:59.956628 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 05:00:59.956632 close verify channel
rdfLoader: 2020/08/15 05:00:59.956636 wait for goroutines to end
rdfLoader: 2020/08/15 05:00:59.956640 verify started....
rdfLoader: 2020/08/15 05:00:59.956644 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 05:00:59.956648 .  getType..
rdfLoader: 2020/08/15 05:00:59.956651 node.TyName : [Person]
DB: 2020/08/15 05:01:00.028633 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 71.91897ms
grmgr: 2020/08/15 05:01:00.028785 Looping..... 0
grmgr: 2020/08/15 05:01:00.028828 Looping..... 1
grmgr: 2020/08/15 05:01:00.028843 Looping..... 2
grmgr: 2020/08/15 05:01:00.029012 Looping..... 3
grmgr: 2020/08/15 05:01:00.029189 Looping..... 4
grmgr: 2020/08/15 05:01:00.029368 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 05:01:00.029379 .  getType..
rdfLoader: 2020/08/15 05:01:00.029383 node.TyName : [Person]
grmgr: 2020/08/15 05:01:00.029389 Looping..... 0
unmarshalRDF2020/08/15 05:01:00.029401 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:01:00.029411 Looping..... 1
grmgr: 2020/08/15 05:01:00.029416 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 05:01:00.029420 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 05:01:00.029428 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 05:01:00.029432 .  getType..
rdfLoader: 2020/08/15 05:01:00.029436 node.TyName : [Person]
grmgr: 2020/08/15 05:01:00.029441 Looping..... 0
rdfLoader: 2020/08/15 05:01:00.029451 Add to SS . [Honda]
rdfLoader: 2020/08/15 05:01:00.029456 Add to SS . [Alfa]
uuidAttach: 2020/08/15 05:01:00.029494 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.029522 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:01:00.029560 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:01:00.029566 Exit  unmarshalRDF. 
saveNode: 2020/08/15 05:01:00.029572 read from saveCH channel 1 
unmarshalRDF2020/08/15 05:01:00.029581 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:01:00.029607 Looping..... 1
grmgr: 2020/08/15 05:01:00.029612 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 05:01:00.029617 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 05:01:00.029622 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 05:01:00.029626 Looping..... 0
rdfLoader: 2020/08/15 05:01:00.029635 Add to SS . [Honda]
rdfLoader: 2020/08/15 05:01:00.029639 Add to SS . [VW Golf]
uuidAttach: 2020/08/15 05:01:00.029653 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.029659 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:01:00.029687 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:01:00.029691 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 05:01:00.029697 .  getType..
rdfLoader: 2020/08/15 05:01:00.029701 node.TyName : [Person]
unmarshalRDF2020/08/15 05:01:00.029709 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:01:00.029720 Looping..... 1
rdfLoader: 2020/08/15 05:01:00.029728 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 05:01:00.029733 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 05:01:00.029737 Add to SS . [Honda]
uuidAttach: 2020/08/15 05:01:00.029759 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.029766 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:01:00.029792 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:01:00.029797 Exit  unmarshalRDF. 
grmgr: 2020/08/15 05:01:00.029823 Looping..... 2
grmgr: 2020/08/15 05:01:00.030004 Looping..... 3
grmgr: 2020/08/15 05:01:00.030180 Looping..... 4
grmgr: 2020/08/15 05:01:00.030358 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 05:01:00.030366 Looping..... 0
saveNode: 2020/08/15 05:01:00.030372 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:01:00.030378 read from saveCH channel 2 
grmgr: 2020/08/15 05:01:00.030408 Looping..... 1
SaveRDFNode: xxx 2020/08/15 05:01:00.030419 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.030430 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.030436 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.030441 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.030448 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.030454 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.030459 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:01:00.030463 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:01:00.030471 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0000176e0)}
SaveRDFNode: 2020/08/15 05:01:00.030475 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:01:00.030485 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.030489 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.030495 UID received  : TxVReGbLSe6J0VjuJp/xkA==
grmgr: 2020/08/15 05:01:00.030765 Looping..... 2
grmgr: 2020/08/15 05:01:00.030949 Looping..... 3
grmgr: 2020/08/15 05:01:00.031126 Looping..... 4
grmgr: 2020/08/15 05:01:00.031341 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 05:01:00.031354 Looping..... 0
unmarshalRDF2020/08/15 05:01:00.031372 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:01:00.031383 Looping..... 1
rdfLoader: 2020/08/15 05:01:00.031393 Add to SS . [Bentley]
unmarshalRDF2020/08/15 05:01:00.031432 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:01:00.031437 Exit  unmarshalRDF. 
grmgr: 2020/08/15 05:01:00.031447 Looping..... 2
grmgr: 2020/08/15 05:01:00.031493 Looping..... 3
grmgr: 2020/08/15 05:01:00.031678 Looping..... 4
grmgr: 2020/08/15 05:01:00.031858 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 05:01:00.031867 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/15 05:01:00.031872 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 05:01:00.031876 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/15 05:01:00.031883 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:01:00.031888 read from saveCH channel 3 
grmgr: 2020/08/15 05:01:00.031893 Looping..... 0
grmgr: 2020/08/15 05:01:00.031921 Looping..... 1
grmgr: 2020/08/15 05:01:00.031926 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 05:01:00.031930 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 05:01:00.031939 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.031945 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.031952 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.031958 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.031970 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.031977 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.031983 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:01:00.031986 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:01:00.031992 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017e00)}
SaveRDFNode: 2020/08/15 05:01:00.031997 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:01:00.032015 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.032019 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.032025 UID received  : Srl9PpgLQrqxEPw8g8CqzA==
DB: 2020/08/15 05:01:00.039968 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.426514ms
DB: 2020/08/15 05:01:00.043180 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.160122ms
DB: 2020/08/15 05:01:00.046420 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.203719ms
DB: 2020/08/15 05:01:00.049741 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.283725ms
DB: 2020/08/15 05:01:00.052813 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.035601ms
SaveRDFNode: 2020/08/15 05:01:00.052847 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000176e0)}
rdfUIDdb: 2020/08/15 05:01:00.052856 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.052860 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.052866 Received UID: X18=
SaveRDFNode: 2020/08/15 05:01:00.052879 a: = db.Item{PKey:[]uint8{0x4f, 0x15, 0x51, 0x78, 0x66, 0xcb, 0x49, 0xee, 0x89, 0xd1, 0x58, 0xee, 0x26, 0x9f, 0xf1, 0x90}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:01:00.056232 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.319746ms
SaveRDFNode: 2020/08/15 05:01:00.056247 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000176e0)}
rdfUIDdb: 2020/08/15 05:01:00.056254 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.056258 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.056264 Received UID: X18=
SaveRDFNode: 2020/08/15 05:01:00.056276 a: = db.Item{PKey:[]uint8{0x4f, 0x15, 0x51, 0x78, 0x66, 0xcb, 0x49, 0xee, 0x89, 0xd1, 0x58, 0xee, 0x26, 0x9f, 0xf1, 0x90}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:01:00.056652 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 24.596924ms
DB: 2020/08/15 05:01:00.059872 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.53924ms
SaveRDFNode: 2020/08/15 05:01:00.059884 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:01:00.059892 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 05:01:00.059898 Send ack to waiting saveNode...
saveNode: 2020/08/15 05:01:00.059903 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:01:00.059911 read from saveCH channel 4 
grmgr: 2020/08/15 05:01:00.059916 Looping..... 0
grmgr: 2020/08/15 05:01:00.059966 Looping..... 1
grmgr: 2020/08/15 05:01:00.059974 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 05:01:00.059978 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 05:01:00.059988 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.059994 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.060017 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.060023 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.060029 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.060035 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.060041 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:01:00.060045 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:01:00.060051 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000372c60)}
SaveRDFNode: 2020/08/15 05:01:00.060055 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:01:00.060064 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.060068 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.060074 UID received  : MMc4hG2TQxGeSiXWgiPUJg==
DB: 2020/08/15 05:01:00.060363 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.678684ms
DB: 2020/08/15 05:01:00.063372 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.269478ms
DB: 2020/08/15 05:01:00.063759 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.360984ms
DB: 2020/08/15 05:01:00.066537 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.131608ms
DB: 2020/08/15 05:01:00.066914 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.122968ms
DB: 2020/08/15 05:01:00.069598 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.026661ms
DB: 2020/08/15 05:01:00.070282 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.335991ms
SaveRDFNode: 2020/08/15 05:01:00.070296 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017e00)}
rdfUIDdb: 2020/08/15 05:01:00.070304 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.070308 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.070314 Received UID: X18=
SaveRDFNode: 2020/08/15 05:01:00.070326 a: = db.Item{PKey:[]uint8{0x4a, 0xb9, 0x7d, 0x3e, 0x98, 0xb, 0x42, 0xba, 0xb1, 0x10, 0xfc, 0x3c, 0x83, 0xc0, 0xaa, 0xcc}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:01:00.072680 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.04537ms
DB: 2020/08/15 05:01:00.073553 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.197234ms
SaveRDFNode: 2020/08/15 05:01:00.073566 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017e00)}
rdfUIDdb: 2020/08/15 05:01:00.073572 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.073576 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.073582 Received UID: X18=
SaveRDFNode: 2020/08/15 05:01:00.073592 a: = db.Item{PKey:[]uint8{0x4a, 0xb9, 0x7d, 0x3e, 0x98, 0xb, 0x42, 0xba, 0xb1, 0x10, 0xfc, 0x3c, 0x83, 0xc0, 0xaa, 0xcc}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:01:00.075924 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.211885ms
SaveRDFNode: 2020/08/15 05:01:00.075938 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372c60)}
rdfUIDdb: 2020/08/15 05:01:00.075944 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.075957 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.075963 Received UID: X18=
SaveRDFNode: 2020/08/15 05:01:00.075973 a: = db.Item{PKey:[]uint8{0x30, 0xc7, 0x38, 0x84, 0x6d, 0x93, 0x43, 0x11, 0x9e, 0x4a, 0x25, 0xd6, 0x82, 0x23, 0xd4, 0x26}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:01:00.076844 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.20408ms
SaveRDFNode: 2020/08/15 05:01:00.076854 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:01:00.076863 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 05:01:00.076868 Send ack to waiting saveNode...
saveNode: 2020/08/15 05:01:00.076874 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/15 05:01:00.076879 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/15 05:01:00.076913 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.076919 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.076926 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.076932 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.076938 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.076943 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:01:00.076952 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:01:00.076956 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:01:00.076962 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc00018a300)}
SaveRDFNode: 2020/08/15 05:01:00.076966 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:01:00.076976 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.076980 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.076985 UID received  : epe0qd8RRv215+ArVJXpDg==
grmgr: 2020/08/15 05:01:00.077190 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 05:01:00.079083 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.076105ms
SaveRDFNode: 2020/08/15 05:01:00.079097 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372c60)}
rdfUIDdb: 2020/08/15 05:01:00.079104 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.079108 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.079114 Received UID: X18=
SaveRDFNode: 2020/08/15 05:01:00.079125 a: = db.Item{PKey:[]uint8{0x30, 0xc7, 0x38, 0x84, 0x6d, 0x93, 0x43, 0x11, 0x9e, 0x4a, 0x25, 0xd6, 0x82, 0x23, 0xd4, 0x26}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:01:00.080173 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.143141ms
DB: 2020/08/15 05:01:00.082270 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.108399ms
SaveRDFNode: 2020/08/15 05:01:00.082283 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:01:00.082291 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 05:01:00.083394 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.185437ms
DB: 2020/08/15 05:01:00.087265 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.832017ms
DB: 2020/08/15 05:01:00.092579 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.268555ms
DB: 2020/08/15 05:01:00.095733 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.115363ms
SaveRDFNode: 2020/08/15 05:01:00.095759 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00018a300)}
rdfUIDdb: 2020/08/15 05:01:00.095767 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.095771 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.095777 Received UID: X18=
SaveRDFNode: 2020/08/15 05:01:00.095790 a: = db.Item{PKey:[]uint8{0x7a, 0x97, 0xb4, 0xa9, 0xdf, 0x11, 0x46, 0xfd, 0xb5, 0xe7, 0xe0, 0x2b, 0x54, 0x95, 0xe9, 0xe}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:01:00.099164 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.339261ms
SaveRDFNode: 2020/08/15 05:01:00.099180 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00018a300)}
rdfUIDdb: 2020/08/15 05:01:00.099187 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:01:00.099191 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:01:00.099197 Received UID: X18=
SaveRDFNode: 2020/08/15 05:01:00.099208 a: = db.Item{PKey:[]uint8{0x7a, 0x97, 0xb4, 0xa9, 0xdf, 0x11, 0x46, 0xfd, 0xb5, 0xe7, 0xe0, 0x2b, 0x54, 0x95, 0xe9, 0xe}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:01:00.102434 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.194227ms
SaveRDFNode: 2020/08/15 05:01:00.102446 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 05:01:00.102454 saveNode finished waiting...exiting
grmgr: 2020/08/15 05:01:00.102461 EndCh received for saveNode. rCnt = 0 
uuidAttach: 2020/08/15 05:01:00.102473 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.102478 check for attachDone..... 0
uuidAttach: 2020/08/15 05:01:00.107649 check for attachDone..... 1
uuidAttach: 2020/08/15 05:01:00.112845 check for attachDone..... 2
uuidAttach: 2020/08/15 05:01:00.118031 About to run AttachNodeCh: abc  b  TxVReGbLSe6J0VjuJp/xkA== Srl9PpgLQrqxEPw8g8CqzA==
uuidAttach: 2020/08/15 05:01:00.118059 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.118064 check for attachDone..... 0
attachNode: 2020/08/15 05:01:00.118071 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/15 05:01:00.118077 Looping..... 0
grmgr: 2020/08/15 05:01:00.118205 Looping..... 1
grmgr: 2020/08/15 05:01:00.118383 Looping..... 2
grmgr: 2020/08/15 05:01:00.118561 Looping..... 3
grmgr: 2020/08/15 05:01:00.118749 Looping..... 4
grmgr: 2020/08/15 05:01:00.118920 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:01:00.118930 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:01:00.118936 goroutine about to start 1 cUID,pUID   TxVReGbLSe6J0VjuJp/xkA==  Srl9PpgLQrqxEPw8g8CqzA==  
grmgr: 2020/08/15 05:01:00.119239 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:01:00.121402 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.382669ms
uuidAttach: 2020/08/15 05:01:00.123220 check for attachDone..... 1
DB: 2020/08/15 05:01:00.123759 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.322249ms
DB: 2020/08/15 05:01:00.127222 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.403819ms
uuidAttach: 2020/08/15 05:01:00.128420 check for attachDone..... 2
uuidAttach: 2020/08/15 05:01:00.133610 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.133620 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.133624 continue x 
uuidAttach: 2020/08/15 05:01:00.133629 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.133635 check for attachDone..... 0
DB: 2020/08/15 05:01:00.134682 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.805575ms
AttachNode: main 2020/08/15 05:01:00.134704 FetchForUpdate: for parent    Srl9PpgLQrqxEPw8g8CqzA==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:01:00.134709 ** Cache FetchForUpdate Cache Key Value: [Srl9PpgLQrqxEPw8g8CqzA==]   sortk: A#G#:S
FetchNode: 2020/08/15 05:01:00.134714  node: Srl9PpgLQrqxEPw8g8CqzA== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:01:00.134908 FetchForUpdate: for child    TxVReGbLSe6J0VjuJp/xkA==
FetchForUpdate: 2020/08/15 05:01:00.134917 ** Cache FetchForUpdate Cache Key Value: [TxVReGbLSe6J0VjuJp/xkA==]   sortk: A#
FetchNode: 2020/08/15 05:01:00.134930  node: TxVReGbLSe6J0VjuJp/xkA== subKey: A#
DB: 2020/08/15 05:01:00.137055 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.308484ms
FetchForUpdate: 2020/08/15 05:01:00.137103 len(nb): 1
fetchItems: 2020/08/15 05:01:00.137110 +++  Cache FetchItems for sortk A#G#:S UID: [Srl9PpgLQrqxEPw8g8CqzA==] 
FetchNode: 2020/08/15 05:01:00.137114  node: Srl9PpgLQrqxEPw8g8CqzA== subKey: A#G#:S
DB: 2020/08/15 05:01:00.137570 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.598599ms
FetchForUpdate: 2020/08/15 05:01:00.137686 len(nb): 7
fetchItems: 2020/08/15 05:01:00.137695 +++  Cache FetchItems for sortk A# UID: [TxVReGbLSe6J0VjuJp/xkA==] 
FetchNode: 2020/08/15 05:01:00.137699  node: TxVReGbLSe6J0VjuJp/xkA== subKey: A#
uuidAttach: 2020/08/15 05:01:00.138802 check for attachDone..... 1
DB: 2020/08/15 05:01:00.139302 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.15917ms
DB: 2020/08/15 05:01:00.140885 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.155175ms
DB: 2020/08/15 05:01:00.143545 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.648291ms
uuidAttach: 2020/08/15 05:01:00.145198 check for attachDone..... 2
uuidAttach: 2020/08/15 05:01:00.150349 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.150360 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.150364 continue x 
uuidAttach: 2020/08/15 05:01:00.150369 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.150374 check for attachDone..... 0
DB: 2020/08/15 05:01:00.150646 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.66841ms
DB: 2020/08/15 05:01:00.153999 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.186717ms
uuidAttach: 2020/08/15 05:01:00.155523 check for attachDone..... 1
DB: 2020/08/15 05:01:00.157656 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.276873ms
uuidAttach: 2020/08/15 05:01:00.160676 check for attachDone..... 2
DB: 2020/08/15 05:01:00.163611 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.647127ms
uuidAttach: 2020/08/15 05:01:00.165833 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.165844 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.165848 continue x 
uuidAttach: 2020/08/15 05:01:00.165853 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.165858 check for attachDone..... 0
DB: 2020/08/15 05:01:00.167183 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.254108ms
DB: 2020/08/15 05:01:00.171113 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.599468ms
uuidAttach: 2020/08/15 05:01:00.172155 check for attachDone..... 1
DB: 2020/08/15 05:01:00.177107 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.453903ms
uuidAttach: 2020/08/15 05:01:00.178350 check for attachDone..... 2
DB: 2020/08/15 05:01:00.181504 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.805127ms
uuidAttach: 2020/08/15 05:01:00.183501 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.183511 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.183515 continue x 
uuidAttach: 2020/08/15 05:01:00.183520 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.183525 check for attachDone..... 0
DB: 2020/08/15 05:01:00.185360 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.535896ms
uuidAttach: 2020/08/15 05:01:00.188671 check for attachDone..... 1
DB: 2020/08/15 05:01:00.188789 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.245012ms
Cache: 2020/08/15 05:01:00.188800 In SetUpredAvailable: pUid, tUID:  Srl9PpgLQrqxEPw8g8CqzA== Srl9PpgLQrqxEPw8g8CqzA== A#G#:S
Cache: 2020/08/15 05:01:00.188805 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 05:01:00.192170 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.309303ms
Unlock: 2020/08/15 05:01:00.192180 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:01:00.192185 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:01:00.193822 check for attachDone..... 2
DB: 2020/08/15 05:01:00.195990 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.746669ms
grmgr: 2020/08/15 05:01:00.196005 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:01:00.198888 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.198900 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.198904 continue x 
uuidAttach: 2020/08/15 05:01:00.198909 for loop finished 0  6 
uuidAttach: 2020/08/15 05:01:00.198915 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.198921 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.198926 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.198930 check for attachDone..... 0
uuidAttach: 2020/08/15 05:01:00.198935 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 05:01:00.198940 check for attachDone..... 1
uuidAttach: 2020/08/15 05:01:00.204104 check for attachDone..... 2
uuidAttach: 2020/08/15 05:01:00.209256 About to run AttachNodeCh: abc  c  TxVReGbLSe6J0VjuJp/xkA== MMc4hG2TQxGeSiXWgiPUJg==
uuidAttach: 2020/08/15 05:01:00.209272 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.209277 check for attachDone..... 0
attachNode: 2020/08/15 05:01:00.209284 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/15 05:01:00.209290 Looping..... 0
grmgr: 2020/08/15 05:01:00.209434 Looping..... 1
grmgr: 2020/08/15 05:01:00.209612 Looping..... 2
grmgr: 2020/08/15 05:01:00.209796 Looping..... 3
grmgr: 2020/08/15 05:01:00.209976 Looping..... 4
grmgr: 2020/08/15 05:01:00.210155 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:01:00.210164 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:01:00.210169 goroutine about to start 2 cUID,pUID   TxVReGbLSe6J0VjuJp/xkA==  MMc4hG2TQxGeSiXWgiPUJg==  
grmgr: 2020/08/15 05:01:00.210509 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:01:00.213154 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.371897ms
uuidAttach: 2020/08/15 05:01:00.214426 check for attachDone..... 1
DB: 2020/08/15 05:01:00.215206 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.020938ms
DB: 2020/08/15 05:01:00.218527 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.256394ms
uuidAttach: 2020/08/15 05:01:00.219482 check for attachDone..... 2
DB: 2020/08/15 05:01:00.222734 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.512109ms
AttachNode: main 2020/08/15 05:01:00.222747 FetchForUpdate: for parent    MMc4hG2TQxGeSiXWgiPUJg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:01:00.222752 ** Cache FetchForUpdate Cache Key Value: [MMc4hG2TQxGeSiXWgiPUJg==]   sortk: A#G#:S
FetchNode: 2020/08/15 05:01:00.222759  node: MMc4hG2TQxGeSiXWgiPUJg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:01:00.222970 FetchForUpdate: for child    TxVReGbLSe6J0VjuJp/xkA==
FetchForUpdate: 2020/08/15 05:01:00.223018 ** Cache FetchForUpdate Cache Key Value: [TxVReGbLSe6J0VjuJp/xkA==]   sortk: A#
fetchItems: 2020/08/15 05:01:00.223025 +++  Cache FetchItems for sortk A# UID: [TxVReGbLSe6J0VjuJp/xkA==] 
FetchNode: 2020/08/15 05:01:00.223037  node: TxVReGbLSe6J0VjuJp/xkA== subKey: A#
uuidAttach: 2020/08/15 05:01:00.224651 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.224660 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.224664 continue x 
uuidAttach: 2020/08/15 05:01:00.224669 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.224674 check for attachDone..... 0
DB: 2020/08/15 05:01:00.225050 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.25355ms
FetchForUpdate: 2020/08/15 05:01:00.225119 len(nb): 1
fetchItems: 2020/08/15 05:01:00.225142 +++  Cache FetchItems for sortk A#G#:S UID: [MMc4hG2TQxGeSiXWgiPUJg==] 
FetchNode: 2020/08/15 05:01:00.225147  node: MMc4hG2TQxGeSiXWgiPUJg== subKey: A#G#:S
DB: 2020/08/15 05:01:00.225566 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.484301ms
DB: 2020/08/15 05:01:00.227465 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.288469ms
uuidAttach: 2020/08/15 05:01:00.229835 check for attachDone..... 1
DB: 2020/08/15 05:01:00.232368 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.497201ms
uuidAttach: 2020/08/15 05:01:00.234991 check for attachDone..... 2
DB: 2020/08/15 05:01:00.238363 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.660384ms
uuidAttach: 2020/08/15 05:01:00.240184 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.240197 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.240202 continue x 
uuidAttach: 2020/08/15 05:01:00.240207 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.240213 check for attachDone..... 0
DB: 2020/08/15 05:01:00.241759 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.215253ms
uuidAttach: 2020/08/15 05:01:00.245368 check for attachDone..... 1
DB: 2020/08/15 05:01:00.245672 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.532522ms
uuidAttach: 2020/08/15 05:01:00.250526 check for attachDone..... 2
DB: 2020/08/15 05:01:00.251871 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.900239ms
DB: 2020/08/15 05:01:00.255629 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.343944ms
uuidAttach: 2020/08/15 05:01:00.256304 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.256314 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.256318 continue x 
uuidAttach: 2020/08/15 05:01:00.256323 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.256332 check for attachDone..... 0
DB: 2020/08/15 05:01:00.259522 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.411082ms
uuidAttach: 2020/08/15 05:01:00.261485 check for attachDone..... 1
DB: 2020/08/15 05:01:00.265405 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.592155ms
uuidAttach: 2020/08/15 05:01:00.266657 check for attachDone..... 2
DB: 2020/08/15 05:01:00.269055 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.337529ms
uuidAttach: 2020/08/15 05:01:00.271824 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.271835 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.271840 continue x 
uuidAttach: 2020/08/15 05:01:00.271844 for loop finished 1  6 
uuidAttach: 2020/08/15 05:01:00.271850 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.271857 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.271862 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.271866 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.271872 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.271876 check for attachDone..... 0
DB: 2020/08/15 05:01:00.272844 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.424431ms
DB: 2020/08/15 05:01:00.276371 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.23152ms
Cache: 2020/08/15 05:01:00.276384 In SetUpredAvailable: pUid, tUID:  MMc4hG2TQxGeSiXWgiPUJg== MMc4hG2TQxGeSiXWgiPUJg== A#G#:S
Cache: 2020/08/15 05:01:00.276390 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:01:00.277027 check for attachDone..... 1
DB: 2020/08/15 05:01:00.279942 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.518188ms
Unlock: 2020/08/15 05:01:00.279953 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:01:00.279957 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:01:00.282181 check for attachDone..... 2
DB: 2020/08/15 05:01:00.283772 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.757563ms
grmgr: 2020/08/15 05:01:00.283786 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:01:00.287362 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.287371 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.287375 continue x 
uuidAttach: 2020/08/15 05:01:00.287380 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.287386 check for attachDone..... 0
uuidAttach: 2020/08/15 05:01:00.287391 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 05:01:00.287396 check for attachDone..... 1
uuidAttach: 2020/08/15 05:01:00.292572 check for attachDone..... 2
uuidAttach: 2020/08/15 05:01:00.297755 About to run AttachNodeCh: b  c  Srl9PpgLQrqxEPw8g8CqzA== MMc4hG2TQxGeSiXWgiPUJg==
uuidAttach: 2020/08/15 05:01:00.297773 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.297777 check for attachDone..... 0
attachNode: 2020/08/15 05:01:00.297784 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/15 05:01:00.297792 Looping..... 0
grmgr: 2020/08/15 05:01:00.297931 Looping..... 1
grmgr: 2020/08/15 05:01:00.298108 Looping..... 2
grmgr: 2020/08/15 05:01:00.298287 Looping..... 3
grmgr: 2020/08/15 05:01:00.298465 Looping..... 4
grmgr: 2020/08/15 05:01:00.298668 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:01:00.298678 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:01:00.298685 goroutine about to start 3 cUID,pUID   Srl9PpgLQrqxEPw8g8CqzA==  MMc4hG2TQxGeSiXWgiPUJg==  
grmgr: 2020/08/15 05:01:00.298964 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:01:00.301657 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.897409ms
uuidAttach: 2020/08/15 05:01:00.303521 check for attachDone..... 1
DB: 2020/08/15 05:01:00.303773 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.074465ms
DB: 2020/08/15 05:01:00.307273 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.445673ms
uuidAttach: 2020/08/15 05:01:00.308679 check for attachDone..... 2
DB: 2020/08/15 05:01:00.311160 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.581628ms
AttachNode: main 2020/08/15 05:01:00.311172 FetchForUpdate: for parent    MMc4hG2TQxGeSiXWgiPUJg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:01:00.311177 ** Cache FetchForUpdate Cache Key Value: [MMc4hG2TQxGeSiXWgiPUJg==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:01:00.311182 +++  Cache FetchItems for sortk A#G#:S UID: [MMc4hG2TQxGeSiXWgiPUJg==] 
FetchNode: 2020/08/15 05:01:00.311186  node: MMc4hG2TQxGeSiXWgiPUJg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:01:00.311375 FetchForUpdate: for child    Srl9PpgLQrqxEPw8g8CqzA==
FetchForUpdate: 2020/08/15 05:01:00.311456 ** Cache FetchForUpdate Cache Key Value: [Srl9PpgLQrqxEPw8g8CqzA==]   sortk: A#
fetchItems: 2020/08/15 05:01:00.311462 +++  Cache FetchItems for sortk A# UID: [Srl9PpgLQrqxEPw8g8CqzA==] 
FetchNode: 2020/08/15 05:01:00.311474  node: Srl9PpgLQrqxEPw8g8CqzA== subKey: A#
DB: 2020/08/15 05:01:00.313852 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.605993ms
uuidAttach: 2020/08/15 05:01:00.315576 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.315603 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.315608 continue x 
uuidAttach: 2020/08/15 05:01:00.315614 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.315619 check for attachDone..... 0
DB: 2020/08/15 05:01:00.316067 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.536679ms
fetchItems: 2020/08/15 05:01:00.316441 +++  Cache FetchItems for sortk A# UID: [Srl9PpgLQrqxEPw8g8CqzA==] 
FetchNode: 2020/08/15 05:01:00.316448  node: Srl9PpgLQrqxEPw8g8CqzA== subKey: A#
DB: 2020/08/15 05:01:00.318844 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.367975ms
DB: 2020/08/15 05:01:00.320119 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.633511ms
uuidAttach: 2020/08/15 05:01:00.321465 check for attachDone..... 1
DB: 2020/08/15 05:01:00.322138 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.262032ms
DB: 2020/08/15 05:01:00.322152 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.262032ms
DB: 2020/08/15 05:01:00.325330 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.147798ms
DB: 2020/08/15 05:01:00.325344 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.147798ms
uuidAttach: 2020/08/15 05:01:00.326630 check for attachDone..... 2
DB: 2020/08/15 05:01:00.329191 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.62882ms
uuidAttach: 2020/08/15 05:01:00.331807 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.331817 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.331821 continue x 
uuidAttach: 2020/08/15 05:01:00.331826 for loop finished 2  6 
uuidAttach: 2020/08/15 05:01:00.331831 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.331837 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.331842 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.331853 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.331858 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.331862 check for attachDone..... 0
DB: 2020/08/15 05:01:00.333080 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.703719ms
uuidAttach: 2020/08/15 05:01:00.337055 check for attachDone..... 1
DB: 2020/08/15 05:01:00.339398 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.77385ms
uuidAttach: 2020/08/15 05:01:00.342234 check for attachDone..... 2
DB: 2020/08/15 05:01:00.343007 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.347373ms
DB: 2020/08/15 05:01:00.347297 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.71743ms
uuidAttach: 2020/08/15 05:01:00.348032 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.348042 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.348047 continue x 
uuidAttach: 2020/08/15 05:01:00.348052 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.348058 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.348063 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.348068 check for attachDone..... 0
uuidAttach: 2020/08/15 05:01:00.353255 check for attachDone..... 1
DB: 2020/08/15 05:01:00.353338 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.514611ms
DB: 2020/08/15 05:01:00.356968 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.213566ms
uuidAttach: 2020/08/15 05:01:00.358435 check for attachDone..... 2
DB: 2020/08/15 05:01:00.361444 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.960785ms
uuidAttach: 2020/08/15 05:01:00.363467 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.363478 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.363482 continue x 
uuidAttach: 2020/08/15 05:01:00.363487 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.363492 check for attachDone..... 0
DB: 2020/08/15 05:01:00.367723 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.823847ms
uuidAttach: 2020/08/15 05:01:00.368660 check for attachDone..... 1
DB: 2020/08/15 05:01:00.371347 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.207956ms
uuidAttach: 2020/08/15 05:01:00.373822 check for attachDone..... 2
DB: 2020/08/15 05:01:00.375326 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.49494ms
uuidAttach: 2020/08/15 05:01:00.379007 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.379018 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.379022 continue x 
uuidAttach: 2020/08/15 05:01:00.379027 for loop finished 2  6 
uuidAttach: 2020/08/15 05:01:00.379033 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.379039 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.379044 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.379049 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.379054 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.379058 check for attachDone..... 0
DB: 2020/08/15 05:01:00.379199 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.620929ms
Cache: 2020/08/15 05:01:00.379219 In SetUpredAvailable: pUid, tUID:  MMc4hG2TQxGeSiXWgiPUJg== 72j0oyzqT/6fsT9dczs3Ig== A#G#:S
Cache: 2020/08/15 05:01:00.379225 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 05:01:00.382632 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.369707ms
Unlock: 2020/08/15 05:01:00.382644 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:01:00.382648 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:01:00.384222 check for attachDone..... 1
DB: 2020/08/15 05:01:00.386320 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.61772ms
grmgr: 2020/08/15 05:01:00.386334 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:01:00.389414 check for attachDone..... 2
uuidAttach: 2020/08/15 05:01:00.389424 ** received on attachDoneCh.... 2
uuidAttach: 2020/08/15 05:01:00.389445 About to run AttachNodeCh: b  abc  Srl9PpgLQrqxEPw8g8CqzA== TxVReGbLSe6J0VjuJp/xkA==
uuidAttach: 2020/08/15 05:01:00.389454 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.389460 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.389465 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.389470 check for attachDone..... 0
attachNode: 2020/08/15 05:01:00.389476 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/15 05:01:00.389481 Looping..... 0
grmgr: 2020/08/15 05:01:00.389494 Looping..... 1
grmgr: 2020/08/15 05:01:00.389597 Looping..... 2
grmgr: 2020/08/15 05:01:00.389777 Looping..... 3
grmgr: 2020/08/15 05:01:00.389967 Looping..... 4
grmgr: 2020/08/15 05:01:00.390148 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:01:00.390156 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:01:00.390162 goroutine about to start 4 cUID,pUID   Srl9PpgLQrqxEPw8g8CqzA==  TxVReGbLSe6J0VjuJp/xkA==  
grmgr: 2020/08/15 05:01:00.390391 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:01:00.393045 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.81948ms
uuidAttach: 2020/08/15 05:01:00.394625 check for attachDone..... 1
DB: 2020/08/15 05:01:00.396530 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.455254ms
uuidAttach: 2020/08/15 05:01:00.399787 check for attachDone..... 2
DB: 2020/08/15 05:01:00.400358 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.778454ms
DB: 2020/08/15 05:01:00.404267 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.610285ms
AttachNode: main 2020/08/15 05:01:00.404292 FetchForUpdate: for parent    TxVReGbLSe6J0VjuJp/xkA==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:01:00.404298 ** Cache FetchForUpdate Cache Key Value: [TxVReGbLSe6J0VjuJp/xkA==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:01:00.404304 +++  Cache FetchItems for sortk A#G#:S UID: [TxVReGbLSe6J0VjuJp/xkA==] 
FetchNode: 2020/08/15 05:01:00.404308  node: TxVReGbLSe6J0VjuJp/xkA== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:01:00.404492 FetchForUpdate: for child    Srl9PpgLQrqxEPw8g8CqzA==
FetchForUpdate: 2020/08/15 05:01:00.404536 ** Cache FetchForUpdate Cache Key Value: [Srl9PpgLQrqxEPw8g8CqzA==]   sortk: A#
fetchItems: 2020/08/15 05:01:00.404544 +++  Cache FetchItems for sortk A# UID: [Srl9PpgLQrqxEPw8g8CqzA==] 
FetchNode: 2020/08/15 05:01:00.404556  node: Srl9PpgLQrqxEPw8g8CqzA== subKey: A#
uuidAttach: 2020/08/15 05:01:00.404892 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.404901 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.404905 continue x 
uuidAttach: 2020/08/15 05:01:00.404911 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.404916 check for attachDone..... 0
DB: 2020/08/15 05:01:00.407324 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.722101ms
DB: 2020/08/15 05:01:00.408949 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.61042ms
uuidAttach: 2020/08/15 05:01:00.410083 check for attachDone..... 1
DB: 2020/08/15 05:01:00.412658 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.413876ms
uuidAttach: 2020/08/15 05:01:00.415253 check for attachDone..... 2
DB: 2020/08/15 05:01:00.418870 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.693297ms
uuidAttach: 2020/08/15 05:01:00.420423 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.420433 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.420437 continue x 
uuidAttach: 2020/08/15 05:01:00.420442 for loop finished 3  6 
uuidAttach: 2020/08/15 05:01:00.420447 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.420453 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.420458 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.420463 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.420468 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.420473 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.420478 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.420483 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.420487 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.420492 check for attachDone..... 0
DB: 2020/08/15 05:01:00.422273 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.150416ms
uuidAttach: 2020/08/15 05:01:00.425642 check for attachDone..... 1
DB: 2020/08/15 05:01:00.426321 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.489789ms
uuidAttach: 2020/08/15 05:01:00.430830 check for attachDone..... 2
DB: 2020/08/15 05:01:00.432446 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.641188ms
uuidAttach: 2020/08/15 05:01:00.436016 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.436026 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.436030 continue x 
uuidAttach: 2020/08/15 05:01:00.436035 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.436040 check for attachDone..... 0
DB: 2020/08/15 05:01:00.436110 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.243251ms
DB: 2020/08/15 05:01:00.440063 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.4582ms
uuidAttach: 2020/08/15 05:01:00.441194 check for attachDone..... 1
DB: 2020/08/15 05:01:00.446308 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.796016ms
uuidAttach: 2020/08/15 05:01:00.446936 check for attachDone..... 2
DB: 2020/08/15 05:01:00.449939 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.17978ms
uuidAttach: 2020/08/15 05:01:00.452100 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.452110 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.452114 continue x 
uuidAttach: 2020/08/15 05:01:00.452119 for loop finished 3  6 
uuidAttach: 2020/08/15 05:01:00.452124 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.452134 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.452148 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.452153 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.452159 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.452164 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.452169 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.452174 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.452179 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.452183 check for attachDone..... 0
DB: 2020/08/15 05:01:00.453741 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.327532ms
DB: 2020/08/15 05:01:00.457290 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.293693ms
Cache: 2020/08/15 05:01:00.457302 In SetUpredAvailable: pUid, tUID:  TxVReGbLSe6J0VjuJp/xkA== TxVReGbLSe6J0VjuJp/xkA== A#G#:S
Cache: 2020/08/15 05:01:00.457330 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:01:00.457533 check for attachDone..... 1
DB: 2020/08/15 05:01:00.460560 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.194793ms
Unlock: 2020/08/15 05:01:00.460570 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:01:00.460575 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:01:00.462698 check for attachDone..... 2
DB: 2020/08/15 05:01:00.464458 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.831616ms
grmgr: 2020/08/15 05:01:00.464473 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:01:00.467871 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.467884 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.467889 continue x 
uuidAttach: 2020/08/15 05:01:00.467894 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.467899 check for attachDone..... 0
uuidAttach: 2020/08/15 05:01:00.467905 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 05:01:00.467910 check for attachDone..... 1
uuidAttach: 2020/08/15 05:01:00.473084 check for attachDone..... 2
uuidAttach: 2020/08/15 05:01:00.478270 About to run AttachNodeCh: c  b  MMc4hG2TQxGeSiXWgiPUJg== Srl9PpgLQrqxEPw8g8CqzA==
uuidAttach: 2020/08/15 05:01:00.478283 for loop finished 4  6 
uuidAttach: 2020/08/15 05:01:00.478291 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.478297 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.478302 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.478307 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.478312 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.478317 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.478321 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.478327 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.478332 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.478336 check for attachDone..... 0
attachNode: 2020/08/15 05:01:00.478342 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/15 05:01:00.478348 Looping..... 0
grmgr: 2020/08/15 05:01:00.478449 Looping..... 1
grmgr: 2020/08/15 05:01:00.478626 Looping..... 2
grmgr: 2020/08/15 05:01:00.478805 Looping..... 3
grmgr: 2020/08/15 05:01:00.478985 Looping..... 4
grmgr: 2020/08/15 05:01:00.479167 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:01:00.479176 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:01:00.479182 goroutine about to start 5 cUID,pUID   MMc4hG2TQxGeSiXWgiPUJg==  Srl9PpgLQrqxEPw8g8CqzA==  
grmgr: 2020/08/15 05:01:00.479420 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:01:00.481393 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.141487ms
DB: 2020/08/15 05:01:00.483542 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.119627ms
uuidAttach: 2020/08/15 05:01:00.483789 check for attachDone..... 1
DB: 2020/08/15 05:01:00.487006 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.392544ms
uuidAttach: 2020/08/15 05:01:00.488986 check for attachDone..... 2
DB: 2020/08/15 05:01:00.490865 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.572088ms
AttachNode: main 2020/08/15 05:01:00.490879 FetchForUpdate: for parent    Srl9PpgLQrqxEPw8g8CqzA==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:01:00.490884 ** Cache FetchForUpdate Cache Key Value: [Srl9PpgLQrqxEPw8g8CqzA==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:01:00.490890 +++  Cache FetchItems for sortk A#G#:S UID: [Srl9PpgLQrqxEPw8g8CqzA==] 
FetchNode: 2020/08/15 05:01:00.490895  node: Srl9PpgLQrqxEPw8g8CqzA== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:01:00.491146 FetchForUpdate: for child    MMc4hG2TQxGeSiXWgiPUJg==
FetchForUpdate: 2020/08/15 05:01:00.491155 ** Cache FetchForUpdate Cache Key Value: [MMc4hG2TQxGeSiXWgiPUJg==]   sortk: A#
fetchItems: 2020/08/15 05:01:00.491161 +++  Cache FetchItems for sortk A# UID: [MMc4hG2TQxGeSiXWgiPUJg==] 
FetchNode: 2020/08/15 05:01:00.491172  node: MMc4hG2TQxGeSiXWgiPUJg== subKey: A#
DB: 2020/08/15 05:01:00.493334 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.405655ms
uuidAttach: 2020/08/15 05:01:00.494114 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494137 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.494149 continue x 
uuidAttach: 2020/08/15 05:01:00.494154 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494161 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494166 for loop finished 4  6 
uuidAttach: 2020/08/15 05:01:00.494171 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494184 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494189 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494194 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494199 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494204 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494209 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494214 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494218 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.494222 check for attachDone..... 0
DB: 2020/08/15 05:01:00.494609 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.3848ms
DB: 2020/08/15 05:01:00.497239 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.337448ms
uuidAttach: 2020/08/15 05:01:00.499411 check for attachDone..... 1
DB: 2020/08/15 05:01:00.500459 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.188122ms
DB: 2020/08/15 05:01:00.500484 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.188122ms
DB: 2020/08/15 05:01:00.503707 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.188966ms
DB: 2020/08/15 05:01:00.503722 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.188966ms
uuidAttach: 2020/08/15 05:01:00.504568 check for attachDone..... 2
DB: 2020/08/15 05:01:00.507854 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.911401ms
uuidAttach: 2020/08/15 05:01:00.509722 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509732 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.509736 continue x 
uuidAttach: 2020/08/15 05:01:00.509741 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509747 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509752 for loop finished 4  6 
uuidAttach: 2020/08/15 05:01:00.509757 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509763 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509767 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509772 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509777 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509782 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509786 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509791 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509796 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.509800 check for attachDone..... 0
DB: 2020/08/15 05:01:00.511508 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.460471ms
uuidAttach: 2020/08/15 05:01:00.514956 check for attachDone..... 1
DB: 2020/08/15 05:01:00.517656 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.599297ms
uuidAttach: 2020/08/15 05:01:00.520117 check for attachDone..... 2
DB: 2020/08/15 05:01:00.521224 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.295775ms
uuidAttach: 2020/08/15 05:01:00.525282 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525293 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.525304 continue x 
uuidAttach: 2020/08/15 05:01:00.525309 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525315 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525320 for loop finished 4  6 
uuidAttach: 2020/08/15 05:01:00.525326 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525331 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525336 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525341 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525346 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525351 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525356 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525360 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525374 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.525379 check for attachDone..... 0
DB: 2020/08/15 05:01:00.526015 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.222643ms
uuidAttach: 2020/08/15 05:01:00.530548 check for attachDone..... 1
DB: 2020/08/15 05:01:00.532103 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.63865ms
DB: 2020/08/15 05:01:00.535614 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.099192ms
uuidAttach: 2020/08/15 05:01:00.536317 check for attachDone..... 2
DB: 2020/08/15 05:01:00.539564 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.432088ms
uuidAttach: 2020/08/15 05:01:00.541486 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541496 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.541500 continue x 
uuidAttach: 2020/08/15 05:01:00.541505 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541511 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541516 for loop finished 4  6 
uuidAttach: 2020/08/15 05:01:00.541521 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541526 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541531 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541536 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541540 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541545 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541550 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541555 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541560 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.541564 check for attachDone..... 0
DB: 2020/08/15 05:01:00.545392 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.771472ms
uuidAttach: 2020/08/15 05:01:00.546716 check for attachDone..... 1
DB: 2020/08/15 05:01:00.548927 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.478842ms
uuidAttach: 2020/08/15 05:01:00.551877 check for attachDone..... 2
DB: 2020/08/15 05:01:00.552747 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.333056ms
DB: 2020/08/15 05:01:00.556201 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.196526ms
Cache: 2020/08/15 05:01:00.556214 In SetUpredAvailable: pUid, tUID:  Srl9PpgLQrqxEPw8g8CqzA== Hg+KoJUgT3GUCAzVR3Mbqw== A#G#:S
Cache: 2020/08/15 05:01:00.556219 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:01:00.557039 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557048 	dontrun = true
uuidAttach: 2020/08/15 05:01:00.557053 continue x 
uuidAttach: 2020/08/15 05:01:00.557058 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557064 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557068 for loop finished 4  6 
uuidAttach: 2020/08/15 05:01:00.557073 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557079 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557084 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557088 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557102 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557107 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557112 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557117 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557122 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.557125 check for attachDone..... 0
DB: 2020/08/15 05:01:00.559633 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.37686ms
Unlock: 2020/08/15 05:01:00.559642 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:01:00.559646 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:01:00.562277 check for attachDone..... 1
DB: 2020/08/15 05:01:00.563613 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.914958ms
grmgr: 2020/08/15 05:01:00.563626 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:01:00.567450 check for attachDone..... 2
uuidAttach: 2020/08/15 05:01:00.567460 ** received on attachDoneCh.... 2
uuidAttach: 2020/08/15 05:01:00.567473 About to run AttachNodeCh: c  abc  MMc4hG2TQxGeSiXWgiPUJg== TxVReGbLSe6J0VjuJp/xkA==
uuidAttach: 2020/08/15 05:01:00.567481 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.567487 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:01:00.567491 for loop finished 5  6 
uuidAttach: 2020/08/15 05:01:00.567495  break....
attachNode: 2020/08/15 05:01:00.567500 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/15 05:01:00.567507 Looping..... 0
grmgr: 2020/08/15 05:01:00.567520 Looping..... 1
grmgr: 2020/08/15 05:01:00.567631 Looping..... 2
grmgr: 2020/08/15 05:01:00.567811 Looping..... 3
grmgr: 2020/08/15 05:01:00.567989 Looping..... 4
grmgr: 2020/08/15 05:01:00.568168 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:01:00.568177 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:01:00.568182 goroutine about to start 6 cUID,pUID   MMc4hG2TQxGeSiXWgiPUJg==  TxVReGbLSe6J0VjuJp/xkA==  
rdfLoader: 2020/08/15 05:01:00.568188 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/15 05:01:00.568401 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:01:00.570484 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.236146ms
DB: 2020/08/15 05:01:00.573495 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.977004ms
DB: 2020/08/15 05:01:00.577479 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.91205ms
DB: 2020/08/15 05:01:00.581314 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.563316ms
AttachNode: main 2020/08/15 05:01:00.581327 FetchForUpdate: for parent    TxVReGbLSe6J0VjuJp/xkA==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:01:00.581332 ** Cache FetchForUpdate Cache Key Value: [TxVReGbLSe6J0VjuJp/xkA==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:01:00.581338 +++  Cache FetchItems for sortk A#G#:S UID: [TxVReGbLSe6J0VjuJp/xkA==] 
FetchNode: 2020/08/15 05:01:00.581343  node: TxVReGbLSe6J0VjuJp/xkA== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:01:00.581519 FetchForUpdate: for child    MMc4hG2TQxGeSiXWgiPUJg==
FetchForUpdate: 2020/08/15 05:01:00.581528 ** Cache FetchForUpdate Cache Key Value: [MMc4hG2TQxGeSiXWgiPUJg==]   sortk: A#
fetchItems: 2020/08/15 05:01:00.581548 +++  Cache FetchItems for sortk A# UID: [MMc4hG2TQxGeSiXWgiPUJg==] 
FetchNode: 2020/08/15 05:01:00.581583  node: MMc4hG2TQxGeSiXWgiPUJg== subKey: A#
DB: 2020/08/15 05:01:00.583888 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.512242ms
DB: 2020/08/15 05:01:00.584937 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.293709ms
DB: 2020/08/15 05:01:00.587770 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.390221ms
DB: 2020/08/15 05:01:00.590846 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.025345ms
DB: 2020/08/15 05:01:00.590861 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.025345ms
DB: 2020/08/15 05:01:00.594030 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.139178ms
DB: 2020/08/15 05:01:00.594045 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.139178ms
DB: 2020/08/15 05:01:00.598185 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.924911ms
DB: 2020/08/15 05:01:00.601699 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.318525ms
DB: 2020/08/15 05:01:00.608090 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.847683ms
DB: 2020/08/15 05:01:00.611540 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.146972ms
DB: 2020/08/15 05:01:00.615839 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.726109ms
DB: 2020/08/15 05:01:00.621914 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.624359ms
DB: 2020/08/15 05:01:00.625480 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.150151ms
DB: 2020/08/15 05:01:00.629796 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.856653ms
DB: 2020/08/15 05:01:00.635940 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.689915ms
DB: 2020/08/15 05:01:00.639606 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.248342ms
DB: 2020/08/15 05:01:00.643428 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.361178ms
DB: 2020/08/15 05:01:00.647075 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.387271ms
Cache: 2020/08/15 05:01:00.647087 In SetUpredAvailable: pUid, tUID:  TxVReGbLSe6J0VjuJp/xkA== EIALBcOKQWm7m3xK22O1rQ== A#G#:S
Cache: 2020/08/15 05:01:00.647092 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 05:01:00.650336 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.203768ms
Unlock: 2020/08/15 05:01:00.650346 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:01:00.650351 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 05:01:00.654214 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.809538ms
uuidAttach: 2020/08/15 05:01:00.654234 received on attachDoneCh: uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 05:01:00.654242 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/15 05:01:00.654248 saveNode finished waiting...exiting
rdfLoader: 2020/08/15 05:01:00.654253 cancel contexts
rdfLoader: 2020/08/15 05:01:00.654259 wait for autonomous goroutines to end
errlog: 2020/08/15 05:01:00.654265 Powering down...
grmgr: 2020/08/15 05:01:00.654270 Powering down...
rdfuuid: 2020/08/15 05:01:00.654275 Powering down...
rdfLoader: 2020/08/15 05:01:00.654279 loader exists.....
DB:2020/08/15 05:09:29 log.go:18: ===============================================================================
errlog: 2020/08/15 05:09:29.708095 Powering on...
rdfLoader: 2020/08/15 05:09:29.708135 saveNode started......
rdfLoader: 2020/08/15 05:09:29.708140 define saveNode limiter......
rdfuuid: 2020/08/15 05:09:29.708147 Powering on...
grmgr: 2020/08/15 05:09:29.708166 Powering on...
rdfLoader: 2020/08/15 05:09:29.708175  principle goroutines started 
RDFreader: 2020/08/15 05:09:29.708196 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 05:09:29.708210 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 05:09:29.708216 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 05:09:29.708222 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 05:09:29.708227 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 05:09:29.708232 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 05:09:29.708237 spo read:      
RDFreader: 2020/08/15 05:09:29.708242 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 05:09:29.708247 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 05:09:29.708252 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 05:09:29.708257 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 05:09:29.708261 spo read:      
RDFreader: 2020/08/15 05:09:29.708266 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 05:09:29.708271 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 05:09:29.708276 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 05:09:29.708281 spo read:  b  Age  "58"
RDFreader: 2020/08/15 05:09:29.708286 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 05:09:29.708291 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 05:09:29.708297 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 05:09:29.708301 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 05:09:29.708306 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 05:09:29.708310 spo read:      
RDFreader: 2020/08/15 05:09:29.708315 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 05:09:29.708319 Send node batch on channel verifyCh
RDFreader: 2020/08/15 05:09:29.708324 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 05:09:29.708328 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 05:09:29.708334 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 05:09:29.708341 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 05:09:29.708346 spo read:  c  Age  "67"
RDFreader: 2020/08/15 05:09:29.708351 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 05:09:29.708356 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 05:09:29.708360 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 05:09:29.708365 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 05:09:29.708372 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 05:09:29.708376 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 05:09:29.708381 spo read:      
RDFreader: 2020/08/15 05:09:29.708386 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 05:09:29.708391 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 05:09:29.708396 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 05:09:29.708401 spo read:  d  Age  "36"
RDFreader: 2020/08/15 05:09:29.708406 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 05:09:29.708412 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 05:09:29.708423 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 05:09:29.708427 close verify channel
rdfLoader: 2020/08/15 05:09:29.708431 wait for goroutines to end
rdfLoader: 2020/08/15 05:09:29.708435 verify started....
rdfLoader: 2020/08/15 05:09:29.708439 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 05:09:29.708443 .  getType..
rdfLoader: 2020/08/15 05:09:29.708447 node.TyName : [Person]
DB: 2020/08/15 05:09:29.779432 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 70.915473ms
grmgr: 2020/08/15 05:09:29.779562 Looping..... 0
grmgr: 2020/08/15 05:09:29.779585 Looping..... 1
grmgr: 2020/08/15 05:09:29.779606 Looping..... 2
grmgr: 2020/08/15 05:09:29.779672 Looping..... 3
grmgr: 2020/08/15 05:09:29.779851 Looping..... 4
grmgr: 2020/08/15 05:09:29.780029 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 05:09:29.780039 .  getType..
rdfLoader: 2020/08/15 05:09:29.780043 node.TyName : [Person]
grmgr: 2020/08/15 05:09:29.780049 Looping..... 0
unmarshalRDF2020/08/15 05:09:29.780061 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:09:29.780070 Looping..... 1
grmgr: 2020/08/15 05:09:29.780076 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 05:09:29.780079 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 05:09:29.780086 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 05:09:29.780090 .  getType..
rdfLoader: 2020/08/15 05:09:29.780094 node.TyName : [Person]
grmgr: 2020/08/15 05:09:29.780098 Looping..... 0
rdfLoader: 2020/08/15 05:09:29.780108 Add to SS . [Honda]
rdfLoader: 2020/08/15 05:09:29.780112 Add to SS . [Alfa]
uuidAttach: 2020/08/15 05:09:29.780145 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.780152 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:09:29.780196 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:09:29.780203 Exit  unmarshalRDF. 
saveNode: 2020/08/15 05:09:29.780208 read from saveCH channel 1 
unmarshalRDF2020/08/15 05:09:29.780217 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:09:29.780241 Looping..... 1
grmgr: 2020/08/15 05:09:29.780246 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 05:09:29.780250 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 05:09:29.780255 Looping..... 0
rdfLoader: 2020/08/15 05:09:29.780263 Add to SS . [Honda]
rdfLoader: 2020/08/15 05:09:29.780267 Add to SS . [VW Golf]
uuidAttach: 2020/08/15 05:09:29.780283 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.780289 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:09:29.780315 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:09:29.780319 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 05:09:29.780324 .  getType..
rdfLoader: 2020/08/15 05:09:29.780328 node.TyName : [Person]
unmarshalRDF2020/08/15 05:09:29.780336 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:09:29.780347 Looping..... 1
rdfLoader: 2020/08/15 05:09:29.780354 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 05:09:29.780359 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 05:09:29.780363 Add to SS . [Honda]
uuidAttach: 2020/08/15 05:09:29.780375 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.780380 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:09:29.780438 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:09:29.780449 Exit  unmarshalRDF. 
grmgr: 2020/08/15 05:09:29.780475 Looping..... 2
grmgr: 2020/08/15 05:09:29.780667 Looping..... 3
grmgr: 2020/08/15 05:09:29.780843 Looping..... 4
grmgr: 2020/08/15 05:09:29.781021 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 05:09:29.781030 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/15 05:09:29.781034 Looping..... 0
saveNode: 2020/08/15 05:09:29.781040 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:09:29.781047 read from saveCH channel 2 
grmgr: 2020/08/15 05:09:29.781079 Looping..... 1
SaveRDFNode: xxx 2020/08/15 05:09:29.781089 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.781095 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.781102 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.781120 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.781125 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.781131 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.781136 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:09:29.781140 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:09:29.781147 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc00078a1e0)}
SaveRDFNode: 2020/08/15 05:09:29.781150 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:09:29.781159 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.781175 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.781181 UID received  : 9XVokd63ThelNTM9ZSixmQ==
grmgr: 2020/08/15 05:09:29.781428 Looping..... 2
grmgr: 2020/08/15 05:09:29.781634 Looping..... 3
grmgr: 2020/08/15 05:09:29.781797 Looping..... 4
grmgr: 2020/08/15 05:09:29.781982 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 05:09:29.781992 Looping..... 0
unmarshalRDF2020/08/15 05:09:29.782005 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:09:29.782014 Looping..... 1
rdfLoader: 2020/08/15 05:09:29.782024 Add to SS . [Bentley]
unmarshalRDF2020/08/15 05:09:29.782057 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:09:29.782062 Exit  unmarshalRDF. 
grmgr: 2020/08/15 05:09:29.782071 Looping..... 2
grmgr: 2020/08/15 05:09:29.782160 Looping..... 3
grmgr: 2020/08/15 05:09:29.782338 Looping..... 4
grmgr: 2020/08/15 05:09:29.782520 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 05:09:29.782529 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/15 05:09:29.782534 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 05:09:29.782544 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/15 05:09:29.782550 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:09:29.782555 read from saveCH channel 3 
grmgr: 2020/08/15 05:09:29.782560 Looping..... 0
grmgr: 2020/08/15 05:09:29.782586 Looping..... 1
grmgr: 2020/08/15 05:09:29.782591 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 05:09:29.782595 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 05:09:29.782604 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.782609 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.782615 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.782622 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.782627 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.782633 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.782639 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:09:29.782642 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:09:29.782648 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc00078a5a0)}
SaveRDFNode: 2020/08/15 05:09:29.782652 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:09:29.782669 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.782673 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.782679 UID received  : nB9qVdlwTUaNcTu7hn6sIQ==
DB: 2020/08/15 05:09:29.788020 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.809099ms
DB: 2020/08/15 05:09:29.791651 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.938974ms
DB: 2020/08/15 05:09:29.794908 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.222126ms
DB: 2020/08/15 05:09:29.798036 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.093677ms
DB: 2020/08/15 05:09:29.801192 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.120601ms
DB: 2020/08/15 05:09:29.804449 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.217476ms
SaveRDFNode: 2020/08/15 05:09:29.804466 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00078a5a0)}
rdfUIDdb: 2020/08/15 05:09:29.804474 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.804478 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.804484 Received UID: X18=
SaveRDFNode: 2020/08/15 05:09:29.804498 a: = db.Item{PKey:[]uint8{0x9c, 0x1f, 0x6a, 0x55, 0xd9, 0x70, 0x4d, 0x46, 0x8d, 0x71, 0x3b, 0xbb, 0x86, 0x7e, 0xac, 0x21}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:09:29.807696 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.165672ms
SaveRDFNode: 2020/08/15 05:09:29.807709 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00078a5a0)}
rdfUIDdb: 2020/08/15 05:09:29.807715 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.807719 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.807725 Received UID: X18=
SaveRDFNode: 2020/08/15 05:09:29.807751 a: = db.Item{PKey:[]uint8{0x9c, 0x1f, 0x6a, 0x55, 0xd9, 0x70, 0x4d, 0x46, 0x8d, 0x71, 0x3b, 0xbb, 0x86, 0x7e, 0xac, 0x21}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:09:29.808064 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 19.996947ms
DB: 2020/08/15 05:09:29.810804 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.985807ms
SaveRDFNode: 2020/08/15 05:09:29.810814 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:09:29.810824 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 05:09:29.810829 Send ack to waiting saveNode...
saveNode: 2020/08/15 05:09:29.810835 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:09:29.810841 read from saveCH channel 4 
grmgr: 2020/08/15 05:09:29.810846 Looping..... 0
grmgr: 2020/08/15 05:09:29.810882 Looping..... 1
grmgr: 2020/08/15 05:09:29.810889 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 05:09:29.810904 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 05:09:29.810914 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.810920 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.810928 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.810934 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.810940 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.810945 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.810951 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:09:29.810955 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:09:29.810961 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000016ea0)}
SaveRDFNode: 2020/08/15 05:09:29.810965 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:09:29.810991 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.810999 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.811005 UID received  : 1oYBjq8MSuiXApsOG5yHxQ==
DB: 2020/08/15 05:09:29.812837 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.740322ms
DB: 2020/08/15 05:09:29.814117 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.085876ms
DB: 2020/08/15 05:09:29.816039 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.171991ms
DB: 2020/08/15 05:09:29.817272 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.125159ms
DB: 2020/08/15 05:09:29.819386 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.317707ms
SaveRDFNode: 2020/08/15 05:09:29.819400 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00078a1e0)}
rdfUIDdb: 2020/08/15 05:09:29.819406 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.819410 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.819416 Received UID: X18=
SaveRDFNode: 2020/08/15 05:09:29.819430 a: = db.Item{PKey:[]uint8{0xf5, 0x75, 0x68, 0x91, 0xde, 0xb7, 0x4e, 0x17, 0xa5, 0x35, 0x33, 0x3d, 0x65, 0x28, 0xb1, 0x99}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:09:29.820502 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.199747ms
DB: 2020/08/15 05:09:29.822559 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.097342ms
SaveRDFNode: 2020/08/15 05:09:29.822591 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00078a1e0)}
rdfUIDdb: 2020/08/15 05:09:29.822597 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.822601 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.822606 Received UID: X18=
SaveRDFNode: 2020/08/15 05:09:29.822616 a: = db.Item{PKey:[]uint8{0xf5, 0x75, 0x68, 0x91, 0xde, 0xb7, 0x4e, 0x17, 0xa5, 0x35, 0x33, 0x3d, 0x65, 0x28, 0xb1, 0x99}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:09:29.823600 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.070474ms
DB: 2020/08/15 05:09:29.825819 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.175514ms
SaveRDFNode: 2020/08/15 05:09:29.825842 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:09:29.825850 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 05:09:29.825854 Send ack to waiting saveNode...
saveNode: 2020/08/15 05:09:29.825859 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/15 05:09:29.825864 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/15 05:09:29.825889 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.825895 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.825900 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.825917 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.825929 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.825935 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:09:29.825940 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:09:29.825944 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:09:29.825949 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000370f00)}
SaveRDFNode: 2020/08/15 05:09:29.825953 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:09:29.825961 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.825965 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.825970 UID received  : L5BeVGTjTQS8yeBSNC3Ipg==
grmgr: 2020/08/15 05:09:29.826151 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 05:09:29.826847 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.217914ms
SaveRDFNode: 2020/08/15 05:09:29.826858 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016ea0)}
rdfUIDdb: 2020/08/15 05:09:29.826864 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.826868 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.826873 Received UID: X18=
SaveRDFNode: 2020/08/15 05:09:29.826883 a: = db.Item{PKey:[]uint8{0xd6, 0x86, 0x1, 0x8e, 0xaf, 0xc, 0x4a, 0xe8, 0x97, 0x2, 0x9b, 0xe, 0x1b, 0x9c, 0x87, 0xc5}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:09:29.829143 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.147549ms
DB: 2020/08/15 05:09:29.829999 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.085488ms
SaveRDFNode: 2020/08/15 05:09:29.830013 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016ea0)}
rdfUIDdb: 2020/08/15 05:09:29.830020 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.830024 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.830040 Received UID: X18=
SaveRDFNode: 2020/08/15 05:09:29.830050 a: = db.Item{PKey:[]uint8{0xd6, 0x86, 0x1, 0x8e, 0xaf, 0xc, 0x4a, 0xe8, 0x97, 0x2, 0x9b, 0xe, 0x1b, 0x9c, 0x87, 0xc5}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:09:29.832278 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.102066ms
DB: 2020/08/15 05:09:29.833544 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.40829ms
SaveRDFNode: 2020/08/15 05:09:29.833555 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:09:29.833562 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 05:09:29.835566 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.255031ms
DB: 2020/08/15 05:09:29.838908 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.309859ms
DB: 2020/08/15 05:09:29.842184 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.244983ms
SaveRDFNode: 2020/08/15 05:09:29.842198 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000370f00)}
rdfUIDdb: 2020/08/15 05:09:29.842205 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.842209 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.842214 Received UID: X18=
SaveRDFNode: 2020/08/15 05:09:29.842225 a: = db.Item{PKey:[]uint8{0x2f, 0x90, 0x5e, 0x54, 0x64, 0xe3, 0x4d, 0x4, 0xbc, 0xc9, 0xe0, 0x52, 0x34, 0x2d, 0xc8, 0xa6}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:09:29.845357 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.077931ms
SaveRDFNode: 2020/08/15 05:09:29.845370 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000370f00)}
rdfUIDdb: 2020/08/15 05:09:29.845376 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:09:29.845380 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:09:29.845386 Received UID: X18=
SaveRDFNode: 2020/08/15 05:09:29.845398 a: = db.Item{PKey:[]uint8{0x2f, 0x90, 0x5e, 0x54, 0x64, 0xe3, 0x4d, 0x4, 0xbc, 0xc9, 0xe0, 0x52, 0x34, 0x2d, 0xc8, 0xa6}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:09:29.848540 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.108801ms
SaveRDFNode: 2020/08/15 05:09:29.848555 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 05:09:29.848563 saveNode finished waiting...exiting
grmgr: 2020/08/15 05:09:29.848571 EndCh received for saveNode. rCnt = 0 
uuidAttach: 2020/08/15 05:09:29.848584 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.848589 check for attachDone..... 0
uuidAttach: 2020/08/15 05:09:29.853758 check for attachDone..... 1
uuidAttach: 2020/08/15 05:09:29.858938 check for attachDone..... 2
uuidAttach: 2020/08/15 05:09:29.864128 About to run AttachNodeCh: abc  b  9XVokd63ThelNTM9ZSixmQ== nB9qVdlwTUaNcTu7hn6sIQ==
uuidAttach: 2020/08/15 05:09:29.864151 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.864156 check for attachDone..... 0
attachNode: 2020/08/15 05:09:29.864164 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/15 05:09:29.864172 Looping..... 0
grmgr: 2020/08/15 05:09:29.864303 Looping..... 1
grmgr: 2020/08/15 05:09:29.864481 Looping..... 2
grmgr: 2020/08/15 05:09:29.864660 Looping..... 3
grmgr: 2020/08/15 05:09:29.864838 Looping..... 4
grmgr: 2020/08/15 05:09:29.865017 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:09:29.865026 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:09:29.865032 goroutine about to start 1 cUID,pUID   9XVokd63ThelNTM9ZSixmQ==  nB9qVdlwTUaNcTu7hn6sIQ==  
grmgr: 2020/08/15 05:09:29.865332 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:09:29.867488 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.374965ms
uuidAttach: 2020/08/15 05:09:29.869529 check for attachDone..... 1
DB: 2020/08/15 05:09:29.870908 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.389426ms
DB: 2020/08/15 05:09:29.874290 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.307484ms
uuidAttach: 2020/08/15 05:09:29.875069 check for attachDone..... 2
uuidAttach: 2020/08/15 05:09:29.880225 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.880234 	dontrun = true
uuidAttach: 2020/08/15 05:09:29.880238 continue x 
uuidAttach: 2020/08/15 05:09:29.880244 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.880249 check for attachDone..... 0
DB: 2020/08/15 05:09:29.882021 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.150346ms
AttachNode: main 2020/08/15 05:09:29.882033 FetchForUpdate: for parent    nB9qVdlwTUaNcTu7hn6sIQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:09:29.882038 ** Cache FetchForUpdate Cache Key Value: [nB9qVdlwTUaNcTu7hn6sIQ==]   sortk: A#G#:S
FetchNode: 2020/08/15 05:09:29.882043  node: nB9qVdlwTUaNcTu7hn6sIQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:09:29.882229 FetchForUpdate: for child    9XVokd63ThelNTM9ZSixmQ==
FetchForUpdate: 2020/08/15 05:09:29.882237 ** Cache FetchForUpdate Cache Key Value: [9XVokd63ThelNTM9ZSixmQ==]   sortk: A#
FetchNode: 2020/08/15 05:09:29.882254  node: 9XVokd63ThelNTM9ZSixmQ== subKey: A#
DB: 2020/08/15 05:09:29.884532 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.457151ms
FetchForUpdate: 2020/08/15 05:09:29.884576 len(nb): 1
fetchItems: 2020/08/15 05:09:29.884583 +++  Cache FetchItems for sortk A#G#:S UID: [nB9qVdlwTUaNcTu7hn6sIQ==] 
FetchNode: 2020/08/15 05:09:29.884588  node: nB9qVdlwTUaNcTu7hn6sIQ== subKey: A#G#:S
uuidAttach: 2020/08/15 05:09:29.885399 check for attachDone..... 1
DB: 2020/08/15 05:09:29.886730 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.114117ms
DB: 2020/08/15 05:09:29.890385 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.562135ms
uuidAttach: 2020/08/15 05:09:29.890513 check for attachDone..... 2
DB: 2020/08/15 05:09:29.895137 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 12.837438ms
FetchForUpdate: 2020/08/15 05:09:29.895272 len(nb): 7
fetchItems: 2020/08/15 05:09:29.895280 +++  Cache FetchItems for sortk A# UID: [9XVokd63ThelNTM9ZSixmQ==] 
FetchNode: 2020/08/15 05:09:29.895285  node: 9XVokd63ThelNTM9ZSixmQ== subKey: A#
uuidAttach: 2020/08/15 05:09:29.895705 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.895714 	dontrun = true
uuidAttach: 2020/08/15 05:09:29.895718 continue x 
uuidAttach: 2020/08/15 05:09:29.895723 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.895728 check for attachDone..... 0
DB: 2020/08/15 05:09:29.897647 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.331539ms
uuidAttach: 2020/08/15 05:09:29.902165 check for attachDone..... 1
uuidAttach: 2020/08/15 05:09:29.907325 check for attachDone..... 2
DB: 2020/08/15 05:09:29.908047 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.097344ms
DB: 2020/08/15 05:09:29.912018 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.282221ms
uuidAttach: 2020/08/15 05:09:29.913093 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.913102 	dontrun = true
uuidAttach: 2020/08/15 05:09:29.913115 continue x 
uuidAttach: 2020/08/15 05:09:29.913121 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.913125 check for attachDone..... 0
DB: 2020/08/15 05:09:29.915894 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.37599ms
uuidAttach: 2020/08/15 05:09:29.918276 check for attachDone..... 1
DB: 2020/08/15 05:09:29.922183 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.881031ms
uuidAttach: 2020/08/15 05:09:29.923423 check for attachDone..... 2
DB: 2020/08/15 05:09:29.926057 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.329098ms
uuidAttach: 2020/08/15 05:09:29.928597 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.928620 	dontrun = true
uuidAttach: 2020/08/15 05:09:29.928624 continue x 
uuidAttach: 2020/08/15 05:09:29.928629 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.928634 check for attachDone..... 0
DB: 2020/08/15 05:09:29.930010 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.520774ms
uuidAttach: 2020/08/15 05:09:29.933786 check for attachDone..... 1
DB: 2020/08/15 05:09:29.936070 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.754047ms
uuidAttach: 2020/08/15 05:09:29.938953 check for attachDone..... 2
DB: 2020/08/15 05:09:29.939982 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.289573ms
DB: 2020/08/15 05:09:29.943593 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.314266ms
uuidAttach: 2020/08/15 05:09:29.944048 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.944058 	dontrun = true
uuidAttach: 2020/08/15 05:09:29.944062 continue x 
uuidAttach: 2020/08/15 05:09:29.944066 for loop finished 0  6 
uuidAttach: 2020/08/15 05:09:29.944072 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.944077 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.944082 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.944086 check for attachDone..... 0
DB: 2020/08/15 05:09:29.946830 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.050606ms
Cache: 2020/08/15 05:09:29.946842 In SetUpredAvailable: pUid, tUID:  nB9qVdlwTUaNcTu7hn6sIQ== nB9qVdlwTUaNcTu7hn6sIQ== A#G#:S
Cache: 2020/08/15 05:09:29.946846 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:09:29.949237 check for attachDone..... 1
DB: 2020/08/15 05:09:29.950113 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.231887ms
Unlock: 2020/08/15 05:09:29.950122 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:09:29.950126 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 05:09:29.953994 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.815097ms
grmgr: 2020/08/15 05:09:29.954007 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:09:29.954387 check for attachDone..... 2
uuidAttach: 2020/08/15 05:09:29.954395 ** received on attachDoneCh.... 2
uuidAttach: 2020/08/15 05:09:29.954403 About to run AttachNodeCh: abc  c  9XVokd63ThelNTM9ZSixmQ== 1oYBjq8MSuiXApsOG5yHxQ==
uuidAttach: 2020/08/15 05:09:29.954410 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.954415 check for attachDone..... 0
attachNode: 2020/08/15 05:09:29.954421 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/15 05:09:29.954426 Looping..... 0
grmgr: 2020/08/15 05:09:29.954567 Looping..... 1
grmgr: 2020/08/15 05:09:29.954745 Looping..... 2
grmgr: 2020/08/15 05:09:29.954920 Looping..... 3
grmgr: 2020/08/15 05:09:29.955100 Looping..... 4
grmgr: 2020/08/15 05:09:29.955279 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:09:29.955287 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:09:29.955293 goroutine about to start 2 cUID,pUID   9XVokd63ThelNTM9ZSixmQ==  1oYBjq8MSuiXApsOG5yHxQ==  
grmgr: 2020/08/15 05:09:29.955647 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:09:29.957904 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.427595ms
uuidAttach: 2020/08/15 05:09:29.959560 check for attachDone..... 1
DB: 2020/08/15 05:09:29.960629 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.696731ms
DB: 2020/08/15 05:09:29.964098 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.425002ms
uuidAttach: 2020/08/15 05:09:29.964952 check for attachDone..... 2
DB: 2020/08/15 05:09:29.968590 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.856423ms
AttachNode: main 2020/08/15 05:09:29.968602 FetchForUpdate: for parent    1oYBjq8MSuiXApsOG5yHxQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:09:29.968607 ** Cache FetchForUpdate Cache Key Value: [1oYBjq8MSuiXApsOG5yHxQ==]   sortk: A#G#:S
FetchNode: 2020/08/15 05:09:29.968613  node: 1oYBjq8MSuiXApsOG5yHxQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:09:29.968790 FetchForUpdate: for child    9XVokd63ThelNTM9ZSixmQ==
FetchForUpdate: 2020/08/15 05:09:29.968798 ** Cache FetchForUpdate Cache Key Value: [9XVokd63ThelNTM9ZSixmQ==]   sortk: A#
fetchItems: 2020/08/15 05:09:29.968805 +++  Cache FetchItems for sortk A# UID: [9XVokd63ThelNTM9ZSixmQ==] 
FetchNode: 2020/08/15 05:09:29.968834  node: 9XVokd63ThelNTM9ZSixmQ== subKey: A#
uuidAttach: 2020/08/15 05:09:29.970112 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.970121 	dontrun = true
uuidAttach: 2020/08/15 05:09:29.970125 continue x 
uuidAttach: 2020/08/15 05:09:29.970130 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.970135 check for attachDone..... 0
DB: 2020/08/15 05:09:29.971384 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.488458ms
DB: 2020/08/15 05:09:29.972080 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.432113ms
FetchForUpdate: 2020/08/15 05:09:29.972112 len(nb): 1
fetchItems: 2020/08/15 05:09:29.972119 +++  Cache FetchItems for sortk A#G#:S UID: [1oYBjq8MSuiXApsOG5yHxQ==] 
FetchNode: 2020/08/15 05:09:29.972143  node: 1oYBjq8MSuiXApsOG5yHxQ== subKey: A#G#:S
DB: 2020/08/15 05:09:29.974670 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.496402ms
uuidAttach: 2020/08/15 05:09:29.975326 check for attachDone..... 1
DB: 2020/08/15 05:09:29.978733 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.785083ms
uuidAttach: 2020/08/15 05:09:29.980494 check for attachDone..... 2
DB: 2020/08/15 05:09:29.985370 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.785312ms
uuidAttach: 2020/08/15 05:09:29.985816 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.985825 	dontrun = true
uuidAttach: 2020/08/15 05:09:29.985829 continue x 
uuidAttach: 2020/08/15 05:09:29.985835 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:29.985839 check for attachDone..... 0
DB: 2020/08/15 05:09:29.988692 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.128355ms
uuidAttach: 2020/08/15 05:09:29.990991 check for attachDone..... 1
DB: 2020/08/15 05:09:29.992405 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.358777ms
uuidAttach: 2020/08/15 05:09:29.996179 check for attachDone..... 2
DB: 2020/08/15 05:09:29.998184 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.480612ms
uuidAttach: 2020/08/15 05:09:30.001342 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.001352 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.001356 continue x 
uuidAttach: 2020/08/15 05:09:30.001361 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.001366 check for attachDone..... 0
DB: 2020/08/15 05:09:30.001747 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.279807ms
DB: 2020/08/15 05:09:30.005214 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.183292ms
uuidAttach: 2020/08/15 05:09:30.006518 check for attachDone..... 1
DB: 2020/08/15 05:09:30.010949 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.45181ms
uuidAttach: 2020/08/15 05:09:30.011621 check for attachDone..... 2
DB: 2020/08/15 05:09:30.014220 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.003192ms
uuidAttach: 2020/08/15 05:09:30.016786 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.016796 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.016800 continue x 
uuidAttach: 2020/08/15 05:09:30.016805 for loop finished 1  6 
uuidAttach: 2020/08/15 05:09:30.016811 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.016817 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.016822 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.016827 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.016832 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.016836 check for attachDone..... 0
DB: 2020/08/15 05:09:30.017844 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.324605ms
DB: 2020/08/15 05:09:30.021239 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.220154ms
Cache: 2020/08/15 05:09:30.021251 In SetUpredAvailable: pUid, tUID:  1oYBjq8MSuiXApsOG5yHxQ== 1oYBjq8MSuiXApsOG5yHxQ== A#G#:S
Cache: 2020/08/15 05:09:30.021256 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:09:30.021997 check for attachDone..... 1
DB: 2020/08/15 05:09:30.024557 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.267379ms
Unlock: 2020/08/15 05:09:30.024566 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:09:30.024571 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:09:30.027178 check for attachDone..... 2
DB: 2020/08/15 05:09:30.028354 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.72568ms
grmgr: 2020/08/15 05:09:30.028370 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:09:30.032337 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.032346 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.032351 continue x 
uuidAttach: 2020/08/15 05:09:30.032356 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.032362 check for attachDone..... 0
uuidAttach: 2020/08/15 05:09:30.032366 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 05:09:30.032372 check for attachDone..... 1
uuidAttach: 2020/08/15 05:09:30.037545 check for attachDone..... 2
uuidAttach: 2020/08/15 05:09:30.042736 About to run AttachNodeCh: b  c  nB9qVdlwTUaNcTu7hn6sIQ== 1oYBjq8MSuiXApsOG5yHxQ==
uuidAttach: 2020/08/15 05:09:30.042753 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.042758 check for attachDone..... 0
attachNode: 2020/08/15 05:09:30.042766 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/15 05:09:30.042773 Looping..... 0
grmgr: 2020/08/15 05:09:30.042912 Looping..... 1
grmgr: 2020/08/15 05:09:30.043090 Looping..... 2
grmgr: 2020/08/15 05:09:30.043268 Looping..... 3
grmgr: 2020/08/15 05:09:30.043446 Looping..... 4
grmgr: 2020/08/15 05:09:30.043630 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:09:30.043640 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:09:30.043646 goroutine about to start 3 cUID,pUID   nB9qVdlwTUaNcTu7hn6sIQ==  1oYBjq8MSuiXApsOG5yHxQ==  
grmgr: 2020/08/15 05:09:30.044066 StartCh received for nodeAttach. rCnt = 1 
uuidAttach: 2020/08/15 05:09:30.047910 check for attachDone..... 1
DB: 2020/08/15 05:09:30.048084 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.181091ms
DB: 2020/08/15 05:09:30.050484 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.372616ms
uuidAttach: 2020/08/15 05:09:30.053060 check for attachDone..... 2
DB: 2020/08/15 05:09:30.053873 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.320626ms
DB: 2020/08/15 05:09:30.057849 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.725204ms
AttachNode: main 2020/08/15 05:09:30.057862 FetchForUpdate: for parent    1oYBjq8MSuiXApsOG5yHxQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:09:30.057867 ** Cache FetchForUpdate Cache Key Value: [1oYBjq8MSuiXApsOG5yHxQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:09:30.057873 +++  Cache FetchItems for sortk A#G#:S UID: [1oYBjq8MSuiXApsOG5yHxQ==] 
FetchNode: 2020/08/15 05:09:30.057878  node: 1oYBjq8MSuiXApsOG5yHxQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:09:30.058073 FetchForUpdate: for child    nB9qVdlwTUaNcTu7hn6sIQ==
FetchForUpdate: 2020/08/15 05:09:30.058096 ** Cache FetchForUpdate Cache Key Value: [nB9qVdlwTUaNcTu7hn6sIQ==]   sortk: A#
fetchItems: 2020/08/15 05:09:30.058122 +++  Cache FetchItems for sortk A# UID: [nB9qVdlwTUaNcTu7hn6sIQ==] 
FetchNode: 2020/08/15 05:09:30.058138  node: nB9qVdlwTUaNcTu7hn6sIQ== subKey: A#
uuidAttach: 2020/08/15 05:09:30.058321 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.058343 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.058347 continue x 
uuidAttach: 2020/08/15 05:09:30.058353 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.058358 check for attachDone..... 0
DB: 2020/08/15 05:09:30.060882 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.969905ms
DB: 2020/08/15 05:09:30.061664 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.485565ms
fetchItems: 2020/08/15 05:09:30.061823 +++  Cache FetchItems for sortk A# UID: [nB9qVdlwTUaNcTu7hn6sIQ==] 
FetchNode: 2020/08/15 05:09:30.061831  node: nB9qVdlwTUaNcTu7hn6sIQ== subKey: A#
uuidAttach: 2020/08/15 05:09:30.063524 check for attachDone..... 1
DB: 2020/08/15 05:09:30.064425 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.566584ms
DB: 2020/08/15 05:09:30.065809 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.785343ms
uuidAttach: 2020/08/15 05:09:30.068679 check for attachDone..... 2
DB: 2020/08/15 05:09:30.068888 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.050475ms
DB: 2020/08/15 05:09:30.068902 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.050475ms
DB: 2020/08/15 05:09:30.072134 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.191505ms
DB: 2020/08/15 05:09:30.072150 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.191505ms
uuidAttach: 2020/08/15 05:09:30.073834 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.073843 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.073847 continue x 
uuidAttach: 2020/08/15 05:09:30.073852 for loop finished 2  6 
uuidAttach: 2020/08/15 05:09:30.073857 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.073864 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.073869 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.073874 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.073878 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.073882 check for attachDone..... 0
DB: 2020/08/15 05:09:30.075716 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.364952ms
uuidAttach: 2020/08/15 05:09:30.079054 check for attachDone..... 1
DB: 2020/08/15 05:09:30.079126 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.222602ms
uuidAttach: 2020/08/15 05:09:30.084248 check for attachDone..... 2
DB: 2020/08/15 05:09:30.085183 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.542398ms
DB: 2020/08/15 05:09:30.088606 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.114093ms
uuidAttach: 2020/08/15 05:09:30.089396 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.089411 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.089415 continue x 
uuidAttach: 2020/08/15 05:09:30.089421 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.089428 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.089433 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.089437 check for attachDone..... 0
DB: 2020/08/15 05:09:30.092423 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.232798ms
uuidAttach: 2020/08/15 05:09:30.094588 check for attachDone..... 1
DB: 2020/08/15 05:09:30.098446 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.548561ms
uuidAttach: 2020/08/15 05:09:30.099747 check for attachDone..... 2
DB: 2020/08/15 05:09:30.101986 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.12717ms
uuidAttach: 2020/08/15 05:09:30.104907 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.104918 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.104922 continue x 
uuidAttach: 2020/08/15 05:09:30.104927 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.104932 check for attachDone..... 0
DB: 2020/08/15 05:09:30.105790 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.309924ms
uuidAttach: 2020/08/15 05:09:30.110081 check for attachDone..... 1
DB: 2020/08/15 05:09:30.111864 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.601413ms
uuidAttach: 2020/08/15 05:09:30.115240 check for attachDone..... 2
DB: 2020/08/15 05:09:30.115698 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.411583ms
DB: 2020/08/15 05:09:30.119789 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.471463ms
uuidAttach: 2020/08/15 05:09:30.120412 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.120422 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.120426 continue x 
uuidAttach: 2020/08/15 05:09:30.120431 for loop finished 2  6 
uuidAttach: 2020/08/15 05:09:30.120436 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.120442 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.120447 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.120452 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.120457 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.120461 check for attachDone..... 0
DB: 2020/08/15 05:09:30.123532 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.455621ms
Cache: 2020/08/15 05:09:30.123544 In SetUpredAvailable: pUid, tUID:  1oYBjq8MSuiXApsOG5yHxQ== 8qmpxiR9RSumnuGEg6dFVA== A#G#:S
Cache: 2020/08/15 05:09:30.123549 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:09:30.125618 check for attachDone..... 1
DB: 2020/08/15 05:09:30.126934 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.347731ms
Unlock: 2020/08/15 05:09:30.126943 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:09:30.126947 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:09:30.130783 check for attachDone..... 2
DB: 2020/08/15 05:09:30.131179 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.176444ms
grmgr: 2020/08/15 05:09:30.131192 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:09:30.135949 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.135957 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.135961 continue x 
uuidAttach: 2020/08/15 05:09:30.135966 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.135972 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.135977 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.135982 check for attachDone..... 0
uuidAttach: 2020/08/15 05:09:30.135987 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 05:09:30.135992 check for attachDone..... 1
uuidAttach: 2020/08/15 05:09:30.141152 check for attachDone..... 2
uuidAttach: 2020/08/15 05:09:30.146324 About to run AttachNodeCh: c  abc  1oYBjq8MSuiXApsOG5yHxQ== 9XVokd63ThelNTM9ZSixmQ==
uuidAttach: 2020/08/15 05:09:30.146339 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.146344 check for attachDone..... 0
attachNode: 2020/08/15 05:09:30.146352 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/15 05:09:30.146359 Looping..... 0
grmgr: 2020/08/15 05:09:30.146506 Looping..... 1
grmgr: 2020/08/15 05:09:30.146687 Looping..... 2
grmgr: 2020/08/15 05:09:30.146866 Looping..... 3
grmgr: 2020/08/15 05:09:30.147063 Looping..... 4
grmgr: 2020/08/15 05:09:30.147259 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:09:30.147268 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:09:30.147274 goroutine about to start 4 cUID,pUID   1oYBjq8MSuiXApsOG5yHxQ==  9XVokd63ThelNTM9ZSixmQ==  
grmgr: 2020/08/15 05:09:30.148175 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:09:30.150815 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.23593ms
uuidAttach: 2020/08/15 05:09:30.151518 check for attachDone..... 1
DB: 2020/08/15 05:09:30.153198 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.353056ms
DB: 2020/08/15 05:09:30.156589 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.308066ms
uuidAttach: 2020/08/15 05:09:30.157070 check for attachDone..... 2
DB: 2020/08/15 05:09:30.160628 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.772332ms
AttachNode: main 2020/08/15 05:09:30.160642 FetchForUpdate: for parent    9XVokd63ThelNTM9ZSixmQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:09:30.160647 ** Cache FetchForUpdate Cache Key Value: [9XVokd63ThelNTM9ZSixmQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:09:30.160652 +++  Cache FetchItems for sortk A#G#:S UID: [9XVokd63ThelNTM9ZSixmQ==] 
FetchNode: 2020/08/15 05:09:30.160657  node: 9XVokd63ThelNTM9ZSixmQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:09:30.160873 FetchForUpdate: for child    1oYBjq8MSuiXApsOG5yHxQ==
FetchForUpdate: 2020/08/15 05:09:30.160882 ** Cache FetchForUpdate Cache Key Value: [1oYBjq8MSuiXApsOG5yHxQ==]   sortk: A#
fetchItems: 2020/08/15 05:09:30.160887 +++  Cache FetchItems for sortk A# UID: [1oYBjq8MSuiXApsOG5yHxQ==] 
FetchNode: 2020/08/15 05:09:30.160905  node: 1oYBjq8MSuiXApsOG5yHxQ== subKey: A#
uuidAttach: 2020/08/15 05:09:30.162237 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.162246 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.162250 continue x 
uuidAttach: 2020/08/15 05:09:30.162255 for loop finished 3  6 
uuidAttach: 2020/08/15 05:09:30.162260 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.162267 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.162271 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.162276 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.162281 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.162285 check for attachDone..... 0
DB: 2020/08/15 05:09:30.163819 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.871323ms
DB: 2020/08/15 05:09:30.165378 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.671808ms
uuidAttach: 2020/08/15 05:09:30.167297 check for attachDone..... 1
DB: 2020/08/15 05:09:30.168851 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.203555ms
uuidAttach: 2020/08/15 05:09:30.172458 check for attachDone..... 2
DB: 2020/08/15 05:09:30.175005 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.634029ms
uuidAttach: 2020/08/15 05:09:30.177681 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.177695 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.177699 continue x 
uuidAttach: 2020/08/15 05:09:30.177705 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.177711 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.177716 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.177721 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.177726 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.177730 check for attachDone..... 0
DB: 2020/08/15 05:09:30.178650 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.377983ms
DB: 2020/08/15 05:09:30.182545 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.28637ms
uuidAttach: 2020/08/15 05:09:30.183229 check for attachDone..... 1
uuidAttach: 2020/08/15 05:09:30.188418 check for attachDone..... 2
DB: 2020/08/15 05:09:30.188612 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.576113ms
DB: 2020/08/15 05:09:30.192208 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.149711ms
uuidAttach: 2020/08/15 05:09:30.193594 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.193604 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.193608 continue x 
uuidAttach: 2020/08/15 05:09:30.193612 for loop finished 3  6 
uuidAttach: 2020/08/15 05:09:30.193618 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.193637 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.193642 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.193659 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.193664 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.193668 check for attachDone..... 0
DB: 2020/08/15 05:09:30.196237 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.579245ms
uuidAttach: 2020/08/15 05:09:30.198839 check for attachDone..... 1
DB: 2020/08/15 05:09:30.202327 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.588628ms
uuidAttach: 2020/08/15 05:09:30.204005 check for attachDone..... 2
DB: 2020/08/15 05:09:30.206104 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.307551ms
uuidAttach: 2020/08/15 05:09:30.209197 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.209207 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.209211 continue x 
uuidAttach: 2020/08/15 05:09:30.209218 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.209224 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.209229 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.209234 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.209239 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.209244 check for attachDone..... 0
DB: 2020/08/15 05:09:30.209885 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.298772ms
DB: 2020/08/15 05:09:30.213422 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.271444ms
Cache: 2020/08/15 05:09:30.213437 In SetUpredAvailable: pUid, tUID:  9XVokd63ThelNTM9ZSixmQ== 9XVokd63ThelNTM9ZSixmQ== A#G#:S
Cache: 2020/08/15 05:09:30.213442 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:09:30.214399 check for attachDone..... 1
DB: 2020/08/15 05:09:30.216809 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.293816ms
Unlock: 2020/08/15 05:09:30.216819 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:09:30.216825 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:09:30.219506 check for attachDone..... 2
DB: 2020/08/15 05:09:30.220719 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.817215ms
grmgr: 2020/08/15 05:09:30.220734 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:09:30.224674 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.224683 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.224687 continue x 
uuidAttach: 2020/08/15 05:09:30.224692 for loop finished 3  6 
uuidAttach: 2020/08/15 05:09:30.224698 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.224704 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.224720 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.224725 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.224730 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.224734 check for attachDone..... 0
uuidAttach: 2020/08/15 05:09:30.224739 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 05:09:30.224744 check for attachDone..... 1
uuidAttach: 2020/08/15 05:09:30.229908 check for attachDone..... 2
uuidAttach: 2020/08/15 05:09:30.235114 About to run AttachNodeCh: b  abc  nB9qVdlwTUaNcTu7hn6sIQ== 9XVokd63ThelNTM9ZSixmQ==
uuidAttach: 2020/08/15 05:09:30.235134 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.235140 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.235146 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.235151 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.235156 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.235160 check for attachDone..... 0
attachNode: 2020/08/15 05:09:30.235167 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/15 05:09:30.235174 Looping..... 0
grmgr: 2020/08/15 05:09:30.235294 Looping..... 1
grmgr: 2020/08/15 05:09:30.235322 Looping..... 2
grmgr: 2020/08/15 05:09:30.235486 Looping..... 3
grmgr: 2020/08/15 05:09:30.235667 Looping..... 4
grmgr: 2020/08/15 05:09:30.235866 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:09:30.235875 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:09:30.235881 goroutine about to start 5 cUID,pUID   nB9qVdlwTUaNcTu7hn6sIQ==  9XVokd63ThelNTM9ZSixmQ==  
grmgr: 2020/08/15 05:09:30.236166 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:09:30.238071 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.115327ms
DB: 2020/08/15 05:09:30.240245 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.14232ms
uuidAttach: 2020/08/15 05:09:30.240492 check for attachDone..... 1
DB: 2020/08/15 05:09:30.243593 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.273073ms
uuidAttach: 2020/08/15 05:09:30.245663 check for attachDone..... 2
DB: 2020/08/15 05:09:30.247514 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.859157ms
AttachNode: main 2020/08/15 05:09:30.247528 FetchForUpdate: for parent    9XVokd63ThelNTM9ZSixmQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:09:30.247534 ** Cache FetchForUpdate Cache Key Value: [9XVokd63ThelNTM9ZSixmQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:09:30.247540 +++  Cache FetchItems for sortk A#G#:S UID: [9XVokd63ThelNTM9ZSixmQ==] 
FetchNode: 2020/08/15 05:09:30.247545  node: 9XVokd63ThelNTM9ZSixmQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:09:30.247716 FetchForUpdate: for child    nB9qVdlwTUaNcTu7hn6sIQ==
FetchForUpdate: 2020/08/15 05:09:30.247739 ** Cache FetchForUpdate Cache Key Value: [nB9qVdlwTUaNcTu7hn6sIQ==]   sortk: A#
fetchItems: 2020/08/15 05:09:30.247745 +++  Cache FetchItems for sortk A# UID: [nB9qVdlwTUaNcTu7hn6sIQ==] 
FetchNode: 2020/08/15 05:09:30.247757  node: nB9qVdlwTUaNcTu7hn6sIQ== subKey: A#
DB: 2020/08/15 05:09:30.249955 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.379752ms
uuidAttach: 2020/08/15 05:09:30.250909 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.250921 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.250925 continue x 
uuidAttach: 2020/08/15 05:09:30.250930 for loop finished 4  6 
uuidAttach: 2020/08/15 05:09:30.250935 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.250951 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.250957 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.250962 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.250969 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.250974 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.250978 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.250990 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.250995 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.251000 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.251005 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.251009 check for attachDone..... 0
DB: 2020/08/15 05:09:30.251463 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.65839ms
DB: 2020/08/15 05:09:30.253683 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.229759ms
uuidAttach: 2020/08/15 05:09:30.256184 check for attachDone..... 1
DB: 2020/08/15 05:09:30.256668 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.951277ms
DB: 2020/08/15 05:09:30.256682 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 2.951277ms
DB: 2020/08/15 05:09:30.259910 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.19643ms
DB: 2020/08/15 05:09:30.259926 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.19643ms
uuidAttach: 2020/08/15 05:09:30.261297 check for attachDone..... 2
DB: 2020/08/15 05:09:30.263546 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.404508ms
uuidAttach: 2020/08/15 05:09:30.266462 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266473 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.266477 continue x 
uuidAttach: 2020/08/15 05:09:30.266481 for loop finished 4  6 
uuidAttach: 2020/08/15 05:09:30.266487 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266493 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266498 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266503 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266508 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266513 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266518 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266523 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266528 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266533 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266538 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.266542 check for attachDone..... 0
DB: 2020/08/15 05:09:30.267131 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.397868ms
uuidAttach: 2020/08/15 05:09:30.271693 check for attachDone..... 1
DB: 2020/08/15 05:09:30.273221 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.559875ms
DB: 2020/08/15 05:09:30.276591 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.116662ms
uuidAttach: 2020/08/15 05:09:30.277319 check for attachDone..... 2
DB: 2020/08/15 05:09:30.280525 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.378277ms
uuidAttach: 2020/08/15 05:09:30.282472 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282481 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.282485 continue x 
uuidAttach: 2020/08/15 05:09:30.282489 for loop finished 4  6 
uuidAttach: 2020/08/15 05:09:30.282494 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282500 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282505 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282510 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282527 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282531 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282535 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282540 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282544 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282548 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282552 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.282556 check for attachDone..... 0
DB: 2020/08/15 05:09:30.286396 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.408924ms
uuidAttach: 2020/08/15 05:09:30.287708 check for attachDone..... 1
DB: 2020/08/15 05:09:30.290021 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.096027ms
uuidAttach: 2020/08/15 05:09:30.292871 check for attachDone..... 2
DB: 2020/08/15 05:09:30.293643 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.121891ms
uuidAttach: 2020/08/15 05:09:30.298053 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298063 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.298067 continue x 
uuidAttach: 2020/08/15 05:09:30.298072 for loop finished 4  6 
uuidAttach: 2020/08/15 05:09:30.298077 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298083 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298088 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298093 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298098 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298103 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298107 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298112 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298117 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298121 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298126 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.298130 check for attachDone..... 0
DB: 2020/08/15 05:09:30.299612 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.527432ms
DB: 2020/08/15 05:09:30.303065 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.06ms
uuidAttach: 2020/08/15 05:09:30.303706 check for attachDone..... 1
DB: 2020/08/15 05:09:30.306856 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.354238ms
uuidAttach: 2020/08/15 05:09:30.308867 check for attachDone..... 2
DB: 2020/08/15 05:09:30.310210 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.106764ms
Cache: 2020/08/15 05:09:30.310222 In SetUpredAvailable: pUid, tUID:  9XVokd63ThelNTM9ZSixmQ== r3P2PYsLTai6YS1T5S2xHg== A#G#:S
Cache: 2020/08/15 05:09:30.310226 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 05:09:30.313687 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.429029ms
Unlock: 2020/08/15 05:09:30.313696 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:09:30.313701 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:09:30.313995 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314003 	dontrun = true
uuidAttach: 2020/08/15 05:09:30.314007 continue x 
uuidAttach: 2020/08/15 05:09:30.314011 for loop finished 4  6 
uuidAttach: 2020/08/15 05:09:30.314016 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314021 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314026 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314043 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314047 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314052 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314057 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314062 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314066 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314071 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314076 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:09:30.314080 check for attachDone..... 0
DB: 2020/08/15 05:09:30.317733 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.981933ms
grmgr: 2020/08/15 05:09:30.317747 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:09:30.319238 check for attachDone..... 1
uuidAttach: 2020/08/15 05:09:30.319245 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 05:09:30.319250 check for attachDone..... 2
uuidAttach: 2020/08/15 05:09:30.324428 About to run AttachNodeCh: c  b  1oYBjq8MSuiXApsOG5yHxQ== nB9qVdlwTUaNcTu7hn6sIQ==
uuidAttach: 2020/08/15 05:09:30.324438 for loop finished 5  6 
uuidAttach: 2020/08/15 05:09:30.324442  break....
attachNode: 2020/08/15 05:09:30.324447 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/15 05:09:30.324452 Looping..... 0
grmgr: 2020/08/15 05:09:30.324600 Looping..... 1
grmgr: 2020/08/15 05:09:30.324774 Looping..... 2
grmgr: 2020/08/15 05:09:30.324947 Looping..... 3
grmgr: 2020/08/15 05:09:30.325121 Looping..... 4
grmgr: 2020/08/15 05:09:30.325304 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:09:30.325312 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:09:30.325318 goroutine about to start 6 cUID,pUID   1oYBjq8MSuiXApsOG5yHxQ==  nB9qVdlwTUaNcTu7hn6sIQ==  
rdfLoader: 2020/08/15 05:09:30.325323 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/15 05:09:30.325546 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:09:30.328123 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.741622ms
DB: 2020/08/15 05:09:30.330107 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 1.956945ms
DB: 2020/08/15 05:09:30.333488 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.333417ms
DB: 2020/08/15 05:09:30.337565 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.819477ms
AttachNode: main 2020/08/15 05:09:30.337578 FetchForUpdate: for parent    nB9qVdlwTUaNcTu7hn6sIQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:09:30.337583 ** Cache FetchForUpdate Cache Key Value: [nB9qVdlwTUaNcTu7hn6sIQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:09:30.337589 +++  Cache FetchItems for sortk A#G#:S UID: [nB9qVdlwTUaNcTu7hn6sIQ==] 
FetchNode: 2020/08/15 05:09:30.337593  node: nB9qVdlwTUaNcTu7hn6sIQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:09:30.337766 FetchForUpdate: for child    1oYBjq8MSuiXApsOG5yHxQ==
FetchForUpdate: 2020/08/15 05:09:30.337798 ** Cache FetchForUpdate Cache Key Value: [1oYBjq8MSuiXApsOG5yHxQ==]   sortk: A#
fetchItems: 2020/08/15 05:09:30.337805 +++  Cache FetchItems for sortk A# UID: [1oYBjq8MSuiXApsOG5yHxQ==] 
FetchNode: 2020/08/15 05:09:30.337837  node: 1oYBjq8MSuiXApsOG5yHxQ== subKey: A#
DB: 2020/08/15 05:09:30.340798 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.172217ms
DB: 2020/08/15 05:09:30.341847 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.964901ms
DB: 2020/08/15 05:09:30.344497 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.224284ms
DB: 2020/08/15 05:09:30.350754 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.224812ms
DB: 2020/08/15 05:09:30.350769 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.224812ms
DB: 2020/08/15 05:09:30.353858 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.04645ms
DB: 2020/08/15 05:09:30.353872 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.04645ms
DB: 2020/08/15 05:09:30.357622 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.548206ms
DB: 2020/08/15 05:09:30.361406 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.603712ms
DB: 2020/08/15 05:09:30.367440 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.506498ms
DB: 2020/08/15 05:09:30.370788 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.05392ms
DB: 2020/08/15 05:09:30.374754 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.313201ms
DB: 2020/08/15 05:09:30.380734 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.49555ms
DB: 2020/08/15 05:09:30.384459 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.268516ms
DB: 2020/08/15 05:09:30.388312 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.383725ms
DB: 2020/08/15 05:09:30.394424 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.680019ms
DB: 2020/08/15 05:09:30.397915 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.119177ms
DB: 2020/08/15 05:09:30.401973 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.577001ms
DB: 2020/08/15 05:09:30.405673 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.398831ms
Cache: 2020/08/15 05:09:30.405699 In SetUpredAvailable: pUid, tUID:  nB9qVdlwTUaNcTu7hn6sIQ== DkhptxdLQ1G/Qot6nj5unw== A#G#:S
Cache: 2020/08/15 05:09:30.405705 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 05:09:30.409010 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.267166ms
Unlock: 2020/08/15 05:09:30.409022 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:09:30.409027 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 05:09:30.417993 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.899304ms
uuidAttach: 2020/08/15 05:09:30.418042 received on attachDoneCh: uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/15 05:09:30.418053 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/15 05:09:30.418059 saveNode finished waiting...exiting
rdfLoader: 2020/08/15 05:09:30.418065 cancel contexts
rdfLoader: 2020/08/15 05:09:30.418071 wait for autonomous goroutines to end
errlog: 2020/08/15 05:09:30.418076 Powering down...
grmgr: 2020/08/15 05:09:30.418081 Powering down...
rdfuuid: 2020/08/15 05:09:30.418086 Powering down...
rdfLoader: 2020/08/15 05:09:30.418091 loader exists.....
DB:2020/08/15 05:10:40 log.go:18: ===============================================================================
errlog: 2020/08/15 05:10:40.857495 Powering on...
rdfLoader: 2020/08/15 05:10:40.857531 saveNode started......
rdfLoader: 2020/08/15 05:10:40.857536 define saveNode limiter......
rdfuuid: 2020/08/15 05:10:40.857544 Powering on...
grmgr: 2020/08/15 05:10:40.857561 Powering on...
rdfLoader: 2020/08/15 05:10:40.857571  principle goroutines started 
RDFreader: 2020/08/15 05:10:40.857615 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 05:10:40.857629 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 05:10:40.857635 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 05:10:40.857641 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 05:10:40.857646 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 05:10:40.857651 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 05:10:40.857656 spo read:      
RDFreader: 2020/08/15 05:10:40.857661 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 05:10:40.857666 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 05:10:40.857671 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 05:10:40.857676 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 05:10:40.857680 spo read:      
RDFreader: 2020/08/15 05:10:40.857686 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 05:10:40.857691 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 05:10:40.857696 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 05:10:40.857701 spo read:  b  Age  "58"
RDFreader: 2020/08/15 05:10:40.857706 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 05:10:40.857711 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 05:10:40.857716 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 05:10:40.857721 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 05:10:40.857726 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 05:10:40.857730 spo read:      
RDFreader: 2020/08/15 05:10:40.857735 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 05:10:40.857755 Send node batch on channel verifyCh
RDFreader: 2020/08/15 05:10:40.857762 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 05:10:40.857766 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 05:10:40.857772 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 05:10:40.857779 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 05:10:40.857784 spo read:  c  Age  "67"
RDFreader: 2020/08/15 05:10:40.857790 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 05:10:40.857794 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 05:10:40.857800 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 05:10:40.857804 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 05:10:40.857818 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 05:10:40.857823 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 05:10:40.857827 spo read:      
RDFreader: 2020/08/15 05:10:40.857832 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 05:10:40.857837 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 05:10:40.857842 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 05:10:40.857846 spo read:  d  Age  "36"
RDFreader: 2020/08/15 05:10:40.857851 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 05:10:40.857857 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 05:10:40.857861 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 05:10:40.857865 close verify channel
rdfLoader: 2020/08/15 05:10:40.857869 wait for goroutines to end
rdfLoader: 2020/08/15 05:10:40.857873 verify started....
rdfLoader: 2020/08/15 05:10:40.857877 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 05:10:40.857881 .  getType..
rdfLoader: 2020/08/15 05:10:40.857885 node.TyName : [Person]
DB: 2020/08/15 05:10:40.934329 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 76.359917ms
grmgr: 2020/08/15 05:10:40.934463 Looping..... 0
grmgr: 2020/08/15 05:10:40.934499 Looping..... 1
grmgr: 2020/08/15 05:10:40.934525 Looping..... 2
grmgr: 2020/08/15 05:10:40.934682 Looping..... 3
grmgr: 2020/08/15 05:10:40.934860 Looping..... 4
grmgr: 2020/08/15 05:10:40.935037 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 05:10:40.935048 .  getType..
rdfLoader: 2020/08/15 05:10:40.935053 node.TyName : [Person]
grmgr: 2020/08/15 05:10:40.935058 Looping..... 0
unmarshalRDF2020/08/15 05:10:40.935070 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:10:40.935080 Looping..... 1
grmgr: 2020/08/15 05:10:40.935085 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 05:10:40.935089 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 05:10:40.935097 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 05:10:40.935101 .  getType..
rdfLoader: 2020/08/15 05:10:40.935105 node.TyName : [Person]
grmgr: 2020/08/15 05:10:40.935110 Looping..... 0
rdfLoader: 2020/08/15 05:10:40.935120 Add to SS . [Honda]
rdfLoader: 2020/08/15 05:10:40.935125 Add to SS . [Alfa]
uuidAttach: 2020/08/15 05:10:40.935158 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:40.935166 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:10:40.935213 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:10:40.935220 Exit  unmarshalRDF. 
saveNode: 2020/08/15 05:10:40.935225 read from saveCH channel 1 
unmarshalRDF2020/08/15 05:10:40.935234 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:10:40.935259 Looping..... 1
grmgr: 2020/08/15 05:10:40.935265 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 05:10:40.935269 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 05:10:40.935275 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 05:10:40.935279 Looping..... 0
rdfLoader: 2020/08/15 05:10:40.935288 Add to SS . [Honda]
rdfLoader: 2020/08/15 05:10:40.935292 Add to SS . [VW Golf]
uuidAttach: 2020/08/15 05:10:40.935307 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:40.935313 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:10:40.935351 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:10:40.935356 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 05:10:40.935362 .  getType..
rdfLoader: 2020/08/15 05:10:40.935366 node.TyName : [Person]
unmarshalRDF2020/08/15 05:10:40.935374 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:10:40.935385 Looping..... 1
rdfLoader: 2020/08/15 05:10:40.935394 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 05:10:40.935398 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 05:10:40.935412 Add to SS . [Honda]
uuidAttach: 2020/08/15 05:10:40.935425 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:40.935432 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:10:40.935458 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:10:40.935463 Exit  unmarshalRDF. 
grmgr: 2020/08/15 05:10:40.935487 Looping..... 2
grmgr: 2020/08/15 05:10:40.935669 Looping..... 3
grmgr: 2020/08/15 05:10:40.935846 Looping..... 4
grmgr: 2020/08/15 05:10:40.936024 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 05:10:40.936033 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 05:10:40.936037 Looping..... 0
saveNode: 2020/08/15 05:10:40.936043 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:10:40.936049 read from saveCH channel 2 
grmgr: 2020/08/15 05:10:40.936079 Looping..... 1
SaveRDFNode: xxx 2020/08/15 05:10:40.936090 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.936097 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.936103 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.936109 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.936115 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.936120 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.936126 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:10:40.936130 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:10:40.936137 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0000176e0)}
SaveRDFNode: 2020/08/15 05:10:40.936142 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:10:40.936152 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:40.936156 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:40.936161 UID received  : YO0XMk0FR/GIO/OtURAQTg==
grmgr: 2020/08/15 05:10:40.936428 Looping..... 2
grmgr: 2020/08/15 05:10:40.936593 Looping..... 3
grmgr: 2020/08/15 05:10:40.936778 Looping..... 4
grmgr: 2020/08/15 05:10:40.936947 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 05:10:40.936962 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/15 05:10:40.936967 Looping..... 0
unmarshalRDF2020/08/15 05:10:40.936983 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:10:40.936995 Looping..... 1
rdfLoader: 2020/08/15 05:10:40.937005 Add to SS . [Bentley]
unmarshalRDF2020/08/15 05:10:40.937046 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:10:40.937052 Exit  unmarshalRDF. 
grmgr: 2020/08/15 05:10:40.937062 Looping..... 2
grmgr: 2020/08/15 05:10:40.937126 Looping..... 3
grmgr: 2020/08/15 05:10:40.937305 Looping..... 4
grmgr: 2020/08/15 05:10:40.937484 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 05:10:40.937492 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/15 05:10:40.937500 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:10:40.937505 read from saveCH channel 3 
grmgr: 2020/08/15 05:10:40.937510 Looping..... 0
grmgr: 2020/08/15 05:10:40.937535 Looping..... 1
grmgr: 2020/08/15 05:10:40.937540 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 05:10:40.937544 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 05:10:40.937554 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.937559 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.937566 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.937572 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.937577 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.937583 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.937589 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:10:40.937593 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:10:40.937598 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017e00)}
SaveRDFNode: 2020/08/15 05:10:40.937602 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:10:40.937610 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:40.937614 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:40.937620 UID received  : erP65LcoQbGS4XPH0ibdkg==
DB: 2020/08/15 05:10:40.946028 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.816415ms
DB: 2020/08/15 05:10:40.950683 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.615142ms
DB: 2020/08/15 05:10:40.955393 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.677148ms
DB: 2020/08/15 05:10:40.959972 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.546584ms
DB: 2020/08/15 05:10:40.964618 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.613952ms
SaveRDFNode: 2020/08/15 05:10:40.964643 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000176e0)}
rdfUIDdb: 2020/08/15 05:10:40.964652 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:40.964657 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:40.964663 Received UID: X18=
SaveRDFNode: 2020/08/15 05:10:40.964680 a: = db.Item{PKey:[]uint8{0x60, 0xed, 0x17, 0x32, 0x4d, 0x5, 0x47, 0xf1, 0x88, 0x3b, 0xf3, 0xad, 0x51, 0x10, 0x10, 0x4e}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:10:40.964969 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 27.311931ms
DB: 2020/08/15 05:10:40.969483 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.737779ms
SaveRDFNode: 2020/08/15 05:10:40.969496 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000176e0)}
rdfUIDdb: 2020/08/15 05:10:40.969502 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:40.969506 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:40.969512 Received UID: X18=
SaveRDFNode: 2020/08/15 05:10:40.969522 a: = db.Item{PKey:[]uint8{0x60, 0xed, 0x17, 0x32, 0x4d, 0x5, 0x47, 0xf1, 0x88, 0x3b, 0xf3, 0xad, 0x51, 0x10, 0x10, 0x4e}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:10:40.969774 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.777312ms
DB: 2020/08/15 05:10:40.973886 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.080335ms
DB: 2020/08/15 05:10:40.974344 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.79236ms
SaveRDFNode: 2020/08/15 05:10:40.974354 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:10:40.974362 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 05:10:40.974367 Send ack to waiting saveNode...
saveNode: 2020/08/15 05:10:40.974372 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:10:40.974378 read from saveCH channel 4 
grmgr: 2020/08/15 05:10:40.974383 Looping..... 0
grmgr: 2020/08/15 05:10:40.974417 Looping..... 1
grmgr: 2020/08/15 05:10:40.974423 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 05:10:40.974427 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 05:10:40.974447 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.974454 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.974463 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.974469 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.974474 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.974480 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.974486 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:10:40.974490 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:10:40.974496 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0000178c0)}
SaveRDFNode: 2020/08/15 05:10:40.974500 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:10:40.974510 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:40.974514 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:40.974519 UID received  : RRgRALIqR1i9C9GRxBRR7A==
DB: 2020/08/15 05:10:40.978023 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.104738ms
DB: 2020/08/15 05:10:40.979211 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.659993ms
DB: 2020/08/15 05:10:40.987774 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.530743ms
DB: 2020/08/15 05:10:40.988057 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.003642ms
SaveRDFNode: 2020/08/15 05:10:40.988070 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017e00)}
rdfUIDdb: 2020/08/15 05:10:40.988077 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:40.988081 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:40.988087 Received UID: X18=
SaveRDFNode: 2020/08/15 05:10:40.988099 a: = db.Item{PKey:[]uint8{0x7a, 0xb3, 0xfa, 0xe4, 0xb7, 0x28, 0x41, 0xb1, 0x92, 0xe1, 0x73, 0xc7, 0xd2, 0x26, 0xdd, 0x92}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:10:40.992543 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.7303ms
DB: 2020/08/15 05:10:40.992833 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.704018ms
SaveRDFNode: 2020/08/15 05:10:40.992845 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017e00)}
rdfUIDdb: 2020/08/15 05:10:40.992851 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:40.992855 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:40.992860 Received UID: X18=
SaveRDFNode: 2020/08/15 05:10:40.992882 a: = db.Item{PKey:[]uint8{0x7a, 0xb3, 0xfa, 0xe4, 0xb7, 0x28, 0x41, 0xb1, 0x92, 0xe1, 0x73, 0xc7, 0xd2, 0x26, 0xdd, 0x92}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:10:40.997259 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.682988ms
DB: 2020/08/15 05:10:40.997516 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.603661ms
SaveRDFNode: 2020/08/15 05:10:40.997526 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:10:40.997534 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 05:10:40.997539 Send ack to waiting saveNode...
saveNode: 2020/08/15 05:10:40.997545 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/15 05:10:40.997550 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/15 05:10:40.997578 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.997584 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.997591 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.997597 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.997606 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.997612 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:10:40.997618 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:10:40.997622 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:10:40.997628 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0003713e0)}
SaveRDFNode: 2020/08/15 05:10:40.997632 Waiting for UID ......................
rdfUIDdb: 2020/08/15 05:10:40.997653 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:40.997669 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:40.997683 UID received  : VoyIBE+/T2+NcOdxSraETg==
grmgr: 2020/08/15 05:10:40.997846 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 05:10:41.001931 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.640347ms
SaveRDFNode: 2020/08/15 05:10:41.001944 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000178c0)}
rdfUIDdb: 2020/08/15 05:10:41.001950 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:41.001954 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:41.001959 Received UID: X18=
SaveRDFNode: 2020/08/15 05:10:41.001969 a: = db.Item{PKey:[]uint8{0x45, 0x18, 0x11, 0x0, 0xb2, 0x2a, 0x47, 0x58, 0xbd, 0xb, 0xd1, 0x91, 0xc4, 0x14, 0x51, 0xec}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:10:41.002240 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.531179ms
DB: 2020/08/15 05:10:41.006573 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.573539ms
SaveRDFNode: 2020/08/15 05:10:41.006586 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000178c0)}
rdfUIDdb: 2020/08/15 05:10:41.006592 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:41.006595 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:41.006601 Received UID: X18=
SaveRDFNode: 2020/08/15 05:10:41.006612 a: = db.Item{PKey:[]uint8{0x45, 0x18, 0x11, 0x0, 0xb2, 0x2a, 0x47, 0x58, 0xbd, 0xb, 0xd1, 0x91, 0xc4, 0x14, 0x51, 0xec}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:10:41.006890 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.619084ms
DB: 2020/08/15 05:10:41.011201 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.280019ms
DB: 2020/08/15 05:10:41.012257 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.615817ms
SaveRDFNode: 2020/08/15 05:10:41.012268 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:10:41.012287 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 05:10:41.015425 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.193138ms
DB: 2020/08/15 05:10:41.019784 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.328084ms
SaveRDFNode: 2020/08/15 05:10:41.019796 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003713e0)}
rdfUIDdb: 2020/08/15 05:10:41.019803 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:41.019807 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:41.019812 Received UID: X18=
SaveRDFNode: 2020/08/15 05:10:41.019853 a: = db.Item{PKey:[]uint8{0x56, 0x8c, 0x88, 0x4, 0x4f, 0xbf, 0x4f, 0x6f, 0x8d, 0x70, 0xe7, 0x71, 0x4a, 0xb6, 0x84, 0x4e}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:10:41.024239 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.354327ms
SaveRDFNode: 2020/08/15 05:10:41.024252 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003713e0)}
rdfUIDdb: 2020/08/15 05:10:41.024258 Send back uuid on RespCh.......
rdfUIDdb: 2020/08/15 05:10:41.024262 Sent back uuid on RespCh+++++
SaveRDFNode: 2020/08/15 05:10:41.024267 Received UID: X18=
SaveRDFNode: 2020/08/15 05:10:41.024279 a: = db.Item{PKey:[]uint8{0x56, 0x8c, 0x88, 0x4, 0x4f, 0xbf, 0x4f, 0x6f, 0x8d, 0x70, 0xe7, 0x71, 0x4a, 0xb6, 0x84, 0x4e}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:10:41.029306 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.99533ms
SaveRDFNode: 2020/08/15 05:10:41.029329 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 05:10:41.029337 saveNode finished waiting...exiting
grmgr: 2020/08/15 05:10:41.029354 EndCh received for saveNode. rCnt = 0 
uuidAttach: 2020/08/15 05:10:41.029367 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.029372 check for attachDone..... 0
uuidAttach: 2020/08/15 05:10:41.034511 check for attachDone..... 1
uuidAttach: 2020/08/15 05:10:41.039654 check for attachDone..... 2
uuidAttach: 2020/08/15 05:10:41.044799 About to run AttachNodeCh: abc  b  YO0XMk0FR/GIO/OtURAQTg== erP65LcoQbGS4XPH0ibdkg==
uuidAttach: 2020/08/15 05:10:41.044819 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.044825 check for attachDone..... 0
attachNode: 2020/08/15 05:10:41.044831 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/15 05:10:41.044839 Looping..... 0
grmgr: 2020/08/15 05:10:41.044964 Looping..... 1
grmgr: 2020/08/15 05:10:41.044983 Looping..... 2
grmgr: 2020/08/15 05:10:41.045177 Looping..... 3
grmgr: 2020/08/15 05:10:41.045334 Looping..... 4
grmgr: 2020/08/15 05:10:41.045520 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:10:41.045528 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:10:41.045534 goroutine about to start 1 cUID,pUID   YO0XMk0FR/GIO/OtURAQTg==  erP65LcoQbGS4XPH0ibdkg==  
grmgr: 2020/08/15 05:10:41.045817 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:10:41.048657 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.040988ms
uuidAttach: 2020/08/15 05:10:41.049962 check for attachDone..... 1
DB: 2020/08/15 05:10:41.051616 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.92777ms
uuidAttach: 2020/08/15 05:10:41.055111 check for attachDone..... 2
DB: 2020/08/15 05:10:41.055986 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.296343ms
uuidAttach: 2020/08/15 05:10:41.060257 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.060267 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.060271 continue x 
uuidAttach: 2020/08/15 05:10:41.060276 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.060282 check for attachDone..... 0
DB: 2020/08/15 05:10:41.064122 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.073887ms
AttachNode: main 2020/08/15 05:10:41.064135 FetchForUpdate: for parent    erP65LcoQbGS4XPH0ibdkg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:10:41.064140 ** Cache FetchForUpdate Cache Key Value: [erP65LcoQbGS4XPH0ibdkg==]   sortk: A#G#:S
FetchNode: 2020/08/15 05:10:41.064146  node: erP65LcoQbGS4XPH0ibdkg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:10:41.064334 FetchForUpdate: for child    YO0XMk0FR/GIO/OtURAQTg==
FetchForUpdate: 2020/08/15 05:10:41.064341 ** Cache FetchForUpdate Cache Key Value: [YO0XMk0FR/GIO/OtURAQTg==]   sortk: A#
FetchNode: 2020/08/15 05:10:41.064353  node: YO0XMk0FR/GIO/OtURAQTg== subKey: A#
uuidAttach: 2020/08/15 05:10:41.065342 check for attachDone..... 1
DB: 2020/08/15 05:10:41.068803 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.387479ms
FetchForUpdate: 2020/08/15 05:10:41.068925 len(nb): 7
fetchItems: 2020/08/15 05:10:41.068933 +++  Cache FetchItems for sortk A# UID: [YO0XMk0FR/GIO/OtURAQTg==] 
FetchNode: 2020/08/15 05:10:41.068938  node: YO0XMk0FR/GIO/OtURAQTg== subKey: A#
DB: 2020/08/15 05:10:41.072262 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.284618ms
uuidAttach: 2020/08/15 05:10:41.072428 check for attachDone..... 2
DB: 2020/08/15 05:10:41.075347 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 11.145047ms
FetchForUpdate: 2020/08/15 05:10:41.075380 len(nb): 1
fetchItems: 2020/08/15 05:10:41.075387 +++  Cache FetchItems for sortk A#G#:S UID: [erP65LcoQbGS4XPH0ibdkg==] 
FetchNode: 2020/08/15 05:10:41.075401  node: erP65LcoQbGS4XPH0ibdkg== subKey: A#G#:S
uuidAttach: 2020/08/15 05:10:41.077577 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.077588 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.077592 continue x 
uuidAttach: 2020/08/15 05:10:41.077597 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.077602 check for attachDone..... 0
DB: 2020/08/15 05:10:41.078752 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.322897ms
uuidAttach: 2020/08/15 05:10:41.082755 check for attachDone..... 1
DB: 2020/08/15 05:10:41.083501 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.658967ms
uuidAttach: 2020/08/15 05:10:41.087904 check for attachDone..... 2
DB: 2020/08/15 05:10:41.089275 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.702655ms
uuidAttach: 2020/08/15 05:10:41.093059 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.093070 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.093074 continue x 
uuidAttach: 2020/08/15 05:10:41.093080 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.093085 check for attachDone..... 0
DB: 2020/08/15 05:10:41.093588 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.262952ms
uuidAttach: 2020/08/15 05:10:41.098244 check for attachDone..... 1
DB: 2020/08/15 05:10:41.098324 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.625881ms
uuidAttach: 2020/08/15 05:10:41.103388 check for attachDone..... 2
DB: 2020/08/15 05:10:41.104189 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.805976ms
uuidAttach: 2020/08/15 05:10:41.108554 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.108565 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.108569 continue x 
uuidAttach: 2020/08/15 05:10:41.108574 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.108579 check for attachDone..... 0
DB: 2020/08/15 05:10:41.108648 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.402829ms
DB: 2020/08/15 05:10:41.113295 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.572012ms
uuidAttach: 2020/08/15 05:10:41.113716 check for attachDone..... 1
uuidAttach: 2020/08/15 05:10:41.118874 check for attachDone..... 2
DB: 2020/08/15 05:10:41.119238 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.86615ms
DB: 2020/08/15 05:10:41.123517 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.227784ms
uuidAttach: 2020/08/15 05:10:41.124086 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.124097 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.124101 continue x 
uuidAttach: 2020/08/15 05:10:41.124106 for loop finished 0  6 
uuidAttach: 2020/08/15 05:10:41.124111 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.124117 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.124122 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.124126 check for attachDone..... 0
DB: 2020/08/15 05:10:41.128540 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.9561ms
uuidAttach: 2020/08/15 05:10:41.129185 check for attachDone..... 1
DB: 2020/08/15 05:10:41.133168 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.576697ms
Cache: 2020/08/15 05:10:41.133194 In SetUpredAvailable: pUid, tUID:  erP65LcoQbGS4XPH0ibdkg== erP65LcoQbGS4XPH0ibdkg== A#G#:S
Cache: 2020/08/15 05:10:41.133199 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:10:41.134333 check for attachDone..... 2
DB: 2020/08/15 05:10:41.137709 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.475652ms
Unlock: 2020/08/15 05:10:41.137719 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:10:41.137723 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:10:41.139373 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.139382 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.139387 continue x 
uuidAttach: 2020/08/15 05:10:41.139392 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.139397 check for attachDone..... 0
DB: 2020/08/15 05:10:41.142357 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.574413ms
grmgr: 2020/08/15 05:10:41.142370 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:10:41.144554 check for attachDone..... 1
uuidAttach: 2020/08/15 05:10:41.144563 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 05:10:41.144569 check for attachDone..... 2
uuidAttach: 2020/08/15 05:10:41.149721 About to run AttachNodeCh: b  abc  erP65LcoQbGS4XPH0ibdkg== YO0XMk0FR/GIO/OtURAQTg==
uuidAttach: 2020/08/15 05:10:41.149734 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.149738 check for attachDone..... 0
attachNode: 2020/08/15 05:10:41.149744 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/15 05:10:41.149750 Looping..... 0
grmgr: 2020/08/15 05:10:41.149768 Looping..... 1
grmgr: 2020/08/15 05:10:41.149942 Looping..... 2
grmgr: 2020/08/15 05:10:41.150137 Looping..... 3
grmgr: 2020/08/15 05:10:41.150331 Looping..... 4
grmgr: 2020/08/15 05:10:41.150524 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:10:41.150532 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:10:41.150538 goroutine about to start 2 cUID,pUID   erP65LcoQbGS4XPH0ibdkg==  YO0XMk0FR/GIO/OtURAQTg==  
grmgr: 2020/08/15 05:10:41.150739 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:10:41.153932 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.329858ms
uuidAttach: 2020/08/15 05:10:41.154882 check for attachDone..... 1
DB: 2020/08/15 05:10:41.157635 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.669302ms
uuidAttach: 2020/08/15 05:10:41.160029 check for attachDone..... 2
DB: 2020/08/15 05:10:41.162170 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.483959ms
uuidAttach: 2020/08/15 05:10:41.165194 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.165204 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.165208 continue x 
uuidAttach: 2020/08/15 05:10:41.165214 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.165219 check for attachDone..... 0
DB: 2020/08/15 05:10:41.166921 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.56481ms
AttachNode: main 2020/08/15 05:10:41.166933 FetchForUpdate: for parent    YO0XMk0FR/GIO/OtURAQTg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:10:41.166938 ** Cache FetchForUpdate Cache Key Value: [YO0XMk0FR/GIO/OtURAQTg==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:10:41.166943 +++  Cache FetchItems for sortk A#G#:S UID: [YO0XMk0FR/GIO/OtURAQTg==] 
FetchNode: 2020/08/15 05:10:41.166948  node: YO0XMk0FR/GIO/OtURAQTg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:10:41.167168 FetchForUpdate: for child    erP65LcoQbGS4XPH0ibdkg==
FetchForUpdate: 2020/08/15 05:10:41.167186 ** Cache FetchForUpdate Cache Key Value: [erP65LcoQbGS4XPH0ibdkg==]   sortk: A#
fetchItems: 2020/08/15 05:10:41.167192 +++  Cache FetchItems for sortk A# UID: [erP65LcoQbGS4XPH0ibdkg==] 
FetchNode: 2020/08/15 05:10:41.167204  node: erP65LcoQbGS4XPH0ibdkg== subKey: A#
uuidAttach: 2020/08/15 05:10:41.170372 check for attachDone..... 1
DB: 2020/08/15 05:10:41.170713 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.731596ms
DB: 2020/08/15 05:10:41.171880 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.632815ms
fetchItems: 2020/08/15 05:10:41.172045 +++  Cache FetchItems for sortk A# UID: [erP65LcoQbGS4XPH0ibdkg==] 
FetchNode: 2020/08/15 05:10:41.172053  node: erP65LcoQbGS4XPH0ibdkg== subKey: A#
DB: 2020/08/15 05:10:41.175360 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.529249ms
uuidAttach: 2020/08/15 05:10:41.175538 check for attachDone..... 2
DB: 2020/08/15 05:10:41.176281 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.199206ms
uuidAttach: 2020/08/15 05:10:41.180702 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.180713 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.180717 continue x 
uuidAttach: 2020/08/15 05:10:41.180722 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.180727 check for attachDone..... 0
DB: 2020/08/15 05:10:41.183764 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.570118ms
uuidAttach: 2020/08/15 05:10:41.185893 check for attachDone..... 1
DB: 2020/08/15 05:10:41.188775 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.837732ms
uuidAttach: 2020/08/15 05:10:41.191047 check for attachDone..... 2
DB: 2020/08/15 05:10:41.195000 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.872355ms
uuidAttach: 2020/08/15 05:10:41.196221 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.196231 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.196235 continue x 
uuidAttach: 2020/08/15 05:10:41.196240 for loop finished 1  6 
uuidAttach: 2020/08/15 05:10:41.196245 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.196252 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.196257 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.196261 check for attachDone..... 0
uuidAttach: 2020/08/15 05:10:41.201454 check for attachDone..... 1
DB: 2020/08/15 05:10:41.204534 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 9.250367ms
uuidAttach: 2020/08/15 05:10:41.206615 check for attachDone..... 2
DB: 2020/08/15 05:10:41.209600 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.723764ms
uuidAttach: 2020/08/15 05:10:41.211780 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.211791 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.211795 continue x 
uuidAttach: 2020/08/15 05:10:41.211802 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.211808 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.211813 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.211818 check for attachDone..... 0
DB: 2020/08/15 05:10:41.214685 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.7628ms
uuidAttach: 2020/08/15 05:10:41.216970 check for attachDone..... 1
DB: 2020/08/15 05:10:41.221155 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.168123ms
uuidAttach: 2020/08/15 05:10:41.222132 check for attachDone..... 2
DB: 2020/08/15 05:10:41.226081 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.618896ms
uuidAttach: 2020/08/15 05:10:41.227305 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.227314 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.227318 continue x 
uuidAttach: 2020/08/15 05:10:41.227324 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.227328 check for attachDone..... 0
DB: 2020/08/15 05:10:41.231356 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.976883ms
uuidAttach: 2020/08/15 05:10:41.232485 check for attachDone..... 1
DB: 2020/08/15 05:10:41.236392 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.844125ms
Cache: 2020/08/15 05:10:41.236404 In SetUpredAvailable: pUid, tUID:  YO0XMk0FR/GIO/OtURAQTg== YO0XMk0FR/GIO/OtURAQTg== A#G#:S
Cache: 2020/08/15 05:10:41.236409 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:10:41.237668 check for attachDone..... 2
DB: 2020/08/15 05:10:41.241196 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.753642ms
Unlock: 2020/08/15 05:10:41.241206 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:10:41.241211 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:10:41.242830 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.242839 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.242843 continue x 
uuidAttach: 2020/08/15 05:10:41.242849 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.242854 check for attachDone..... 0
uuidAttach: 2020/08/15 05:10:41.248023 check for attachDone..... 1
DB: 2020/08/15 05:10:41.251947 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 10.681962ms
grmgr: 2020/08/15 05:10:41.251960 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:10:41.253185 check for attachDone..... 2
uuidAttach: 2020/08/15 05:10:41.253194 ** received on attachDoneCh.... 2
uuidAttach: 2020/08/15 05:10:41.253201 About to run AttachNodeCh: c  b  RRgRALIqR1i9C9GRxBRR7A== erP65LcoQbGS4XPH0ibdkg==
uuidAttach: 2020/08/15 05:10:41.253207 for loop finished 2  6 
uuidAttach: 2020/08/15 05:10:41.253214 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.253220 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.253225 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.253229 check for attachDone..... 0
attachNode: 2020/08/15 05:10:41.253236 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/15 05:10:41.253242 Looping..... 0
grmgr: 2020/08/15 05:10:41.253263 Looping..... 1
grmgr: 2020/08/15 05:10:41.253436 Looping..... 2
grmgr: 2020/08/15 05:10:41.253610 Looping..... 3
grmgr: 2020/08/15 05:10:41.253813 Looping..... 4
grmgr: 2020/08/15 05:10:41.254005 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:10:41.254013 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:10:41.254019 goroutine about to start 3 cUID,pUID   RRgRALIqR1i9C9GRxBRR7A==  erP65LcoQbGS4XPH0ibdkg==  
grmgr: 2020/08/15 05:10:41.254240 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:10:41.257750 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.665693ms
uuidAttach: 2020/08/15 05:10:41.258374 check for attachDone..... 1
DB: 2020/08/15 05:10:41.261841 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.037749ms
uuidAttach: 2020/08/15 05:10:41.263518 check for attachDone..... 2
DB: 2020/08/15 05:10:41.266817 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.894268ms
uuidAttach: 2020/08/15 05:10:41.268670 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.268680 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.268684 continue x 
uuidAttach: 2020/08/15 05:10:41.268690 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.268696 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.268701 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.268705 check for attachDone..... 0
DB: 2020/08/15 05:10:41.272447 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.897934ms
AttachNode: main 2020/08/15 05:10:41.272461 FetchForUpdate: for parent    erP65LcoQbGS4XPH0ibdkg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:10:41.272466 ** Cache FetchForUpdate Cache Key Value: [erP65LcoQbGS4XPH0ibdkg==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:10:41.272472 +++  Cache FetchItems for sortk A#G#:S UID: [erP65LcoQbGS4XPH0ibdkg==] 
FetchNode: 2020/08/15 05:10:41.272476  node: erP65LcoQbGS4XPH0ibdkg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:10:41.272646 FetchForUpdate: for child    RRgRALIqR1i9C9GRxBRR7A==
FetchForUpdate: 2020/08/15 05:10:41.272659 ** Cache FetchForUpdate Cache Key Value: [RRgRALIqR1i9C9GRxBRR7A==]   sortk: A#
FetchNode: 2020/08/15 05:10:41.272677  node: RRgRALIqR1i9C9GRxBRR7A== subKey: A#
uuidAttach: 2020/08/15 05:10:41.273854 check for attachDone..... 1
DB: 2020/08/15 05:10:41.276241 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.727954ms
DB: 2020/08/15 05:10:41.276919 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.200735ms
FetchForUpdate: 2020/08/15 05:10:41.277410 len(nb): 7
fetchItems: 2020/08/15 05:10:41.277421 +++  Cache FetchItems for sortk A# UID: [RRgRALIqR1i9C9GRxBRR7A==] 
FetchNode: 2020/08/15 05:10:41.277432  node: RRgRALIqR1i9C9GRxBRR7A== subKey: A#
uuidAttach: 2020/08/15 05:10:41.279654 check for attachDone..... 2
DB: 2020/08/15 05:10:41.281268 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.86755ms
DB: 2020/08/15 05:10:41.281715 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.245911ms
uuidAttach: 2020/08/15 05:10:41.285258 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.285269 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.285273 continue x 
uuidAttach: 2020/08/15 05:10:41.285300 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.285306 check for attachDone..... 0
DB: 2020/08/15 05:10:41.285803 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.501968ms
DB: 2020/08/15 05:10:41.285818 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.501968ms
DB: 2020/08/15 05:10:41.290311 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.462272ms
DB: 2020/08/15 05:10:41.290326 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.462272ms
uuidAttach: 2020/08/15 05:10:41.290665 check for attachDone..... 1
DB: 2020/08/15 05:10:41.295311 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.916665ms
uuidAttach: 2020/08/15 05:10:41.295696 check for attachDone..... 2
DB: 2020/08/15 05:10:41.299997 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.620801ms
uuidAttach: 2020/08/15 05:10:41.300858 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.300867 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.300871 continue x 
uuidAttach: 2020/08/15 05:10:41.300876 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.300882 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.300887 for loop finished 2  6 
uuidAttach: 2020/08/15 05:10:41.300892 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.300897 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.300902 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.300906 check for attachDone..... 0
DB: 2020/08/15 05:10:41.306068 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.992611ms
uuidAttach: 2020/08/15 05:10:41.306363 check for attachDone..... 1
DB: 2020/08/15 05:10:41.311098 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.981452ms
uuidAttach: 2020/08/15 05:10:41.311504 check for attachDone..... 2
DB: 2020/08/15 05:10:41.316660 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.455595ms
uuidAttach: 2020/08/15 05:10:41.317157 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.317171 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.317176 continue x 
uuidAttach: 2020/08/15 05:10:41.317181 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.317187 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.317192 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.317196 check for attachDone..... 0
uuidAttach: 2020/08/15 05:10:41.322387 check for attachDone..... 1
DB: 2020/08/15 05:10:41.322873 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.921028ms
uuidAttach: 2020/08/15 05:10:41.327537 check for attachDone..... 2
DB: 2020/08/15 05:10:41.327928 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.735493ms
uuidAttach: 2020/08/15 05:10:41.332698 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.332708 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.332713 continue x 
uuidAttach: 2020/08/15 05:10:41.332718 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.332723 check for attachDone..... 0
DB: 2020/08/15 05:10:41.332940 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.740016ms
uuidAttach: 2020/08/15 05:10:41.337916 check for attachDone..... 1
DB: 2020/08/15 05:10:41.339344 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.10587ms
uuidAttach: 2020/08/15 05:10:41.343067 check for attachDone..... 2
DB: 2020/08/15 05:10:41.344373 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.754361ms
uuidAttach: 2020/08/15 05:10:41.348221 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.348231 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.348235 continue x 
uuidAttach: 2020/08/15 05:10:41.348240 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.348247 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.348251 for loop finished 2  6 
uuidAttach: 2020/08/15 05:10:41.348256 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.348262 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.348266 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.348280 check for attachDone..... 0
DB: 2020/08/15 05:10:41.349459 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.79519ms
uuidAttach: 2020/08/15 05:10:41.353451 check for attachDone..... 1
DB: 2020/08/15 05:10:41.354333 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.694142ms
Cache: 2020/08/15 05:10:41.354346 In SetUpredAvailable: pUid, tUID:  erP65LcoQbGS4XPH0ibdkg== cQho10bPR/iuhdhQgwr3mQ== A#G#:S
Cache: 2020/08/15 05:10:41.354352 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:10:41.358626 check for attachDone..... 2
DB: 2020/08/15 05:10:41.359210 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.814452ms
Unlock: 2020/08/15 05:10:41.359222 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:10:41.359228 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:10:41.363758 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.363770 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.363774 continue x 
uuidAttach: 2020/08/15 05:10:41.363779 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.363785 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.363790 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.363795 check for attachDone..... 0
DB: 2020/08/15 05:10:41.364328 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.040374ms
grmgr: 2020/08/15 05:10:41.364341 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:10:41.368954 check for attachDone..... 1
uuidAttach: 2020/08/15 05:10:41.368963 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 05:10:41.368969 check for attachDone..... 2
uuidAttach: 2020/08/15 05:10:41.374111 About to run AttachNodeCh: b  c  erP65LcoQbGS4XPH0ibdkg== RRgRALIqR1i9C9GRxBRR7A==
uuidAttach: 2020/08/15 05:10:41.374126 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.374132 check for attachDone..... 0
attachNode: 2020/08/15 05:10:41.374138 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/15 05:10:41.374144 Looping..... 0
grmgr: 2020/08/15 05:10:41.374288 Looping..... 1
grmgr: 2020/08/15 05:10:41.374464 Looping..... 2
grmgr: 2020/08/15 05:10:41.374640 Looping..... 3
grmgr: 2020/08/15 05:10:41.374817 Looping..... 4
grmgr: 2020/08/15 05:10:41.374994 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:10:41.375003 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:10:41.375008 goroutine about to start 4 cUID,pUID   erP65LcoQbGS4XPH0ibdkg==  RRgRALIqR1i9C9GRxBRR7A==  
grmgr: 2020/08/15 05:10:41.375194 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:10:41.379338 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.105695ms
uuidAttach: 2020/08/15 05:10:41.379512 check for attachDone..... 1
DB: 2020/08/15 05:10:41.382840 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.471533ms
uuidAttach: 2020/08/15 05:10:41.384669 check for attachDone..... 2
DB: 2020/08/15 05:10:41.387666 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.777556ms
uuidAttach: 2020/08/15 05:10:41.389758 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.389770 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.389774 continue x 
uuidAttach: 2020/08/15 05:10:41.389781 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.389787 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.389805 for loop finished 3  6 
uuidAttach: 2020/08/15 05:10:41.389811 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.389816 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.389821 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.389825 check for attachDone..... 0
DB: 2020/08/15 05:10:41.392804 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.95433ms
AttachNode: main 2020/08/15 05:10:41.392817 FetchForUpdate: for parent    RRgRALIqR1i9C9GRxBRR7A==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:10:41.392822 ** Cache FetchForUpdate Cache Key Value: [RRgRALIqR1i9C9GRxBRR7A==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:10:41.392828 +++  Cache FetchItems for sortk A#G#:S UID: [RRgRALIqR1i9C9GRxBRR7A==] 
FetchNode: 2020/08/15 05:10:41.392832  node: RRgRALIqR1i9C9GRxBRR7A== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:10:41.393020 FetchForUpdate: for child    erP65LcoQbGS4XPH0ibdkg==
FetchForUpdate: 2020/08/15 05:10:41.393028 ** Cache FetchForUpdate Cache Key Value: [erP65LcoQbGS4XPH0ibdkg==]   sortk: A#
fetchItems: 2020/08/15 05:10:41.393034 +++  Cache FetchItems for sortk A# UID: [erP65LcoQbGS4XPH0ibdkg==] 
FetchNode: 2020/08/15 05:10:41.393078  node: erP65LcoQbGS4XPH0ibdkg== subKey: A#
uuidAttach: 2020/08/15 05:10:41.394991 check for attachDone..... 1
DB: 2020/08/15 05:10:41.397181 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.05843ms
DB: 2020/08/15 05:10:41.397772 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.907716ms
uuidAttach: 2020/08/15 05:10:41.400742 check for attachDone..... 2
DB: 2020/08/15 05:10:41.405335 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.145357ms
uuidAttach: 2020/08/15 05:10:41.405890 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.405900 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.405903 continue x 
uuidAttach: 2020/08/15 05:10:41.405909 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.405916 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.405920 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.405926 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.405932 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.405936 check for attachDone..... 0
uuidAttach: 2020/08/15 05:10:41.411118 check for attachDone..... 1
DB: 2020/08/15 05:10:41.411432 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.025646ms
DB: 2020/08/15 05:10:41.416280 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.667807ms
uuidAttach: 2020/08/15 05:10:41.416818 check for attachDone..... 2
DB: 2020/08/15 05:10:41.421344 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.705974ms
uuidAttach: 2020/08/15 05:10:41.421937 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.421946 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.421950 continue x 
uuidAttach: 2020/08/15 05:10:41.421956 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.421962 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.421967 for loop finished 3  6 
uuidAttach: 2020/08/15 05:10:41.421972 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.421977 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.421982 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.421996 check for attachDone..... 0
uuidAttach: 2020/08/15 05:10:41.427143 check for attachDone..... 1
DB: 2020/08/15 05:10:41.427610 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.982012ms
uuidAttach: 2020/08/15 05:10:41.432331 check for attachDone..... 2
DB: 2020/08/15 05:10:41.433153 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.249295ms
uuidAttach: 2020/08/15 05:10:41.437519 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.437531 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.437537 continue x 
uuidAttach: 2020/08/15 05:10:41.437542 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.437549 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.437554 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.437559 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.437564 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.437568 check for attachDone..... 0
DB: 2020/08/15 05:10:41.438390 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.949181ms
uuidAttach: 2020/08/15 05:10:41.442750 check for attachDone..... 1
DB: 2020/08/15 05:10:41.445173 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.459078ms
uuidAttach: 2020/08/15 05:10:41.447955 check for attachDone..... 2
DB: 2020/08/15 05:10:41.450370 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.87578ms
uuidAttach: 2020/08/15 05:10:41.453141 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.453151 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.453155 continue x 
uuidAttach: 2020/08/15 05:10:41.453161 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.453167 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.453172 for loop finished 3  6 
uuidAttach: 2020/08/15 05:10:41.453177 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.453182 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.453187 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.453191 check for attachDone..... 0
DB: 2020/08/15 05:10:41.455760 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.060268ms
uuidAttach: 2020/08/15 05:10:41.458361 check for attachDone..... 1
DB: 2020/08/15 05:10:41.461806 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.787056ms
Cache: 2020/08/15 05:10:41.461818 In SetUpredAvailable: pUid, tUID:  RRgRALIqR1i9C9GRxBRR7A== RRgRALIqR1i9C9GRxBRR7A== A#G#:S
Cache: 2020/08/15 05:10:41.461824 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:10:41.463552 check for attachDone..... 2
DB: 2020/08/15 05:10:41.466518 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.657547ms
Unlock: 2020/08/15 05:10:41.466528 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:10:41.466532 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:10:41.468747 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.468758 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.468762 continue x 
uuidAttach: 2020/08/15 05:10:41.468767 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.468774 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.468788 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.468793 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.468798 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.468802 check for attachDone..... 0
DB: 2020/08/15 05:10:41.471598 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.010735ms
grmgr: 2020/08/15 05:10:41.471611 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:10:41.473918 check for attachDone..... 1
uuidAttach: 2020/08/15 05:10:41.473928 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 05:10:41.473934 check for attachDone..... 2
uuidAttach: 2020/08/15 05:10:41.479121 About to run AttachNodeCh: c  abc  RRgRALIqR1i9C9GRxBRR7A== YO0XMk0FR/GIO/OtURAQTg==
uuidAttach: 2020/08/15 05:10:41.479133 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.479139 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.479143 for loop finished 4  6 
uuidAttach: 2020/08/15 05:10:41.479147 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.479152 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.479156 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.479160 check for attachDone..... 0
attachNode: 2020/08/15 05:10:41.479165 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/15 05:10:41.479170 Looping..... 0
grmgr: 2020/08/15 05:10:41.479295 Looping..... 1
grmgr: 2020/08/15 05:10:41.479470 Looping..... 2
grmgr: 2020/08/15 05:10:41.479658 Looping..... 3
grmgr: 2020/08/15 05:10:41.479841 Looping..... 4
grmgr: 2020/08/15 05:10:41.480018 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:10:41.480026 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:10:41.480032 goroutine about to start 5 cUID,pUID   RRgRALIqR1i9C9GRxBRR7A==  YO0XMk0FR/GIO/OtURAQTg==  
grmgr: 2020/08/15 05:10:41.480405 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:10:41.483682 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.440927ms
uuidAttach: 2020/08/15 05:10:41.484303 check for attachDone..... 1
uuidAttach: 2020/08/15 05:10:41.489473 check for attachDone..... 2
uuidAttach: 2020/08/15 05:10:41.494558 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494569 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.494573 continue x 
uuidAttach: 2020/08/15 05:10:41.494579 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494597 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494601 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494606 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494611 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494616 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494620 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494625 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494629 for loop finished 4  6 
uuidAttach: 2020/08/15 05:10:41.494634 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494639 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494643 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.494647 check for attachDone..... 0
uuidAttach: 2020/08/15 05:10:41.499691 check for attachDone..... 1
uuidAttach: 2020/08/15 05:10:41.504797 check for attachDone..... 2
DB: 2020/08/15 05:10:41.507064 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 23.349773ms
uuidAttach: 2020/08/15 05:10:41.509885 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509896 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.509899 continue x 
uuidAttach: 2020/08/15 05:10:41.509905 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509911 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509916 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509921 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509926 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509931 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509936 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509941 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509945 for loop finished 4  6 
uuidAttach: 2020/08/15 05:10:41.509950 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509956 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509961 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.509965 check for attachDone..... 0
DB: 2020/08/15 05:10:41.512111 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.992288ms
uuidAttach: 2020/08/15 05:10:41.515101 check for attachDone..... 1
DB: 2020/08/15 05:10:41.517026 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.842944ms
AttachNode: main 2020/08/15 05:10:41.517039 FetchForUpdate: for parent    YO0XMk0FR/GIO/OtURAQTg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:10:41.517045 ** Cache FetchForUpdate Cache Key Value: [YO0XMk0FR/GIO/OtURAQTg==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:10:41.517050 +++  Cache FetchItems for sortk A#G#:S UID: [YO0XMk0FR/GIO/OtURAQTg==] 
FetchNode: 2020/08/15 05:10:41.517055  node: YO0XMk0FR/GIO/OtURAQTg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:10:41.517236 FetchForUpdate: for child    RRgRALIqR1i9C9GRxBRR7A==
FetchForUpdate: 2020/08/15 05:10:41.517244 ** Cache FetchForUpdate Cache Key Value: [RRgRALIqR1i9C9GRxBRR7A==]   sortk: A#
fetchItems: 2020/08/15 05:10:41.517250 +++  Cache FetchItems for sortk A# UID: [RRgRALIqR1i9C9GRxBRR7A==] 
FetchNode: 2020/08/15 05:10:41.517268  node: RRgRALIqR1i9C9GRxBRR7A== subKey: A#
uuidAttach: 2020/08/15 05:10:41.520241 check for attachDone..... 2
DB: 2020/08/15 05:10:41.521063 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.964537ms
uuidAttach: 2020/08/15 05:10:41.525387 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525398 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.525402 continue x 
uuidAttach: 2020/08/15 05:10:41.525408 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525414 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525419 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525424 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525429 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525434 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525439 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525453 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525458 for loop finished 4  6 
uuidAttach: 2020/08/15 05:10:41.525463 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525468 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525473 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.525477 check for attachDone..... 0
uuidAttach: 2020/08/15 05:10:41.530610 check for attachDone..... 1
DB: 2020/08/15 05:10:41.534494 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 17.182985ms
DB: 2020/08/15 05:10:41.535174 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 13.967583ms
uuidAttach: 2020/08/15 05:10:41.535681 check for attachDone..... 2
DB: 2020/08/15 05:10:41.539932 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.727356ms
DB: 2020/08/15 05:10:41.539948 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.727356ms
uuidAttach: 2020/08/15 05:10:41.540780 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540789 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.540793 continue x 
uuidAttach: 2020/08/15 05:10:41.540798 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540805 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540810 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540815 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540820 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540825 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540830 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540835 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540839 for loop finished 4  6 
uuidAttach: 2020/08/15 05:10:41.540844 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540849 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540854 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.540858 check for attachDone..... 0
DB: 2020/08/15 05:10:41.544404 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.425941ms
DB: 2020/08/15 05:10:41.544418 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.425941ms
uuidAttach: 2020/08/15 05:10:41.546040 check for attachDone..... 1
DB: 2020/08/15 05:10:41.550141 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.648794ms
uuidAttach: 2020/08/15 05:10:41.551183 check for attachDone..... 2
DB: 2020/08/15 05:10:41.555166 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.953513ms
uuidAttach: 2020/08/15 05:10:41.556330 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556341 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.556345 continue x 
uuidAttach: 2020/08/15 05:10:41.556351 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556358 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556363 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556368 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556382 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556387 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556396 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556401 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556405 for loop finished 4  6 
uuidAttach: 2020/08/15 05:10:41.556410 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556415 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556420 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.556424 check for attachDone..... 0
uuidAttach: 2020/08/15 05:10:41.561522 check for attachDone..... 1
DB: 2020/08/15 05:10:41.562213 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.974715ms
uuidAttach: 2020/08/15 05:10:41.566664 check for attachDone..... 2
DB: 2020/08/15 05:10:41.567243 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.975517ms
uuidAttach: 2020/08/15 05:10:41.571768 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571779 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.571783 continue x 
uuidAttach: 2020/08/15 05:10:41.571789 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571795 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571800 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571805 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571810 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571815 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571820 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571825 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571829 for loop finished 4  6 
uuidAttach: 2020/08/15 05:10:41.571838 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571843 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571848 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.571852 check for attachDone..... 0
DB: 2020/08/15 05:10:41.572147 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.794573ms
uuidAttach: 2020/08/15 05:10:41.576988 check for attachDone..... 1
DB: 2020/08/15 05:10:41.578335 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.128844ms
uuidAttach: 2020/08/15 05:10:41.582129 check for attachDone..... 2
DB: 2020/08/15 05:10:41.583066 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.669684ms
uuidAttach: 2020/08/15 05:10:41.587697 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587709 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.587713 continue x 
uuidAttach: 2020/08/15 05:10:41.587719 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587725 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587730 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587735 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587740 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587758 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587763 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587768 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587773 for loop finished 4  6 
uuidAttach: 2020/08/15 05:10:41.587778 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587783 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587806 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.587810 check for attachDone..... 0
DB: 2020/08/15 05:10:41.587904 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.768652ms
uuidAttach: 2020/08/15 05:10:41.592954 check for attachDone..... 1
DB: 2020/08/15 05:10:41.594060 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.088987ms
uuidAttach: 2020/08/15 05:10:41.598103 check for attachDone..... 2
DB: 2020/08/15 05:10:41.598625 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.507662ms
uuidAttach: 2020/08/15 05:10:41.603265 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603277 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.603281 continue x 
uuidAttach: 2020/08/15 05:10:41.603286 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603293 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603297 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603302 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603307 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603312 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603316 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603322 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603326 for loop finished 4  6 
uuidAttach: 2020/08/15 05:10:41.603331 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603336 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603340 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.603344 check for attachDone..... 0
DB: 2020/08/15 05:10:41.604077 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.387927ms
uuidAttach: 2020/08/15 05:10:41.608487 check for attachDone..... 1
DB: 2020/08/15 05:10:41.608904 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.775358ms
Cache: 2020/08/15 05:10:41.608916 In SetUpredAvailable: pUid, tUID:  YO0XMk0FR/GIO/OtURAQTg== II8oBoOaSOyhtSG59/2jBA== A#G#:S
Cache: 2020/08/15 05:10:41.608922 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:10:41.613647 check for attachDone..... 2
DB: 2020/08/15 05:10:41.613724 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.76112ms
Unlock: 2020/08/15 05:10:41.613732 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:10:41.613736 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:10:41.618820 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618831 	dontrun = true
uuidAttach: 2020/08/15 05:10:41.618835 continue x 
uuidAttach: 2020/08/15 05:10:41.618840 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618854 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618859 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618864 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618869 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618874 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618878 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618883 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618888 for loop finished 4  6 
uuidAttach: 2020/08/15 05:10:41.618892 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618898 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618902 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.618906 check for attachDone..... 0
DB: 2020/08/15 05:10:41.618990 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.184618ms
grmgr: 2020/08/15 05:10:41.619002 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:10:41.624058 check for attachDone..... 1
uuidAttach: 2020/08/15 05:10:41.624069 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 05:10:41.624078 check for attachDone..... 2
uuidAttach: 2020/08/15 05:10:41.629251 About to run AttachNodeCh: abc  c  YO0XMk0FR/GIO/OtURAQTg== RRgRALIqR1i9C9GRxBRR7A==
uuidAttach: 2020/08/15 05:10:41.629267 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.629274 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.629279 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.629284 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.629288 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.629293 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.629298 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.629303 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:10:41.629307 for loop finished 5  6 
uuidAttach: 2020/08/15 05:10:41.629311  break....
attachNode: 2020/08/15 05:10:41.629317 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/15 05:10:41.629323 Looping..... 0
grmgr: 2020/08/15 05:10:41.629336 Looping..... 1
grmgr: 2020/08/15 05:10:41.629424 Looping..... 2
grmgr: 2020/08/15 05:10:41.629602 Looping..... 3
grmgr: 2020/08/15 05:10:41.629799 Looping..... 4
grmgr: 2020/08/15 05:10:41.629997 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:10:41.630006 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:10:41.630011 goroutine about to start 6 cUID,pUID   YO0XMk0FR/GIO/OtURAQTg==  RRgRALIqR1i9C9GRxBRR7A==  
rdfLoader: 2020/08/15 05:10:41.630017 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/15 05:10:41.630254 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:10:41.636375 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.282086ms
DB: 2020/08/15 05:10:41.640700 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.295495ms
DB: 2020/08/15 05:10:41.645612 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.86318ms
DB: 2020/08/15 05:10:41.650437 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.732985ms
AttachNode: main 2020/08/15 05:10:41.650449 FetchForUpdate: for parent    RRgRALIqR1i9C9GRxBRR7A==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:10:41.650463 ** Cache FetchForUpdate Cache Key Value: [RRgRALIqR1i9C9GRxBRR7A==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:10:41.650469 +++  Cache FetchItems for sortk A#G#:S UID: [RRgRALIqR1i9C9GRxBRR7A==] 
FetchNode: 2020/08/15 05:10:41.650473  node: RRgRALIqR1i9C9GRxBRR7A== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:10:41.650642 FetchForUpdate: for child    YO0XMk0FR/GIO/OtURAQTg==
FetchForUpdate: 2020/08/15 05:10:41.650665 ** Cache FetchForUpdate Cache Key Value: [YO0XMk0FR/GIO/OtURAQTg==]   sortk: A#
fetchItems: 2020/08/15 05:10:41.650670 +++  Cache FetchItems for sortk A# UID: [YO0XMk0FR/GIO/OtURAQTg==] 
FetchNode: 2020/08/15 05:10:41.650681  node: YO0XMk0FR/GIO/OtURAQTg== subKey: A#
DB: 2020/08/15 05:10:41.654104 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.59643ms
DB: 2020/08/15 05:10:41.655340 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.611845ms
DB: 2020/08/15 05:10:41.659406 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.983866ms
DB: 2020/08/15 05:10:41.663966 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.529222ms
DB: 2020/08/15 05:10:41.663981 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.529222ms
DB: 2020/08/15 05:10:41.668556 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.533016ms
DB: 2020/08/15 05:10:41.668571 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.533016ms
DB: 2020/08/15 05:10:41.673529 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.881213ms
DB: 2020/08/15 05:10:41.679225 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.546243ms
DB: 2020/08/15 05:10:41.685749 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.174691ms
DB: 2020/08/15 05:10:41.691034 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.047874ms
DB: 2020/08/15 05:10:41.696484 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.860885ms
DB: 2020/08/15 05:10:41.703200 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.193634ms
DB: 2020/08/15 05:10:41.709846 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.231578ms
DB: 2020/08/15 05:10:41.715278 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.953599ms
DB: 2020/08/15 05:10:41.721865 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.061112ms
DB: 2020/08/15 05:10:41.728691 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.212065ms
DB: 2020/08/15 05:10:41.733546 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.790769ms
DB: 2020/08/15 05:10:41.738448 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.850021ms
Cache: 2020/08/15 05:10:41.738461 In SetUpredAvailable: pUid, tUID:  RRgRALIqR1i9C9GRxBRR7A== dfDfWa23S1SiO424u57Xbw== A#G#:S
Cache: 2020/08/15 05:10:41.738467 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 05:10:41.743302 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.796011ms
Unlock: 2020/08/15 05:10:41.743314 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:10:41.743320 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 05:10:41.748433 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.027914ms
uuidAttach: 2020/08/15 05:10:41.748453 received on attachDoneCh: uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
grmgr: 2020/08/15 05:10:41.748461 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/15 05:10:41.748467 saveNode finished waiting...exiting
rdfLoader: 2020/08/15 05:10:41.748472 cancel contexts
rdfLoader: 2020/08/15 05:10:41.748477 wait for autonomous goroutines to end
errlog: 2020/08/15 05:10:41.748482 Powering down...
grmgr: 2020/08/15 05:10:41.748487 Powering down...
rdfuuid: 2020/08/15 05:10:41.748492 Powering down...
rdfLoader: 2020/08/15 05:10:41.748497 loader exists.....
DB:2020/08/15 05:38:35 log.go:18: ===============================================================================
anmgr: 2020/08/15 05:38:35.296045 Powering on...
rdfLoader: 2020/08/15 05:38:35.296077 saveNode started......
rdfLoader: 2020/08/15 05:38:35.296082 define saveNode limiter......
rdfuuid: 2020/08/15 05:38:35.296090 Powering on...
grmgr: 2020/08/15 05:38:35.296108 Powering on...
errlog: 2020/08/15 05:38:35.296117 Powering on...
rdfLoader: 2020/08/15 05:38:35.296123  principle goroutines started 
RDFreader: 2020/08/15 05:38:35.296147 reader: batch size -= %!(EXTRA int=2)
rdfLoader: 2020/08/15 05:38:35.296356 verify started....
RDFreader: 2020/08/15 05:38:35.296609 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 05:38:35.296623 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 05:38:35.296629 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 05:38:35.296634 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 05:38:35.296639 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 05:38:35.296644 spo read:      
RDFreader: 2020/08/15 05:38:35.296649 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 05:38:35.296654 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 05:38:35.296659 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 05:38:35.296664 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 05:38:35.296668 spo read:      
RDFreader: 2020/08/15 05:38:35.296673 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 05:38:35.296678 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 05:38:35.296683 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 05:38:35.296688 spo read:  b  Age  "58"
RDFreader: 2020/08/15 05:38:35.296693 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 05:38:35.296698 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 05:38:35.296704 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 05:38:35.296708 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 05:38:35.296713 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 05:38:35.296717 spo read:      
RDFreader: 2020/08/15 05:38:35.296722 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 05:38:35.296726 Send node batch on channel verifyCh
RDFreader: 2020/08/15 05:38:35.296732 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 05:38:35.296736 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 05:38:35.296743 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 05:38:35.296748 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 05:38:35.296753 spo read:  c  Age  "67"
RDFreader: 2020/08/15 05:38:35.296758 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 05:38:35.296763 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 05:38:35.296768 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 05:38:35.296773 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 05:38:35.296780 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 05:38:35.296785 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 05:38:35.296789 spo read:      
RDFreader: 2020/08/15 05:38:35.296794 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 05:38:35.296799 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 05:38:35.296804 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 05:38:35.296809 spo read:  d  Age  "36"
RDFreader: 2020/08/15 05:38:35.296814 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 05:38:35.296826 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 05:38:35.296829 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 05:38:35.296833 close verify channel
rdfLoader: 2020/08/15 05:38:35.296837 wait for goroutines to end
rdfLoader: 2020/08/15 05:38:35.296842 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 05:38:35.296846 .  getType..
rdfLoader: 2020/08/15 05:38:35.296850 node.TyName : [Person]
DB: 2020/08/15 05:38:35.384440 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 87.520604ms
grmgr: 2020/08/15 05:38:35.384613 Looping..... 0
grmgr: 2020/08/15 05:38:35.384873 Looping..... 1
grmgr: 2020/08/15 05:38:35.384893 Looping..... 2
grmgr: 2020/08/15 05:38:35.384915 Looping..... 3
grmgr: 2020/08/15 05:38:35.385102 Looping..... 4
grmgr: 2020/08/15 05:38:35.385130 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 05:38:35.385146 .  getType..
rdfLoader: 2020/08/15 05:38:35.385156 node.TyName : [Person]
grmgr: 2020/08/15 05:38:35.385168 Looping..... 0
unmarshalRDF2020/08/15 05:38:35.385194 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:38:35.385213 Looping..... 1
grmgr: 2020/08/15 05:38:35.385224 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 05:38:35.385250 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 05:38:35.385268 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 05:38:35.385276 .  getType..
rdfLoader: 2020/08/15 05:38:35.385284 node.TyName : [Person]
grmgr: 2020/08/15 05:38:35.385294 Looping..... 0
rdfLoader: 2020/08/15 05:38:35.385314 Add to SS . [Honda]
rdfLoader: 2020/08/15 05:38:35.385324 Add to SS . [Alfa]
uuidAttach: 2020/08/15 05:38:35.385388 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.385404 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:38:35.385469 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:38:35.385480 Exit  unmarshalRDF. 
saveNode: 2020/08/15 05:38:35.385490 read from saveCH channel 1 
unmarshalRDF2020/08/15 05:38:35.385517 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:38:35.385542 Looping..... 1
grmgr: 2020/08/15 05:38:35.385548 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 05:38:35.385552 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 05:38:35.385556 Looping..... 0
rdfLoader: 2020/08/15 05:38:35.385564 Add to SS . [Honda]
rdfLoader: 2020/08/15 05:38:35.385568 Add to SS . [VW Golf]
uuidAttach: 2020/08/15 05:38:35.385584 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.385590 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:38:35.385628 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:38:35.385632 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 05:38:35.385645 .  getType..
rdfLoader: 2020/08/15 05:38:35.385649 node.TyName : [Person]
unmarshalRDF2020/08/15 05:38:35.385669 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:38:35.385694 Looping..... 1
rdfLoader: 2020/08/15 05:38:35.385703 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 05:38:35.385707 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 05:38:35.385711 Add to SS . [Honda]
uuidAttach: 2020/08/15 05:38:35.385724 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.385730 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:38:35.385760 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:38:35.385764 Exit  unmarshalRDF. 
grmgr: 2020/08/15 05:38:35.385774 Looping..... 2
grmgr: 2020/08/15 05:38:35.385879 Looping..... 3
grmgr: 2020/08/15 05:38:35.386068 Looping..... 4
grmgr: 2020/08/15 05:38:35.386262 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 05:38:35.386269 Looping..... 0
saveNode: 2020/08/15 05:38:35.386275 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:38:35.386282 read from saveCH channel 2 
grmgr: 2020/08/15 05:38:35.386324 Looping..... 1
SaveRDFNode: xxx 2020/08/15 05:38:35.386335 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.386341 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.386347 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.386353 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.386358 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.386364 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.386369 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:38:35.386373 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:38:35.386381 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000336300)}
SaveRDFNode: 2020/08/15 05:38:35.386385 Waiting for UID ......................
SaveRDFNode: 2020/08/15 05:38:35.386396 UID received  : QDBfX9qCQ3CvtajjfAFpbw==
grmgr: 2020/08/15 05:38:35.386642 Looping..... 2
grmgr: 2020/08/15 05:38:35.386661 Looping..... 3
grmgr: 2020/08/15 05:38:35.386844 Looping..... 4
grmgr: 2020/08/15 05:38:35.387022 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 05:38:35.387030 Looping..... 0
unmarshalRDF2020/08/15 05:38:35.387044 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:38:35.387054 Looping..... 1
rdfLoader: 2020/08/15 05:38:35.387063 Add to SS . [Bentley]
unmarshalRDF2020/08/15 05:38:35.387093 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:38:35.387103 Exit  unmarshalRDF. 
grmgr: 2020/08/15 05:38:35.387113 Looping..... 2
grmgr: 2020/08/15 05:38:35.387200 Looping..... 3
grmgr: 2020/08/15 05:38:35.387405 Looping..... 4
grmgr: 2020/08/15 05:38:35.387585 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 05:38:35.387595 EndCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/15 05:38:35.387599 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/15 05:38:35.387604 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 05:38:35.387608 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/15 05:38:35.387615 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:38:35.387620 read from saveCH channel 3 
grmgr: 2020/08/15 05:38:35.387625 Looping..... 0
grmgr: 2020/08/15 05:38:35.387652 Looping..... 1
grmgr: 2020/08/15 05:38:35.387657 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 05:38:35.387661 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 05:38:35.387670 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.387675 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.387682 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.387688 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.387694 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.387699 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.387728 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:38:35.387732 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:38:35.387738 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0003369c0)}
SaveRDFNode: 2020/08/15 05:38:35.387742 Waiting for UID ......................
SaveRDFNode: 2020/08/15 05:38:35.387752 UID received  : Y9qPfOiSRE+bx8EE003uCQ==
DB: 2020/08/15 05:38:35.394284 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.84023ms
DB: 2020/08/15 05:38:35.398882 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 11.10368ms
DB: 2020/08/15 05:38:35.402813 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.898021ms
DB: 2020/08/15 05:38:35.407025 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.074114ms
DB: 2020/08/15 05:38:35.411082 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.013916ms
DB: 2020/08/15 05:38:35.414472 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 20.151196ms
DB: 2020/08/15 05:38:35.414955 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.842539ms
SaveRDFNode: 2020/08/15 05:38:35.414969 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003369c0)}
SaveRDFNode: 2020/08/15 05:38:35.414978 Received UID: X18=
SaveRDFNode: 2020/08/15 05:38:35.415000 a: = db.Item{PKey:[]uint8{0x63, 0xda, 0x8f, 0x7c, 0xe8, 0x92, 0x44, 0x4f, 0x9b, 0xc7, 0xc1, 0x4, 0xd3, 0x4d, 0xee, 0x9}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:38:35.418312 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.7974ms
DB: 2020/08/15 05:38:35.419089 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.051875ms
SaveRDFNode: 2020/08/15 05:38:35.419104 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003369c0)}
SaveRDFNode: 2020/08/15 05:38:35.419112 Received UID: X18=
SaveRDFNode: 2020/08/15 05:38:35.419123 a: = db.Item{PKey:[]uint8{0x63, 0xda, 0x8f, 0x7c, 0xe8, 0x92, 0x44, 0x4f, 0x9b, 0xc7, 0xc1, 0x4, 0xd3, 0x4d, 0xee, 0x9}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:38:35.422046 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.603306ms
DB: 2020/08/15 05:38:35.423014 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.860506ms
SaveRDFNode: 2020/08/15 05:38:35.423025 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:38:35.423033 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 05:38:35.423038 Send ack to waiting saveNode...
saveNode: 2020/08/15 05:38:35.423043 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:38:35.423049 read from saveCH channel 4 
grmgr: 2020/08/15 05:38:35.423054 Looping..... 0
grmgr: 2020/08/15 05:38:35.423088 Looping..... 1
grmgr: 2020/08/15 05:38:35.423105 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 05:38:35.423110 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 05:38:35.423119 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.423125 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.423133 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.423139 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.423144 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.423152 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.423158 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:38:35.423174 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:38:35.423179 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000017020)}
SaveRDFNode: 2020/08/15 05:38:35.423183 Waiting for UID ......................
SaveRDFNode: 2020/08/15 05:38:35.423193 UID received  : lCy4lFngTGSgCH1kRIy+/Q==
DB: 2020/08/15 05:38:35.425709 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.590961ms
SaveRDFNode: 2020/08/15 05:38:35.425721 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000336300)}
SaveRDFNode: 2020/08/15 05:38:35.425728 Received UID: X18=
SaveRDFNode: 2020/08/15 05:38:35.425750 a: = db.Item{PKey:[]uint8{0x40, 0x30, 0x5f, 0x5f, 0xda, 0x82, 0x43, 0x70, 0xaf, 0xb5, 0xa8, 0xe3, 0x7c, 0x1, 0x69, 0x6f}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:38:35.426997 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.778453ms
DB: 2020/08/15 05:38:35.429335 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.553125ms
SaveRDFNode: 2020/08/15 05:38:35.429348 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000336300)}
SaveRDFNode: 2020/08/15 05:38:35.429356 Received UID: X18=
SaveRDFNode: 2020/08/15 05:38:35.429367 a: = db.Item{PKey:[]uint8{0x40, 0x30, 0x5f, 0x5f, 0xda, 0x82, 0x43, 0x70, 0xaf, 0xb5, 0xa8, 0xe3, 0x7c, 0x1, 0x69, 0x6f}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:38:35.430709 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.674498ms
DB: 2020/08/15 05:38:35.433042 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.638431ms
SaveRDFNode: 2020/08/15 05:38:35.433053 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:38:35.433060 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 05:38:35.433065 Send ack to waiting saveNode...
saveNode: 2020/08/15 05:38:35.433070 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/15 05:38:35.433074 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/15 05:38:35.433097 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.433103 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.433110 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.433115 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.433121 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.433127 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:38:35.433154 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:38:35.433158 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:38:35.433164 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0001b83c0)}
SaveRDFNode: 2020/08/15 05:38:35.433168 Waiting for UID ......................
SaveRDFNode: 2020/08/15 05:38:35.433178 UID received  : LNzze1rCTBOaQwK/MUVCrg==
grmgr: 2020/08/15 05:38:35.433357 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 05:38:35.435019 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.278425ms
DB: 2020/08/15 05:38:35.436774 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.569801ms
DB: 2020/08/15 05:38:35.439319 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.152887ms
DB: 2020/08/15 05:38:35.440379 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.570477ms
DB: 2020/08/15 05:38:35.443389 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.027522ms
SaveRDFNode: 2020/08/15 05:38:35.443452 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017020)}
SaveRDFNode: 2020/08/15 05:38:35.443471 Received UID: X18=
SaveRDFNode: 2020/08/15 05:38:35.443493 a: = db.Item{PKey:[]uint8{0x94, 0x2c, 0xb8, 0x94, 0x59, 0xe0, 0x4c, 0x64, 0xa0, 0x8, 0x7d, 0x64, 0x44, 0x8c, 0xbe, 0xfd}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:38:35.443914 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.503517ms
DB: 2020/08/15 05:38:35.447446 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.905673ms
SaveRDFNode: 2020/08/15 05:38:35.447458 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017020)}
SaveRDFNode: 2020/08/15 05:38:35.447465 Received UID: X18=
SaveRDFNode: 2020/08/15 05:38:35.447475 a: = db.Item{PKey:[]uint8{0x94, 0x2c, 0xb8, 0x94, 0x59, 0xe0, 0x4c, 0x64, 0xa0, 0x8, 0x7d, 0x64, 0x44, 0x8c, 0xbe, 0xfd}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:38:35.447780 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.835594ms
DB: 2020/08/15 05:38:35.451360 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.547999ms
SaveRDFNode: 2020/08/15 05:38:35.451491 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001b83c0)}
SaveRDFNode: 2020/08/15 05:38:35.451504 Received UID: X18=
SaveRDFNode: 2020/08/15 05:38:35.451514 a: = db.Item{PKey:[]uint8{0x2c, 0xdc, 0xf3, 0x7b, 0x5a, 0xc2, 0x4c, 0x13, 0x9a, 0x43, 0x2, 0xbf, 0x31, 0x45, 0x42, 0xae}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:38:35.451839 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.316321ms
SaveRDFNode: 2020/08/15 05:38:35.451849 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:38:35.451856 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 05:38:35.455025 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.483897ms
SaveRDFNode: 2020/08/15 05:38:35.455037 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001b83c0)}
SaveRDFNode: 2020/08/15 05:38:35.455045 Received UID: X18=
SaveRDFNode: 2020/08/15 05:38:35.455055 a: = db.Item{PKey:[]uint8{0x2c, 0xdc, 0xf3, 0x7b, 0x5a, 0xc2, 0x4c, 0x13, 0x9a, 0x43, 0x2, 0xbf, 0x31, 0x45, 0x42, 0xae}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:38:35.459296 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.193903ms
SaveRDFNode: 2020/08/15 05:38:35.459307 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 05:38:35.459316 saveNode finished waiting...exiting
grmgr: 2020/08/15 05:38:35.459322 EndCh received for saveNode. rCnt = 0 
uuidAttach: 2020/08/15 05:38:35.459333 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.459338 check for attachDone..... 0
uuidAttach: 2020/08/15 05:38:35.464499 check for attachDone..... 1
uuidAttach: 2020/08/15 05:38:35.469683 check for attachDone..... 2
uuidAttach: 2020/08/15 05:38:35.474859 About to run AttachNodeCh: abc  b  QDBfX9qCQ3CvtajjfAFpbw== Y9qPfOiSRE+bx8EE003uCQ==
uuidAttach: 2020/08/15 05:38:35.474877 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.474882 check for attachDone..... 0
attachNode: 2020/08/15 05:38:35.474889 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/15 05:38:35.474895 Looping..... 0
grmgr: 2020/08/15 05:38:35.475034 Looping..... 1
grmgr: 2020/08/15 05:38:35.475209 Looping..... 2
grmgr: 2020/08/15 05:38:35.475384 Looping..... 3
grmgr: 2020/08/15 05:38:35.475556 Looping..... 4
grmgr: 2020/08/15 05:38:35.475729 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:38:35.475738 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:38:35.475744 goroutine about to start 1 cUID,pUID   QDBfX9qCQ3CvtajjfAFpbw==  Y9qPfOiSRE+bx8EE003uCQ==  
grmgr: 2020/08/15 05:38:35.475976 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:38:35.478539 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.70887ms
uuidAttach: 2020/08/15 05:38:35.480833 check for attachDone..... 1
DB: 2020/08/15 05:38:35.481241 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.672626ms
DB: 2020/08/15 05:38:35.485172 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.877741ms
uuidAttach: 2020/08/15 05:38:35.486001 check for attachDone..... 2
uuidAttach: 2020/08/15 05:38:35.491164 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.491176 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.491180 continue x 
uuidAttach: 2020/08/15 05:38:35.491199 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.491204 check for attachDone..... 0
DB: 2020/08/15 05:38:35.495301 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 10.067314ms
AttachNode: main 2020/08/15 05:38:35.495314 FetchForUpdate: for parent    Y9qPfOiSRE+bx8EE003uCQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:38:35.495319 ** Cache FetchForUpdate Cache Key Value: [Y9qPfOiSRE+bx8EE003uCQ==]   sortk: A#G#:S
FetchNode: 2020/08/15 05:38:35.495324  node: Y9qPfOiSRE+bx8EE003uCQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:38:35.495498 FetchForUpdate: for child    QDBfX9qCQ3CvtajjfAFpbw==
FetchForUpdate: 2020/08/15 05:38:35.495507 ** Cache FetchForUpdate Cache Key Value: [QDBfX9qCQ3CvtajjfAFpbw==]   sortk: A#
FetchNode: 2020/08/15 05:38:35.495537  node: QDBfX9qCQ3CvtajjfAFpbw== subKey: A#
uuidAttach: 2020/08/15 05:38:35.496388 check for attachDone..... 1
DB: 2020/08/15 05:38:35.498408 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.051683ms
FetchForUpdate: 2020/08/15 05:38:35.498483 len(nb): 1
fetchItems: 2020/08/15 05:38:35.498491 +++  Cache FetchItems for sortk A#G#:S UID: [Y9qPfOiSRE+bx8EE003uCQ==] 
FetchNode: 2020/08/15 05:38:35.498496  node: Y9qPfOiSRE+bx8EE003uCQ== subKey: A#G#:S
uuidAttach: 2020/08/15 05:38:35.501544 check for attachDone..... 2
DB: 2020/08/15 05:38:35.502316 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.790652ms
uuidAttach: 2020/08/15 05:38:35.506707 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.506718 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.506723 continue x 
uuidAttach: 2020/08/15 05:38:35.506728 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.506746 check for attachDone..... 0
DB: 2020/08/15 05:38:35.506820 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.883353ms
DB: 2020/08/15 05:38:35.510103 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 14.524308ms
FetchForUpdate: 2020/08/15 05:38:35.510224 len(nb): 7
fetchItems: 2020/08/15 05:38:35.510233 +++  Cache FetchItems for sortk A# UID: [QDBfX9qCQ3CvtajjfAFpbw==] 
FetchNode: 2020/08/15 05:38:35.510238  node: QDBfX9qCQ3CvtajjfAFpbw== subKey: A#
uuidAttach: 2020/08/15 05:38:35.511933 check for attachDone..... 1
DB: 2020/08/15 05:38:35.513191 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.92334ms
uuidAttach: 2020/08/15 05:38:35.517342 check for attachDone..... 2
uuidAttach: 2020/08/15 05:38:35.522540 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.522553 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.522570 continue x 
uuidAttach: 2020/08/15 05:38:35.522576 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.522581 check for attachDone..... 0
DB: 2020/08/15 05:38:35.525284 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.365681ms
uuidAttach: 2020/08/15 05:38:35.527735 check for attachDone..... 1
DB: 2020/08/15 05:38:35.529033 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.698636ms
uuidAttach: 2020/08/15 05:38:35.532900 check for attachDone..... 2
DB: 2020/08/15 05:38:35.533001 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.843512ms
uuidAttach: 2020/08/15 05:38:35.538083 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.538097 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.538101 continue x 
uuidAttach: 2020/08/15 05:38:35.538107 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.538122 check for attachDone..... 0
DB: 2020/08/15 05:38:35.538575 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.278885ms
DB: 2020/08/15 05:38:35.542652 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.80007ms
uuidAttach: 2020/08/15 05:38:35.543307 check for attachDone..... 1
DB: 2020/08/15 05:38:35.546861 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.888185ms
uuidAttach: 2020/08/15 05:38:35.548463 check for attachDone..... 2
DB: 2020/08/15 05:38:35.553413 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.242471ms
uuidAttach: 2020/08/15 05:38:35.553994 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.554007 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.554011 continue x 
uuidAttach: 2020/08/15 05:38:35.554015 for loop finished 0  6 
uuidAttach: 2020/08/15 05:38:35.554020 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.554025 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.554030 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.554033 check for attachDone..... 0
DB: 2020/08/15 05:38:35.557767 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.925482ms
uuidAttach: 2020/08/15 05:38:35.559200 check for attachDone..... 1
DB: 2020/08/15 05:38:35.562220 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.076543ms
uuidAttach: 2020/08/15 05:38:35.564350 check for attachDone..... 2
DB: 2020/08/15 05:38:35.566214 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.728674ms
Cache: 2020/08/15 05:38:35.566225 In SetUpredAvailable: pUid, tUID:  Y9qPfOiSRE+bx8EE003uCQ== Y9qPfOiSRE+bx8EE003uCQ== A#G#:S
Cache: 2020/08/15 05:38:35.566230 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:38:35.569511 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.569521 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.569524 continue x 
uuidAttach: 2020/08/15 05:38:35.569530 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.569534 check for attachDone..... 0
DB: 2020/08/15 05:38:35.570199 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.933537ms
Unlock: 2020/08/15 05:38:35.570207 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:38:35.570212 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:38:35.574712 check for attachDone..... 1
uuidAttach: 2020/08/15 05:38:35.579877 check for attachDone..... 2
DB: 2020/08/15 05:38:35.580175 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 9.90874ms
grmgr: 2020/08/15 05:38:35.580189 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:38:35.585102 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.585122 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.585131 continue x 
uuidAttach: 2020/08/15 05:38:35.585142 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.585152 check for attachDone..... 0
uuidAttach: 2020/08/15 05:38:35.585162 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 05:38:35.585173 check for attachDone..... 1
uuidAttach: 2020/08/15 05:38:35.590334 check for attachDone..... 2
uuidAttach: 2020/08/15 05:38:35.595521 About to run AttachNodeCh: b  c  Y9qPfOiSRE+bx8EE003uCQ== lCy4lFngTGSgCH1kRIy+/Q==
uuidAttach: 2020/08/15 05:38:35.595537 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.595549 check for attachDone..... 0
attachNode: 2020/08/15 05:38:35.595556 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/15 05:38:35.595563 Looping..... 0
grmgr: 2020/08/15 05:38:35.595706 Looping..... 1
grmgr: 2020/08/15 05:38:35.595884 Looping..... 2
grmgr: 2020/08/15 05:38:35.596061 Looping..... 3
grmgr: 2020/08/15 05:38:35.596237 Looping..... 4
grmgr: 2020/08/15 05:38:35.596416 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:38:35.596424 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:38:35.596430 goroutine about to start 2 cUID,pUID   Y9qPfOiSRE+bx8EE003uCQ==  lCy4lFngTGSgCH1kRIy+/Q==  
grmgr: 2020/08/15 05:38:35.596646 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:38:35.599156 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.665182ms
uuidAttach: 2020/08/15 05:38:35.601060 check for attachDone..... 1
DB: 2020/08/15 05:38:35.602789 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.603817ms
uuidAttach: 2020/08/15 05:38:35.606215 check for attachDone..... 2
DB: 2020/08/15 05:38:35.606617 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.779673ms
DB: 2020/08/15 05:38:35.611287 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.487046ms
AttachNode: main 2020/08/15 05:38:35.611300 FetchForUpdate: for parent    lCy4lFngTGSgCH1kRIy+/Q==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:38:35.611305 ** Cache FetchForUpdate Cache Key Value: [lCy4lFngTGSgCH1kRIy+/Q==]   sortk: A#G#:S
FetchNode: 2020/08/15 05:38:35.611311  node: lCy4lFngTGSgCH1kRIy+/Q== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:38:35.611497 FetchForUpdate: for child    Y9qPfOiSRE+bx8EE003uCQ==
FetchForUpdate: 2020/08/15 05:38:35.611539 ** Cache FetchForUpdate Cache Key Value: [Y9qPfOiSRE+bx8EE003uCQ==]   sortk: A#
fetchItems: 2020/08/15 05:38:35.611546 +++  Cache FetchItems for sortk A# UID: [Y9qPfOiSRE+bx8EE003uCQ==] 
FetchNode: 2020/08/15 05:38:35.611564  node: Y9qPfOiSRE+bx8EE003uCQ== subKey: A#
uuidAttach: 2020/08/15 05:38:35.611773 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.611782 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.611785 continue x 
uuidAttach: 2020/08/15 05:38:35.611791 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.611796 check for attachDone..... 0
DB: 2020/08/15 05:38:35.614063 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.691478ms
FetchForUpdate: 2020/08/15 05:38:35.614104 len(nb): 1
fetchItems: 2020/08/15 05:38:35.614111 +++  Cache FetchItems for sortk A#G#:S UID: [lCy4lFngTGSgCH1kRIy+/Q==] 
FetchNode: 2020/08/15 05:38:35.614116  node: lCy4lFngTGSgCH1kRIy+/Q== subKey: A#G#:S
DB: 2020/08/15 05:38:35.614719 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.107253ms
fetchItems: 2020/08/15 05:38:35.614880 +++  Cache FetchItems for sortk A# UID: [Y9qPfOiSRE+bx8EE003uCQ==] 
FetchNode: 2020/08/15 05:38:35.614888  node: Y9qPfOiSRE+bx8EE003uCQ== subKey: A#
DB: 2020/08/15 05:38:35.616970 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.827182ms
uuidAttach: 2020/08/15 05:38:35.617516 check for attachDone..... 1
DB: 2020/08/15 05:38:35.618135 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.201846ms
DB: 2020/08/15 05:38:35.621091 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.909751ms
uuidAttach: 2020/08/15 05:38:35.622674 check for attachDone..... 2
DB: 2020/08/15 05:38:35.627620 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.211173ms
uuidAttach: 2020/08/15 05:38:35.628223 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.628245 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.628250 continue x 
uuidAttach: 2020/08/15 05:38:35.628255 for loop finished 1  6 
uuidAttach: 2020/08/15 05:38:35.628260 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.628269 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.628274 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.628278 check for attachDone..... 0
DB: 2020/08/15 05:38:35.631836 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.95122ms
uuidAttach: 2020/08/15 05:38:35.633453 check for attachDone..... 1
DB: 2020/08/15 05:38:35.635951 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.986107ms
uuidAttach: 2020/08/15 05:38:35.638664 check for attachDone..... 2
DB: 2020/08/15 05:38:35.642140 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.126793ms
uuidAttach: 2020/08/15 05:38:35.643843 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.643854 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.643857 continue x 
uuidAttach: 2020/08/15 05:38:35.643862 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.643867 check for attachDone..... 0
DB: 2020/08/15 05:38:35.646269 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.06018ms
uuidAttach: 2020/08/15 05:38:35.649057 check for attachDone..... 1
DB: 2020/08/15 05:38:35.650235 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.858898ms
uuidAttach: 2020/08/15 05:38:35.654230 check for attachDone..... 2
DB: 2020/08/15 05:38:35.657640 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.336643ms
uuidAttach: 2020/08/15 05:38:35.659442 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.659453 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.659456 continue x 
uuidAttach: 2020/08/15 05:38:35.659461 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.659467 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.659472 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.659476 check for attachDone..... 0
DB: 2020/08/15 05:38:35.662347 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.613898ms
uuidAttach: 2020/08/15 05:38:35.664667 check for attachDone..... 1
DB: 2020/08/15 05:38:35.666240 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.831662ms
uuidAttach: 2020/08/15 05:38:35.669852 check for attachDone..... 2
DB: 2020/08/15 05:38:35.669959 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.664072ms
Cache: 2020/08/15 05:38:35.669970 In SetUpredAvailable: pUid, tUID:  lCy4lFngTGSgCH1kRIy+/Q== lCy4lFngTGSgCH1kRIy+/Q== A#G#:S
Cache: 2020/08/15 05:38:35.669974 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 05:38:35.673643 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.622501ms
Unlock: 2020/08/15 05:38:35.673657 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:38:35.673662 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:38:35.674924 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.674944 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.674952 continue x 
uuidAttach: 2020/08/15 05:38:35.674963 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.674986 check for attachDone..... 0
DB: 2020/08/15 05:38:35.678290 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.559427ms
grmgr: 2020/08/15 05:38:35.678303 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:38:35.680166 check for attachDone..... 1
uuidAttach: 2020/08/15 05:38:35.680175 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 05:38:35.680180 check for attachDone..... 2
uuidAttach: 2020/08/15 05:38:35.685343 About to run AttachNodeCh: c  b  lCy4lFngTGSgCH1kRIy+/Q== Y9qPfOiSRE+bx8EE003uCQ==
uuidAttach: 2020/08/15 05:38:35.685352 for loop finished 2  6 
uuidAttach: 2020/08/15 05:38:35.685359 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.685364 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.685368 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.685372 check for attachDone..... 0
attachNode: 2020/08/15 05:38:35.685378 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/15 05:38:35.685382 Looping..... 0
grmgr: 2020/08/15 05:38:35.685530 Looping..... 1
grmgr: 2020/08/15 05:38:35.685724 Looping..... 2
grmgr: 2020/08/15 05:38:35.685934 Looping..... 3
grmgr: 2020/08/15 05:38:35.686125 Looping..... 4
grmgr: 2020/08/15 05:38:35.686324 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:38:35.686332 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:38:35.686337 goroutine about to start 3 cUID,pUID   lCy4lFngTGSgCH1kRIy+/Q==  Y9qPfOiSRE+bx8EE003uCQ==  
grmgr: 2020/08/15 05:38:35.686511 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:38:35.689129 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.741557ms
uuidAttach: 2020/08/15 05:38:35.690584 check for attachDone..... 1
DB: 2020/08/15 05:38:35.692647 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.488165ms
uuidAttach: 2020/08/15 05:38:35.695719 check for attachDone..... 2
DB: 2020/08/15 05:38:35.696645 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.939552ms
uuidAttach: 2020/08/15 05:38:35.700903 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.700924 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.700933 continue x 
uuidAttach: 2020/08/15 05:38:35.700944 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.700955 check for attachDone..... 0
DB: 2020/08/15 05:38:35.701362 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.554063ms
AttachNode: main 2020/08/15 05:38:35.701373 FetchForUpdate: for parent    Y9qPfOiSRE+bx8EE003uCQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:38:35.701378 ** Cache FetchForUpdate Cache Key Value: [Y9qPfOiSRE+bx8EE003uCQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:38:35.701384 +++  Cache FetchItems for sortk A#G#:S UID: [Y9qPfOiSRE+bx8EE003uCQ==] 
FetchNode: 2020/08/15 05:38:35.701388  node: Y9qPfOiSRE+bx8EE003uCQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:38:35.701573 FetchForUpdate: for child    lCy4lFngTGSgCH1kRIy+/Q==
FetchForUpdate: 2020/08/15 05:38:35.701600 ** Cache FetchForUpdate Cache Key Value: [lCy4lFngTGSgCH1kRIy+/Q==]   sortk: A#
fetchItems: 2020/08/15 05:38:35.701605 +++  Cache FetchItems for sortk A# UID: [lCy4lFngTGSgCH1kRIy+/Q==] 
FetchNode: 2020/08/15 05:38:35.701617  node: lCy4lFngTGSgCH1kRIy+/Q== subKey: A#
DB: 2020/08/15 05:38:35.704205 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.787353ms
DB: 2020/08/15 05:38:35.705863 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.20453ms
fetchItems: 2020/08/15 05:38:35.706015 +++  Cache FetchItems for sortk A# UID: [lCy4lFngTGSgCH1kRIy+/Q==] 
FetchNode: 2020/08/15 05:38:35.706021  node: lCy4lFngTGSgCH1kRIy+/Q== subKey: A#
uuidAttach: 2020/08/15 05:38:35.706234 check for attachDone..... 1
DB: 2020/08/15 05:38:35.709127 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.078342ms
DB: 2020/08/15 05:38:35.709782 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.540943ms
uuidAttach: 2020/08/15 05:38:35.711965 check for attachDone..... 2
DB: 2020/08/15 05:38:35.713476 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.661993ms
DB: 2020/08/15 05:38:35.713492 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.661993ms
uuidAttach: 2020/08/15 05:38:35.717032 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.717042 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.717046 continue x 
uuidAttach: 2020/08/15 05:38:35.717051 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.717057 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.717062 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.717066 check for attachDone..... 0
DB: 2020/08/15 05:38:35.717194 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.672365ms
DB: 2020/08/15 05:38:35.717207 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.672365ms
DB: 2020/08/15 05:38:35.721423 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.141744ms
uuidAttach: 2020/08/15 05:38:35.722219 check for attachDone..... 1
DB: 2020/08/15 05:38:35.725604 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.11943ms
uuidAttach: 2020/08/15 05:38:35.727388 check for attachDone..... 2
DB: 2020/08/15 05:38:35.731861 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.19129ms
uuidAttach: 2020/08/15 05:38:35.732542 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.732551 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.732554 continue x 
uuidAttach: 2020/08/15 05:38:35.732559 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.732564 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.732568 for loop finished 2  6 
uuidAttach: 2020/08/15 05:38:35.732573 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.732578 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.732582 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.732586 check for attachDone..... 0
DB: 2020/08/15 05:38:35.735492 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.585503ms
uuidAttach: 2020/08/15 05:38:35.737765 check for attachDone..... 1
DB: 2020/08/15 05:38:35.739681 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.780929ms
uuidAttach: 2020/08/15 05:38:35.742943 check for attachDone..... 2
DB: 2020/08/15 05:38:35.746115 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.143275ms
uuidAttach: 2020/08/15 05:38:35.748133 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.748142 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.748145 continue x 
uuidAttach: 2020/08/15 05:38:35.748150 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.748155 check for attachDone..... 0
DB: 2020/08/15 05:38:35.750105 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.740123ms
uuidAttach: 2020/08/15 05:38:35.753342 check for attachDone..... 1
DB: 2020/08/15 05:38:35.754500 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.13117ms
uuidAttach: 2020/08/15 05:38:35.758510 check for attachDone..... 2
DB: 2020/08/15 05:38:35.760153 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.354735ms
uuidAttach: 2020/08/15 05:38:35.763693 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.763704 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.763708 continue x 
uuidAttach: 2020/08/15 05:38:35.763713 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.763719 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.763724 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.763729 check for attachDone..... 0
DB: 2020/08/15 05:38:35.764227 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.777872ms
DB: 2020/08/15 05:38:35.768280 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.761261ms
uuidAttach: 2020/08/15 05:38:35.768894 check for attachDone..... 1
DB: 2020/08/15 05:38:35.772258 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.792737ms
Cache: 2020/08/15 05:38:35.772270 In SetUpredAvailable: pUid, tUID:  Y9qPfOiSRE+bx8EE003uCQ== hfJItMMBRy6vQnEvbTEs1g== A#G#:S
Cache: 2020/08/15 05:38:35.772275 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:38:35.774046 check for attachDone..... 2
DB: 2020/08/15 05:38:35.776089 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.777064ms
Unlock: 2020/08/15 05:38:35.776100 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:38:35.776104 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:38:35.779196 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.779205 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.779209 continue x 
uuidAttach: 2020/08/15 05:38:35.779216 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.779221 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.779226 for loop finished 2  6 
uuidAttach: 2020/08/15 05:38:35.779232 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.779237 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.779242 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.779247 check for attachDone..... 0
DB: 2020/08/15 05:38:35.780492 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.329877ms
grmgr: 2020/08/15 05:38:35.780506 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:38:35.784453 check for attachDone..... 1
uuidAttach: 2020/08/15 05:38:35.784471 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 05:38:35.784483 check for attachDone..... 2
uuidAttach: 2020/08/15 05:38:35.789633 About to run AttachNodeCh: abc  c  QDBfX9qCQ3CvtajjfAFpbw== lCy4lFngTGSgCH1kRIy+/Q==
uuidAttach: 2020/08/15 05:38:35.789649 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.789654 check for attachDone..... 0
attachNode: 2020/08/15 05:38:35.789661 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/15 05:38:35.789666 Looping..... 0
grmgr: 2020/08/15 05:38:35.789808 Looping..... 1
grmgr: 2020/08/15 05:38:35.789984 Looping..... 2
grmgr: 2020/08/15 05:38:35.790158 Looping..... 3
grmgr: 2020/08/15 05:38:35.790329 Looping..... 4
grmgr: 2020/08/15 05:38:35.790502 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:38:35.790510 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:38:35.790515 goroutine about to start 4 cUID,pUID   QDBfX9qCQ3CvtajjfAFpbw==  lCy4lFngTGSgCH1kRIy+/Q==  
grmgr: 2020/08/15 05:38:35.790662 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:38:35.793088 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.384648ms
uuidAttach: 2020/08/15 05:38:35.794872 check for attachDone..... 1
DB: 2020/08/15 05:38:35.796795 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.666201ms
uuidAttach: 2020/08/15 05:38:35.800042 check for attachDone..... 2
DB: 2020/08/15 05:38:35.800793 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.897181ms
DB: 2020/08/15 05:38:35.805099 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.132801ms
AttachNode: main 2020/08/15 05:38:35.805111 FetchForUpdate: for parent    lCy4lFngTGSgCH1kRIy+/Q==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:38:35.805116 ** Cache FetchForUpdate Cache Key Value: [lCy4lFngTGSgCH1kRIy+/Q==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:38:35.805122 +++  Cache FetchItems for sortk A#G#:S UID: [lCy4lFngTGSgCH1kRIy+/Q==] 
FetchNode: 2020/08/15 05:38:35.805127  node: lCy4lFngTGSgCH1kRIy+/Q== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:38:35.805327 FetchForUpdate: for child    QDBfX9qCQ3CvtajjfAFpbw==
FetchForUpdate: 2020/08/15 05:38:35.805435 ** Cache FetchForUpdate Cache Key Value: [QDBfX9qCQ3CvtajjfAFpbw==]   sortk: A#
fetchItems: 2020/08/15 05:38:35.805445 +++  Cache FetchItems for sortk A# UID: [QDBfX9qCQ3CvtajjfAFpbw==] 
FetchNode: 2020/08/15 05:38:35.805459  node: QDBfX9qCQ3CvtajjfAFpbw== subKey: A#
uuidAttach: 2020/08/15 05:38:35.805824 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.805859 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.805863 continue x 
uuidAttach: 2020/08/15 05:38:35.805868 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.805874 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.805879 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.805883 check for attachDone..... 0
DB: 2020/08/15 05:38:35.808012 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.845435ms
DB: 2020/08/15 05:38:35.808913 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.41196ms
uuidAttach: 2020/08/15 05:38:35.810906 check for attachDone..... 1
DB: 2020/08/15 05:38:35.812492 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.029835ms
uuidAttach: 2020/08/15 05:38:35.816084 check for attachDone..... 2
DB: 2020/08/15 05:38:35.816249 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.727266ms
DB: 2020/08/15 05:38:35.816262 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.727266ms
DB: 2020/08/15 05:38:35.819994 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.690928ms
DB: 2020/08/15 05:38:35.820023 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.690928ms
uuidAttach: 2020/08/15 05:38:35.821236 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.821247 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.821250 continue x 
uuidAttach: 2020/08/15 05:38:35.821263 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.821268 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.821273 for loop finished 3  6 
uuidAttach: 2020/08/15 05:38:35.821277 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.821282 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.821287 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.821292 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.821296 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.821300 check for attachDone..... 0
DB: 2020/08/15 05:38:35.824467 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.271573ms
uuidAttach: 2020/08/15 05:38:35.826468 check for attachDone..... 1
DB: 2020/08/15 05:38:35.828441 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.825788ms
uuidAttach: 2020/08/15 05:38:35.831656 check for attachDone..... 2
DB: 2020/08/15 05:38:35.835084 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.361799ms
uuidAttach: 2020/08/15 05:38:35.836843 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.836855 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.836859 continue x 
uuidAttach: 2020/08/15 05:38:35.836865 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.836871 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.836889 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.836893 check for attachDone..... 0
DB: 2020/08/15 05:38:35.839201 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.871472ms
uuidAttach: 2020/08/15 05:38:35.841965 check for attachDone..... 1
DB: 2020/08/15 05:38:35.843729 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.972915ms
uuidAttach: 2020/08/15 05:38:35.847129 check for attachDone..... 2
DB: 2020/08/15 05:38:35.850420 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.187287ms
uuidAttach: 2020/08/15 05:38:35.852278 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.852288 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.852292 continue x 
uuidAttach: 2020/08/15 05:38:35.852297 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.852303 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.852307 for loop finished 3  6 
uuidAttach: 2020/08/15 05:38:35.852312 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.852317 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.852322 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.852327 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.852331 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.852335 check for attachDone..... 0
DB: 2020/08/15 05:38:35.854444 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.640598ms
uuidAttach: 2020/08/15 05:38:35.857495 check for attachDone..... 1
DB: 2020/08/15 05:38:35.859048 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.988634ms
uuidAttach: 2020/08/15 05:38:35.862694 check for attachDone..... 2
DB: 2020/08/15 05:38:35.865244 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.140652ms
uuidAttach: 2020/08/15 05:38:35.867920 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.867941 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.867949 continue x 
uuidAttach: 2020/08/15 05:38:35.867961 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.867973 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.867991 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.867996 check for attachDone..... 0
DB: 2020/08/15 05:38:35.869262 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.67127ms
uuidAttach: 2020/08/15 05:38:35.873113 check for attachDone..... 1
DB: 2020/08/15 05:38:35.873437 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.854661ms
DB: 2020/08/15 05:38:35.877395 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.723326ms
Cache: 2020/08/15 05:38:35.877408 In SetUpredAvailable: pUid, tUID:  lCy4lFngTGSgCH1kRIy+/Q== 5fhop1hhSM6SygDK+T7jJw== A#G#:S
Cache: 2020/08/15 05:38:35.877413 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:38:35.878290 check for attachDone..... 2
DB: 2020/08/15 05:38:35.881194 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.749018ms
Unlock: 2020/08/15 05:38:35.881203 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:38:35.881207 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:38:35.883483 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.883492 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.883496 continue x 
uuidAttach: 2020/08/15 05:38:35.883501 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.883507 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.883511 for loop finished 3  6 
uuidAttach: 2020/08/15 05:38:35.883516 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.883521 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.883525 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.883530 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.883535 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.883539 check for attachDone..... 0
DB: 2020/08/15 05:38:35.885762 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.492205ms
grmgr: 2020/08/15 05:38:35.885793 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:38:35.888722 check for attachDone..... 1
uuidAttach: 2020/08/15 05:38:35.888731 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 05:38:35.888736 check for attachDone..... 2
uuidAttach: 2020/08/15 05:38:35.893935 About to run AttachNodeCh: b  abc  Y9qPfOiSRE+bx8EE003uCQ== QDBfX9qCQ3CvtajjfAFpbw==
uuidAttach: 2020/08/15 05:38:35.893951 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.893957 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.893962 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.893966 check for attachDone..... 0
attachNode: 2020/08/15 05:38:35.893972 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/15 05:38:35.893978 Looping..... 0
grmgr: 2020/08/15 05:38:35.894065 Looping..... 1
grmgr: 2020/08/15 05:38:35.894103 Looping..... 2
grmgr: 2020/08/15 05:38:35.894131 Looping..... 3
grmgr: 2020/08/15 05:38:35.894280 Looping..... 4
grmgr: 2020/08/15 05:38:35.894456 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:38:35.894464 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:38:35.894469 goroutine about to start 5 cUID,pUID   Y9qPfOiSRE+bx8EE003uCQ==  QDBfX9qCQ3CvtajjfAFpbw==  
grmgr: 2020/08/15 05:38:35.894695 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:38:35.897040 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.516415ms
uuidAttach: 2020/08/15 05:38:35.899085 check for attachDone..... 1
DB: 2020/08/15 05:38:35.899551 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.452902ms
DB: 2020/08/15 05:38:35.903688 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.071848ms
uuidAttach: 2020/08/15 05:38:35.904315 check for attachDone..... 2
DB: 2020/08/15 05:38:35.908303 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.390394ms
AttachNode: main 2020/08/15 05:38:35.908314 FetchForUpdate: for parent    QDBfX9qCQ3CvtajjfAFpbw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:38:35.908319 ** Cache FetchForUpdate Cache Key Value: [QDBfX9qCQ3CvtajjfAFpbw==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:38:35.908324 +++  Cache FetchItems for sortk A#G#:S UID: [QDBfX9qCQ3CvtajjfAFpbw==] 
FetchNode: 2020/08/15 05:38:35.908328  node: QDBfX9qCQ3CvtajjfAFpbw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:38:35.908482 FetchForUpdate: for child    Y9qPfOiSRE+bx8EE003uCQ==
FetchForUpdate: 2020/08/15 05:38:35.908490 ** Cache FetchForUpdate Cache Key Value: [Y9qPfOiSRE+bx8EE003uCQ==]   sortk: A#
fetchItems: 2020/08/15 05:38:35.908495 +++  Cache FetchItems for sortk A# UID: [Y9qPfOiSRE+bx8EE003uCQ==] 
FetchNode: 2020/08/15 05:38:35.908522  node: Y9qPfOiSRE+bx8EE003uCQ== subKey: A#
uuidAttach: 2020/08/15 05:38:35.909488 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909499 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.909504 continue x 
uuidAttach: 2020/08/15 05:38:35.909509 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909515 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909520 for loop finished 4  6 
uuidAttach: 2020/08/15 05:38:35.909527 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909532 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909537 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909542 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909547 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909552 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909557 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909562 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909567 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.909571 check for attachDone..... 0
DB: 2020/08/15 05:38:35.911288 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.931569ms
DB: 2020/08/15 05:38:35.912274 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.679776ms
uuidAttach: 2020/08/15 05:38:35.914661 check for attachDone..... 1
DB: 2020/08/15 05:38:35.915451 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.896162ms
uuidAttach: 2020/08/15 05:38:35.919835 check for attachDone..... 2
DB: 2020/08/15 05:38:35.922212 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.257221ms
uuidAttach: 2020/08/15 05:38:35.925009 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925019 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.925023 continue x 
uuidAttach: 2020/08/15 05:38:35.925028 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925034 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925039 for loop finished 4  6 
uuidAttach: 2020/08/15 05:38:35.925043 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925049 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925053 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925058 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925063 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925068 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925072 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925078 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925082 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.925086 check for attachDone..... 0
DB: 2020/08/15 05:38:35.926635 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.165818ms
uuidAttach: 2020/08/15 05:38:35.930281 check for attachDone..... 1
DB: 2020/08/15 05:38:35.931857 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.47426ms
uuidAttach: 2020/08/15 05:38:35.935455 check for attachDone..... 2
DB: 2020/08/15 05:38:35.937636 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.234709ms
uuidAttach: 2020/08/15 05:38:35.940621 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940630 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.940634 continue x 
uuidAttach: 2020/08/15 05:38:35.940638 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940644 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940648 for loop finished 4  6 
uuidAttach: 2020/08/15 05:38:35.940652 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940657 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940661 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940666 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940670 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940674 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940678 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940683 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940890 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.940897 check for attachDone..... 0
DB: 2020/08/15 05:38:35.942423 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.381463ms
uuidAttach: 2020/08/15 05:38:35.946042 check for attachDone..... 1
DB: 2020/08/15 05:38:35.946987 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.847719ms
uuidAttach: 2020/08/15 05:38:35.951220 check for attachDone..... 2
DB: 2020/08/15 05:38:35.952658 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.275755ms
uuidAttach: 2020/08/15 05:38:35.956413 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956424 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.956427 continue x 
uuidAttach: 2020/08/15 05:38:35.956432 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956438 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956442 for loop finished 4  6 
uuidAttach: 2020/08/15 05:38:35.956446 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956451 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956455 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956460 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956465 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956470 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956474 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956478 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956483 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.956487 check for attachDone..... 0
DB: 2020/08/15 05:38:35.957047 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.901894ms
DB: 2020/08/15 05:38:35.961690 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.025441ms
uuidAttach: 2020/08/15 05:38:35.962368 check for attachDone..... 1
DB: 2020/08/15 05:38:35.965957 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.826915ms
Cache: 2020/08/15 05:38:35.965968 In SetUpredAvailable: pUid, tUID:  QDBfX9qCQ3CvtajjfAFpbw== QDBfX9qCQ3CvtajjfAFpbw== A#G#:S
Cache: 2020/08/15 05:38:35.965973 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:38:35.967559 check for attachDone..... 2
DB: 2020/08/15 05:38:35.969912 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.906306ms
Unlock: 2020/08/15 05:38:35.969921 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:38:35.969925 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:38:35.972642 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972651 	dontrun = true
uuidAttach: 2020/08/15 05:38:35.972655 continue x 
uuidAttach: 2020/08/15 05:38:35.972660 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972666 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972670 for loop finished 4  6 
uuidAttach: 2020/08/15 05:38:35.972675 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972680 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972685 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972690 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972695 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972700 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972704 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972709 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972714 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.972723 check for attachDone..... 0
DB: 2020/08/15 05:38:35.974339 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.330241ms
grmgr: 2020/08/15 05:38:35.974352 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:38:35.977936 check for attachDone..... 1
uuidAttach: 2020/08/15 05:38:35.977949 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 05:38:35.977955 check for attachDone..... 2
uuidAttach: 2020/08/15 05:38:35.983188 About to run AttachNodeCh: c  abc  lCy4lFngTGSgCH1kRIy+/Q== QDBfX9qCQ3CvtajjfAFpbw==
uuidAttach: 2020/08/15 05:38:35.983203 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.983209 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:38:35.983213 for loop finished 5  6 
uuidAttach: 2020/08/15 05:38:35.983217  break....
attachNode: 2020/08/15 05:38:35.983222 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/15 05:38:35.983228 Looping..... 0
grmgr: 2020/08/15 05:38:35.983336 Looping..... 1
grmgr: 2020/08/15 05:38:35.983519 Looping..... 2
grmgr: 2020/08/15 05:38:35.983704 Looping..... 3
grmgr: 2020/08/15 05:38:35.983880 Looping..... 4
grmgr: 2020/08/15 05:38:35.984054 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:38:35.984062 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:38:35.984067 goroutine about to start 6 cUID,pUID   lCy4lFngTGSgCH1kRIy+/Q==  QDBfX9qCQ3CvtajjfAFpbw==  
rdfLoader: 2020/08/15 05:38:35.984074 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/15 05:38:35.984284 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:38:35.986466 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.306103ms
DB: 2020/08/15 05:38:35.990178 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.683031ms
DB: 2020/08/15 05:38:35.994415 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.138989ms
DB: 2020/08/15 05:38:35.998764 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.041762ms
AttachNode: main 2020/08/15 05:38:35.998777 FetchForUpdate: for parent    QDBfX9qCQ3CvtajjfAFpbw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:38:35.998782 ** Cache FetchForUpdate Cache Key Value: [QDBfX9qCQ3CvtajjfAFpbw==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:38:35.998787 +++  Cache FetchItems for sortk A#G#:S UID: [QDBfX9qCQ3CvtajjfAFpbw==] 
FetchNode: 2020/08/15 05:38:35.998792  node: QDBfX9qCQ3CvtajjfAFpbw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:38:35.998989 FetchForUpdate: for child    lCy4lFngTGSgCH1kRIy+/Q==
FetchForUpdate: 2020/08/15 05:38:35.999027 ** Cache FetchForUpdate Cache Key Value: [lCy4lFngTGSgCH1kRIy+/Q==]   sortk: A#
fetchItems: 2020/08/15 05:38:35.999048 +++  Cache FetchItems for sortk A# UID: [lCy4lFngTGSgCH1kRIy+/Q==] 
FetchNode: 2020/08/15 05:38:35.999061  node: lCy4lFngTGSgCH1kRIy+/Q== subKey: A#
DB: 2020/08/15 05:38:36.002762 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.654793ms
DB: 2020/08/15 05:38:36.004304 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.482008ms
DB: 2020/08/15 05:38:36.009352 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.154517ms
DB: 2020/08/15 05:38:36.013058 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.675798ms
DB: 2020/08/15 05:38:36.013077 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.675798ms
DB: 2020/08/15 05:38:36.016796 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.688111ms
DB: 2020/08/15 05:38:36.016812 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.688111ms
DB: 2020/08/15 05:38:36.020955 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.067322ms
DB: 2020/08/15 05:38:36.024853 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.834187ms
DB: 2020/08/15 05:38:36.031506 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.194979ms
DB: 2020/08/15 05:38:36.035576 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.741974ms
DB: 2020/08/15 05:38:36.040031 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.871853ms
DB: 2020/08/15 05:38:36.046635 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.174565ms
DB: 2020/08/15 05:38:36.050803 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.698126ms
DB: 2020/08/15 05:38:36.055443 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.069571ms
DB: 2020/08/15 05:38:36.062118 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.148701ms
DB: 2020/08/15 05:38:36.066233 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.686247ms
DB: 2020/08/15 05:38:36.070636 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.875758ms
DB: 2020/08/15 05:38:36.074628 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.640972ms
Cache: 2020/08/15 05:38:36.074641 In SetUpredAvailable: pUid, tUID:  QDBfX9qCQ3CvtajjfAFpbw== hr0xkUVrT+WDq1OViM2uSw== A#G#:S
Cache: 2020/08/15 05:38:36.074646 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 05:38:36.078509 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.830151ms
Unlock: 2020/08/15 05:38:36.078519 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:38:36.078524 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 05:38:36.082833 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.237638ms
uuidAttach: 2020/08/15 05:38:36.082851 received on attachDoneCh: uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 05:38:36.082859 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/15 05:38:36.082865 saveNode finished waiting...exiting
rdfLoader: 2020/08/15 05:38:36.082871 cancel contexts
rdfLoader: 2020/08/15 05:38:36.082876 wait for autonomous goroutines to end
rdfuuid: 2020/08/15 05:38:36.082882 Powering down...
grmgr: 2020/08/15 05:38:36.082886 Powering down...
rdfuuid: 2020/08/15 05:38:36.082891 Powering down...
errlog: 2020/08/15 05:38:36.082896 Powering down...
rdfLoader: 2020/08/15 05:38:36.082900 loader exists.....
DB:2020/08/15 05:40:26 log.go:18: ===============================================================================
anmgr: 2020/08/15 05:40:26.202857 Powering on...
rdfLoader: 2020/08/15 05:40:26.203131 saveNode started......
rdfLoader: 2020/08/15 05:40:26.203143 define saveNode limiter......
rdfuuid: 2020/08/15 05:40:26.203151 Powering on...
grmgr: 2020/08/15 05:40:26.203170 Powering on...
errlog: 2020/08/15 05:40:26.203180 Powering on...
rdfLoader: 2020/08/15 05:40:26.203186  principle goroutines started 
RDFreader: 2020/08/15 05:40:26.203212 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 05:40:26.203226 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 05:40:26.203233 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 05:40:26.203238 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 05:40:26.203266 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 05:40:26.203279 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 05:40:26.203283 spo read:      
RDFreader: 2020/08/15 05:40:26.203288 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 05:40:26.203293 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 05:40:26.203298 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 05:40:26.203303 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 05:40:26.203307 spo read:      
RDFreader: 2020/08/15 05:40:26.203312 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 05:40:26.203317 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 05:40:26.203321 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 05:40:26.203326 spo read:  b  Age  "58"
RDFreader: 2020/08/15 05:40:26.203331 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 05:40:26.203336 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 05:40:26.203341 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 05:40:26.203346 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 05:40:26.203350 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 05:40:26.203354 spo read:      
RDFreader: 2020/08/15 05:40:26.203359 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 05:40:26.203363 Send node batch on channel verifyCh
RDFreader: 2020/08/15 05:40:26.203368 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 05:40:26.203372 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 05:40:26.203377 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 05:40:26.203384 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 05:40:26.203389 spo read:  c  Age  "67"
RDFreader: 2020/08/15 05:40:26.203394 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 05:40:26.203399 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 05:40:26.203403 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 05:40:26.203408 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 05:40:26.203424 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 05:40:26.203429 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 05:40:26.203433 spo read:      
RDFreader: 2020/08/15 05:40:26.203438 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 05:40:26.203443 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 05:40:26.203447 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 05:40:26.203452 spo read:  d  Age  "36"
RDFreader: 2020/08/15 05:40:26.203457 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 05:40:26.203463 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 05:40:26.203467 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 05:40:26.203471 close verify channel
rdfLoader: 2020/08/15 05:40:26.203475 wait for goroutines to end
rdfLoader: 2020/08/15 05:40:26.203479 verify started....
rdfLoader: 2020/08/15 05:40:26.203484 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 05:40:26.203488 .  getType..
rdfLoader: 2020/08/15 05:40:26.203492 node.TyName : [Person]
DB: 2020/08/15 05:40:26.277998 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 74.44727ms
grmgr: 2020/08/15 05:40:26.278118 Looping..... 0
grmgr: 2020/08/15 05:40:26.278385 Looping..... 1
grmgr: 2020/08/15 05:40:26.278411 Looping..... 2
grmgr: 2020/08/15 05:40:26.278545 Looping..... 3
grmgr: 2020/08/15 05:40:26.278720 Looping..... 4
grmgr: 2020/08/15 05:40:26.278910 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 05:40:26.278920 .  getType..
rdfLoader: 2020/08/15 05:40:26.278924 node.TyName : [Person]
grmgr: 2020/08/15 05:40:26.278929 Looping..... 0
unmarshalRDF2020/08/15 05:40:26.278940 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:40:26.278948 Looping..... 1
grmgr: 2020/08/15 05:40:26.278953 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 05:40:26.278957 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 05:40:26.278963 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 05:40:26.278967 .  getType..
rdfLoader: 2020/08/15 05:40:26.278970 node.TyName : [Person]
grmgr: 2020/08/15 05:40:26.278974 Looping..... 0
rdfLoader: 2020/08/15 05:40:26.278991 Add to SS . [Honda]
rdfLoader: 2020/08/15 05:40:26.278995 Add to SS . [Alfa]
uuidAttach: 2020/08/15 05:40:26.279025 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.279032 received on EdgeSnCn. uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:40:26.279069 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:40:26.279075 Exit  unmarshalRDF. 
saveNode: 2020/08/15 05:40:26.279080 read from saveCH channel 1 
unmarshalRDF2020/08/15 05:40:26.279088 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:40:26.279117 Looping..... 1
grmgr: 2020/08/15 05:40:26.279122 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 05:40:26.279125 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 05:40:26.279130 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 05:40:26.279134 Looping..... 0
rdfLoader: 2020/08/15 05:40:26.279141 Add to SS . [Honda]
rdfLoader: 2020/08/15 05:40:26.279145 Add to SS . [VW Golf]
uuidAttach: 2020/08/15 05:40:26.279158 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.279164 received on EdgeSnCn. uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:40:26.279187 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:40:26.279191 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 05:40:26.279196 .  getType..
rdfLoader: 2020/08/15 05:40:26.279199 node.TyName : [Person]
unmarshalRDF2020/08/15 05:40:26.279207 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:40:26.279216 Looping..... 1
rdfLoader: 2020/08/15 05:40:26.279223 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 05:40:26.279227 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 05:40:26.279231 Add to SS . [Honda]
uuidAttach: 2020/08/15 05:40:26.279241 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.279246 received on EdgeSnCn. uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 05:40:26.279282 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:40:26.279286 Exit  unmarshalRDF. 
grmgr: 2020/08/15 05:40:26.279308 Looping..... 2
grmgr: 2020/08/15 05:40:26.279494 Looping..... 3
grmgr: 2020/08/15 05:40:26.279695 Looping..... 4
grmgr: 2020/08/15 05:40:26.279855 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 05:40:26.279868 Looping..... 0
saveNode: 2020/08/15 05:40:26.279874 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:40:26.279892 read from saveCH channel 2 
grmgr: 2020/08/15 05:40:26.279927 Looping..... 1
SaveRDFNode: xxx 2020/08/15 05:40:26.279936 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.279942 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.279947 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.279953 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.279958 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.279962 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.279967 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:40:26.279971 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:40:26.279977 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc00074c1e0)}
SaveRDFNode: 2020/08/15 05:40:26.279981 Waiting for UID ......................
SaveRDFNode: 2020/08/15 05:40:26.279991 UID received  : ORtzaiGYTuSsTmp0zZhIeg==
grmgr: 2020/08/15 05:40:26.280265 Looping..... 2
grmgr: 2020/08/15 05:40:26.280439 Looping..... 3
grmgr: 2020/08/15 05:40:26.280610 Looping..... 4
grmgr: 2020/08/15 05:40:26.280788 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 05:40:26.280796 Looping..... 0
unmarshalRDF2020/08/15 05:40:26.280810 Entered unmarshalRDF. 
grmgr: 2020/08/15 05:40:26.280819 Looping..... 1
rdfLoader: 2020/08/15 05:40:26.280828 Add to SS . [Bentley]
unmarshalRDF2020/08/15 05:40:26.280861 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 05:40:26.280865 Exit  unmarshalRDF. 
grmgr: 2020/08/15 05:40:26.280875 Looping..... 2
grmgr: 2020/08/15 05:40:26.280970 Looping..... 3
grmgr: 2020/08/15 05:40:26.281145 Looping..... 4
grmgr: 2020/08/15 05:40:26.281326 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 05:40:26.281336 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/15 05:40:26.281341 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 05:40:26.281346 EndCh received for unmarshall. rCnt = 0 
saveNode: 2020/08/15 05:40:26.281352 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:40:26.281357 read from saveCH channel 3 
grmgr: 2020/08/15 05:40:26.281362 Looping..... 0
grmgr: 2020/08/15 05:40:26.281386 Looping..... 1
grmgr: 2020/08/15 05:40:26.281391 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 05:40:26.281395 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 05:40:26.281403 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.281409 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.281416 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.281427 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.281432 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.281438 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.281443 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:40:26.281447 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:40:26.281453 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc00074c5a0)}
SaveRDFNode: 2020/08/15 05:40:26.281457 Waiting for UID ......................
SaveRDFNode: 2020/08/15 05:40:26.281481 UID received  : D16QNQ6lQk2C/LLqBkrDEQ==
DB: 2020/08/15 05:40:26.288456 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.421236ms
DB: 2020/08/15 05:40:26.292707 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 11.184991ms
DB: 2020/08/15 05:40:26.296988 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.234798ms
DB: 2020/08/15 05:40:26.301384 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.245362ms
DB: 2020/08/15 05:40:26.305747 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.319727ms
DB: 2020/08/15 05:40:26.307822 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 19.333424ms
DB: 2020/08/15 05:40:26.309916 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.065231ms
SaveRDFNode: 2020/08/15 05:40:26.309929 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00074c5a0)}
SaveRDFNode: 2020/08/15 05:40:26.309938 Received UID: X18=
SaveRDFNode: 2020/08/15 05:40:26.309956 a: = db.Item{PKey:[]uint8{0xf, 0x5e, 0x90, 0x35, 0xe, 0xa5, 0x42, 0x4d, 0x82, 0xfc, 0xb2, 0xea, 0x6, 0x4a, 0xc3, 0x11}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:40:26.312960 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.080938ms
DB: 2020/08/15 05:40:26.314718 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.730416ms
SaveRDFNode: 2020/08/15 05:40:26.314731 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00074c5a0)}
SaveRDFNode: 2020/08/15 05:40:26.314739 Received UID: X18=
SaveRDFNode: 2020/08/15 05:40:26.314750 a: = db.Item{PKey:[]uint8{0xf, 0x5e, 0x90, 0x35, 0xe, 0xa5, 0x42, 0x4d, 0x82, 0xfc, 0xb2, 0xea, 0x6, 0x4a, 0xc3, 0x11}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:40:26.317551 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.453654ms
DB: 2020/08/15 05:40:26.319553 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.775465ms
SaveRDFNode: 2020/08/15 05:40:26.319563 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:40:26.319570 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 05:40:26.319574 Send ack to waiting saveNode...
saveNode: 2020/08/15 05:40:26.319580 limiter has ACK and will start goroutine...
saveNode: 2020/08/15 05:40:26.319585 read from saveCH channel 4 
grmgr: 2020/08/15 05:40:26.319651 Looping..... 0
grmgr: 2020/08/15 05:40:26.319682 Looping..... 1
grmgr: 2020/08/15 05:40:26.319688 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 05:40:26.319692 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 05:40:26.319701 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.319715 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.319721 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.319726 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.319732 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.319737 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.319743 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:40:26.319788 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:40:26.319795 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000017980)}
SaveRDFNode: 2020/08/15 05:40:26.319800 Waiting for UID ......................
SaveRDFNode: 2020/08/15 05:40:26.319821 UID received  : 5R8Yg/klSF+tRQkEMjz+zg==
DB: 2020/08/15 05:40:26.322233 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.653164ms
SaveRDFNode: 2020/08/15 05:40:26.322243 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00074c1e0)}
SaveRDFNode: 2020/08/15 05:40:26.322250 Received UID: X18=
SaveRDFNode: 2020/08/15 05:40:26.322263 a: = db.Item{PKey:[]uint8{0x39, 0x1b, 0x73, 0x6a, 0x21, 0x98, 0x4e, 0xe4, 0xac, 0x4e, 0x6a, 0x74, 0xcd, 0x98, 0x48, 0x7a}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:40:26.324491 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.644155ms
DB: 2020/08/15 05:40:26.326793 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.503883ms
SaveRDFNode: 2020/08/15 05:40:26.326804 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00074c1e0)}
SaveRDFNode: 2020/08/15 05:40:26.326811 Received UID: X18=
SaveRDFNode: 2020/08/15 05:40:26.326821 a: = db.Item{PKey:[]uint8{0x39, 0x1b, 0x73, 0x6a, 0x21, 0x98, 0x4e, 0xe4, 0xac, 0x4e, 0x6a, 0x74, 0xcd, 0x98, 0x48, 0x7a}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:40:26.328631 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.095291ms
DB: 2020/08/15 05:40:26.331427 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.577236ms
SaveRDFNode: 2020/08/15 05:40:26.331438 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:40:26.331448 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 05:40:26.331453 Send ack to waiting saveNode...
saveNode: 2020/08/15 05:40:26.331458 limiter has ACK and will start goroutine...
rdfLoader: 2020/08/15 05:40:26.331463 saveNode  waiting on saveRDFNode routines to finish
SaveRDFNode: xxx 2020/08/15 05:40:26.331486 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.331492 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.331498 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.331505 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.331530 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.331536 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 05:40:26.331548 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 05:40:26.331552 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 05:40:26.331558 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000338d20)}
SaveRDFNode: 2020/08/15 05:40:26.331562 Waiting for UID ......................
SaveRDFNode: 2020/08/15 05:40:26.331572 UID received  : VloYKQxhQKWtToWJ9id+gg==
grmgr: 2020/08/15 05:40:26.331753 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 05:40:26.332888 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.109739ms
DB: 2020/08/15 05:40:26.336154 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.556654ms
DB: 2020/08/15 05:40:26.337193 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.27568ms
DB: 2020/08/15 05:40:26.341430 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.203766ms
SaveRDFNode: 2020/08/15 05:40:26.341443 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017980)}
SaveRDFNode: 2020/08/15 05:40:26.341451 Received UID: X18=
SaveRDFNode: 2020/08/15 05:40:26.341461 a: = db.Item{PKey:[]uint8{0xe5, 0x1f, 0x18, 0x83, 0xf9, 0x25, 0x48, 0x5f, 0xad, 0x45, 0x9, 0x4, 0x32, 0x3c, 0xfe, 0xce}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:40:26.341741 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.556073ms
DB: 2020/08/15 05:40:26.345689 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.196623ms
SaveRDFNode: 2020/08/15 05:40:26.345814 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017980)}
SaveRDFNode: 2020/08/15 05:40:26.345827 Received UID: X18=
SaveRDFNode: 2020/08/15 05:40:26.345838 a: = db.Item{PKey:[]uint8{0xe5, 0x1f, 0x18, 0x83, 0xf9, 0x25, 0x48, 0x5f, 0xad, 0x45, 0x9, 0x4, 0x32, 0x3c, 0xfe, 0xce}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:40:26.346266 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.495726ms
DB: 2020/08/15 05:40:26.350118 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.250194ms
SaveRDFNode: 2020/08/15 05:40:26.350128 Returned.+++++++++++ No error
grmgr: 2020/08/15 05:40:26.350135 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 05:40:26.350663 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.363139ms
DB: 2020/08/15 05:40:26.355508 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.814972ms
SaveRDFNode: 2020/08/15 05:40:26.355521 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000338d20)}
SaveRDFNode: 2020/08/15 05:40:26.355529 Received UID: X18=
SaveRDFNode: 2020/08/15 05:40:26.355539 a: = db.Item{PKey:[]uint8{0x56, 0x5a, 0x18, 0x29, 0xc, 0x61, 0x40, 0xa5, 0xad, 0x4e, 0x85, 0x89, 0xf6, 0x27, 0x7e, 0x82}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:40:26.360239 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.668847ms
SaveRDFNode: 2020/08/15 05:40:26.360252 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000338d20)}
SaveRDFNode: 2020/08/15 05:40:26.360260 Received UID: X18=
SaveRDFNode: 2020/08/15 05:40:26.360271 a: = db.Item{PKey:[]uint8{0x56, 0x5a, 0x18, 0x29, 0xc, 0x61, 0x40, 0xa5, 0xad, 0x4e, 0x85, 0x89, 0xf6, 0x27, 0x7e, 0x82}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 05:40:26.365130 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.827796ms
SaveRDFNode: 2020/08/15 05:40:26.365282 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 05:40:26.365294 saveNode finished waiting...exiting
grmgr: 2020/08/15 05:40:26.365302 EndCh received for saveNode. rCnt = 0 
uuidAttach: 2020/08/15 05:40:26.365314 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.365319 check for attachDone..... 0
uuidAttach: 2020/08/15 05:40:26.370414 check for attachDone..... 1
uuidAttach: 2020/08/15 05:40:26.375596 check for attachDone..... 2
uuidAttach: 2020/08/15 05:40:26.380765 About to run AttachNodeCh: abc  b  ORtzaiGYTuSsTmp0zZhIeg== D16QNQ6lQk2C/LLqBkrDEQ==
uuidAttach: 2020/08/15 05:40:26.380785 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.380792 check for attachDone..... 0
attachNode: 2020/08/15 05:40:26.380799 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/15 05:40:26.380805 Looping..... 0
grmgr: 2020/08/15 05:40:26.381147 Looping..... 1
grmgr: 2020/08/15 05:40:26.381325 Looping..... 2
grmgr: 2020/08/15 05:40:26.381503 Looping..... 3
grmgr: 2020/08/15 05:40:26.381691 Looping..... 4
grmgr: 2020/08/15 05:40:26.381872 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:40:26.381882 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:40:26.381888 goroutine about to start 1 cUID,pUID   ORtzaiGYTuSsTmp0zZhIeg==  D16QNQ6lQk2C/LLqBkrDEQ==  
grmgr: 2020/08/15 05:40:26.382119 StartCh received for nodeAttach. rCnt = 1 
uuidAttach: 2020/08/15 05:40:26.385955 check for attachDone..... 1
DB: 2020/08/15 05:40:26.386373 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.414556ms
DB: 2020/08/15 05:40:26.389144 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.742409ms
uuidAttach: 2020/08/15 05:40:26.391110 check for attachDone..... 2
DB: 2020/08/15 05:40:26.393767 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.568907ms
uuidAttach: 2020/08/15 05:40:26.396232 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.396243 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.396247 continue x 
uuidAttach: 2020/08/15 05:40:26.396252 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.396258 check for attachDone..... 0
uuidAttach: 2020/08/15 05:40:26.401421 check for attachDone..... 1
DB: 2020/08/15 05:40:26.403666 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 9.309014ms
AttachNode: main 2020/08/15 05:40:26.403680 FetchForUpdate: for parent    D16QNQ6lQk2C/LLqBkrDEQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:40:26.403686 ** Cache FetchForUpdate Cache Key Value: [D16QNQ6lQk2C/LLqBkrDEQ==]   sortk: A#G#:S
FetchNode: 2020/08/15 05:40:26.403695  node: D16QNQ6lQk2C/LLqBkrDEQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:40:26.403872 FetchForUpdate: for child    ORtzaiGYTuSsTmp0zZhIeg==
FetchForUpdate: 2020/08/15 05:40:26.403881 ** Cache FetchForUpdate Cache Key Value: [ORtzaiGYTuSsTmp0zZhIeg==]   sortk: A#
FetchNode: 2020/08/15 05:40:26.403898  node: ORtzaiGYTuSsTmp0zZhIeg== subKey: A#
uuidAttach: 2020/08/15 05:40:26.406679 check for attachDone..... 2
DB: 2020/08/15 05:40:26.406852 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.123142ms
FetchForUpdate: 2020/08/15 05:40:26.406902 len(nb): 1
fetchItems: 2020/08/15 05:40:26.406910 +++  Cache FetchItems for sortk A#G#:S UID: [D16QNQ6lQk2C/LLqBkrDEQ==] 
FetchNode: 2020/08/15 05:40:26.406914  node: D16QNQ6lQk2C/LLqBkrDEQ== subKey: A#G#:S
DB: 2020/08/15 05:40:26.410488 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.54614ms
uuidAttach: 2020/08/15 05:40:26.411851 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.411873 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.411877 continue x 
uuidAttach: 2020/08/15 05:40:26.411882 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.411887 check for attachDone..... 0
DB: 2020/08/15 05:40:26.415437 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.391289ms
uuidAttach: 2020/08/15 05:40:26.417048 check for attachDone..... 1
uuidAttach: 2020/08/15 05:40:26.422239 check for attachDone..... 2
DB: 2020/08/15 05:40:26.422801 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 18.861512ms
FetchForUpdate: 2020/08/15 05:40:26.422962 len(nb): 7
fetchItems: 2020/08/15 05:40:26.422971 +++  Cache FetchItems for sortk A# UID: [ORtzaiGYTuSsTmp0zZhIeg==] 
FetchNode: 2020/08/15 05:40:26.422975  node: ORtzaiGYTuSsTmp0zZhIeg== subKey: A#
DB: 2020/08/15 05:40:26.426789 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.78083ms
uuidAttach: 2020/08/15 05:40:26.429608 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.429619 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.429623 continue x 
uuidAttach: 2020/08/15 05:40:26.429629 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.429634 check for attachDone..... 0
uuidAttach: 2020/08/15 05:40:26.434792 check for attachDone..... 1
DB: 2020/08/15 05:40:26.437563 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.68929ms
uuidAttach: 2020/08/15 05:40:26.439962 check for attachDone..... 2
DB: 2020/08/15 05:40:26.442291 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.670295ms
uuidAttach: 2020/08/15 05:40:26.445041 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.445052 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.445056 continue x 
uuidAttach: 2020/08/15 05:40:26.445062 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.445067 check for attachDone..... 0
DB: 2020/08/15 05:40:26.448600 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.203349ms
uuidAttach: 2020/08/15 05:40:26.451230 check for attachDone..... 1
DB: 2020/08/15 05:40:26.455363 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.698995ms
uuidAttach: 2020/08/15 05:40:26.456397 check for attachDone..... 2
DB: 2020/08/15 05:40:26.460817 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.596086ms
uuidAttach: 2020/08/15 05:40:26.462050 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.462060 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.462064 continue x 
uuidAttach: 2020/08/15 05:40:26.462073 for loop finished 0  6 
uuidAttach: 2020/08/15 05:40:26.462079 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.462086 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.462090 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.462108 check for attachDone..... 0
DB: 2020/08/15 05:40:26.467270 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.447285ms
uuidAttach: 2020/08/15 05:40:26.467909 check for attachDone..... 1
uuidAttach: 2020/08/15 05:40:26.473063 check for attachDone..... 2
DB: 2020/08/15 05:40:26.473752 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.40952ms
uuidAttach: 2020/08/15 05:40:26.478214 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.478225 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.478250 continue x 
uuidAttach: 2020/08/15 05:40:26.478256 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.478261 check for attachDone..... 0
DB: 2020/08/15 05:40:26.478424 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.618628ms
DB: 2020/08/15 05:40:26.483486 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.000487ms
uuidAttach: 2020/08/15 05:40:26.484102 check for attachDone..... 1
DB: 2020/08/15 05:40:26.488094 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.55487ms
Cache: 2020/08/15 05:40:26.488105 In SetUpredAvailable: pUid, tUID:  D16QNQ6lQk2C/LLqBkrDEQ== D16QNQ6lQk2C/LLqBkrDEQ== A#G#:S
Cache: 2020/08/15 05:40:26.488109 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:40:26.489284 check for attachDone..... 2
DB: 2020/08/15 05:40:26.493784 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.641838ms
Unlock: 2020/08/15 05:40:26.493794 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:40:26.493798 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:40:26.494434 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.494442 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.494446 continue x 
uuidAttach: 2020/08/15 05:40:26.494450 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.494455 check for attachDone..... 0
uuidAttach: 2020/08/15 05:40:26.499604 check for attachDone..... 1
DB: 2020/08/15 05:40:26.503978 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 10.095517ms
grmgr: 2020/08/15 05:40:26.503995 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:40:26.504850 check for attachDone..... 2
uuidAttach: 2020/08/15 05:40:26.504859 ** received on attachDoneCh.... 2
uuidAttach: 2020/08/15 05:40:26.504868 About to run AttachNodeCh: b  c  D16QNQ6lQk2C/LLqBkrDEQ== 5R8Yg/klSF+tRQkEMjz+zg==
uuidAttach: 2020/08/15 05:40:26.504877 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.504881 check for attachDone..... 0
attachNode: 2020/08/15 05:40:26.504887 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/15 05:40:26.504892 Looping..... 0
grmgr: 2020/08/15 05:40:26.504907 Looping..... 1
grmgr: 2020/08/15 05:40:26.505051 Looping..... 2
grmgr: 2020/08/15 05:40:26.505258 Looping..... 3
grmgr: 2020/08/15 05:40:26.505289 Looping..... 4
grmgr: 2020/08/15 05:40:26.505315 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:40:26.505327 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:40:26.505338 goroutine about to start 2 cUID,pUID   D16QNQ6lQk2C/LLqBkrDEQ==  5R8Yg/klSF+tRQkEMjz+zg==  
grmgr: 2020/08/15 05:40:26.505724 StartCh received for nodeAttach. rCnt = 1 
uuidAttach: 2020/08/15 05:40:26.510024 check for attachDone..... 1
DB: 2020/08/15 05:40:26.510204 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.966996ms
DB: 2020/08/15 05:40:26.513187 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.952207ms
uuidAttach: 2020/08/15 05:40:26.515090 check for attachDone..... 2
DB: 2020/08/15 05:40:26.518107 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.849744ms
uuidAttach: 2020/08/15 05:40:26.520241 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.520252 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.520256 continue x 
uuidAttach: 2020/08/15 05:40:26.520262 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.520267 check for attachDone..... 0
DB: 2020/08/15 05:40:26.523940 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.113716ms
AttachNode: main 2020/08/15 05:40:26.523953 FetchForUpdate: for parent    5R8Yg/klSF+tRQkEMjz+zg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:40:26.523958 ** Cache FetchForUpdate Cache Key Value: [5R8Yg/klSF+tRQkEMjz+zg==]   sortk: A#G#:S
FetchNode: 2020/08/15 05:40:26.523965  node: 5R8Yg/klSF+tRQkEMjz+zg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:40:26.524164 FetchForUpdate: for child    D16QNQ6lQk2C/LLqBkrDEQ==
FetchForUpdate: 2020/08/15 05:40:26.524173 ** Cache FetchForUpdate Cache Key Value: [D16QNQ6lQk2C/LLqBkrDEQ==]   sortk: A#
fetchItems: 2020/08/15 05:40:26.524196 +++  Cache FetchItems for sortk A# UID: [D16QNQ6lQk2C/LLqBkrDEQ==] 
FetchNode: 2020/08/15 05:40:26.524210  node: D16QNQ6lQk2C/LLqBkrDEQ== subKey: A#
uuidAttach: 2020/08/15 05:40:26.525423 check for attachDone..... 1
DB: 2020/08/15 05:40:26.527049 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.052851ms
FetchForUpdate: 2020/08/15 05:40:26.527111 len(nb): 1
fetchItems: 2020/08/15 05:40:26.527118 +++  Cache FetchItems for sortk A#G#:S UID: [5R8Yg/klSF+tRQkEMjz+zg==] 
FetchNode: 2020/08/15 05:40:26.527123  node: 5R8Yg/klSF+tRQkEMjz+zg== subKey: A#G#:S
DB: 2020/08/15 05:40:26.527701 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.449364ms
fetchItems: 2020/08/15 05:40:26.527886 +++  Cache FetchItems for sortk A# UID: [D16QNQ6lQk2C/LLqBkrDEQ==] 
FetchNode: 2020/08/15 05:40:26.527894  node: D16QNQ6lQk2C/LLqBkrDEQ== subKey: A#
DB: 2020/08/15 05:40:26.530717 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.565042ms
DB: 2020/08/15 05:40:26.531791 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.856315ms
uuidAttach: 2020/08/15 05:40:26.532773 check for attachDone..... 2
DB: 2020/08/15 05:40:26.536838 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.810747ms
uuidAttach: 2020/08/15 05:40:26.538005 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.538014 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.538019 continue x 
uuidAttach: 2020/08/15 05:40:26.538023 for loop finished 1  6 
uuidAttach: 2020/08/15 05:40:26.538029 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.538035 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.538040 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.538044 check for attachDone..... 0
DB: 2020/08/15 05:40:26.542916 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.756116ms
uuidAttach: 2020/08/15 05:40:26.543305 check for attachDone..... 1
DB: 2020/08/15 05:40:26.547661 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.573224ms
uuidAttach: 2020/08/15 05:40:26.548500 check for attachDone..... 2
DB: 2020/08/15 05:40:26.552662 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.327391ms
uuidAttach: 2020/08/15 05:40:26.553654 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.553663 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.553667 continue x 
uuidAttach: 2020/08/15 05:40:26.553673 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.553678 check for attachDone..... 0
uuidAttach: 2020/08/15 05:40:26.558849 check for attachDone..... 1
DB: 2020/08/15 05:40:26.559037 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.899378ms
DB: 2020/08/15 05:40:26.563904 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.466904ms
uuidAttach: 2020/08/15 05:40:26.564126 check for attachDone..... 2
uuidAttach: 2020/08/15 05:40:26.569200 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.569225 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.569234 continue x 
uuidAttach: 2020/08/15 05:40:26.569246 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.569258 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.569269 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.569292 check for attachDone..... 0
DB: 2020/08/15 05:40:26.569399 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.906384ms
uuidAttach: 2020/08/15 05:40:26.574442 check for attachDone..... 1
DB: 2020/08/15 05:40:26.575770 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.844299ms
uuidAttach: 2020/08/15 05:40:26.579612 check for attachDone..... 2
DB: 2020/08/15 05:40:26.580130 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.988703ms
uuidAttach: 2020/08/15 05:40:26.584784 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.584794 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.584798 continue x 
uuidAttach: 2020/08/15 05:40:26.584804 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.584809 check for attachDone..... 0
DB: 2020/08/15 05:40:26.585897 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.313895ms
uuidAttach: 2020/08/15 05:40:26.589980 check for attachDone..... 1
DB: 2020/08/15 05:40:26.590517 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.373443ms
Cache: 2020/08/15 05:40:26.590528 In SetUpredAvailable: pUid, tUID:  5R8Yg/klSF+tRQkEMjz+zg== 5R8Yg/klSF+tRQkEMjz+zg== A#G#:S
Cache: 2020/08/15 05:40:26.590533 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 05:40:26.594987 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.421324ms
Unlock: 2020/08/15 05:40:26.594997 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:40:26.595001 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:40:26.595331 check for attachDone..... 2
DB: 2020/08/15 05:40:26.599968 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.911812ms
grmgr: 2020/08/15 05:40:26.599983 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:40:26.600516 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.600523 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.600527 continue x 
uuidAttach: 2020/08/15 05:40:26.600531 for loop finished 1  6 
uuidAttach: 2020/08/15 05:40:26.600537 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.600543 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.600548 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.600552 check for attachDone..... 0
uuidAttach: 2020/08/15 05:40:26.600557 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 05:40:26.600562 check for attachDone..... 1
uuidAttach: 2020/08/15 05:40:26.605745 check for attachDone..... 2
uuidAttach: 2020/08/15 05:40:26.610911 About to run AttachNodeCh: abc  c  ORtzaiGYTuSsTmp0zZhIeg== 5R8Yg/klSF+tRQkEMjz+zg==
uuidAttach: 2020/08/15 05:40:26.610928 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.610934 check for attachDone..... 0
attachNode: 2020/08/15 05:40:26.610940 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/15 05:40:26.610954 Looping..... 0
grmgr: 2020/08/15 05:40:26.611248 Looping..... 1
grmgr: 2020/08/15 05:40:26.611271 Looping..... 2
grmgr: 2020/08/15 05:40:26.611421 Looping..... 3
grmgr: 2020/08/15 05:40:26.611603 Looping..... 4
grmgr: 2020/08/15 05:40:26.611771 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:40:26.611780 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:40:26.611786 goroutine about to start 3 cUID,pUID   ORtzaiGYTuSsTmp0zZhIeg==  5R8Yg/klSF+tRQkEMjz+zg==  
grmgr: 2020/08/15 05:40:26.612030 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:40:26.615690 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.801779ms
uuidAttach: 2020/08/15 05:40:26.616045 check for attachDone..... 1
DB: 2020/08/15 05:40:26.619439 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.718789ms
uuidAttach: 2020/08/15 05:40:26.621107 check for attachDone..... 2
DB: 2020/08/15 05:40:26.623987 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.482361ms
uuidAttach: 2020/08/15 05:40:26.626353 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.626364 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.626368 continue x 
uuidAttach: 2020/08/15 05:40:26.626374 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.626379 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.626384 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.626389 check for attachDone..... 0
DB: 2020/08/15 05:40:26.629002 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.771348ms
AttachNode: main 2020/08/15 05:40:26.629015 FetchForUpdate: for parent    5R8Yg/klSF+tRQkEMjz+zg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:40:26.629020 ** Cache FetchForUpdate Cache Key Value: [5R8Yg/klSF+tRQkEMjz+zg==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:40:26.629026 +++  Cache FetchItems for sortk A#G#:S UID: [5R8Yg/klSF+tRQkEMjz+zg==] 
FetchNode: 2020/08/15 05:40:26.629030  node: 5R8Yg/klSF+tRQkEMjz+zg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:40:26.629270 FetchForUpdate: for child    ORtzaiGYTuSsTmp0zZhIeg==
FetchForUpdate: 2020/08/15 05:40:26.629279 ** Cache FetchForUpdate Cache Key Value: [ORtzaiGYTuSsTmp0zZhIeg==]   sortk: A#
fetchItems: 2020/08/15 05:40:26.629284 +++  Cache FetchItems for sortk A# UID: [ORtzaiGYTuSsTmp0zZhIeg==] 
FetchNode: 2020/08/15 05:40:26.629296  node: ORtzaiGYTuSsTmp0zZhIeg== subKey: A#
uuidAttach: 2020/08/15 05:40:26.631537 check for attachDone..... 1
DB: 2020/08/15 05:40:26.633061 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.975439ms
DB: 2020/08/15 05:40:26.633965 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.625363ms
uuidAttach: 2020/08/15 05:40:26.636692 check for attachDone..... 2
DB: 2020/08/15 05:40:26.638053 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.534609ms
uuidAttach: 2020/08/15 05:40:26.641927 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.641940 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.641945 continue x 
uuidAttach: 2020/08/15 05:40:26.641950 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.641956 check for attachDone..... 0
DB: 2020/08/15 05:40:26.642251 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.167741ms
DB: 2020/08/15 05:40:26.642267 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.167741ms
DB: 2020/08/15 05:40:26.646799 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.492428ms
DB: 2020/08/15 05:40:26.646813 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.492428ms
uuidAttach: 2020/08/15 05:40:26.647220 check for attachDone..... 1
DB: 2020/08/15 05:40:26.651965 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.925015ms
uuidAttach: 2020/08/15 05:40:26.652441 check for attachDone..... 2
DB: 2020/08/15 05:40:26.656558 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.382541ms
uuidAttach: 2020/08/15 05:40:26.657598 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.657610 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.657615 continue x 
uuidAttach: 2020/08/15 05:40:26.657619 for loop finished 2  6 
uuidAttach: 2020/08/15 05:40:26.657625 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.657632 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.657637 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.657642 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.657647 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.657651 check for attachDone..... 0
uuidAttach: 2020/08/15 05:40:26.662820 check for attachDone..... 1
DB: 2020/08/15 05:40:26.663117 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.950016ms
DB: 2020/08/15 05:40:26.667537 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.17911ms
uuidAttach: 2020/08/15 05:40:26.668261 check for attachDone..... 2
DB: 2020/08/15 05:40:26.672509 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.409347ms
uuidAttach: 2020/08/15 05:40:26.673357 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.673369 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.673373 continue x 
uuidAttach: 2020/08/15 05:40:26.673379 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.673386 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.673391 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.673396 check for attachDone..... 0
uuidAttach: 2020/08/15 05:40:26.678581 check for attachDone..... 1
DB: 2020/08/15 05:40:26.679592 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.550482ms
uuidAttach: 2020/08/15 05:40:26.683716 check for attachDone..... 2
DB: 2020/08/15 05:40:26.684444 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.431871ms
uuidAttach: 2020/08/15 05:40:26.688891 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.688902 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.688906 continue x 
uuidAttach: 2020/08/15 05:40:26.688911 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.688916 check for attachDone..... 0
DB: 2020/08/15 05:40:26.689634 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.705486ms
uuidAttach: 2020/08/15 05:40:26.694060 check for attachDone..... 1
DB: 2020/08/15 05:40:26.695784 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.728819ms
uuidAttach: 2020/08/15 05:40:26.699236 check for attachDone..... 2
DB: 2020/08/15 05:40:26.701089 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.855208ms
uuidAttach: 2020/08/15 05:40:26.704424 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.704446 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.704450 continue x 
uuidAttach: 2020/08/15 05:40:26.704454 for loop finished 2  6 
uuidAttach: 2020/08/15 05:40:26.704460 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.704466 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.704471 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.704478 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.704483 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.704487 check for attachDone..... 0
DB: 2020/08/15 05:40:26.706277 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.729904ms
uuidAttach: 2020/08/15 05:40:26.709672 check for attachDone..... 1
DB: 2020/08/15 05:40:26.711771 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.143024ms
Cache: 2020/08/15 05:40:26.711782 In SetUpredAvailable: pUid, tUID:  5R8Yg/klSF+tRQkEMjz+zg== TivaO503QHegrEpBDkO8rg== A#G#:S
Cache: 2020/08/15 05:40:26.711787 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:40:26.714879 check for attachDone..... 2
DB: 2020/08/15 05:40:26.716098 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.277824ms
Unlock: 2020/08/15 05:40:26.716109 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:40:26.716114 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:40:26.720072 attachRunning.... uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.720085 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.720089 continue x 
uuidAttach: 2020/08/15 05:40:26.720094 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.720100 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.720105 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.720110 check for attachDone..... 0
DB: 2020/08/15 05:40:26.720867 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.69955ms
grmgr: 2020/08/15 05:40:26.720880 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:40:26.725283 check for attachDone..... 1
uuidAttach: 2020/08/15 05:40:26.725305 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 05:40:26.725313 check for attachDone..... 2
uuidAttach: 2020/08/15 05:40:26.730481 About to run AttachNodeCh: c  abc  5R8Yg/klSF+tRQkEMjz+zg== ORtzaiGYTuSsTmp0zZhIeg==
uuidAttach: 2020/08/15 05:40:26.730497 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.730502 check for attachDone..... 0
attachNode: 2020/08/15 05:40:26.730510 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/15 05:40:26.730516 Looping..... 0
grmgr: 2020/08/15 05:40:26.730656 Looping..... 1
grmgr: 2020/08/15 05:40:26.730830 Looping..... 2
grmgr: 2020/08/15 05:40:26.731033 Looping..... 3
grmgr: 2020/08/15 05:40:26.731221 Looping..... 4
grmgr: 2020/08/15 05:40:26.731437 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:40:26.731445 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:40:26.731450 goroutine about to start 4 cUID,pUID   5R8Yg/klSF+tRQkEMjz+zg==  ORtzaiGYTuSsTmp0zZhIeg==  
grmgr: 2020/08/15 05:40:26.731658 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:40:26.734634 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.125024ms
uuidAttach: 2020/08/15 05:40:26.735647 check for attachDone..... 1
DB: 2020/08/15 05:40:26.737889 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.226071ms
uuidAttach: 2020/08/15 05:40:26.740811 check for attachDone..... 2
DB: 2020/08/15 05:40:26.742604 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.625541ms
uuidAttach: 2020/08/15 05:40:26.745958 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.745968 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.745972 continue x 
uuidAttach: 2020/08/15 05:40:26.745977 for loop finished 3  6 
uuidAttach: 2020/08/15 05:40:26.745981 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.745987 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.745992 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.745997 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.746001 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.746005 check for attachDone..... 0
DB: 2020/08/15 05:40:26.747541 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.655108ms
AttachNode: main 2020/08/15 05:40:26.747564 FetchForUpdate: for parent    ORtzaiGYTuSsTmp0zZhIeg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:40:26.747569 ** Cache FetchForUpdate Cache Key Value: [ORtzaiGYTuSsTmp0zZhIeg==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:40:26.747574 +++  Cache FetchItems for sortk A#G#:S UID: [ORtzaiGYTuSsTmp0zZhIeg==] 
FetchNode: 2020/08/15 05:40:26.747579  node: ORtzaiGYTuSsTmp0zZhIeg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:40:26.747788 FetchForUpdate: for child    5R8Yg/klSF+tRQkEMjz+zg==
FetchForUpdate: 2020/08/15 05:40:26.747830 ** Cache FetchForUpdate Cache Key Value: [5R8Yg/klSF+tRQkEMjz+zg==]   sortk: A#
fetchItems: 2020/08/15 05:40:26.747848 +++  Cache FetchItems for sortk A# UID: [5R8Yg/klSF+tRQkEMjz+zg==] 
FetchNode: 2020/08/15 05:40:26.747866  node: 5R8Yg/klSF+tRQkEMjz+zg== subKey: A#
DB: 2020/08/15 05:40:26.750537 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.928887ms
DB: 2020/08/15 05:40:26.751487 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.580124ms
uuidAttach: 2020/08/15 05:40:26.752770 check for attachDone..... 1
DB: 2020/08/15 05:40:26.755526 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.630764ms
uuidAttach: 2020/08/15 05:40:26.757950 check for attachDone..... 2
DB: 2020/08/15 05:40:26.761329 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.735818ms
uuidAttach: 2020/08/15 05:40:26.763132 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.763142 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.763146 continue x 
uuidAttach: 2020/08/15 05:40:26.763151 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.763157 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.763162 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.763167 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.763172 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.763176 check for attachDone..... 0
DB: 2020/08/15 05:40:26.765636 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.257775ms
uuidAttach: 2020/08/15 05:40:26.768347 check for attachDone..... 1
DB: 2020/08/15 05:40:26.770116 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.378859ms
uuidAttach: 2020/08/15 05:40:26.773521 check for attachDone..... 2
DB: 2020/08/15 05:40:26.775893 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.712688ms
uuidAttach: 2020/08/15 05:40:26.778711 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.778722 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.778725 continue x 
uuidAttach: 2020/08/15 05:40:26.778730 for loop finished 3  6 
uuidAttach: 2020/08/15 05:40:26.778735 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.778741 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.778759 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.778763 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.778780 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.778784 check for attachDone..... 0
DB: 2020/08/15 05:40:26.780813 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.392951ms
uuidAttach: 2020/08/15 05:40:26.783927 check for attachDone..... 1
DB: 2020/08/15 05:40:26.786974 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.577769ms
uuidAttach: 2020/08/15 05:40:26.789483 check for attachDone..... 2
DB: 2020/08/15 05:40:26.793978 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.270143ms
uuidAttach: 2020/08/15 05:40:26.794675 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.794691 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.794695 continue x 
uuidAttach: 2020/08/15 05:40:26.794700 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.794706 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.794711 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.794717 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.794721 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.794726 check for attachDone..... 0
DB: 2020/08/15 05:40:26.798685 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.18481ms
uuidAttach: 2020/08/15 05:40:26.799851 check for attachDone..... 1
DB: 2020/08/15 05:40:26.803571 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.405413ms
uuidAttach: 2020/08/15 05:40:26.805029 check for attachDone..... 2
DB: 2020/08/15 05:40:26.808665 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.798438ms
Cache: 2020/08/15 05:40:26.808676 In SetUpredAvailable: pUid, tUID:  ORtzaiGYTuSsTmp0zZhIeg== ORtzaiGYTuSsTmp0zZhIeg== A#G#:S
Cache: 2020/08/15 05:40:26.808682 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:40:26.810261 attachRunning.... uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.810285 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.810295 continue x 
uuidAttach: 2020/08/15 05:40:26.810305 for loop finished 3  6 
uuidAttach: 2020/08/15 05:40:26.810317 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.810331 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.810342 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.810354 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.810377 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.810390 check for attachDone..... 0
DB: 2020/08/15 05:40:26.813172 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.456375ms
Unlock: 2020/08/15 05:40:26.813191 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:40:26.813196 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:40:26.815566 check for attachDone..... 1
DB: 2020/08/15 05:40:26.818028 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.72655ms
grmgr: 2020/08/15 05:40:26.818040 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:40:26.820780 check for attachDone..... 2
uuidAttach: 2020/08/15 05:40:26.820799 ** received on attachDoneCh.... 2
uuidAttach: 2020/08/15 05:40:26.820814 About to run AttachNodeCh: b  abc  D16QNQ6lQk2C/LLqBkrDEQ== ORtzaiGYTuSsTmp0zZhIeg==
uuidAttach: 2020/08/15 05:40:26.820831 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.820843 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.820854 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.820864 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.820876 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.820885 check for attachDone..... 0
attachNode: 2020/08/15 05:40:26.820897 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/15 05:40:26.820928 Looping..... 0
grmgr: 2020/08/15 05:40:26.820954 Looping..... 1
grmgr: 2020/08/15 05:40:26.821144 Looping..... 2
grmgr: 2020/08/15 05:40:26.821306 Looping..... 3
grmgr: 2020/08/15 05:40:26.821480 Looping..... 4
grmgr: 2020/08/15 05:40:26.821675 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:40:26.821683 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:40:26.821689 goroutine about to start 5 cUID,pUID   D16QNQ6lQk2C/LLqBkrDEQ==  ORtzaiGYTuSsTmp0zZhIeg==  
grmgr: 2020/08/15 05:40:26.821919 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:40:26.824956 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.190232ms
uuidAttach: 2020/08/15 05:40:26.826053 check for attachDone..... 1
DB: 2020/08/15 05:40:26.828592 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.607669ms
uuidAttach: 2020/08/15 05:40:26.831237 check for attachDone..... 2
DB: 2020/08/15 05:40:26.833006 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.341844ms
uuidAttach: 2020/08/15 05:40:26.836403 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836413 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.836417 continue x 
uuidAttach: 2020/08/15 05:40:26.836421 for loop finished 4  6 
uuidAttach: 2020/08/15 05:40:26.836426 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836431 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836435 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836439 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836446 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836450 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836455 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836459 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836463 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836468 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836472 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.836486 check for attachDone..... 0
DB: 2020/08/15 05:40:26.837889 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.597297ms
AttachNode: main 2020/08/15 05:40:26.837901 FetchForUpdate: for parent    ORtzaiGYTuSsTmp0zZhIeg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:40:26.837906 ** Cache FetchForUpdate Cache Key Value: [ORtzaiGYTuSsTmp0zZhIeg==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:40:26.837911 +++  Cache FetchItems for sortk A#G#:S UID: [ORtzaiGYTuSsTmp0zZhIeg==] 
FetchNode: 2020/08/15 05:40:26.837916  node: ORtzaiGYTuSsTmp0zZhIeg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:40:26.838158 FetchForUpdate: for child    D16QNQ6lQk2C/LLqBkrDEQ==
FetchForUpdate: 2020/08/15 05:40:26.838167 ** Cache FetchForUpdate Cache Key Value: [D16QNQ6lQk2C/LLqBkrDEQ==]   sortk: A#
fetchItems: 2020/08/15 05:40:26.838172 +++  Cache FetchItems for sortk A# UID: [D16QNQ6lQk2C/LLqBkrDEQ==] 
FetchNode: 2020/08/15 05:40:26.838199  node: D16QNQ6lQk2C/LLqBkrDEQ== subKey: A#
DB: 2020/08/15 05:40:26.841393 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.425671ms
uuidAttach: 2020/08/15 05:40:26.842276 check for attachDone..... 1
DB: 2020/08/15 05:40:26.842653 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.40322ms
DB: 2020/08/15 05:40:26.846520 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.486469ms
uuidAttach: 2020/08/15 05:40:26.847446 check for attachDone..... 2
DB: 2020/08/15 05:40:26.850825 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.273305ms
DB: 2020/08/15 05:40:26.850842 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.273305ms
uuidAttach: 2020/08/15 05:40:26.852685 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852706 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.852714 continue x 
uuidAttach: 2020/08/15 05:40:26.852724 for loop finished 4  6 
uuidAttach: 2020/08/15 05:40:26.852736 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852748 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852759 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852770 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852781 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852791 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852802 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852831 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852835 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852841 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852845 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.852849 check for attachDone..... 0
DB: 2020/08/15 05:40:26.855063 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.185828ms
DB: 2020/08/15 05:40:26.855077 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.185828ms
uuidAttach: 2020/08/15 05:40:26.858044 check for attachDone..... 1
DB: 2020/08/15 05:40:26.859810 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.527625ms
uuidAttach: 2020/08/15 05:40:26.863202 check for attachDone..... 2
DB: 2020/08/15 05:40:26.865205 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.205497ms
uuidAttach: 2020/08/15 05:40:26.868407 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868420 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.868424 continue x 
uuidAttach: 2020/08/15 05:40:26.868429 for loop finished 4  6 
uuidAttach: 2020/08/15 05:40:26.868437 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868444 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868449 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868454 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868459 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868464 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868470 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868475 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868480 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868485 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868489 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.868494 check for attachDone..... 0
DB: 2020/08/15 05:40:26.871605 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.845676ms
uuidAttach: 2020/08/15 05:40:26.873655 check for attachDone..... 1
DB: 2020/08/15 05:40:26.876247 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.346924ms
uuidAttach: 2020/08/15 05:40:26.878700 check for attachDone..... 2
DB: 2020/08/15 05:40:26.881312 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.491567ms
uuidAttach: 2020/08/15 05:40:26.883884 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883897 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.883901 continue x 
uuidAttach: 2020/08/15 05:40:26.883906 for loop finished 4  6 
uuidAttach: 2020/08/15 05:40:26.883912 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883918 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883923 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883928 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883933 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883938 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883943 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883948 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883953 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883958 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883962 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.883966 check for attachDone..... 0
DB: 2020/08/15 05:40:26.887304 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.548538ms
uuidAttach: 2020/08/15 05:40:26.889118 check for attachDone..... 1
DB: 2020/08/15 05:40:26.892114 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.367736ms
uuidAttach: 2020/08/15 05:40:26.894414 check for attachDone..... 2
DB: 2020/08/15 05:40:26.899316 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.06603ms
uuidAttach: 2020/08/15 05:40:26.900006 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900016 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.900020 continue x 
uuidAttach: 2020/08/15 05:40:26.900025 for loop finished 4  6 
uuidAttach: 2020/08/15 05:40:26.900042 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900048 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900053 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900058 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900062 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900082 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900087 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900092 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900097 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900101 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900106 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.900110 check for attachDone..... 0
uuidAttach: 2020/08/15 05:40:26.905301 check for attachDone..... 1
DB: 2020/08/15 05:40:26.905539 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.740371ms
DB: 2020/08/15 05:40:26.910106 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.168355ms
uuidAttach: 2020/08/15 05:40:26.910761 check for attachDone..... 2
DB: 2020/08/15 05:40:26.915041 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.460053ms
uuidAttach: 2020/08/15 05:40:26.915838 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915847 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.915852 continue x 
uuidAttach: 2020/08/15 05:40:26.915856 for loop finished 4  6 
uuidAttach: 2020/08/15 05:40:26.915861 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915867 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915872 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915877 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915882 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915887 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915892 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915897 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915902 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915907 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915911 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.915915 check for attachDone..... 0
DB: 2020/08/15 05:40:26.920577 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.292107ms
Cache: 2020/08/15 05:40:26.920691 In SetUpredAvailable: pUid, tUID:  ORtzaiGYTuSsTmp0zZhIeg== 1ajYKbH6RMO5aFKxYz7OOQ== A#G#:S
Cache: 2020/08/15 05:40:26.920700 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 05:40:26.921032 check for attachDone..... 1
DB: 2020/08/15 05:40:26.925006 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.258225ms
Unlock: 2020/08/15 05:40:26.925026 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:40:26.925031 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 05:40:26.926192 check for attachDone..... 2
DB: 2020/08/15 05:40:26.929738 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.630236ms
grmgr: 2020/08/15 05:40:26.929752 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 05:40:26.931387 attachRunning.... uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931394 	dontrun = true
uuidAttach: 2020/08/15 05:40:26.931398 continue x 
uuidAttach: 2020/08/15 05:40:26.931402 for loop finished 4  6 
uuidAttach: 2020/08/15 05:40:26.931407 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931413 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931418 for loop: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931424 running or done: e = uuid.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931428 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931434 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931438 for loop: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931443 running or done: e = uuid.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931447 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931452 running or done: e = uuid.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931457 for loop: e = uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 05:40:26.931461 check for attachDone..... 0
uuidAttach: 2020/08/15 05:40:26.931465 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 05:40:26.931470 check for attachDone..... 1
uuidAttach: 2020/08/15 05:40:26.936646 check for attachDone..... 2
uuidAttach: 2020/08/15 05:40:26.941681 About to run AttachNodeCh: c  b  5R8Yg/klSF+tRQkEMjz+zg== D16QNQ6lQk2C/LLqBkrDEQ==
uuidAttach: 2020/08/15 05:40:26.941695 for loop finished 5  6 
uuidAttach: 2020/08/15 05:40:26.941699  break....
attachNode: 2020/08/15 05:40:26.941705 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/15 05:40:26.941711 Looping..... 0
grmgr: 2020/08/15 05:40:26.941731 Looping..... 1
grmgr: 2020/08/15 05:40:26.941855 Looping..... 2
grmgr: 2020/08/15 05:40:26.942028 Looping..... 3
grmgr: 2020/08/15 05:40:26.942214 Looping..... 4
grmgr: 2020/08/15 05:40:26.942389 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
attachNode: 2020/08/15 05:40:26.942398 limiter has ACK and will start goroutine...
AttachNode: 2020/08/15 05:40:26.942403 goroutine about to start 6 cUID,pUID   5R8Yg/klSF+tRQkEMjz+zg==  D16QNQ6lQk2C/LLqBkrDEQ==  
rdfLoader: 2020/08/15 05:40:26.942409 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/15 05:40:26.942645 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 05:40:26.945591 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.117044ms
DB: 2020/08/15 05:40:26.948787 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.154701ms
DB: 2020/08/15 05:40:26.953388 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.530556ms
DB: 2020/08/15 05:40:26.958231 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.50865ms
AttachNode: main 2020/08/15 05:40:26.958245 FetchForUpdate: for parent    D16QNQ6lQk2C/LLqBkrDEQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 05:40:26.958250 ** Cache FetchForUpdate Cache Key Value: [D16QNQ6lQk2C/LLqBkrDEQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 05:40:26.958263 +++  Cache FetchItems for sortk A#G#:S UID: [D16QNQ6lQk2C/LLqBkrDEQ==] 
FetchNode: 2020/08/15 05:40:26.958268  node: D16QNQ6lQk2C/LLqBkrDEQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 05:40:26.958457 FetchForUpdate: for child    5R8Yg/klSF+tRQkEMjz+zg==
FetchForUpdate: 2020/08/15 05:40:26.958465 ** Cache FetchForUpdate Cache Key Value: [5R8Yg/klSF+tRQkEMjz+zg==]   sortk: A#
fetchItems: 2020/08/15 05:40:26.958504 +++  Cache FetchItems for sortk A# UID: [5R8Yg/klSF+tRQkEMjz+zg==] 
FetchNode: 2020/08/15 05:40:26.958530  node: 5R8Yg/klSF+tRQkEMjz+zg== subKey: A#
DB: 2020/08/15 05:40:26.961356 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.055501ms
DB: 2020/08/15 05:40:26.964756 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 6.177096ms
DB: 2020/08/15 05:40:26.966506 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.658875ms
DB: 2020/08/15 05:40:26.970812 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.218137ms
DB: 2020/08/15 05:40:26.970946 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.218137ms
DB: 2020/08/15 05:40:26.975350 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.341784ms
DB: 2020/08/15 05:40:26.975405 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.341784ms
DB: 2020/08/15 05:40:26.980365 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.781923ms
DB: 2020/08/15 05:40:26.984944 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.399908ms
DB: 2020/08/15 05:40:26.991189 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.712331ms
DB: 2020/08/15 05:40:26.995684 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.152304ms
DB: 2020/08/15 05:40:27.000632 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.377316ms
DB: 2020/08/15 05:40:27.007761 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.701388ms
DB: 2020/08/15 05:40:27.012370 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.110993ms
DB: 2020/08/15 05:40:27.017432 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.594676ms
DB: 2020/08/15 05:40:27.023714 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.671249ms
DB: 2020/08/15 05:40:27.028417 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.20407ms
DB: 2020/08/15 05:40:27.036362 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.479761ms
DB: 2020/08/15 05:40:27.042049 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.176829ms
Cache: 2020/08/15 05:40:27.042062 In SetUpredAvailable: pUid, tUID:  D16QNQ6lQk2C/LLqBkrDEQ== h+wzuGgdSoynlC8pN5kj4Q== A#G#:S
Cache: 2020/08/15 05:40:27.042067 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 05:40:27.046443 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.338667ms
Unlock: 2020/08/15 05:40:27.046469 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 05:40:27.046475 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 05:40:27.051265 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.722763ms
uuidAttach: 2020/08/15 05:40:27.051293 received on attachDoneCh: uuid.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/15 05:40:27.051302 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/15 05:40:27.051308 saveNode finished waiting...exiting
rdfLoader: 2020/08/15 05:40:27.051314 cancel contexts
rdfLoader: 2020/08/15 05:40:27.051319 wait for autonomous goroutines to end
rdfuuid: 2020/08/15 05:40:27.051324 Powering down...
grmgr: 2020/08/15 05:40:27.051329 Powering down...
rdfuuid: 2020/08/15 05:40:27.051334 Powering down...
errlog: 2020/08/15 05:40:27.051340 Powering down...
rdfLoader: 2020/08/15 05:40:27.051344 loader exists.....

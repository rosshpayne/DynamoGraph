DB:2020/08/16 01:43:05 log.go:18: ===============================================================================
anmgr: 2020/08/16 01:43:05.975890 Powering on...
rdfLoader: 2020/08/16 01:43:05.975923 saveNode started......
rdfLoader: 2020/08/16 01:43:05.975928 define saveNode limiter......
rdfuuid: 2020/08/16 01:43:05.975932 Powering on...
grmgr: 2020/08/16 01:43:05.975948 Powering on...
errlog: 2020/08/16 01:43:05.975962 Powering on...
rdfLoader: 2020/08/16 01:43:05.975968  principle goroutines started 
RDFreader: 2020/08/16 01:43:05.975984 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:43:05.975997 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 01:43:05.976003 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 01:43:05.976009 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 01:43:05.976014 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 01:43:05.976019 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 01:43:05.976023 spo read:      
RDFreader: 2020/08/16 01:43:05.976027 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 01:43:05.976039 spo read:  abc  Friends  _:d
RDFreader: 2020/08/16 01:43:05.976043 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 01:43:05.976048 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 01:43:05.976053 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 01:43:05.976057 spo read:      
RDFreader: 2020/08/16 01:43:05.976062 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 01:43:05.976066 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 01:43:05.976071 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 01:43:05.976076 spo read:  b  Age  "58"
RDFreader: 2020/08/16 01:43:05.976081 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 01:43:05.976085 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 01:43:05.976090 spo read:  abc  Friends  _:d
rdfLoader: 2020/08/16 01:43:05.976093 Send node batch on channel verifyCh
RDFreader: 2020/08/16 01:43:05.976101 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:43:05.976105 spo read:  abc  Friends  _:d
RDFreader: 2020/08/16 01:43:05.976110 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 01:43:05.976115 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 01:43:05.976121 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 01:43:05.976125 spo read:      
RDFreader: 2020/08/16 01:43:05.976130 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 01:43:05.976134 Send node batch on channel verifyCh
RDFreader: 2020/08/16 01:43:05.976139 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:43:05.976143 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 01:43:05.976147 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 01:43:05.976154 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 01:43:05.976159 spo read:  c  Age  "67"
RDFreader: 2020/08/16 01:43:05.976163 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 01:43:05.976168 spo read:  abc  Friends  _:d
RDFreader: 2020/08/16 01:43:05.976174 spo read:  c  Siblings  _:b
rdfLoader: 2020/08/16 01:43:05.976178 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 01:43:05.976182 verify started....
rdfLoader: 2020/08/16 01:43:05.976186 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:43:05.976189 .  getType..
rdfLoader: 2020/08/16 01:43:05.976193 node.TyName : [Person]
RDFreader: 2020/08/16 01:43:05.976740 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:43:05.976758 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 01:43:05.976766 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 01:43:05.976771 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 01:43:05.976776 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 01:43:05.976781 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 01:43:05.976785 spo read:      
RDFreader: 2020/08/16 01:43:05.976791 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 01:43:05.976795 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 01:43:05.976800 spo read:  abc  Friends  _:abc
rdfLoader: 2020/08/16 01:43:05.976804 Send node batch on channel verifyCh
DB: 2020/08/16 01:43:06.046915 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 70.641296ms
grmgr: 2020/08/16 01:43:06.047826 Looping..... 0
grmgr: 2020/08/16 01:43:06.048852 Looping..... 1
grmgr: 2020/08/16 01:43:06.049026 Looping..... 2
grmgr: 2020/08/16 01:43:06.049205 Looping..... 3
grmgr: 2020/08/16 01:43:06.049383 Looping..... 4
grmgr: 2020/08/16 01:43:06.049561 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:43:06.049573 .  getType..
rdfLoader: 2020/08/16 01:43:06.049577 node.TyName : [Person]
grmgr: 2020/08/16 01:43:06.049583 Looping..... 0
unmarshalRDF: 2020/08/16 01:43:06.049596 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:43:06.049605 Looping..... 1
grmgr: 2020/08/16 01:43:06.049611 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 01:43:06.049615 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:43:06.049622 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:43:06.049626 .  getType..
rdfLoader: 2020/08/16 01:43:06.049631 node.TyName : []
rdfLoader: 2020/08/16 01:43:06.049857 Add to SS . [Honda]
rdfLoader: 2020/08/16 01:43:06.049865 Add to SS . [Alfa]
anmgr 2020/08/16 01:43:06.049899 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.049907 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 01:43:06.049956 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:43:06.049966 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:43:06.049973 EndCh received for unmarshall. rCnt = 0 
unmarshalRDF: 2020/08/16 01:43:06.049983 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:43:06.049996 StartCh received for unmarshall. rCnt = 1 
RDFreader: 2020/08/16 01:43:06.050013 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:43:06.050018 spo read:  abc  Friends  _:abc
RDFreader: 2020/08/16 01:43:06.050028 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 01:43:06.050033 spo read:  d  Age  "36"
RDFreader: 2020/08/16 01:43:06.050039 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 01:43:06.050048 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 01:43:06.050052 Send node batch on channel verifyCh
anmgr 2020/08/16 01:43:06.050061 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.050067 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 01:43:06.050091 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:43:06.050095 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:43:06.050101 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 01:43:06.050106 Looping..... 0
anmgr 2020/08/16 01:43:06.050114 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
grmgr: 2020/08/16 01:43:06.050150 Looping..... 1
grmgr: 2020/08/16 01:43:06.050332 Looping..... 2
grmgr: 2020/08/16 01:43:06.050578 Looping..... 3
grmgr: 2020/08/16 01:43:06.050691 Looping..... 4
grmgr: 2020/08/16 01:43:06.050866 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 01:43:06.050885 Looping..... 0
grmgr: 2020/08/16 01:43:06.050911 Looping..... 1
grmgr: 2020/08/16 01:43:06.050917 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 01:43:06.050921 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
SaveRDFNode: xxx 2020/08/16 01:43:06.050942 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.050948 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.050954 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.050960 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.050966 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.050972 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:43:06.050975 SaveRDFNode : 6 
SaveRDFNode: 2020/08/16 01:43:06.050983 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0003463c0)}
SaveRDFNode: 2020/08/16 01:43:06.050987 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:43:06.051012 UID received  : uuai9bvnSk+y0x08EJ4AlA==
SaveRDFNode: xxx 2020/08/16 01:43:06.051310 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.051326 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.051334 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.051339 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.051345 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.051350 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.051356 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:43:06.051360 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 01:43:06.051365 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000346cc0)}
SaveRDFNode: 2020/08/16 01:43:06.051370 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:43:06.051378 UID received  : d9EAZtHSR5Khc5VDcV0vqg==
grmgr: 2020/08/16 01:43:06.051518 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 01:43:06.055538 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: CJMK3LTD0F3H4HDL8ET5DAQ5PFVV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 01:43:06.055552 Looping..... 0
grmgr: 2020/08/16 01:43:06.055616 Looping..... 1
grmgr: 2020/08/16 01:43:06.055722 Looping..... 2
grmgr: 2020/08/16 01:43:06.055891 Looping..... 3
grmgr: 2020/08/16 01:43:06.056113 Looping..... 4
grmgr: 2020/08/16 01:43:06.058874 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:43:06.058886 .  getType..
rdfLoader: 2020/08/16 01:43:06.058891 node.TyName : []
unmarshalRDF: 2020/08/16 01:43:06.059152 Entered unmarshalRDF. 
unmarshalRDF: 2020/08/16 01:43:06.059163 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:43:06.059176 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:43:06.059181 EndCh received for unmarshall. rCnt = 0 
DB: 2020/08/16 01:43:06.064467 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 13.420338ms
DB: 2020/08/16 01:43:06.069497 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.822203ms
DB: 2020/08/16 01:43:06.073441 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.900314ms
DB: 2020/08/16 01:43:06.073645 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: 0P31BNK9VPIL9M4KHA9MKQPRGVVV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 01:43:06.073657 Looping..... 0
grmgr: 2020/08/16 01:43:06.073695 Looping..... 1
grmgr: 2020/08/16 01:43:06.073713 Looping..... 2
grmgr: 2020/08/16 01:43:06.073818 Looping..... 3
grmgr: 2020/08/16 01:43:06.074031 Looping..... 4
grmgr: 2020/08/16 01:43:06.074217 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:43:06.074229 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:43:06.074233 .  getType..
rdfLoader: 2020/08/16 01:43:06.074238 node.TyName : [Person]
grmgr: 2020/08/16 01:43:06.074243 Looping..... 0
unmarshalRDF: 2020/08/16 01:43:06.074256 Entered unmarshalRDF. 
rdfLoader: 2020/08/16 01:43:06.074263 close verify channel
grmgr: 2020/08/16 01:43:06.074274 Looping..... 1
grmgr: 2020/08/16 01:43:06.074293 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 01:43:06.074297 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:43:06.074304 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:43:06.074307 .  getType..
rdfLoader: 2020/08/16 01:43:06.074312 node.TyName : []
unmarshalRDF: 2020/08/16 01:43:06.074483 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:43:06.074493 EndCh received for unmarshall. rCnt = 0 
unmarshalRDF: 2020/08/16 01:43:06.074503 Entered unmarshalRDF. 
unmarshalRDF: 2020/08/16 01:43:06.074581 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:43:06.074588 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:43:06.074595 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:43:06.074600 Looping..... 0
anmgr 2020/08/16 01:43:06.074610 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/16 01:43:06.074629 Looping..... 1
grmgr: 2020/08/16 01:43:06.074722 Looping..... 2
grmgr: 2020/08/16 01:43:06.074895 Looping..... 3
grmgr: 2020/08/16 01:43:06.075078 Looping..... 4
grmgr: 2020/08/16 01:43:06.075254 has ASKed. Cnt is above limit. Mark saveNode as waiting
grmgr: 2020/08/16 01:43:06.075263 EndCh received for unmarshall. rCnt = 0 
DB: 2020/08/16 01:43:06.076822 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 25.417977ms
DB: 2020/08/16 01:43:06.080438 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.582969ms
DB: 2020/08/16 01:43:06.081196 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.71614ms
SaveRDFNode: 2020/08/16 01:43:06.081211 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003463c0)}
SaveRDFNode: 2020/08/16 01:43:06.081219 Received UID: X18=
SaveRDFNode: 2020/08/16 01:43:06.081232 a: = db.Item{PKey:[]uint8{0xba, 0xe6, 0xa2, 0xf5, 0xbb, 0xe7, 0x4a, 0x4f, 0xb2, 0xd3, 0x1d, 0x3c, 0x10, 0x9e, 0x0, 0x94}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:43:06.084102 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.609646ms
DB: 2020/08/16 01:43:06.084975 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.707616ms
SaveRDFNode: 2020/08/16 01:43:06.085003 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003463c0)}
SaveRDFNode: 2020/08/16 01:43:06.085011 Received UID: X18=
SaveRDFNode: 2020/08/16 01:43:06.085021 a: = db.Item{PKey:[]uint8{0xba, 0xe6, 0xa2, 0xf5, 0xbb, 0xe7, 0x4a, 0x4f, 0xb2, 0xd3, 0x1d, 0x3c, 0x10, 0x9e, 0x0, 0x94}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:43:06.087674 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.53326ms
DB: 2020/08/16 01:43:06.088458 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: 4UMLOMDD829Q19BHCF9Q95NNNJVV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 01:43:06.088474 Looping..... 0
grmgr: 2020/08/16 01:43:06.088495 Looping..... 1
DB: 2020/08/16 01:43:06.088706 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.656732ms
grmgr: 2020/08/16 01:43:06.088728 Looping..... 2
grmgr: 2020/08/16 01:43:06.088838 Looping..... 3
grmgr: 2020/08/16 01:43:06.089014 Looping..... 4
grmgr: 2020/08/16 01:43:06.089191 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 01:43:06.089200 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 01:43:06.089204 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 01:43:06.089233 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.089240 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.089245 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.089250 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.089256 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.089262 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:43:06.089266 SaveRDFNode : 6 
SaveRDFNode: 2020/08/16 01:43:06.089271 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000312900)}
SaveRDFNode: 2020/08/16 01:43:06.089275 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:43:06.089285 UID received  : THdGvHqMRsOnHnQzHHtuIg==
rdfLoader: 2020/08/16 01:43:06.089487 .  getType..
rdfLoader: 2020/08/16 01:43:06.089517 node.TyName : [Person]
unmarshalRDF: 2020/08/16 01:43:06.089529 Entered unmarshalRDF. 
SaveRDFNode: 2020/08/16 01:43:06.089533 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:43:06.089540 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/16 01:43:06.089544 Looping..... 0
grmgr: 2020/08/16 01:43:06.089549 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 01:43:06.089553 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
unmarshalRDF: 2020/08/16 01:43:06.089572 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 01:43:06.089579 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:43:06.089582 .  getType..
rdfLoader: 2020/08/16 01:43:06.089592 node.TyName : []
grmgr: 2020/08/16 01:43:06.089746 EndCh received for unmarshall. rCnt = 0 
unmarshalRDF: 2020/08/16 01:43:06.089760 Entered unmarshalRDF. 
unmarshalRDF: 2020/08/16 01:43:06.089788 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:43:06.089835 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:43:06.089844 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:43:06.089854 Looping..... 0
grmgr: 2020/08/16 01:43:06.089868 Looping..... 1
grmgr: 2020/08/16 01:43:06.090017 Looping..... 2
grmgr: 2020/08/16 01:43:06.090188 Looping..... 3
grmgr: 2020/08/16 01:43:06.090376 Looping..... 4
grmgr: 2020/08/16 01:43:06.090542 has ASKed. Cnt is above limit. Mark saveNode as waiting
grmgr: 2020/08/16 01:43:06.090550 EndCh received for unmarshall. rCnt = 0 
DB: 2020/08/16 01:43:06.091373 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.666936ms
SaveRDFNode: 2020/08/16 01:43:06.091385 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346cc0)}
SaveRDFNode: 2020/08/16 01:43:06.091391 Received UID: X18=
SaveRDFNode: 2020/08/16 01:43:06.091401 a: = db.Item{PKey:[]uint8{0x77, 0xd1, 0x0, 0x66, 0xd1, 0xd2, 0x47, 0x92, 0xa1, 0x73, 0x95, 0x43, 0x71, 0x5d, 0x2f, 0xaa}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:43:06.092807 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.480878ms
DB: 2020/08/16 01:43:06.095346 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: SEC512NGF5DCG6SUV8TQ633LMJVV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 01:43:06.095452 Looping..... 0
DB: 2020/08/16 01:43:06.095545 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.111144ms
SaveRDFNode: 2020/08/16 01:43:06.095556 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346cc0)}
SaveRDFNode: 2020/08/16 01:43:06.095563 Received UID: X18=
SaveRDFNode: 2020/08/16 01:43:06.095574 a: = db.Item{PKey:[]uint8{0x77, 0xd1, 0x0, 0x66, 0xd1, 0xd2, 0x47, 0x92, 0xa1, 0x73, 0x95, 0x43, 0x71, 0x5d, 0x2f, 0xaa}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
grmgr: 2020/08/16 01:43:06.095773 Looping..... 1
grmgr: 2020/08/16 01:43:06.095867 Looping..... 2
grmgr: 2020/08/16 01:43:06.096047 Looping..... 3
grmgr: 2020/08/16 01:43:06.096239 Looping..... 4
DB: 2020/08/16 01:43:06.096424 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.586469ms
grmgr: 2020/08/16 01:43:06.096625 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:43:06.096635 .  getType..
rdfLoader: 2020/08/16 01:43:06.096640 node.TyName : []
unmarshalRDF: 2020/08/16 01:43:06.096824 Entered unmarshalRDF. 
unmarshalRDF: 2020/08/16 01:43:06.096832 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:43:06.096838 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:43:06.096842 EndCh received for unmarshall. rCnt = 0 
DB: 2020/08/16 01:43:06.099030 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.428391ms
SaveRDFNode: 2020/08/16 01:43:06.099039 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:43:06.099046 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 01:43:06.099050 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 01:43:06.099072 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.099078 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.099084 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:43:06.099090 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:43:06.099094 SaveRDFNode : 4 
SaveRDFNode: 2020/08/16 01:43:06.099099 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000313800)}
SaveRDFNode: 2020/08/16 01:43:06.099108 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:43:06.099116 UID received  : qPxFR/RIRl62V0cYPkUaVw==
grmgr: 2020/08/16 01:43:06.099287 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 01:43:06.100040 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.586159ms
DB: 2020/08/16 01:43:06.102609 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: CN6RO35FMD1ENPI7OC68UR16CBVV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 01:43:06.102621 Looping..... 0
grmgr: 2020/08/16 01:43:06.102642 Looping..... 1
grmgr: 2020/08/16 01:43:06.102660 Looping..... 2
grmgr: 2020/08/16 01:43:06.102783 Looping..... 3
grmgr: 2020/08/16 01:43:06.102969 Looping..... 4
grmgr: 2020/08/16 01:43:06.103147 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
unmarshalRDF: 2020/08/16 01:43:06.103164 Entered unmarshalRDF. 
unmarshalRDF: 2020/08/16 01:43:06.103169 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:43:06.103175 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:43:06.103179 EndCh received for unmarshall. rCnt = 0 
DB: 2020/08/16 01:43:06.103610 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.539988ms
SaveRDFNode: 2020/08/16 01:43:06.103621 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000312900)}
SaveRDFNode: 2020/08/16 01:43:06.103628 Received UID: X18=
SaveRDFNode: 2020/08/16 01:43:06.103638 a: = db.Item{PKey:[]uint8{0x4c, 0x77, 0x46, 0xbc, 0x7a, 0x8c, 0x46, 0xc3, 0xa7, 0x1e, 0x74, 0x33, 0x1c, 0x7b, 0x6e, 0x22}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:43:06.103953 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.78886ms
DB: 2020/08/16 01:43:06.107390 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.719809ms
SaveRDFNode: 2020/08/16 01:43:06.107401 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000312900)}
SaveRDFNode: 2020/08/16 01:43:06.107408 Received UID: X18=
SaveRDFNode: 2020/08/16 01:43:06.107417 a: = db.Item{PKey:[]uint8{0x4c, 0x77, 0x46, 0xbc, 0x7a, 0x8c, 0x46, 0xc3, 0xa7, 0x1e, 0x74, 0x33, 0x1c, 0x7b, 0x6e, 0x22}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:43:06.107810 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.827437ms
SaveRDFNode: 2020/08/16 01:43:06.107821 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000313800)}
SaveRDFNode: 2020/08/16 01:43:06.107828 Received UID: X18=
SaveRDFNode: 2020/08/16 01:43:06.107837 a: = db.Item{PKey:[]uint8{0xa8, 0xfc, 0x45, 0x47, 0xf4, 0x48, 0x46, 0x5e, 0xb6, 0x57, 0x47, 0x18, 0x3e, 0x45, 0x1a, 0x57}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:43:06.111087 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.641ms
SaveRDFNode: 2020/08/16 01:43:06.111217 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:43:06.111232 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 01:43:06.111505 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.639587ms
SaveRDFNode: 2020/08/16 01:43:06.111521 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000313800)}
SaveRDFNode: 2020/08/16 01:43:06.111527 Received UID: X18=
SaveRDFNode: 2020/08/16 01:43:06.111537 a: = db.Item{PKey:[]uint8{0xa8, 0xfc, 0x45, 0x47, 0xf4, 0x48, 0x46, 0x5e, 0xb6, 0x57, 0x47, 0x18, 0x3e, 0x45, 0x1a, 0x57}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:43:06.115135 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.543022ms
SaveRDFNode: 2020/08/16 01:43:06.115154 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 01:43:06.115160 saveNode finished waiting...exiting
grmgr: 2020/08/16 01:43:06.115166 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 01:43:06.115177 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.130679 About to run AttachNodeCh: abc  d  d9EAZtHSR5Khc5VDcV0vqg== qPxFR/RIRl62V0cYPkUaVw==
anmgr 2020/08/16 01:43:06.130699 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:43:06.130707 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 01:43:06.130713 Looping..... 0
grmgr: 2020/08/16 01:43:06.130859 Looping..... 1
grmgr: 2020/08/16 01:43:06.131040 Looping..... 2
grmgr: 2020/08/16 01:43:06.131215 Looping..... 3
grmgr: 2020/08/16 01:43:06.131388 Looping..... 4
grmgr: 2020/08/16 01:43:06.131563 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:43:06.131573 goroutine about to start 1 cUID,pUID   d9EAZtHSR5Khc5VDcV0vqg==  qPxFR/RIRl62V0cYPkUaVw==  
grmgr: 2020/08/16 01:43:06.131798 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:43:06.135107 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.471062ms
DB: 2020/08/16 01:43:06.137666 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.530835ms
DB: 2020/08/16 01:43:06.141537 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.819527ms
anmgr 2020/08/16 01:43:06.147491 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.150350 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.233549ms
AttachNode: main 2020/08/16 01:43:06.150363 FetchForUpdate: for parent    qPxFR/RIRl62V0cYPkUaVw==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 01:43:06.150368 ** Cache FetchForUpdate Cache Key Value: [qPxFR/RIRl62V0cYPkUaVw==]   sortk: A#G#:F
FetchNode: 2020/08/16 01:43:06.150375  node: qPxFR/RIRl62V0cYPkUaVw== subKey: A#G#:F
AttachNode: gr1 2020/08/16 01:43:06.150554 FetchForUpdate: for child    d9EAZtHSR5Khc5VDcV0vqg==
FetchForUpdate: 2020/08/16 01:43:06.150562 ** Cache FetchForUpdate Cache Key Value: [d9EAZtHSR5Khc5VDcV0vqg==]   sortk: A#
FetchNode: 2020/08/16 01:43:06.150575  node: d9EAZtHSR5Khc5VDcV0vqg== subKey: A#
DB: 2020/08/16 01:43:06.154039 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.624527ms
FetchForUpdate: 2020/08/16 01:43:06.154105 len(nb): 1
fetchItems: 2020/08/16 01:43:06.154113 +++  Cache FetchItems for sortk A#G#:F UID: [qPxFR/RIRl62V0cYPkUaVw==] 
FetchNode: 2020/08/16 01:43:06.154118  node: qPxFR/RIRl62V0cYPkUaVw== subKey: A#G#:F
DB: 2020/08/16 01:43:06.155354 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.725266ms
FetchForUpdate: 2020/08/16 01:43:06.155471 len(nb): 7
fetchItems: 2020/08/16 01:43:06.155479 +++  Cache FetchItems for sortk A# UID: [d9EAZtHSR5Khc5VDcV0vqg==] 
FetchNode: 2020/08/16 01:43:06.155484  node: d9EAZtHSR5Khc5VDcV0vqg== subKey: A#
DB: 2020/08/16 01:43:06.156667 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.518434ms
DB: 2020/08/16 01:43:06.159591 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.079714ms
DB: 2020/08/16 01:43:06.161374 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.084524ms
anmgr 2020/08/16 01:43:06.163261 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.171684 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.321833ms
DB: 2020/08/16 01:43:06.175631 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.746539ms
anmgr 2020/08/16 01:43:06.178803 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.180133 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.132923ms
DB: 2020/08/16 01:43:06.186406 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.971436ms
DB: 2020/08/16 01:43:06.190351 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.648117ms
anmgr 2020/08/16 01:43:06.194391 About to run AttachNodeCh: b  c  uuai9bvnSk+y0x08EJ4AlA== THdGvHqMRsOnHnQzHHtuIg==
anmgr 2020/08/16 01:43:06.194425 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:43:06.194444 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 01:43:06.194457 Looping..... 0
grmgr: 2020/08/16 01:43:06.194538 Looping..... 1
DB: 2020/08/16 01:43:06.194614 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.967481ms
grmgr: 2020/08/16 01:43:06.194953 Looping..... 2
grmgr: 2020/08/16 01:43:06.194974 Looping..... 3
grmgr: 2020/08/16 01:43:06.195074 Looping..... 4
grmgr: 2020/08/16 01:43:06.195251 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:43:06.195277 goroutine about to start 2 cUID,pUID   uuai9bvnSk+y0x08EJ4AlA==  THdGvHqMRsOnHnQzHHtuIg==  
grmgr: 2020/08/16 01:43:06.195556 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 01:43:06.197842 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.402662ms
DB: 2020/08/16 01:43:06.198865 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.07221ms
Cache: 2020/08/16 01:43:06.198876 In SetUpredAvailable: pUid, tUID:  qPxFR/RIRl62V0cYPkUaVw== qPxFR/RIRl62V0cYPkUaVw== A#G#:F
Cache: 2020/08/16 01:43:06.198881 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:43:06.200085 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.214215ms
DB: 2020/08/16 01:43:06.202722 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.801311ms
Unlock: 2020/08/16 01:43:06.202734 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:43:06.202738 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:43:06.205570 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.43917ms
DB: 2020/08/16 01:43:06.207538 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.746828ms
grmgr: 2020/08/16 01:43:06.207552 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 01:43:06.209885 for loop finished 0  6 
anmgr 2020/08/16 01:43:06.209896 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.209902 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.209907 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.209912 ** received on attachDoneCh.... 0
DB: 2020/08/16 01:43:06.211835 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.089282ms
AttachNode: main 2020/08/16 01:43:06.211850 FetchForUpdate: for parent    THdGvHqMRsOnHnQzHHtuIg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:43:06.211856 ** Cache FetchForUpdate Cache Key Value: [THdGvHqMRsOnHnQzHHtuIg==]   sortk: A#G#:S
FetchNode: 2020/08/16 01:43:06.211862  node: THdGvHqMRsOnHnQzHHtuIg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:43:06.212056 FetchForUpdate: for child    uuai9bvnSk+y0x08EJ4AlA==
FetchForUpdate: 2020/08/16 01:43:06.212066 ** Cache FetchForUpdate Cache Key Value: [uuai9bvnSk+y0x08EJ4AlA==]   sortk: A#
FetchNode: 2020/08/16 01:43:06.212079  node: uuai9bvnSk+y0x08EJ4AlA== subKey: A#
DB: 2020/08/16 01:43:06.214363 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.469991ms
FetchForUpdate: 2020/08/16 01:43:06.214425 len(nb): 1
fetchItems: 2020/08/16 01:43:06.214433 +++  Cache FetchItems for sortk A#G#:S UID: [THdGvHqMRsOnHnQzHHtuIg==] 
FetchNode: 2020/08/16 01:43:06.214437  node: THdGvHqMRsOnHnQzHHtuIg== subKey: A#G#:S
DB: 2020/08/16 01:43:06.215512 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 6  Duration: 3.346099ms
FetchForUpdate: 2020/08/16 01:43:06.215620 len(nb): 6
fetchItems: 2020/08/16 01:43:06.215628 +++  Cache FetchItems for sortk A# UID: [uuai9bvnSk+y0x08EJ4AlA==] 
FetchNode: 2020/08/16 01:43:06.215632  node: uuai9bvnSk+y0x08EJ4AlA== subKey: A#
DB: 2020/08/16 01:43:06.216965 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.496613ms
DB: 2020/08/16 01:43:06.219097 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 6  Duration: 3.427824ms
anmgr 2020/08/16 01:43:06.220377 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.225052 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.89689ms
DB: 2020/08/16 01:43:06.231508 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.117938ms
DB: 2020/08/16 01:43:06.235242 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.55311ms
anmgr 2020/08/16 01:43:06.235870 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.239730 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.131269ms
DB: 2020/08/16 01:43:06.245938 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.923662ms
DB: 2020/08/16 01:43:06.251226 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.963056ms
anmgr 2020/08/16 01:43:06.251718 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.251730 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.251736 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.255791 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.249482ms
DB: 2020/08/16 01:43:06.259836 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.864966ms
Cache: 2020/08/16 01:43:06.259849 In SetUpredAvailable: pUid, tUID:  THdGvHqMRsOnHnQzHHtuIg== THdGvHqMRsOnHnQzHHtuIg== A#G#:S
Cache: 2020/08/16 01:43:06.259853 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:43:06.263729 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.84124ms
Unlock: 2020/08/16 01:43:06.263738 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:43:06.263743 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 01:43:06.267174 for loop finished 1  6 
anmgr 2020/08/16 01:43:06.267191 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.267198 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.267203 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.269086 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.276789ms
grmgr: 2020/08/16 01:43:06.269100 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:43:06.272374 ** received on attachDoneCh.... 1
anmgr 2020/08/16 01:43:06.277568 About to run AttachNodeCh: abc  b  d9EAZtHSR5Khc5VDcV0vqg== uuai9bvnSk+y0x08EJ4AlA==
anmgr 2020/08/16 01:43:06.277589 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:43:06.277597 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 01:43:06.277602 Looping..... 0
grmgr: 2020/08/16 01:43:06.277737 Looping..... 1
grmgr: 2020/08/16 01:43:06.277910 Looping..... 2
grmgr: 2020/08/16 01:43:06.278083 Looping..... 3
grmgr: 2020/08/16 01:43:06.278256 Looping..... 4
grmgr: 2020/08/16 01:43:06.278430 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:43:06.278440 goroutine about to start 3 cUID,pUID   d9EAZtHSR5Khc5VDcV0vqg==  uuai9bvnSk+y0x08EJ4AlA==  
grmgr: 2020/08/16 01:43:06.278813 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:43:06.280988 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.340513ms
DB: 2020/08/16 01:43:06.284921 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.90328ms
DB: 2020/08/16 01:43:06.289060 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.06411ms
anmgr 2020/08/16 01:43:06.292964 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.293702 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.466449ms
AttachNode: main 2020/08/16 01:43:06.293713 FetchForUpdate: for parent    uuai9bvnSk+y0x08EJ4AlA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:43:06.293718 ** Cache FetchForUpdate Cache Key Value: [uuai9bvnSk+y0x08EJ4AlA==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:43:06.293724 +++  Cache FetchItems for sortk A#G#:S UID: [uuai9bvnSk+y0x08EJ4AlA==] 
FetchNode: 2020/08/16 01:43:06.293728  node: uuai9bvnSk+y0x08EJ4AlA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:43:06.293906 FetchForUpdate: for child    d9EAZtHSR5Khc5VDcV0vqg==
FetchForUpdate: 2020/08/16 01:43:06.293914 ** Cache FetchForUpdate Cache Key Value: [d9EAZtHSR5Khc5VDcV0vqg==]   sortk: A#
fetchItems: 2020/08/16 01:43:06.293991 +++  Cache FetchItems for sortk A# UID: [d9EAZtHSR5Khc5VDcV0vqg==] 
FetchNode: 2020/08/16 01:43:06.294005  node: d9EAZtHSR5Khc5VDcV0vqg== subKey: A#
DB: 2020/08/16 01:43:06.296646 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.886167ms
DB: 2020/08/16 01:43:06.297305 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.257909ms
DB: 2020/08/16 01:43:06.301887 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.02694ms
DB: 2020/08/16 01:43:06.307894 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.938003ms
anmgr 2020/08/16 01:43:06.308818 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.308844 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.308850 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.311675 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.613718ms
DB: 2020/08/16 01:43:06.315887 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.867551ms
DB: 2020/08/16 01:43:06.322161 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.961073ms
anmgr 2020/08/16 01:43:06.324341 for loop finished 2  6 
anmgr 2020/08/16 01:43:06.324357 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.324363 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.324368 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.324373 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.324378 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.326046 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.585629ms
DB: 2020/08/16 01:43:06.330118 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.780616ms
DB: 2020/08/16 01:43:06.333944 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.640454ms
Cache: 2020/08/16 01:43:06.333956 In SetUpredAvailable: pUid, tUID:  uuai9bvnSk+y0x08EJ4AlA== uuai9bvnSk+y0x08EJ4AlA== A#G#:S
Cache: 2020/08/16 01:43:06.333961 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:43:06.337607 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.594046ms
Unlock: 2020/08/16 01:43:06.337617 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:43:06.337622 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 01:43:06.339902 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.342351 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.676832ms
grmgr: 2020/08/16 01:43:06.342367 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:43:06.344976 ** received on attachDoneCh.... 1
anmgr 2020/08/16 01:43:06.350163 About to run AttachNodeCh: b  abc  uuai9bvnSk+y0x08EJ4AlA== d9EAZtHSR5Khc5VDcV0vqg==
anmgr 2020/08/16 01:43:06.350176 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.350182 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.350187 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:43:06.350194 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 01:43:06.350199 Looping..... 0
grmgr: 2020/08/16 01:43:06.350332 Looping..... 1
grmgr: 2020/08/16 01:43:06.350506 Looping..... 2
grmgr: 2020/08/16 01:43:06.350681 Looping..... 3
grmgr: 2020/08/16 01:43:06.350864 Looping..... 4
grmgr: 2020/08/16 01:43:06.351034 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:43:06.351045 goroutine about to start 4 cUID,pUID   uuai9bvnSk+y0x08EJ4AlA==  d9EAZtHSR5Khc5VDcV0vqg==  
grmgr: 2020/08/16 01:43:06.351268 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:43:06.354074 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.962229ms
DB: 2020/08/16 01:43:06.357424 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.316335ms
DB: 2020/08/16 01:43:06.361217 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.719858ms
anmgr 2020/08/16 01:43:06.365627 for loop finished 3  6 
anmgr 2020/08/16 01:43:06.365642 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.365649 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.365654 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.365659 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.365664 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.365908 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.390851ms
AttachNode: main 2020/08/16 01:43:06.365920 FetchForUpdate: for parent    d9EAZtHSR5Khc5VDcV0vqg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:43:06.365926 ** Cache FetchForUpdate Cache Key Value: [d9EAZtHSR5Khc5VDcV0vqg==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:43:06.365932 +++  Cache FetchItems for sortk A#G#:S UID: [d9EAZtHSR5Khc5VDcV0vqg==] 
FetchNode: 2020/08/16 01:43:06.365936  node: d9EAZtHSR5Khc5VDcV0vqg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:43:06.366118 FetchForUpdate: for child    uuai9bvnSk+y0x08EJ4AlA==
FetchForUpdate: 2020/08/16 01:43:06.366136 ** Cache FetchForUpdate Cache Key Value: [uuai9bvnSk+y0x08EJ4AlA==]   sortk: A#
fetchItems: 2020/08/16 01:43:06.366142 +++  Cache FetchItems for sortk A# UID: [uuai9bvnSk+y0x08EJ4AlA==] 
FetchNode: 2020/08/16 01:43:06.366173  node: uuai9bvnSk+y0x08EJ4AlA== subKey: A#
DB: 2020/08/16 01:43:06.368636 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.666138ms
DB: 2020/08/16 01:43:06.369557 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 8  Duration: 3.320756ms
DB: 2020/08/16 01:43:06.372698 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.650752ms
DB: 2020/08/16 01:43:06.378358 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.350393ms
DB: 2020/08/16 01:43:06.382146 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.61871ms
anmgr 2020/08/16 01:43:06.382742 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.382760 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.382765 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.382770 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.382775 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.386282 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.776408ms
DB: 2020/08/16 01:43:06.392696 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.131168ms
DB: 2020/08/16 01:43:06.396684 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.579895ms
anmgr 2020/08/16 01:43:06.398505 for loop finished 3  6 
anmgr 2020/08/16 01:43:06.398519 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.398526 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.398531 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.398536 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.398541 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.400872 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.725325ms
DB: 2020/08/16 01:43:06.404689 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.542102ms
Cache: 2020/08/16 01:43:06.404701 In SetUpredAvailable: pUid, tUID:  d9EAZtHSR5Khc5VDcV0vqg== d9EAZtHSR5Khc5VDcV0vqg== A#G#:S
Cache: 2020/08/16 01:43:06.404706 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:43:06.408455 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.709882ms
Unlock: 2020/08/16 01:43:06.408468 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:43:06.408474 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:43:06.413227 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.696242ms
grmgr: 2020/08/16 01:43:06.413244 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:43:06.413987 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.413997 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.414002 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.414008 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.414013 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.414027 ** received on attachDoneCh.... 0
anmgr 2020/08/16 01:43:06.424334 About to run AttachNodeCh: c  abc  THdGvHqMRsOnHnQzHHtuIg== d9EAZtHSR5Khc5VDcV0vqg==
anmgr 2020/08/16 01:43:06.424350 for loop finished 4  6 
anmgr 2020/08/16 01:43:06.424358 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.424364 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.424369 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.424374 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.424379 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:43:06.424388 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 01:43:06.424394 Looping..... 0
grmgr: 2020/08/16 01:43:06.424521 Looping..... 1
grmgr: 2020/08/16 01:43:06.424700 Looping..... 2
grmgr: 2020/08/16 01:43:06.424885 Looping..... 3
grmgr: 2020/08/16 01:43:06.425053 Looping..... 4
grmgr: 2020/08/16 01:43:06.425230 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:43:06.425240 goroutine about to start 5 cUID,pUID   THdGvHqMRsOnHnQzHHtuIg==  d9EAZtHSR5Khc5VDcV0vqg==  
grmgr: 2020/08/16 01:43:06.425465 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:43:06.428608 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.306967ms
DB: 2020/08/16 01:43:06.431152 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.49729ms
DB: 2020/08/16 01:43:06.434978 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.764048ms
anmgr 2020/08/16 01:43:06.439840 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.439871 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.439878 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.439883 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.439888 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.439893 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.439898 for loop finished 4  6 
anmgr 2020/08/16 01:43:06.439903 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.439909 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.439914 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.439920 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.439925 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.440131 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.88124ms
AttachNode: main 2020/08/16 01:43:06.440144 FetchForUpdate: for parent    d9EAZtHSR5Khc5VDcV0vqg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:43:06.440149 ** Cache FetchForUpdate Cache Key Value: [d9EAZtHSR5Khc5VDcV0vqg==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:43:06.440156 +++  Cache FetchItems for sortk A#G#:S UID: [d9EAZtHSR5Khc5VDcV0vqg==] 
FetchNode: 2020/08/16 01:43:06.440160  node: d9EAZtHSR5Khc5VDcV0vqg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:43:06.440338 FetchForUpdate: for child    THdGvHqMRsOnHnQzHHtuIg==
FetchForUpdate: 2020/08/16 01:43:06.440347 ** Cache FetchForUpdate Cache Key Value: [THdGvHqMRsOnHnQzHHtuIg==]   sortk: A#
fetchItems: 2020/08/16 01:43:06.440352 +++  Cache FetchItems for sortk A# UID: [THdGvHqMRsOnHnQzHHtuIg==] 
FetchNode: 2020/08/16 01:43:06.440365  node: THdGvHqMRsOnHnQzHHtuIg== subKey: A#
DB: 2020/08/16 01:43:06.443065 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 3  Duration: 2.8719ms
DB: 2020/08/16 01:43:06.444392 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 8  Duration: 3.943593ms
fetchItems: 2020/08/16 01:43:06.444583 +++  Cache FetchItems for sortk A# UID: [THdGvHqMRsOnHnQzHHtuIg==] 
FetchNode: 2020/08/16 01:43:06.444591  node: THdGvHqMRsOnHnQzHHtuIg== subKey: A#
DB: 2020/08/16 01:43:06.447442 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 8  Duration: 2.819274ms
DB: 2020/08/16 01:43:06.448807 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.225022ms
DB: 2020/08/16 01:43:06.452348 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.492381ms
DB: 2020/08/16 01:43:06.452362 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.492381ms
anmgr 2020/08/16 01:43:06.455357 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.455369 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.455374 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.455379 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.455384 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.455389 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.455394 for loop finished 4  6 
anmgr 2020/08/16 01:43:06.455398 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.455403 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.455408 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.455414 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.455418 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.456036 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.641118ms
DB: 2020/08/16 01:43:06.456212 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.641118ms
DB: 2020/08/16 01:43:06.460531 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.094679ms
DB: 2020/08/16 01:43:06.464485 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.747672ms
DB: 2020/08/16 01:43:06.471037 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.013816ms
anmgr 2020/08/16 01:43:06.471538 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.471552 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.471567 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.471573 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.471593 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.471599 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.471604 for loop finished 4  6 
anmgr 2020/08/16 01:43:06.471613 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.471618 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.471623 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.471628 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.471633 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.474897 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.528932ms
DB: 2020/08/16 01:43:06.479127 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.629585ms
DB: 2020/08/16 01:43:06.485564 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.982231ms
anmgr 2020/08/16 01:43:06.487083 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.487098 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.487103 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.487108 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.487114 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.487119 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.487124 for loop finished 4  6 
anmgr 2020/08/16 01:43:06.487129 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.487134 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.487139 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.487147 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.487152 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.489766 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.723891ms
DB: 2020/08/16 01:43:06.494325 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.067663ms
DB: 2020/08/16 01:43:06.498163 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.577343ms
Cache: 2020/08/16 01:43:06.498175 In SetUpredAvailable: pUid, tUID:  d9EAZtHSR5Khc5VDcV0vqg== JCJG5Y4lSGunrOrSnjCGnw== A#G#:S
Cache: 2020/08/16 01:43:06.498180 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:43:06.502012 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.794887ms
Unlock: 2020/08/16 01:43:06.502021 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:43:06.502026 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 01:43:06.502674 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.502687 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.502693 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.502698 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.502703 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.502708 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.502713 for loop finished 4  6 
anmgr 2020/08/16 01:43:06.502718 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.502723 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:43:06.502728 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.502734 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.502739 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:43:06.506855 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.778373ms
grmgr: 2020/08/16 01:43:06.506871 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:43:06.507907 ** received on attachDoneCh.... 1
anmgr 2020/08/16 01:43:06.513081 About to run AttachNodeCh: abc  c  d9EAZtHSR5Khc5VDcV0vqg== THdGvHqMRsOnHnQzHHtuIg==
anmgr 2020/08/16 01:43:06.513093 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.513108 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.513112 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.513117 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.513122 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.513127 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:43:06.513131 for loop finished 5  6 
attachNode: 2020/08/16 01:43:06.513137 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 01:43:06.513142 Looping..... 0
grmgr: 2020/08/16 01:43:06.513165 Looping..... 1
grmgr: 2020/08/16 01:43:06.513252 Looping..... 2
grmgr: 2020/08/16 01:43:06.513432 Looping..... 3
grmgr: 2020/08/16 01:43:06.513606 Looping..... 4
grmgr: 2020/08/16 01:43:06.513781 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:43:06.513802 goroutine about to start 6 cUID,pUID   d9EAZtHSR5Khc5VDcV0vqg==  THdGvHqMRsOnHnQzHHtuIg==  
rdfLoader: 2020/08/16 01:43:06.513808 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 01:43:06.514016 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:43:06.516759 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.884787ms
DB: 2020/08/16 01:43:06.519074 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.287143ms
DB: 2020/08/16 01:43:06.523013 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.786009ms
DB: 2020/08/16 01:43:06.528111 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.60063ms
AttachNode: main 2020/08/16 01:43:06.528124 FetchForUpdate: for parent    THdGvHqMRsOnHnQzHHtuIg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:43:06.528130 ** Cache FetchForUpdate Cache Key Value: [THdGvHqMRsOnHnQzHHtuIg==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:43:06.528135 +++  Cache FetchItems for sortk A#G#:S UID: [THdGvHqMRsOnHnQzHHtuIg==] 
FetchNode: 2020/08/16 01:43:06.528140  node: THdGvHqMRsOnHnQzHHtuIg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:43:06.528297 FetchForUpdate: for child    d9EAZtHSR5Khc5VDcV0vqg==
FetchForUpdate: 2020/08/16 01:43:06.528305 ** Cache FetchForUpdate Cache Key Value: [d9EAZtHSR5Khc5VDcV0vqg==]   sortk: A#
fetchItems: 2020/08/16 01:43:06.528310 +++  Cache FetchItems for sortk A# UID: [d9EAZtHSR5Khc5VDcV0vqg==] 
FetchNode: 2020/08/16 01:43:06.528328  node: d9EAZtHSR5Khc5VDcV0vqg== subKey: A#
DB: 2020/08/16 01:43:06.530683 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 3  Duration: 2.511888ms
DB: 2020/08/16 01:43:06.531498 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 9  Duration: 3.095125ms
DB: 2020/08/16 01:43:06.534515 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.706951ms
DB: 2020/08/16 01:43:06.538544 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.998222ms
DB: 2020/08/16 01:43:06.538922 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.998222ms
DB: 2020/08/16 01:43:06.542631 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.671136ms
DB: 2020/08/16 01:43:06.542645 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.671136ms
DB: 2020/08/16 01:43:06.546914 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.010111ms
DB: 2020/08/16 01:43:06.550771 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.668779ms
DB: 2020/08/16 01:43:06.556532 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.169255ms
DB: 2020/08/16 01:43:06.560496 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.479209ms
DB: 2020/08/16 01:43:06.564967 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.90196ms
DB: 2020/08/16 01:43:06.571684 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.238123ms
DB: 2020/08/16 01:43:06.577352 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.14619ms
DB: 2020/08/16 01:43:06.582313 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.475739ms
DB: 2020/08/16 01:43:06.586342 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.764151ms
Cache: 2020/08/16 01:43:06.586354 In SetUpredAvailable: pUid, tUID:  THdGvHqMRsOnHnQzHHtuIg== jHy7oZ4SQjSIbutApRCrMA== A#G#:S
Cache: 2020/08/16 01:43:06.586359 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:43:06.590054 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.661532ms
Unlock: 2020/08/16 01:43:06.590185 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:43:06.590196 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:43:06.594899 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.643665ms
grmgr: 2020/08/16 01:43:06.594917 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 01:43:06.594923 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 01:43:06.594930 11.....
rdfLoader: 2020/08/16 01:43:06.594937 22.....error cnt: 5
rdfuuid: 2020/08/16 01:43:06.595992 Powering down...
errlog: 2020/08/16 01:43:06.596003 Powering down...
grmgr: 2020/08/16 01:43:06.596008 Powering down...
anmgr: 2020/08/16 01:43:06.596012 Powering down...
rdfLoader: 2020/08/16 01:43:06.596041 loader exists.....
DB:2020/08/16 01:45:10 log.go:18: ===============================================================================
anmgr: 2020/08/16 01:45:10.261568 Powering on...
rdfLoader: 2020/08/16 01:45:10.261792 saveNode started......
rdfLoader: 2020/08/16 01:45:10.261805 define saveNode limiter......
rdfuuid: 2020/08/16 01:45:10.261810 Powering on...
grmgr: 2020/08/16 01:45:10.261828 Powering on...
errlog: 2020/08/16 01:45:10.261843 Powering on...
rdfLoader: 2020/08/16 01:45:10.261850  principle goroutines started 
RDFreader: 2020/08/16 01:45:10.261867 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:45:10.261881 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 01:45:10.261887 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 01:45:10.261893 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 01:45:10.261898 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 01:45:10.261904 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 01:45:10.261908 spo read:      
RDFreader: 2020/08/16 01:45:10.261913 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 01:45:10.261918 spo read:  abc  Friends  _:d
RDFreader: 2020/08/16 01:45:10.261923 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 01:45:10.261928 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 01:45:10.261933 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 01:45:10.261937 spo read:      
RDFreader: 2020/08/16 01:45:10.261942 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 01:45:10.261947 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 01:45:10.261952 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 01:45:10.261957 spo read:  b  Age  "58"
RDFreader: 2020/08/16 01:45:10.261962 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 01:45:10.261966 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 01:45:10.261971 spo read:  abc  Friends  _:d
rdfLoader: 2020/08/16 01:45:10.261975 Send node batch on channel verifyCh
RDFreader: 2020/08/16 01:45:10.261990 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:45:10.261995 spo read:  abc  Friends  _:d
RDFreader: 2020/08/16 01:45:10.262000 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 01:45:10.262005 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 01:45:10.262012 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 01:45:10.262016 spo read:      
RDFreader: 2020/08/16 01:45:10.262021 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 01:45:10.262024 Send node batch on channel verifyCh
RDFreader: 2020/08/16 01:45:10.262030 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:45:10.262034 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 01:45:10.262039 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 01:45:10.262045 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 01:45:10.262050 spo read:  c  Age  "67"
RDFreader: 2020/08/16 01:45:10.262055 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 01:45:10.262059 spo read:  abc  Friends  _:d
RDFreader: 2020/08/16 01:45:10.262066 spo read:  c  Siblings  _:b
rdfLoader: 2020/08/16 01:45:10.262069 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 01:45:10.262073 verify started....
rdfLoader: 2020/08/16 01:45:10.262077 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:45:10.262081 .  getType..
rdfLoader: 2020/08/16 01:45:10.262085 node.TyName : [Person]
RDFreader: 2020/08/16 01:45:10.262630 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:45:10.262639 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 01:45:10.262647 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 01:45:10.262652 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 01:45:10.262657 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 01:45:10.262662 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 01:45:10.262666 spo read:      
RDFreader: 2020/08/16 01:45:10.262672 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 01:45:10.262676 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 01:45:10.262682 spo read:  abc  Friends  _:abc
rdfLoader: 2020/08/16 01:45:10.262685 Send node batch on channel verifyCh
DB: 2020/08/16 01:45:10.334187 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 72.040096ms
grmgr: 2020/08/16 01:45:10.334335 Looping..... 0
grmgr: 2020/08/16 01:45:10.334540 Looping..... 1
grmgr: 2020/08/16 01:45:10.334562 Looping..... 2
grmgr: 2020/08/16 01:45:10.334722 Looping..... 3
grmgr: 2020/08/16 01:45:10.334899 Looping..... 4
grmgr: 2020/08/16 01:45:10.335102 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:45:10.335114 .  getType..
rdfLoader: 2020/08/16 01:45:10.335118 node.TyName : [Person]
grmgr: 2020/08/16 01:45:10.335124 Looping..... 0
unmarshalRDF: 2020/08/16 01:45:10.335137 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.335147 Looping..... 1
grmgr: 2020/08/16 01:45:10.335152 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 01:45:10.335156 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:45:10.335164 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:45:10.335168 .  getType..
rdfLoader: 2020/08/16 01:45:10.335173 node.TyName : []
rdfLoader: 2020/08/16 01:45:10.335375 Add to SS . [Honda]
rdfLoader: 2020/08/16 01:45:10.335383 Add to SS . [Alfa]
anmgr 2020/08/16 01:45:10.335420 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.335428 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 01:45:10.335483 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:45:10.335499 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.335510 EndCh received for unmarshall. rCnt = 0 
unmarshalRDF: 2020/08/16 01:45:10.335520 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.335533 StartCh received for unmarshall. rCnt = 1 
RDFreader: 2020/08/16 01:45:10.335552 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:45:10.335557 spo read:  abc  Friends  _:abc
RDFreader: 2020/08/16 01:45:10.335567 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 01:45:10.335572 spo read:  d  Age  "36"
RDFreader: 2020/08/16 01:45:10.335577 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 01:45:10.335586 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 01:45:10.335590 Send node batch on channel verifyCh
anmgr 2020/08/16 01:45:10.335597 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.335604 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 01:45:10.335628 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:45:10.335632 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.335637 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 01:45:10.335643 Looping..... 0
anmgr 2020/08/16 01:45:10.335651 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
grmgr: 2020/08/16 01:45:10.335681 Looping..... 1
grmgr: 2020/08/16 01:45:10.335858 Looping..... 2
grmgr: 2020/08/16 01:45:10.336032 Looping..... 3
grmgr: 2020/08/16 01:45:10.336206 Looping..... 4
grmgr: 2020/08/16 01:45:10.336385 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 01:45:10.336398 Looping..... 0
grmgr: 2020/08/16 01:45:10.336424 Looping..... 1
grmgr: 2020/08/16 01:45:10.336429 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 01:45:10.336433 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
SaveRDFNode: xxx 2020/08/16 01:45:10.336454 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.336461 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.336466 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.336472 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.336478 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.336484 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:45:10.336488 SaveRDFNode : 6 
SaveRDFNode: 2020/08/16 01:45:10.336495 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017c80)}
SaveRDFNode: 2020/08/16 01:45:10.336499 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:45:10.336510 UID received  : N34hFh8RQxWfzzN2uY9lXg==
SaveRDFNode: xxx 2020/08/16 01:45:10.336820 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.336836 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.336843 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.336854 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.336859 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.336865 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.336870 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:45:10.336874 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 01:45:10.336880 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000346360)}
SaveRDFNode: 2020/08/16 01:45:10.336884 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:45:10.336892 UID received  : vVgcR4jiSbSadVpiNqM0QA==
grmgr: 2020/08/16 01:45:10.337037 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 01:45:10.341348 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: MT5T3SSCHOHNPESVP836A95EB3VV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 01:45:10.341364 Looping..... 0
grmgr: 2020/08/16 01:45:10.343999 Looping..... 1
grmgr: 2020/08/16 01:45:10.346080 Looping..... 2
grmgr: 2020/08/16 01:45:10.346841 Looping..... 3
grmgr: 2020/08/16 01:45:10.346998 Looping..... 4
grmgr: 2020/08/16 01:45:10.347175 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:45:10.347187 .  getType..
rdfLoader: 2020/08/16 01:45:10.347192 node.TyName : []
unmarshalRDF: 2020/08/16 01:45:10.347394 Entered unmarshalRDF. 
unmarshalRDF: 2020/08/16 01:45:10.347402 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.347408 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:45:10.347413 EndCh received for unmarshall. rCnt = 0 
DB: 2020/08/16 01:45:10.348493 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 11.940046ms
DB: 2020/08/16 01:45:10.352181 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.655704ms
DB: 2020/08/16 01:45:10.356083 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.750475ms
DB: 2020/08/16 01:45:10.359924 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.808361ms
SaveRDFNode: 2020/08/16 01:45:10.359939 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017c80)}
SaveRDFNode: 2020/08/16 01:45:10.359946 Received UID: X18=
SaveRDFNode: 2020/08/16 01:45:10.359960 a: = db.Item{PKey:[]uint8{0x37, 0x7e, 0x21, 0x16, 0x1f, 0x11, 0x43, 0x15, 0x9f, 0xcf, 0x33, 0x76, 0xb9, 0x8f, 0x65, 0x5e}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:45:10.361548 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: UCLF5GMN9FN6SLBG0R1HMP3V5VVV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 01:45:10.361563 Looping..... 0
grmgr: 2020/08/16 01:45:10.361581 Looping..... 1
grmgr: 2020/08/16 01:45:10.361600 Looping..... 2
grmgr: 2020/08/16 01:45:10.361717 Looping..... 3
grmgr: 2020/08/16 01:45:10.361890 Looping..... 4
DB: 2020/08/16 01:45:10.362012 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 25.070716ms
grmgr: 2020/08/16 01:45:10.362194 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:45:10.362205 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:45:10.362209 .  getType..
rdfLoader: 2020/08/16 01:45:10.362213 node.TyName : [Person]
grmgr: 2020/08/16 01:45:10.362228 Looping..... 0
unmarshalRDF: 2020/08/16 01:45:10.362258 Entered unmarshalRDF. 
rdfLoader: 2020/08/16 01:45:10.362270 close verify channel
grmgr: 2020/08/16 01:45:10.362283 Looping..... 1
grmgr: 2020/08/16 01:45:10.362288 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 01:45:10.362292 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:45:10.362299 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:45:10.362303 .  getType..
rdfLoader: 2020/08/16 01:45:10.362308 node.TyName : []
unmarshalRDF: 2020/08/16 01:45:10.362462 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.362472 EndCh received for unmarshall. rCnt = 0 
unmarshalRDF: 2020/08/16 01:45:10.362482 Entered unmarshalRDF. 
unmarshalRDF: 2020/08/16 01:45:10.362543 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:45:10.362549 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.362555 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:45:10.362560 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 01:45:10.362565 Looping..... 0
anmgr 2020/08/16 01:45:10.362573 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/16 01:45:10.362883 Looping..... 1
grmgr: 2020/08/16 01:45:10.362907 Looping..... 2
grmgr: 2020/08/16 01:45:10.363109 Looping..... 3
grmgr: 2020/08/16 01:45:10.363294 Looping..... 4
grmgr: 2020/08/16 01:45:10.363487 has ASKed. Cnt is above limit. Mark saveNode as waiting
DB: 2020/08/16 01:45:10.363881 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.890117ms
SaveRDFNode: 2020/08/16 01:45:10.363893 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017c80)}
SaveRDFNode: 2020/08/16 01:45:10.363899 Received UID: X18=
SaveRDFNode: 2020/08/16 01:45:10.363912 a: = db.Item{PKey:[]uint8{0x37, 0x7e, 0x21, 0x16, 0x1f, 0x11, 0x43, 0x15, 0x9f, 0xcf, 0x33, 0x76, 0xb9, 0x8f, 0x65, 0x5e}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:45:10.365734 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.689976ms
DB: 2020/08/16 01:45:10.367772 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.813687ms
SaveRDFNode: 2020/08/16 01:45:10.367908 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:45:10.367921 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 01:45:10.367926 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 01:45:10.367953 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.367959 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.367964 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.367970 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.367976 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.367982 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:45:10.367986 SaveRDFNode : 6 
SaveRDFNode: 2020/08/16 01:45:10.367992 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000347500)}
SaveRDFNode: 2020/08/16 01:45:10.367995 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:45:10.368012 UID received  : Q2Wma03DQHGRNrTFeEPQWQ==
grmgr: 2020/08/16 01:45:10.368191 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 01:45:10.368529 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: 4P70SE5AADKCM9P4UDTA0A7FSBVV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 01:45:10.368540 Looping..... 0
grmgr: 2020/08/16 01:45:10.368775 Looping..... 1
grmgr: 2020/08/16 01:45:10.368952 Looping..... 2
grmgr: 2020/08/16 01:45:10.369133 Looping..... 3
DB: 2020/08/16 01:45:10.369295 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.511668ms
grmgr: 2020/08/16 01:45:10.369480 Looping..... 4
grmgr: 2020/08/16 01:45:10.369646 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:45:10.369657 .  getType..
rdfLoader: 2020/08/16 01:45:10.369661 node.TyName : [Person]
grmgr: 2020/08/16 01:45:10.369666 Looping..... 0
unmarshalRDF: 2020/08/16 01:45:10.369677 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.369686 Looping..... 1
grmgr: 2020/08/16 01:45:10.369691 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 01:45:10.369695 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:45:10.369700 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:45:10.369704 .  getType..
rdfLoader: 2020/08/16 01:45:10.369709 node.TyName : []
unmarshalRDF: 2020/08/16 01:45:10.369865 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.369876 EndCh received for unmarshall. rCnt = 0 
unmarshalRDF: 2020/08/16 01:45:10.369886 Entered unmarshalRDF. 
unmarshalRDF: 2020/08/16 01:45:10.369916 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:45:10.369921 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.369926 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:45:10.369931 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 01:45:10.369935 Looping..... 0
grmgr: 2020/08/16 01:45:10.369985 Looping..... 1
grmgr: 2020/08/16 01:45:10.370164 Looping..... 2
grmgr: 2020/08/16 01:45:10.370357 Looping..... 3
grmgr: 2020/08/16 01:45:10.370546 Looping..... 4
grmgr: 2020/08/16 01:45:10.370716 has ASKed. Cnt is above limit. Mark saveNode as waiting
DB: 2020/08/16 01:45:10.371758 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.718532ms
DB: 2020/08/16 01:45:10.372937 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.610032ms
DB: 2020/08/16 01:45:10.375454 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: V42STI9713OUER8FQVRKJMVGRNVV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 01:45:10.375466 Looping..... 0
grmgr: 2020/08/16 01:45:10.375483 Looping..... 1
grmgr: 2020/08/16 01:45:10.375600 Looping..... 2
DB: 2020/08/16 01:45:10.375678 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.888048ms
grmgr: 2020/08/16 01:45:10.375853 Looping..... 3
grmgr: 2020/08/16 01:45:10.375954 Looping..... 4
grmgr: 2020/08/16 01:45:10.376132 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:45:10.376142 .  getType..
rdfLoader: 2020/08/16 01:45:10.376147 node.TyName : []
unmarshalRDF: 2020/08/16 01:45:10.376297 Entered unmarshalRDF. 
unmarshalRDF: 2020/08/16 01:45:10.376316 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.376323 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:45:10.376336 EndCh received for unmarshall. rCnt = 0 
DB: 2020/08/16 01:45:10.376562 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.592354ms
SaveRDFNode: 2020/08/16 01:45:10.376572 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346360)}
SaveRDFNode: 2020/08/16 01:45:10.376579 Received UID: X18=
SaveRDFNode: 2020/08/16 01:45:10.376590 a: = db.Item{PKey:[]uint8{0xbd, 0x58, 0x1c, 0x47, 0x88, 0xe2, 0x49, 0xb4, 0x9a, 0x75, 0x5a, 0x62, 0x36, 0xa3, 0x34, 0x40}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:45:10.379527 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.821084ms
DB: 2020/08/16 01:45:10.380259 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.641031ms
SaveRDFNode: 2020/08/16 01:45:10.380270 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346360)}
SaveRDFNode: 2020/08/16 01:45:10.380276 Received UID: X18=
SaveRDFNode: 2020/08/16 01:45:10.380286 a: = db.Item{PKey:[]uint8{0xbd, 0x58, 0x1c, 0x47, 0x88, 0xe2, 0x49, 0xb4, 0x9a, 0x75, 0x5a, 0x62, 0x36, 0xa3, 0x34, 0x40}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:45:10.382907 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: TF3GKEDOQCDT55MRA8F2A6PCPVVV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 01:45:10.383028 Looping..... 0
grmgr: 2020/08/16 01:45:10.383052 Looping..... 1
grmgr: 2020/08/16 01:45:10.383209 Looping..... 2
DB: 2020/08/16 01:45:10.383330 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.758236ms
SaveRDFNode: 2020/08/16 01:45:10.383341 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000347500)}
SaveRDFNode: 2020/08/16 01:45:10.383348 Received UID: X18=
SaveRDFNode: 2020/08/16 01:45:10.383358 a: = db.Item{PKey:[]uint8{0x43, 0x65, 0xa6, 0x6b, 0x4d, 0xc3, 0x40, 0x71, 0x91, 0x36, 0xb4, 0xc5, 0x78, 0x43, 0xd0, 0x59}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
grmgr: 2020/08/16 01:45:10.383547 Looping..... 3
grmgr: 2020/08/16 01:45:10.383741 Looping..... 4
DB: 2020/08/16 01:45:10.383931 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.616671ms
grmgr: 2020/08/16 01:45:10.383966 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 01:45:10.383973 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 01:45:10.383977 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 01:45:10.384003 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.384009 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.384015 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:45:10.384021 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:45:10.384025 SaveRDFNode : 4 
SaveRDFNode: 2020/08/16 01:45:10.384030 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000158d20)}
SaveRDFNode: 2020/08/16 01:45:10.384034 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:45:10.384043 UID received  : Wu8q/2LrSmK+rpS6z0OuoQ==
unmarshalRDF: 2020/08/16 01:45:10.384220 Entered unmarshalRDF. 
SaveRDFNode: 2020/08/16 01:45:10.384229 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:45:10.384234 StartCh received for saveNode. rCnt = 2 
grmgr: 2020/08/16 01:45:10.384239 StartCh received for unmarshall. rCnt = 1 
unmarshalRDF: 2020/08/16 01:45:10.384244 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:45:10.384251 EndCh received for unmarshall. rCnt = 0 
DB: 2020/08/16 01:45:10.387105 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.714356ms
SaveRDFNode: 2020/08/16 01:45:10.387117 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000347500)}
SaveRDFNode: 2020/08/16 01:45:10.387124 Received UID: X18=
SaveRDFNode: 2020/08/16 01:45:10.387133 a: = db.Item{PKey:[]uint8{0x43, 0x65, 0xa6, 0x6b, 0x4d, 0xc3, 0x40, 0x71, 0x91, 0x36, 0xb4, 0xc5, 0x78, 0x43, 0xd0, 0x59}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:45:10.387752 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.68282ms
DB: 2020/08/16 01:45:10.390950 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.788055ms
SaveRDFNode: 2020/08/16 01:45:10.390959 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:45:10.390967 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 01:45:10.391378 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.590751ms
SaveRDFNode: 2020/08/16 01:45:10.391390 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000158d20)}
SaveRDFNode: 2020/08/16 01:45:10.391397 Received UID: X18=
SaveRDFNode: 2020/08/16 01:45:10.391407 a: = db.Item{PKey:[]uint8{0x5a, 0xef, 0x2a, 0xff, 0x62, 0xeb, 0x4a, 0x62, 0xbe, 0xae, 0x94, 0xba, 0xcf, 0x43, 0xae, 0xa1}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:45:10.395441 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.006395ms
SaveRDFNode: 2020/08/16 01:45:10.395453 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000158d20)}
SaveRDFNode: 2020/08/16 01:45:10.395460 Received UID: X18=
SaveRDFNode: 2020/08/16 01:45:10.395470 a: = db.Item{PKey:[]uint8{0x5a, 0xef, 0x2a, 0xff, 0x62, 0xeb, 0x4a, 0x62, 0xbe, 0xae, 0x94, 0xba, 0xcf, 0x43, 0xae, 0xa1}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:45:10.399391 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.890126ms
SaveRDFNode: 2020/08/16 01:45:10.399509 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 01:45:10.399521 saveNode finished waiting...exiting
grmgr: 2020/08/16 01:45:10.399528 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 01:45:10.399541 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.414917 About to run AttachNodeCh: abc  d  vVgcR4jiSbSadVpiNqM0QA== Wu8q/2LrSmK+rpS6z0OuoQ==
anmgr 2020/08/16 01:45:10.415061 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:45:10.415075 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 01:45:10.415081 Looping..... 0
grmgr: 2020/08/16 01:45:10.415095 Looping..... 1
grmgr: 2020/08/16 01:45:10.415234 Looping..... 2
grmgr: 2020/08/16 01:45:10.415408 Looping..... 3
grmgr: 2020/08/16 01:45:10.415581 Looping..... 4
grmgr: 2020/08/16 01:45:10.415757 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:45:10.415767 goroutine about to start 1 cUID,pUID   vVgcR4jiSbSadVpiNqM0QA==  Wu8q/2LrSmK+rpS6z0OuoQ==  
grmgr: 2020/08/16 01:45:10.416614 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:45:10.419255 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.844859ms
DB: 2020/08/16 01:45:10.421918 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.629425ms
DB: 2020/08/16 01:45:10.425985 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.012636ms
anmgr 2020/08/16 01:45:10.430684 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.433032 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.490314ms
AttachNode: main 2020/08/16 01:45:10.433056 FetchForUpdate: for parent    Wu8q/2LrSmK+rpS6z0OuoQ==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 01:45:10.433061 ** Cache FetchForUpdate Cache Key Value: [Wu8q/2LrSmK+rpS6z0OuoQ==]   sortk: A#G#:F
FetchNode: 2020/08/16 01:45:10.433067  node: Wu8q/2LrSmK+rpS6z0OuoQ== subKey: A#G#:F
AttachNode: gr1 2020/08/16 01:45:10.433260 FetchForUpdate: for child    vVgcR4jiSbSadVpiNqM0QA==
FetchForUpdate: 2020/08/16 01:45:10.433286 ** Cache FetchForUpdate Cache Key Value: [vVgcR4jiSbSadVpiNqM0QA==]   sortk: A#
FetchNode: 2020/08/16 01:45:10.433301  node: vVgcR4jiSbSadVpiNqM0QA== subKey: A#
DB: 2020/08/16 01:45:10.436247 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.143035ms
FetchForUpdate: 2020/08/16 01:45:10.436313 len(nb): 1
fetchItems: 2020/08/16 01:45:10.436321 +++  Cache FetchItems for sortk A#G#:F UID: [Wu8q/2LrSmK+rpS6z0OuoQ==] 
FetchNode: 2020/08/16 01:45:10.436326  node: Wu8q/2LrSmK+rpS6z0OuoQ== subKey: A#G#:F
DB: 2020/08/16 01:45:10.440208 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.853288ms
DB: 2020/08/16 01:45:10.441259 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 7.890999ms
FetchForUpdate: 2020/08/16 01:45:10.441403 len(nb): 7
fetchItems: 2020/08/16 01:45:10.441413 +++  Cache FetchItems for sortk A# UID: [vVgcR4jiSbSadVpiNqM0QA==] 
FetchNode: 2020/08/16 01:45:10.441417  node: vVgcR4jiSbSadVpiNqM0QA== subKey: A#
DB: 2020/08/16 01:45:10.444839 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.006345ms
DB: 2020/08/16 01:45:10.445513 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.067623ms
anmgr 2020/08/16 01:45:10.448863 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.456410 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.906378ms
DB: 2020/08/16 01:45:10.460567 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.950544ms
anmgr 2020/08/16 01:45:10.464358 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.465078 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.1389ms
DB: 2020/08/16 01:45:10.471871 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.481721ms
DB: 2020/08/16 01:45:10.476206 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.037916ms
anmgr 2020/08/16 01:45:10.479734 About to run AttachNodeCh: b  c  N34hFh8RQxWfzzN2uY9lXg== Q2Wma03DQHGRNrTFeEPQWQ==
anmgr 2020/08/16 01:45:10.479750 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:45:10.479758 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 01:45:10.479764 Looping..... 0
grmgr: 2020/08/16 01:45:10.479778 Looping..... 1
grmgr: 2020/08/16 01:45:10.479905 Looping..... 2
grmgr: 2020/08/16 01:45:10.480078 Looping..... 3
grmgr: 2020/08/16 01:45:10.480253 Looping..... 4
grmgr: 2020/08/16 01:45:10.480428 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:45:10.480438 goroutine about to start 2 cUID,pUID   N34hFh8RQxWfzzN2uY9lXg==  Q2Wma03DQHGRNrTFeEPQWQ==  
grmgr: 2020/08/16 01:45:10.480796 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 01:45:10.481558 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.054926ms
DB: 2020/08/16 01:45:10.484658 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.55374ms
DB: 2020/08/16 01:45:10.487293 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.597281ms
DB: 2020/08/16 01:45:10.489092 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.939769ms
DB: 2020/08/16 01:45:10.491596 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.223757ms
DB: 2020/08/16 01:45:10.494096 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.939023ms
anmgr 2020/08/16 01:45:10.495212 for loop finished 0  6 
anmgr 2020/08/16 01:45:10.495226 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.495233 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.495237 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.496515 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.736125ms
AttachNode: main 2020/08/16 01:45:10.496526 FetchForUpdate: for parent    Q2Wma03DQHGRNrTFeEPQWQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:45:10.496531 ** Cache FetchForUpdate Cache Key Value: [Q2Wma03DQHGRNrTFeEPQWQ==]   sortk: A#G#:S
FetchNode: 2020/08/16 01:45:10.496537  node: Q2Wma03DQHGRNrTFeEPQWQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:45:10.496732 FetchForUpdate: for child    N34hFh8RQxWfzzN2uY9lXg==
FetchForUpdate: 2020/08/16 01:45:10.496741 ** Cache FetchForUpdate Cache Key Value: [N34hFh8RQxWfzzN2uY9lXg==]   sortk: A#
FetchNode: 2020/08/16 01:45:10.496753  node: N34hFh8RQxWfzzN2uY9lXg== subKey: A#
DB: 2020/08/16 01:45:10.498581 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.166512ms
DB: 2020/08/16 01:45:10.499383 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.792906ms
FetchForUpdate: 2020/08/16 01:45:10.499456 len(nb): 1
fetchItems: 2020/08/16 01:45:10.499466 +++  Cache FetchItems for sortk A#G#:S UID: [Q2Wma03DQHGRNrTFeEPQWQ==] 
FetchNode: 2020/08/16 01:45:10.499470  node: Q2Wma03DQHGRNrTFeEPQWQ== subKey: A#G#:S
DB: 2020/08/16 01:45:10.503187 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 6  Duration: 6.392278ms
FetchForUpdate: 2020/08/16 01:45:10.503301 len(nb): 6
fetchItems: 2020/08/16 01:45:10.503310 +++  Cache FetchItems for sortk A# UID: [N34hFh8RQxWfzzN2uY9lXg==] 
FetchNode: 2020/08/16 01:45:10.503328  node: N34hFh8RQxWfzzN2uY9lXg== subKey: A#
DB: 2020/08/16 01:45:10.505238 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.448887ms
Cache: 2020/08/16 01:45:10.505252 In SetUpredAvailable: pUid, tUID:  Wu8q/2LrSmK+rpS6z0OuoQ== Wu8q/2LrSmK+rpS6z0OuoQ== A#G#:F
Cache: 2020/08/16 01:45:10.505258 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:45:10.509253 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 9.752433ms
DB: 2020/08/16 01:45:10.511152 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 6  Duration: 7.792126ms
anmgr 2020/08/16 01:45:10.514270 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.527564 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 22.265415ms
Unlock: 2020/08/16 01:45:10.527578 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:45:10.527583 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 01:45:10.529611 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.531190 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 20.898631ms
DB: 2020/08/16 01:45:10.538115 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.374916ms
DB: 2020/08/16 01:45:10.542355 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.815444ms
anmgr 2020/08/16 01:45:10.545105 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.545117 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.545123 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.547360 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 19.671075ms
grmgr: 2020/08/16 01:45:10.547375 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 01:45:10.550293 ** received on attachDoneCh.... 1
anmgr 2020/08/16 01:45:10.555470 for loop finished 1  6 
anmgr 2020/08/16 01:45:10.555486 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.555493 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.555498 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.557332 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 14.362734ms
DB: 2020/08/16 01:45:10.563685 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.849181ms
DB: 2020/08/16 01:45:10.568673 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.535974ms
anmgr 2020/08/16 01:45:10.570934 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.573234 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.077165ms
DB: 2020/08/16 01:45:10.579976 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.310368ms
DB: 2020/08/16 01:45:10.584460 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.019309ms
anmgr 2020/08/16 01:45:10.586346 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.589045 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.118283ms
DB: 2020/08/16 01:45:10.593567 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.1512ms
Cache: 2020/08/16 01:45:10.593580 In SetUpredAvailable: pUid, tUID:  Q2Wma03DQHGRNrTFeEPQWQ== Q2Wma03DQHGRNrTFeEPQWQ== A#G#:S
Cache: 2020/08/16 01:45:10.593585 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:45:10.597512 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.892483ms
Unlock: 2020/08/16 01:45:10.597522 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:45:10.597526 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 01:45:10.601792 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.601804 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.601809 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.601891 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.310374ms
grmgr: 2020/08/16 01:45:10.601903 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:45:10.606974 ** received on attachDoneCh.... 1
anmgr 2020/08/16 01:45:10.612142 About to run AttachNodeCh: c  abc  Q2Wma03DQHGRNrTFeEPQWQ== vVgcR4jiSbSadVpiNqM0QA==
anmgr 2020/08/16 01:45:10.612155 for loop finished 2  6 
anmgr 2020/08/16 01:45:10.612162 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.612168 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.612173 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:45:10.612181 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 01:45:10.612186 Looping..... 0
grmgr: 2020/08/16 01:45:10.612388 Looping..... 1
grmgr: 2020/08/16 01:45:10.612562 Looping..... 2
grmgr: 2020/08/16 01:45:10.612753 Looping..... 3
grmgr: 2020/08/16 01:45:10.612945 Looping..... 4
grmgr: 2020/08/16 01:45:10.613137 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:45:10.613147 goroutine about to start 3 cUID,pUID   Q2Wma03DQHGRNrTFeEPQWQ==  vVgcR4jiSbSadVpiNqM0QA==  
grmgr: 2020/08/16 01:45:10.613359 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:45:10.616850 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.638657ms
DB: 2020/08/16 01:45:10.620951 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.07077ms
DB: 2020/08/16 01:45:10.625204 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.178222ms
anmgr 2020/08/16 01:45:10.627601 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.629786 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.208635ms
AttachNode: main 2020/08/16 01:45:10.629798 FetchForUpdate: for parent    vVgcR4jiSbSadVpiNqM0QA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:45:10.629804 ** Cache FetchForUpdate Cache Key Value: [vVgcR4jiSbSadVpiNqM0QA==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:45:10.629810 +++  Cache FetchItems for sortk A#G#:S UID: [vVgcR4jiSbSadVpiNqM0QA==] 
FetchNode: 2020/08/16 01:45:10.629814  node: vVgcR4jiSbSadVpiNqM0QA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:45:10.629998 FetchForUpdate: for child    Q2Wma03DQHGRNrTFeEPQWQ==
FetchForUpdate: 2020/08/16 01:45:10.630006 ** Cache FetchForUpdate Cache Key Value: [Q2Wma03DQHGRNrTFeEPQWQ==]   sortk: A#
fetchItems: 2020/08/16 01:45:10.630011 +++  Cache FetchItems for sortk A# UID: [Q2Wma03DQHGRNrTFeEPQWQ==] 
FetchNode: 2020/08/16 01:45:10.630025  node: Q2Wma03DQHGRNrTFeEPQWQ== subKey: A#
DB: 2020/08/16 01:45:10.633359 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 9  Duration: 3.242285ms
fetchItems: 2020/08/16 01:45:10.633499 +++  Cache FetchItems for sortk A# UID: [Q2Wma03DQHGRNrTFeEPQWQ==] 
FetchNode: 2020/08/16 01:45:10.633516  node: Q2Wma03DQHGRNrTFeEPQWQ== subKey: A#
DB: 2020/08/16 01:45:10.637565 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 9  Duration: 4.007981ms
DB: 2020/08/16 01:45:10.638845 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 8.997699ms
anmgr 2020/08/16 01:45:10.643892 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.644629 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.137208ms
DB: 2020/08/16 01:45:10.651013 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.319663ms
DB: 2020/08/16 01:45:10.654995 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.931082ms
anmgr 2020/08/16 01:45:10.659322 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.659337 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.659342 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.659347 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.659352 for loop finished 2  6 
anmgr 2020/08/16 01:45:10.659357 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.659362 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.659367 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.659940 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.832052ms
DB: 2020/08/16 01:45:10.666282 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.255922ms
DB: 2020/08/16 01:45:10.670424 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.98389ms
anmgr 2020/08/16 01:45:10.674852 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.675777 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.872692ms
DB: 2020/08/16 01:45:10.681954 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.596059ms
DB: 2020/08/16 01:45:10.686358 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.867977ms
anmgr 2020/08/16 01:45:10.690364 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.691072 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.183896ms
DB: 2020/08/16 01:45:10.695126 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.760483ms
Cache: 2020/08/16 01:45:10.695139 In SetUpredAvailable: pUid, tUID:  vVgcR4jiSbSadVpiNqM0QA== vVgcR4jiSbSadVpiNqM0QA== A#G#:S
Cache: 2020/08/16 01:45:10.695144 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:45:10.699234 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.05312ms
Unlock: 2020/08/16 01:45:10.699351 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:45:10.699361 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:45:10.703582 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.150025ms
grmgr: 2020/08/16 01:45:10.703596 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:45:10.705908 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.705919 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.705924 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.705930 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.705934 for loop finished 2  6 
anmgr 2020/08/16 01:45:10.705939 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.705944 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.705949 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.705954 ** received on attachDoneCh.... 0
anmgr 2020/08/16 01:45:10.716214 About to run AttachNodeCh: abc  b  vVgcR4jiSbSadVpiNqM0QA== N34hFh8RQxWfzzN2uY9lXg==
anmgr 2020/08/16 01:45:10.716230 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:45:10.716237 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 01:45:10.716243 Looping..... 0
grmgr: 2020/08/16 01:45:10.716329 Looping..... 1
grmgr: 2020/08/16 01:45:10.716369 Looping..... 2
grmgr: 2020/08/16 01:45:10.716558 Looping..... 3
grmgr: 2020/08/16 01:45:10.716732 Looping..... 4
grmgr: 2020/08/16 01:45:10.716908 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:45:10.716918 goroutine about to start 4 cUID,pUID   vVgcR4jiSbSadVpiNqM0QA==  N34hFh8RQxWfzzN2uY9lXg==  
grmgr: 2020/08/16 01:45:10.717129 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:45:10.719922 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.938742ms
DB: 2020/08/16 01:45:10.723171 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.218859ms
DB: 2020/08/16 01:45:10.727366 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.143872ms
anmgr 2020/08/16 01:45:10.731756 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.731960 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.311034ms
AttachNode: main 2020/08/16 01:45:10.731974 FetchForUpdate: for parent    N34hFh8RQxWfzzN2uY9lXg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:45:10.731979 ** Cache FetchForUpdate Cache Key Value: [N34hFh8RQxWfzzN2uY9lXg==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:45:10.731985 +++  Cache FetchItems for sortk A#G#:S UID: [N34hFh8RQxWfzzN2uY9lXg==] 
FetchNode: 2020/08/16 01:45:10.731989  node: N34hFh8RQxWfzzN2uY9lXg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:45:10.732171 FetchForUpdate: for child    vVgcR4jiSbSadVpiNqM0QA==
FetchForUpdate: 2020/08/16 01:45:10.732180 ** Cache FetchForUpdate Cache Key Value: [vVgcR4jiSbSadVpiNqM0QA==]   sortk: A#
fetchItems: 2020/08/16 01:45:10.732185 +++  Cache FetchItems for sortk A# UID: [vVgcR4jiSbSadVpiNqM0QA==] 
FetchNode: 2020/08/16 01:45:10.732197  node: vVgcR4jiSbSadVpiNqM0QA== subKey: A#
DB: 2020/08/16 01:45:10.735621 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.345172ms
DB: 2020/08/16 01:45:10.737314 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.290917ms
DB: 2020/08/16 01:45:10.742240 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.347801ms
anmgr 2020/08/16 01:45:10.748805 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.748820 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.748827 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.748833 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.748838 for loop finished 3  6 
anmgr 2020/08/16 01:45:10.748843 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.748849 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.748854 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.748862 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.748867 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.749066 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.282754ms
DB: 2020/08/16 01:45:10.753619 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.303573ms
DB: 2020/08/16 01:45:10.758443 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.265868ms
anmgr 2020/08/16 01:45:10.766930 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.768176 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.61469ms
DB: 2020/08/16 01:45:10.772085 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.852336ms
DB: 2020/08/16 01:45:10.777098 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.945575ms
DB: 2020/08/16 01:45:10.782675 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.517371ms
anmgr 2020/08/16 01:45:10.783222 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.783318 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.783329 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.783335 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.783339 for loop finished 3  6 
anmgr 2020/08/16 01:45:10.783344 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.783378 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.783384 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.783389 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.783394 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.786876 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.146608ms
DB: 2020/08/16 01:45:10.796936 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 9.991301ms
anmgr 2020/08/16 01:45:10.798847 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.801279 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.16713ms
Cache: 2020/08/16 01:45:10.801292 In SetUpredAvailable: pUid, tUID:  N34hFh8RQxWfzzN2uY9lXg== N34hFh8RQxWfzzN2uY9lXg== A#G#:S
Cache: 2020/08/16 01:45:10.801298 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:45:10.805542 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.206147ms
Unlock: 2020/08/16 01:45:10.805552 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:45:10.805557 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:45:10.809844 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.229317ms
grmgr: 2020/08/16 01:45:10.809859 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:45:10.814307 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.814395 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.814405 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.814411 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.814415 for loop finished 3  6 
anmgr 2020/08/16 01:45:10.814420 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.814425 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.814430 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.814435 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.814440 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.814461 ** received on attachDoneCh.... 0
anmgr 2020/08/16 01:45:10.824776 About to run AttachNodeCh: abc  c  vVgcR4jiSbSadVpiNqM0QA== Q2Wma03DQHGRNrTFeEPQWQ==
anmgr 2020/08/16 01:45:10.824792 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:45:10.824800 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 01:45:10.824805 Looping..... 0
grmgr: 2020/08/16 01:45:10.824947 Looping..... 1
grmgr: 2020/08/16 01:45:10.825122 Looping..... 2
grmgr: 2020/08/16 01:45:10.825297 Looping..... 3
grmgr: 2020/08/16 01:45:10.825472 Looping..... 4
grmgr: 2020/08/16 01:45:10.825648 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:45:10.825658 goroutine about to start 5 cUID,pUID   vVgcR4jiSbSadVpiNqM0QA==  Q2Wma03DQHGRNrTFeEPQWQ==  
grmgr: 2020/08/16 01:45:10.825817 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:45:10.829026 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.000617ms
DB: 2020/08/16 01:45:10.832845 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.789281ms
DB: 2020/08/16 01:45:10.837107 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.087411ms
anmgr 2020/08/16 01:45:10.840180 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.840214 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.840219 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.840231 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.840236 for loop finished 4  6 
anmgr 2020/08/16 01:45:10.840240 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.840245 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.840250 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.840254 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.840259 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.840264 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.840268 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.841367 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.957314ms
AttachNode: main 2020/08/16 01:45:10.841382 FetchForUpdate: for parent    Q2Wma03DQHGRNrTFeEPQWQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:45:10.841388 ** Cache FetchForUpdate Cache Key Value: [Q2Wma03DQHGRNrTFeEPQWQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:45:10.841393 +++  Cache FetchItems for sortk A#G#:S UID: [Q2Wma03DQHGRNrTFeEPQWQ==] 
FetchNode: 2020/08/16 01:45:10.841398  node: Q2Wma03DQHGRNrTFeEPQWQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:45:10.841746 FetchForUpdate: for child    vVgcR4jiSbSadVpiNqM0QA==
FetchForUpdate: 2020/08/16 01:45:10.841756 ** Cache FetchForUpdate Cache Key Value: [vVgcR4jiSbSadVpiNqM0QA==]   sortk: A#
fetchItems: 2020/08/16 01:45:10.841762 +++  Cache FetchItems for sortk A# UID: [vVgcR4jiSbSadVpiNqM0QA==] 
FetchNode: 2020/08/16 01:45:10.841776  node: vVgcR4jiSbSadVpiNqM0QA== subKey: A#
DB: 2020/08/16 01:45:10.844783 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.198868ms
DB: 2020/08/16 01:45:10.845888 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.048142ms
DB: 2020/08/16 01:45:10.849405 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.087831ms
DB: 2020/08/16 01:45:10.853505 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.061503ms
DB: 2020/08/16 01:45:10.853522 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.061503ms
anmgr 2020/08/16 01:45:10.855798 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.855811 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.855816 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.855821 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.855826 for loop finished 4  6 
anmgr 2020/08/16 01:45:10.855831 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.855836 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.855841 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.855846 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.855851 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.855856 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.855861 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.857600 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.04567ms
DB: 2020/08/16 01:45:10.857622 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.04567ms
DB: 2020/08/16 01:45:10.862027 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.185433ms
DB: 2020/08/16 01:45:10.866784 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.575395ms
anmgr 2020/08/16 01:45:10.871383 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.871398 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.871403 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.871409 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.871414 for loop finished 4  6 
anmgr 2020/08/16 01:45:10.871418 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.871423 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.871428 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.871433 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.871438 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.871443 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.871447 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.874200 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.741131ms
DB: 2020/08/16 01:45:10.878208 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.834454ms
DB: 2020/08/16 01:45:10.883032 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.287814ms
anmgr 2020/08/16 01:45:10.886905 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.886921 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.886927 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.886933 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.886937 for loop finished 4  6 
anmgr 2020/08/16 01:45:10.886942 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.886948 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.886952 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.886958 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.886963 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.886967 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.886973 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.889963 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.373209ms
DB: 2020/08/16 01:45:10.894190 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.919134ms
DB: 2020/08/16 01:45:10.900478 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.936634ms
anmgr 2020/08/16 01:45:10.902393 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.902407 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.902412 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.902418 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.902422 for loop finished 4  6 
anmgr 2020/08/16 01:45:10.902427 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.902441 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.902446 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.902451 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.902456 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.902461 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.902465 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.907459 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.41086ms
DB: 2020/08/16 01:45:10.912240 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.326283ms
anmgr 2020/08/16 01:45:10.918409 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.918425 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.918432 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.918438 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.918443 for loop finished 4  6 
anmgr 2020/08/16 01:45:10.918448 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.918454 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.918459 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.918465 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.918470 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.918475 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.918480 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.920809 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 8.259297ms
DB: 2020/08/16 01:45:10.925949 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.83394ms
Cache: 2020/08/16 01:45:10.925961 In SetUpredAvailable: pUid, tUID:  Q2Wma03DQHGRNrTFeEPQWQ== Ed/WCENdRie4YQmUZYOIiQ== A#G#:S
Cache: 2020/08/16 01:45:10.925967 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:45:10.930274 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.251701ms
Unlock: 2020/08/16 01:45:10.930284 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:45:10.930288 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 01:45:10.933957 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.933972 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.933978 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.933984 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.933989 for loop finished 4  6 
anmgr 2020/08/16 01:45:10.933994 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.933999 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"d", Sortk:"A#G#:F"}
anmgr 2020/08/16 01:45:10.934004 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.934009 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.934015 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.934020 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.934025 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:45:10.934690 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.345986ms
grmgr: 2020/08/16 01:45:10.934715 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:45:10.939198 ** received on attachDoneCh.... 1
anmgr 2020/08/16 01:45:10.944383 About to run AttachNodeCh: b  abc  N34hFh8RQxWfzzN2uY9lXg== vVgcR4jiSbSadVpiNqM0QA==
anmgr 2020/08/16 01:45:10.944399 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.944405 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.944410 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.944416 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:45:10.944420 for loop finished 5  6 
attachNode: 2020/08/16 01:45:10.944426 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 01:45:10.944432 Looping..... 0
grmgr: 2020/08/16 01:45:10.944554 Looping..... 1
grmgr: 2020/08/16 01:45:10.944730 Looping..... 2
grmgr: 2020/08/16 01:45:10.944906 Looping..... 3
grmgr: 2020/08/16 01:45:10.945083 Looping..... 4
grmgr: 2020/08/16 01:45:10.945260 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:45:10.945270 goroutine about to start 6 cUID,pUID   N34hFh8RQxWfzzN2uY9lXg==  vVgcR4jiSbSadVpiNqM0QA==  
rdfLoader: 2020/08/16 01:45:10.945276 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 01:45:10.945790 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:45:10.948456 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.848098ms
DB: 2020/08/16 01:45:10.951207 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.719294ms
DB: 2020/08/16 01:45:10.955423 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.055296ms
DB: 2020/08/16 01:45:10.960076 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.360474ms
AttachNode: main 2020/08/16 01:45:10.960092 FetchForUpdate: for parent    vVgcR4jiSbSadVpiNqM0QA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:45:10.960097 ** Cache FetchForUpdate Cache Key Value: [vVgcR4jiSbSadVpiNqM0QA==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:45:10.960103 +++  Cache FetchItems for sortk A#G#:S UID: [vVgcR4jiSbSadVpiNqM0QA==] 
FetchNode: 2020/08/16 01:45:10.960108  node: vVgcR4jiSbSadVpiNqM0QA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:45:10.960304 FetchForUpdate: for child    N34hFh8RQxWfzzN2uY9lXg==
FetchForUpdate: 2020/08/16 01:45:10.960312 ** Cache FetchForUpdate Cache Key Value: [N34hFh8RQxWfzzN2uY9lXg==]   sortk: A#
fetchItems: 2020/08/16 01:45:10.960318 +++  Cache FetchItems for sortk A# UID: [N34hFh8RQxWfzzN2uY9lXg==] 
FetchNode: 2020/08/16 01:45:10.960370  node: N34hFh8RQxWfzzN2uY9lXg== subKey: A#
DB: 2020/08/16 01:45:10.964402 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 9  Duration: 3.985714ms
DB: 2020/08/16 01:45:10.966126 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.985002ms
DB: 2020/08/16 01:45:10.971217 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.500826ms
DB: 2020/08/16 01:45:10.975550 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.297605ms
DB: 2020/08/16 01:45:10.975576 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.297605ms
DB: 2020/08/16 01:45:10.980235 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.624168ms
DB: 2020/08/16 01:45:10.980252 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.624168ms
DB: 2020/08/16 01:45:10.984952 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.611482ms
DB: 2020/08/16 01:45:10.989773 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.710888ms
DB: 2020/08/16 01:45:11.055127 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 65.248754ms
DB: 2020/08/16 01:45:11.067322 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 12.108677ms
DB: 2020/08/16 01:45:11.072718 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.277391ms
DB: 2020/08/16 01:45:11.078821 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.035974ms
DB: 2020/08/16 01:45:11.083673 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.788033ms
DB: 2020/08/16 01:45:11.088271 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.529467ms
DB: 2020/08/16 01:45:11.094494 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.919441ms
DB: 2020/08/16 01:45:11.098660 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.884462ms
DB: 2020/08/16 01:45:11.103221 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.260879ms
DB: 2020/08/16 01:45:11.107776 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.358905ms
Cache: 2020/08/16 01:45:11.107789 In SetUpredAvailable: pUid, tUID:  vVgcR4jiSbSadVpiNqM0QA== zbEIkSbHT823DH0P6flvQQ== A#G#:S
Cache: 2020/08/16 01:45:11.107794 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:45:11.111933 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.10398ms
Unlock: 2020/08/16 01:45:11.111949 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:45:11.111955 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:45:11.116295 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.261717ms
grmgr: 2020/08/16 01:45:11.116314 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 01:45:11.116320 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 01:45:11.116326 11.....
rdfLoader: 2020/08/16 01:45:11.116333 22.....error cnt: 5
rdfuuid: 2020/08/16 01:45:11.117073 Powering down...
errlog: 2020/08/16 01:45:11.117082 Powering down...
grmgr: 2020/08/16 01:45:11.117087 Powering down...
anmgr: 2020/08/16 01:45:11.117091 Powering down...
rdfLoader: 2020/08/16 01:45:11.117096 loader exists.....
DB:2020/08/16 01:57:15 log.go:18: ===============================================================================
anmgr: 2020/08/16 01:57:15.090536 Powering on...
rdfLoader: 2020/08/16 01:57:15.090909 saveNode started......
rdfLoader: 2020/08/16 01:57:15.090923 define saveNode limiter......
rdfuuid: 2020/08/16 01:57:15.090927 Powering on...
grmgr: 2020/08/16 01:57:15.090946 Powering on...
errlog: 2020/08/16 01:57:15.090960 Powering on...
rdfLoader: 2020/08/16 01:57:15.090967  principle goroutines started 
RDFreader: 2020/08/16 01:57:15.091008 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:57:15.091024 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 01:57:15.091031 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 01:57:15.091037 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 01:57:15.091042 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 01:57:15.091047 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 01:57:15.091052 spo read:      
RDFreader: 2020/08/16 01:57:15.091057 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 01:57:15.091062 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 01:57:15.091066 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 01:57:15.091078 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 01:57:15.091083 spo read:      
RDFreader: 2020/08/16 01:57:15.091088 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 01:57:15.091092 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 01:57:15.091097 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 01:57:15.091102 spo read:  b  Age  "58"
RDFreader: 2020/08/16 01:57:15.091107 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 01:57:15.091111 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 01:57:15.091116 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 01:57:15.091121 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 01:57:15.091125 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 01:57:15.091129 spo read:      
RDFreader: 2020/08/16 01:57:15.091134 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 01:57:15.091138 Send node batch on channel verifyCh
RDFreader: 2020/08/16 01:57:15.091146 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:57:15.091150 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 01:57:15.091155 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 01:57:15.091161 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 01:57:15.091166 spo read:  c  Age  "67"
RDFreader: 2020/08/16 01:57:15.091171 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 01:57:15.091176 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 01:57:15.091180 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 01:57:15.091185 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 01:57:15.091191 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 01:57:15.091196 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 01:57:15.091200 spo read:      
RDFreader: 2020/08/16 01:57:15.091205 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 01:57:15.091209 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 01:57:15.091214 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 01:57:15.091219 spo read:  d  Age  "36"
RDFreader: 2020/08/16 01:57:15.091223 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 01:57:15.091229 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 01:57:15.091233 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 01:57:15.091238 close verify channel
rdfLoader: 2020/08/16 01:57:15.091242 verify started....
rdfLoader: 2020/08/16 01:57:15.091246 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:57:15.091250 .  getType..
rdfLoader: 2020/08/16 01:57:15.091254 node.TyName : [Person]
DB: 2020/08/16 01:57:15.163027 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 71.706958ms
grmgr: 2020/08/16 01:57:15.163733 Looping..... 0
grmgr: 2020/08/16 01:57:15.165010 Looping..... 1
grmgr: 2020/08/16 01:57:15.165201 Looping..... 2
grmgr: 2020/08/16 01:57:15.165379 Looping..... 3
grmgr: 2020/08/16 01:57:15.165557 Looping..... 4
grmgr: 2020/08/16 01:57:15.165736 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:57:15.165747 .  getType..
rdfLoader: 2020/08/16 01:57:15.165751 node.TyName : [Person]
grmgr: 2020/08/16 01:57:15.165757 Looping..... 0
unmarshalRDF: 2020/08/16 01:57:15.165770 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:57:15.165780 Looping..... 1
grmgr: 2020/08/16 01:57:15.165785 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 01:57:15.165789 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:57:15.165796 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:57:15.165800 .  getType..
rdfLoader: 2020/08/16 01:57:15.165804 node.TyName : [Person]
grmgr: 2020/08/16 01:57:15.165808 Looping..... 0
rdfLoader: 2020/08/16 01:57:15.165818 Add to SS . [Honda]
rdfLoader: 2020/08/16 01:57:15.165822 Add to SS . [Alfa]
anmgr 2020/08/16 01:57:15.165856 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.165864 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 01:57:15.165905 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:57:15.165920 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 01:57:15.165930 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:57:15.165955 Looping..... 1
grmgr: 2020/08/16 01:57:15.165960 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 01:57:15.165964 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 01:57:15.165968 Looping..... 0
rdfLoader: 2020/08/16 01:57:15.165977 Add to SS . [Honda]
rdfLoader: 2020/08/16 01:57:15.165981 Add to SS . [VW Golf]
anmgr 2020/08/16 01:57:15.166008 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.166014 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 01:57:15.166040 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:57:15.166044 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 01:57:15.166049 .  getType..
rdfLoader: 2020/08/16 01:57:15.166052 node.TyName : [Person]
unmarshalRDF: 2020/08/16 01:57:15.166060 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:57:15.166082 Looping..... 1
rdfLoader: 2020/08/16 01:57:15.166090 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 01:57:15.166094 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 01:57:15.166107 Add to SS . [Honda]
anmgr 2020/08/16 01:57:15.166120 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.166126 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 01:57:15.166152 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:57:15.166156 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:57:15.166179 Looping..... 2
grmgr: 2020/08/16 01:57:15.166364 Looping..... 3
grmgr: 2020/08/16 01:57:15.166539 Looping..... 4
grmgr: 2020/08/16 01:57:15.166722 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 01:57:15.166730 Looping..... 0
grmgr: 2020/08/16 01:57:15.166756 Looping..... 1
SaveRDFNode: xxx 2020/08/16 01:57:15.166765 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.166783 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.166789 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.166799 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.166805 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.166810 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.166815 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:57:15.166819 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 01:57:15.166826 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000348120)}
SaveRDFNode: 2020/08/16 01:57:15.166830 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:57:15.166851 UID received  : YvnqxdiwRgqTBVMwS8GatA==
grmgr: 2020/08/16 01:57:15.167100 Looping..... 2
grmgr: 2020/08/16 01:57:15.167283 Looping..... 3
grmgr: 2020/08/16 01:57:15.167457 Looping..... 4
grmgr: 2020/08/16 01:57:15.167632 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 01:57:15.167640 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 01:57:15.167656 Looping..... 0
unmarshalRDF: 2020/08/16 01:57:15.167670 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:57:15.167679 Looping..... 1
rdfLoader: 2020/08/16 01:57:15.167688 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 01:57:15.167719 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:57:15.167723 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:57:15.167732 Looping..... 2
grmgr: 2020/08/16 01:57:15.167807 Looping..... 3
grmgr: 2020/08/16 01:57:15.167980 Looping..... 4
grmgr: 2020/08/16 01:57:15.168181 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 01:57:15.168190 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 01:57:15.168195 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:57:15.168199 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 01:57:15.168207 Looping..... 0
grmgr: 2020/08/16 01:57:15.168231 Looping..... 1
grmgr: 2020/08/16 01:57:15.168236 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 01:57:15.168240 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 01:57:15.168248 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.168253 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.168260 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.168266 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.168271 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.168276 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.168281 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:57:15.168285 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 01:57:15.168290 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0003486c0)}
SaveRDFNode: 2020/08/16 01:57:15.168299 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:57:15.168307 UID received  : +c9jKlShReCSEgc1fAn4LA==
DB: 2020/08/16 01:57:15.177769 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.87735ms
DB: 2020/08/16 01:57:15.182145 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.343389ms
DB: 2020/08/16 01:57:15.186927 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.547959ms
DB: 2020/08/16 01:57:15.191625 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.632779ms
DB: 2020/08/16 01:57:15.196213 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.553882ms
SaveRDFNode: 2020/08/16 01:57:15.196226 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000348120)}
SaveRDFNode: 2020/08/16 01:57:15.196232 Received UID: X18=
SaveRDFNode: 2020/08/16 01:57:15.196245 a: = db.Item{PKey:[]uint8{0x62, 0xf9, 0xea, 0xc5, 0xd8, 0xb0, 0x46, 0xa, 0x93, 0x5, 0x53, 0x30, 0x4b, 0xc1, 0x9a, 0xb4}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:57:15.199061 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 30.726278ms
DB: 2020/08/16 01:57:15.200632 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.344917ms
SaveRDFNode: 2020/08/16 01:57:15.200657 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000348120)}
SaveRDFNode: 2020/08/16 01:57:15.200663 Received UID: X18=
SaveRDFNode: 2020/08/16 01:57:15.200673 a: = db.Item{PKey:[]uint8{0x62, 0xf9, 0xea, 0xc5, 0xd8, 0xb0, 0x46, 0xa, 0x93, 0x5, 0x53, 0x30, 0x4b, 0xc1, 0x9a, 0xb4}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:57:15.203734 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.482978ms
DB: 2020/08/16 01:57:15.205088 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.387916ms
SaveRDFNode: 2020/08/16 01:57:15.205111 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:57:15.205119 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 01:57:15.205124 Send ack to waiting saveNode...
grmgr: 2020/08/16 01:57:15.205131 Looping..... 0
grmgr: 2020/08/16 01:57:15.205170 Looping..... 1
grmgr: 2020/08/16 01:57:15.205176 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 01:57:15.205180 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 01:57:15.205190 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.205196 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.205203 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.205211 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.205217 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.205222 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.205229 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:57:15.205232 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 01:57:15.205238 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000016d80)}
SaveRDFNode: 2020/08/16 01:57:15.205248 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:57:15.205257 UID received  : aYvcYflITFS5fqXjf+nB5Q==
DB: 2020/08/16 01:57:15.208132 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.367601ms
DB: 2020/08/16 01:57:15.209677 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.395841ms
DB: 2020/08/16 01:57:15.212727 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.529727ms
DB: 2020/08/16 01:57:15.214000 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.293827ms
DB: 2020/08/16 01:57:15.217402 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.62239ms
SaveRDFNode: 2020/08/16 01:57:15.217548 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003486c0)}
SaveRDFNode: 2020/08/16 01:57:15.217561 Received UID: X18=
SaveRDFNode: 2020/08/16 01:57:15.217572 a: = db.Item{PKey:[]uint8{0xf9, 0xcf, 0x63, 0x2a, 0x54, 0xa1, 0x45, 0xe0, 0x92, 0x12, 0x7, 0x35, 0x7c, 0x9, 0xf8, 0x2c}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:57:15.218522 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.490576ms
DB: 2020/08/16 01:57:15.222944 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.343427ms
SaveRDFNode: 2020/08/16 01:57:15.222956 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003486c0)}
SaveRDFNode: 2020/08/16 01:57:15.222963 Received UID: X18=
SaveRDFNode: 2020/08/16 01:57:15.222972 a: = db.Item{PKey:[]uint8{0xf9, 0xcf, 0x63, 0x2a, 0x54, 0xa1, 0x45, 0xe0, 0x92, 0x12, 0x7, 0x35, 0x7c, 0x9, 0xf8, 0x2c}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:57:15.223436 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.886233ms
DB: 2020/08/16 01:57:15.227870 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.866496ms
SaveRDFNode: 2020/08/16 01:57:15.227880 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:57:15.227887 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 01:57:15.227892 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 01:57:15.227916 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.227924 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.227929 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.227934 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.227940 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.227945 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:57:15.227951 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:57:15.227955 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 01:57:15.227987 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000208900)}
SaveRDFNode: 2020/08/16 01:57:15.227993 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:57:15.228002 UID received  : 21VclHfsSP2JvXBly/fa2Q==
grmgr: 2020/08/16 01:57:15.228181 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 01:57:15.228260 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.795681ms
SaveRDFNode: 2020/08/16 01:57:15.228280 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016d80)}
SaveRDFNode: 2020/08/16 01:57:15.228287 Received UID: X18=
SaveRDFNode: 2020/08/16 01:57:15.228297 a: = db.Item{PKey:[]uint8{0x69, 0x8b, 0xdc, 0x61, 0xf9, 0x48, 0x4c, 0x54, 0xb9, 0x7e, 0xa5, 0xe3, 0x7f, 0xe9, 0xc1, 0xe5}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:57:15.232518 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.491086ms
DB: 2020/08/16 01:57:15.232900 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.559142ms
SaveRDFNode: 2020/08/16 01:57:15.233052 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016d80)}
SaveRDFNode: 2020/08/16 01:57:15.233065 Received UID: X18=
SaveRDFNode: 2020/08/16 01:57:15.233075 a: = db.Item{PKey:[]uint8{0x69, 0x8b, 0xdc, 0x61, 0xf9, 0x48, 0x4c, 0x54, 0xb9, 0x7e, 0xa5, 0xe3, 0x7f, 0xe9, 0xc1, 0xe5}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:57:15.236971 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.408854ms
DB: 2020/08/16 01:57:15.237540 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.420795ms
SaveRDFNode: 2020/08/16 01:57:15.237549 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:57:15.237556 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 01:57:15.241700 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.699473ms
DB: 2020/08/16 01:57:15.246081 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.352692ms
DB: 2020/08/16 01:57:15.250520 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.410452ms
SaveRDFNode: 2020/08/16 01:57:15.250680 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000208900)}
SaveRDFNode: 2020/08/16 01:57:15.250704 Received UID: X18=
SaveRDFNode: 2020/08/16 01:57:15.250715 a: = db.Item{PKey:[]uint8{0xdb, 0x55, 0x5c, 0x94, 0x77, 0xec, 0x48, 0xfd, 0x89, 0xbd, 0x70, 0x65, 0xcb, 0xf7, 0xda, 0xd9}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:57:15.255219 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.475351ms
SaveRDFNode: 2020/08/16 01:57:15.255232 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000208900)}
SaveRDFNode: 2020/08/16 01:57:15.255238 Received UID: X18=
SaveRDFNode: 2020/08/16 01:57:15.255248 a: = db.Item{PKey:[]uint8{0xdb, 0x55, 0x5c, 0x94, 0x77, 0xec, 0x48, 0xfd, 0x89, 0xbd, 0x70, 0x65, 0xcb, 0xf7, 0xda, 0xd9}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:57:15.259789 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.511773ms
SaveRDFNode: 2020/08/16 01:57:15.259799 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 01:57:15.259805 saveNode finished waiting...exiting
grmgr: 2020/08/16 01:57:15.259811 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 01:57:15.259821 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.275249 About to run AttachNodeCh: abc  b  YvnqxdiwRgqTBVMwS8GatA== +c9jKlShReCSEgc1fAn4LA==
anmgr 2020/08/16 01:57:15.275269 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:57:15.275277 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 01:57:15.275284 Looping..... 0
grmgr: 2020/08/16 01:57:15.275678 Looping..... 1
grmgr: 2020/08/16 01:57:15.275850 Looping..... 2
grmgr: 2020/08/16 01:57:15.276024 Looping..... 3
grmgr: 2020/08/16 01:57:15.276198 Looping..... 4
grmgr: 2020/08/16 01:57:15.276383 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:57:15.276400 goroutine about to start 1 cUID,pUID   YvnqxdiwRgqTBVMwS8GatA==  +c9jKlShReCSEgc1fAn4LA==  
grmgr: 2020/08/16 01:57:15.276634 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:57:15.280220 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.756482ms
DB: 2020/08/16 01:57:15.283203 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.953479ms
DB: 2020/08/16 01:57:15.288170 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.913499ms
anmgr 2020/08/16 01:57:15.290806 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.296832 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.147553ms
AttachNode: main 2020/08/16 01:57:15.296846 FetchForUpdate: for parent    +c9jKlShReCSEgc1fAn4LA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:57:15.296851 ** Cache FetchForUpdate Cache Key Value: [+c9jKlShReCSEgc1fAn4LA==]   sortk: A#G#:S
FetchNode: 2020/08/16 01:57:15.296857  node: +c9jKlShReCSEgc1fAn4LA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:57:15.297038 FetchForUpdate: for child    YvnqxdiwRgqTBVMwS8GatA==
FetchForUpdate: 2020/08/16 01:57:15.297046 ** Cache FetchForUpdate Cache Key Value: [YvnqxdiwRgqTBVMwS8GatA==]   sortk: A#
FetchNode: 2020/08/16 01:57:15.297058  node: YvnqxdiwRgqTBVMwS8GatA== subKey: A#
DB: 2020/08/16 01:57:15.300694 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.802549ms
FetchForUpdate: 2020/08/16 01:57:15.300736 len(nb): 1
fetchItems: 2020/08/16 01:57:15.300744 +++  Cache FetchItems for sortk A#G#:S UID: [+c9jKlShReCSEgc1fAn4LA==] 
FetchNode: 2020/08/16 01:57:15.300748  node: +c9jKlShReCSEgc1fAn4LA== subKey: A#G#:S
DB: 2020/08/16 01:57:15.301378 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.262685ms
FetchForUpdate: 2020/08/16 01:57:15.301486 len(nb): 7
fetchItems: 2020/08/16 01:57:15.301493 +++  Cache FetchItems for sortk A# UID: [YvnqxdiwRgqTBVMwS8GatA==] 
FetchNode: 2020/08/16 01:57:15.301499  node: YvnqxdiwRgqTBVMwS8GatA== subKey: A#
DB: 2020/08/16 01:57:15.304989 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.462743ms
anmgr 2020/08/16 01:57:15.307995 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.308130 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 7.353518ms
DB: 2020/08/16 01:57:15.315862 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.855428ms
DB: 2020/08/16 01:57:15.323108 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.922909ms
anmgr 2020/08/16 01:57:15.323800 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.327830 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.543422ms
DB: 2020/08/16 01:57:15.333113 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.880547ms
anmgr 2020/08/16 01:57:15.339177 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.339392 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.967394ms
DB: 2020/08/16 01:57:15.344407 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.743743ms
DB: 2020/08/16 01:57:15.349333 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.641838ms
anmgr 2020/08/16 01:57:15.354966 for loop finished 0  6 
anmgr 2020/08/16 01:57:15.354983 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.354995 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.355009 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.355682 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.056183ms
DB: 2020/08/16 01:57:15.360437 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.479569ms
DB: 2020/08/16 01:57:15.365448 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.706124ms
DB: 2020/08/16 01:57:15.370113 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.484633ms
Cache: 2020/08/16 01:57:15.370125 In SetUpredAvailable: pUid, tUID:  +c9jKlShReCSEgc1fAn4LA== +c9jKlShReCSEgc1fAn4LA== A#G#:S
Cache: 2020/08/16 01:57:15.370130 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 01:57:15.370345 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.374832 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.647984ms
Unlock: 2020/08/16 01:57:15.374845 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:57:15.374862 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 01:57:15.385820 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.389307 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 14.372993ms
grmgr: 2020/08/16 01:57:15.389321 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:57:15.390998 ** received on attachDoneCh.... 1
anmgr 2020/08/16 01:57:15.396169 About to run AttachNodeCh: b  c  +c9jKlShReCSEgc1fAn4LA== aYvcYflITFS5fqXjf+nB5Q==
anmgr 2020/08/16 01:57:15.396186 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:57:15.396195 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 01:57:15.396202 Looping..... 0
grmgr: 2020/08/16 01:57:15.396342 Looping..... 1
grmgr: 2020/08/16 01:57:15.396515 Looping..... 2
grmgr: 2020/08/16 01:57:15.396707 Looping..... 3
grmgr: 2020/08/16 01:57:15.396898 Looping..... 4
grmgr: 2020/08/16 01:57:15.397090 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:57:15.397099 goroutine about to start 2 cUID,pUID   +c9jKlShReCSEgc1fAn4LA==  aYvcYflITFS5fqXjf+nB5Q==  
grmgr: 2020/08/16 01:57:15.397330 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:57:15.400784 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.62054ms
DB: 2020/08/16 01:57:15.404045 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.232644ms
DB: 2020/08/16 01:57:15.408908 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.808676ms
anmgr 2020/08/16 01:57:15.411604 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.414152 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.066934ms
AttachNode: main 2020/08/16 01:57:15.414167 FetchForUpdate: for parent    aYvcYflITFS5fqXjf+nB5Q==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:57:15.414173 ** Cache FetchForUpdate Cache Key Value: [aYvcYflITFS5fqXjf+nB5Q==]   sortk: A#G#:S
FetchNode: 2020/08/16 01:57:15.414180  node: aYvcYflITFS5fqXjf+nB5Q== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:57:15.414356 FetchForUpdate: for child    +c9jKlShReCSEgc1fAn4LA==
FetchForUpdate: 2020/08/16 01:57:15.414366 ** Cache FetchForUpdate Cache Key Value: [+c9jKlShReCSEgc1fAn4LA==]   sortk: A#
fetchItems: 2020/08/16 01:57:15.414372 +++  Cache FetchItems for sortk A# UID: [+c9jKlShReCSEgc1fAn4LA==] 
FetchNode: 2020/08/16 01:57:15.414387  node: +c9jKlShReCSEgc1fAn4LA== subKey: A#
DB: 2020/08/16 01:57:15.418394 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.925773ms
fetchItems: 2020/08/16 01:57:15.418580 +++  Cache FetchItems for sortk A# UID: [+c9jKlShReCSEgc1fAn4LA==] 
FetchNode: 2020/08/16 01:57:15.418587  node: +c9jKlShReCSEgc1fAn4LA== subKey: A#
DB: 2020/08/16 01:57:15.418888 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.669207ms
FetchForUpdate: 2020/08/16 01:57:15.418916 len(nb): 1
fetchItems: 2020/08/16 01:57:15.418922 +++  Cache FetchItems for sortk A#G#:S UID: [aYvcYflITFS5fqXjf+nB5Q==] 
FetchNode: 2020/08/16 01:57:15.418926  node: aYvcYflITFS5fqXjf+nB5Q== subKey: A#G#:S
DB: 2020/08/16 01:57:15.422221 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.605108ms
DB: 2020/08/16 01:57:15.423163 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.195068ms
anmgr 2020/08/16 01:57:15.426944 for loop finished 1  6 
anmgr 2020/08/16 01:57:15.426958 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.426964 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.426969 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.430242 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.99287ms
DB: 2020/08/16 01:57:15.436245 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.935183ms
DB: 2020/08/16 01:57:15.441366 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.072964ms
anmgr 2020/08/16 01:57:15.442406 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.446138 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.67611ms
DB: 2020/08/16 01:57:15.452219 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.016722ms
DB: 2020/08/16 01:57:15.456779 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.502913ms
anmgr 2020/08/16 01:57:15.458953 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.458965 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.458970 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.462220 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.372429ms
DB: 2020/08/16 01:57:15.468571 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.043758ms
DB: 2020/08/16 01:57:15.473304 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.667189ms
anmgr 2020/08/16 01:57:15.474339 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.478239 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.861213ms
DB: 2020/08/16 01:57:15.482906 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.611874ms
Cache: 2020/08/16 01:57:15.482919 In SetUpredAvailable: pUid, tUID:  aYvcYflITFS5fqXjf+nB5Q== aYvcYflITFS5fqXjf+nB5Q== A#G#:S
Cache: 2020/08/16 01:57:15.482924 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:57:15.487490 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.531741ms
Unlock: 2020/08/16 01:57:15.487503 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:57:15.487508 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 01:57:15.489815 for loop finished 1  6 
anmgr 2020/08/16 01:57:15.489828 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.489844 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.489849 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.492487 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.908555ms
grmgr: 2020/08/16 01:57:15.492500 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:57:15.494902 ** received on attachDoneCh.... 1
anmgr 2020/08/16 01:57:15.500090 About to run AttachNodeCh: abc  c  YvnqxdiwRgqTBVMwS8GatA== aYvcYflITFS5fqXjf+nB5Q==
anmgr 2020/08/16 01:57:15.500105 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:57:15.500112 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 01:57:15.500117 Looping..... 0
grmgr: 2020/08/16 01:57:15.500259 Looping..... 1
grmgr: 2020/08/16 01:57:15.500432 Looping..... 2
grmgr: 2020/08/16 01:57:15.500615 Looping..... 3
grmgr: 2020/08/16 01:57:15.500781 Looping..... 4
grmgr: 2020/08/16 01:57:15.500955 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:57:15.500964 goroutine about to start 3 cUID,pUID   YvnqxdiwRgqTBVMwS8GatA==  aYvcYflITFS5fqXjf+nB5Q==  
grmgr: 2020/08/16 01:57:15.501162 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:57:15.512201 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 11.178704ms
anmgr 2020/08/16 01:57:15.515561 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.515589 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.515595 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.515728 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.488351ms
DB: 2020/08/16 01:57:15.520478 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.697093ms
DB: 2020/08/16 01:57:15.525447 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.748824ms
AttachNode: main 2020/08/16 01:57:15.525462 FetchForUpdate: for parent    aYvcYflITFS5fqXjf+nB5Q==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:57:15.525468 ** Cache FetchForUpdate Cache Key Value: [aYvcYflITFS5fqXjf+nB5Q==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:57:15.525474 +++  Cache FetchItems for sortk A#G#:S UID: [aYvcYflITFS5fqXjf+nB5Q==] 
FetchNode: 2020/08/16 01:57:15.525478  node: aYvcYflITFS5fqXjf+nB5Q== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:57:15.525684 FetchForUpdate: for child    YvnqxdiwRgqTBVMwS8GatA==
FetchForUpdate: 2020/08/16 01:57:15.525693 ** Cache FetchForUpdate Cache Key Value: [YvnqxdiwRgqTBVMwS8GatA==]   sortk: A#
fetchItems: 2020/08/16 01:57:15.525699 +++  Cache FetchItems for sortk A# UID: [YvnqxdiwRgqTBVMwS8GatA==] 
FetchNode: 2020/08/16 01:57:15.525728  node: YvnqxdiwRgqTBVMwS8GatA== subKey: A#
DB: 2020/08/16 01:57:15.530070 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.556201ms
DB: 2020/08/16 01:57:15.530889 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.109838ms
anmgr 2020/08/16 01:57:15.531579 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.535155 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.727159ms
DB: 2020/08/16 01:57:15.539812 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.622261ms
DB: 2020/08/16 01:57:15.539827 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.622261ms
DB: 2020/08/16 01:57:15.544183 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.325381ms
DB: 2020/08/16 01:57:15.544208 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.325381ms
anmgr 2020/08/16 01:57:15.547069 for loop finished 2  6 
anmgr 2020/08/16 01:57:15.547090 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.547098 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.547104 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.547109 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.547115 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.549224 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.827702ms
DB: 2020/08/16 01:57:15.554505 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.127586ms
DB: 2020/08/16 01:57:15.561119 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.293806ms
anmgr 2020/08/16 01:57:15.562592 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.562605 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.562610 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.565859 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.563356ms
DB: 2020/08/16 01:57:15.571052 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.701292ms
DB: 2020/08/16 01:57:15.577693 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.359943ms
anmgr 2020/08/16 01:57:15.578290 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.583014 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.97013ms
DB: 2020/08/16 01:57:15.588144 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.794824ms
anmgr 2020/08/16 01:57:15.593810 for loop finished 2  6 
anmgr 2020/08/16 01:57:15.593824 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.593832 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.593837 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.593842 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.593848 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.594630 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.176137ms
DB: 2020/08/16 01:57:15.599331 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.418841ms
DB: 2020/08/16 01:57:15.604396 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.771601ms
DB: 2020/08/16 01:57:15.609376 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.801778ms
Cache: 2020/08/16 01:57:15.609388 In SetUpredAvailable: pUid, tUID:  aYvcYflITFS5fqXjf+nB5Q== T0RpCDuPQ+6lwaZVN7YyVg== A#G#:S
Cache: 2020/08/16 01:57:15.609393 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 01:57:15.609578 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.609588 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.609593 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.614249 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.818126ms
Unlock: 2020/08/16 01:57:15.614258 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:57:15.614271 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:57:15.619458 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.116754ms
grmgr: 2020/08/16 01:57:15.619491 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:57:15.619846 ** received on attachDoneCh.... 2
anmgr 2020/08/16 01:57:15.619863 About to run AttachNodeCh: c  abc  aYvcYflITFS5fqXjf+nB5Q== YvnqxdiwRgqTBVMwS8GatA==
anmgr 2020/08/16 01:57:15.619871 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:57:15.619878 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 01:57:15.619883 Looping..... 0
grmgr: 2020/08/16 01:57:15.619895 Looping..... 1
grmgr: 2020/08/16 01:57:15.620130 Looping..... 2
grmgr: 2020/08/16 01:57:15.620159 Looping..... 3
grmgr: 2020/08/16 01:57:15.620178 Looping..... 4
grmgr: 2020/08/16 01:57:15.620240 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:57:15.620257 goroutine about to start 4 cUID,pUID   aYvcYflITFS5fqXjf+nB5Q==  YvnqxdiwRgqTBVMwS8GatA==  
grmgr: 2020/08/16 01:57:15.620570 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:57:15.623816 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.454682ms
DB: 2020/08/16 01:57:15.626704 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.857271ms
DB: 2020/08/16 01:57:15.631439 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.660483ms
anmgr 2020/08/16 01:57:15.635750 for loop finished 3  6 
anmgr 2020/08/16 01:57:15.635766 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.635773 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.635778 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.635784 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.635789 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.636909 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.192427ms
AttachNode: main 2020/08/16 01:57:15.636922 FetchForUpdate: for parent    YvnqxdiwRgqTBVMwS8GatA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:57:15.636927 ** Cache FetchForUpdate Cache Key Value: [YvnqxdiwRgqTBVMwS8GatA==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:57:15.636933 +++  Cache FetchItems for sortk A#G#:S UID: [YvnqxdiwRgqTBVMwS8GatA==] 
FetchNode: 2020/08/16 01:57:15.636938  node: YvnqxdiwRgqTBVMwS8GatA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:57:15.637114 FetchForUpdate: for child    aYvcYflITFS5fqXjf+nB5Q==
FetchForUpdate: 2020/08/16 01:57:15.637122 ** Cache FetchForUpdate Cache Key Value: [aYvcYflITFS5fqXjf+nB5Q==]   sortk: A#
fetchItems: 2020/08/16 01:57:15.637128 +++  Cache FetchItems for sortk A# UID: [aYvcYflITFS5fqXjf+nB5Q==] 
FetchNode: 2020/08/16 01:57:15.637141  node: aYvcYflITFS5fqXjf+nB5Q== subKey: A#
DB: 2020/08/16 01:57:15.640314 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.32489ms
DB: 2020/08/16 01:57:15.641282 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.06104ms
DB: 2020/08/16 01:57:15.645396 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.770762ms
anmgr 2020/08/16 01:57:15.651175 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.651190 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.651196 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.651201 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.651206 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.657612 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 9.44836ms
DB: 2020/08/16 01:57:15.662199 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.53208ms
anmgr 2020/08/16 01:57:15.666772 for loop finished 3  6 
anmgr 2020/08/16 01:57:15.666790 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.666798 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.666803 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.666809 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.666814 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.668153 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.835808ms
DB: 2020/08/16 01:57:15.674384 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.158783ms
DB: 2020/08/16 01:57:15.678972 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.511741ms
anmgr 2020/08/16 01:57:15.682214 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.682240 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.682246 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.682252 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.682256 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.684844 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.810131ms
DB: 2020/08/16 01:57:15.691093 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.947602ms
DB: 2020/08/16 01:57:15.696262 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.886028ms
anmgr 2020/08/16 01:57:15.697699 for loop finished 3  6 
anmgr 2020/08/16 01:57:15.697725 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.697732 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.697738 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.697743 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.697748 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.701325 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.744531ms
DB: 2020/08/16 01:57:15.706214 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.667528ms
Cache: 2020/08/16 01:57:15.706232 In SetUpredAvailable: pUid, tUID:  YvnqxdiwRgqTBVMwS8GatA== YvnqxdiwRgqTBVMwS8GatA== A#G#:S
Cache: 2020/08/16 01:57:15.706237 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:57:15.710926 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.649243ms
Unlock: 2020/08/16 01:57:15.710939 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:57:15.710972 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 01:57:15.713213 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.713226 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.713232 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.713237 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.713242 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.715866 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.835177ms
grmgr: 2020/08/16 01:57:15.715881 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:57:15.718421 ** received on attachDoneCh.... 1
anmgr 2020/08/16 01:57:15.723601 About to run AttachNodeCh: c  b  aYvcYflITFS5fqXjf+nB5Q== +c9jKlShReCSEgc1fAn4LA==
anmgr 2020/08/16 01:57:15.723613 for loop finished 4  6 
anmgr 2020/08/16 01:57:15.723621 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.723626 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.723631 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.723637 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.723642 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:57:15.723648 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 01:57:15.723653 Looping..... 0
grmgr: 2020/08/16 01:57:15.723792 Looping..... 1
grmgr: 2020/08/16 01:57:15.723997 Looping..... 2
grmgr: 2020/08/16 01:57:15.724149 Looping..... 3
grmgr: 2020/08/16 01:57:15.724323 Looping..... 4
grmgr: 2020/08/16 01:57:15.724498 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:57:15.724507 goroutine about to start 5 cUID,pUID   aYvcYflITFS5fqXjf+nB5Q==  +c9jKlShReCSEgc1fAn4LA==  
grmgr: 2020/08/16 01:57:15.724725 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:57:15.728786 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.211534ms
DB: 2020/08/16 01:57:15.733013 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.198709ms
DB: 2020/08/16 01:57:15.738115 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.033704ms
anmgr 2020/08/16 01:57:15.739347 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.739362 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.739367 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.739372 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.739377 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.739381 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.739386 for loop finished 4  6 
anmgr 2020/08/16 01:57:15.739391 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.739396 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.739400 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.739405 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.739410 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.743009 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.670638ms
AttachNode: main 2020/08/16 01:57:15.743022 FetchForUpdate: for parent    +c9jKlShReCSEgc1fAn4LA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:57:15.743027 ** Cache FetchForUpdate Cache Key Value: [+c9jKlShReCSEgc1fAn4LA==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:57:15.743032 +++  Cache FetchItems for sortk A#G#:S UID: [+c9jKlShReCSEgc1fAn4LA==] 
FetchNode: 2020/08/16 01:57:15.743036  node: +c9jKlShReCSEgc1fAn4LA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:57:15.743221 FetchForUpdate: for child    aYvcYflITFS5fqXjf+nB5Q==
FetchForUpdate: 2020/08/16 01:57:15.743230 ** Cache FetchForUpdate Cache Key Value: [aYvcYflITFS5fqXjf+nB5Q==]   sortk: A#
fetchItems: 2020/08/16 01:57:15.743235 +++  Cache FetchItems for sortk A# UID: [aYvcYflITFS5fqXjf+nB5Q==] 
FetchNode: 2020/08/16 01:57:15.743253  node: aYvcYflITFS5fqXjf+nB5Q== subKey: A#
DB: 2020/08/16 01:57:15.746788 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.719167ms
DB: 2020/08/16 01:57:15.747785 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.442342ms
DB: 2020/08/16 01:57:15.752093 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.94985ms
anmgr 2020/08/16 01:57:15.754825 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.754839 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.754861 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.754867 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.754872 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.754877 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.754882 for loop finished 4  6 
anmgr 2020/08/16 01:57:15.754887 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.754892 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.754897 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.754903 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.754908 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.756632 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.505044ms
DB: 2020/08/16 01:57:15.756647 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.505044ms
DB: 2020/08/16 01:57:15.761251 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.575032ms
DB: 2020/08/16 01:57:15.761264 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.575032ms
DB: 2020/08/16 01:57:15.766390 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.923588ms
anmgr 2020/08/16 01:57:15.770255 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.770274 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.770280 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.770286 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.770291 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.770296 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.770301 for loop finished 4  6 
anmgr 2020/08/16 01:57:15.770305 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.770311 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.770316 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.770321 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.770326 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.771397 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.79922ms
DB: 2020/08/16 01:57:15.778160 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.081588ms
DB: 2020/08/16 01:57:15.783105 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.551235ms
anmgr 2020/08/16 01:57:15.787894 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.787915 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.787920 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.787925 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.787930 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.787935 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.787939 for loop finished 4  6 
anmgr 2020/08/16 01:57:15.787944 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.787949 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.787954 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.787977 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.787994 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.793802 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 8.819332ms
DB: 2020/08/16 01:57:15.799971 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.106457ms
anmgr 2020/08/16 01:57:15.803392 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.803410 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.803415 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.803420 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.803425 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.803430 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.803435 for loop finished 4  6 
anmgr 2020/08/16 01:57:15.803440 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.803445 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.803450 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.803455 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.803459 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.804619 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.579037ms
anmgr 2020/08/16 01:57:15.818908 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.818921 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.818926 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.818931 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.818949 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.818954 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.818959 for loop finished 4  6 
anmgr 2020/08/16 01:57:15.818963 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.818968 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.818973 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.818977 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.818982 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.832080 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 27.394447ms
anmgr 2020/08/16 01:57:15.834265 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.834279 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.834297 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.834302 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.834306 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.834311 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.834316 for loop finished 4  6 
anmgr 2020/08/16 01:57:15.834320 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.834325 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.834330 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.834335 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.834339 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.838166 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.012614ms
DB: 2020/08/16 01:57:15.842872 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.615298ms
DB: 2020/08/16 01:57:15.848513 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.478721ms
anmgr 2020/08/16 01:57:15.849712 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.849733 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.849740 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.849746 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.849752 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.849763 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.849768 for loop finished 4  6 
anmgr 2020/08/16 01:57:15.849774 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.849780 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.849790 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.849796 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.849812 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:57:15.854362 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.57726ms
Cache: 2020/08/16 01:57:15.854389 In SetUpredAvailable: pUid, tUID:  +c9jKlShReCSEgc1fAn4LA== jeQ2ocUlTY+yEAaNpJfTIA== A#G#:S
Cache: 2020/08/16 01:57:15.854399 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:57:15.859465 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.966443ms
Unlock: 2020/08/16 01:57:15.859475 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:57:15.859479 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:57:15.864653 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.108707ms
grmgr: 2020/08/16 01:57:15.864667 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:57:15.865343 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.865352 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.865357 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.865362 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.865367 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.865372 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.865376 for loop finished 4  6 
anmgr 2020/08/16 01:57:15.865387 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.865392 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.865397 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.865402 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.865406 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.865411 ** received on attachDoneCh.... 0
anmgr 2020/08/16 01:57:15.875637 About to run AttachNodeCh: b  abc  +c9jKlShReCSEgc1fAn4LA== YvnqxdiwRgqTBVMwS8GatA==
anmgr 2020/08/16 01:57:15.875654 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.875673 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.875678 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.875683 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.875688 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.875693 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:57:15.875698 for loop finished 5  6 
attachNode: 2020/08/16 01:57:15.875703 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 01:57:15.875709 Looping..... 0
grmgr: 2020/08/16 01:57:15.875809 Looping..... 1
grmgr: 2020/08/16 01:57:15.876016 Looping..... 2
grmgr: 2020/08/16 01:57:15.876175 Looping..... 3
grmgr: 2020/08/16 01:57:15.876363 Looping..... 4
grmgr: 2020/08/16 01:57:15.876527 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:57:15.876536 goroutine about to start 6 cUID,pUID   +c9jKlShReCSEgc1fAn4LA==  YvnqxdiwRgqTBVMwS8GatA==  
rdfLoader: 2020/08/16 01:57:15.876542 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 01:57:15.876721 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:57:15.879508 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.915895ms
DB: 2020/08/16 01:57:15.883716 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.178877ms
DB: 2020/08/16 01:57:15.888495 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.713664ms
DB: 2020/08/16 01:57:15.893505 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.855492ms
AttachNode: main 2020/08/16 01:57:15.893522 FetchForUpdate: for parent    YvnqxdiwRgqTBVMwS8GatA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:57:15.893527 ** Cache FetchForUpdate Cache Key Value: [YvnqxdiwRgqTBVMwS8GatA==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:57:15.893534 +++  Cache FetchItems for sortk A#G#:S UID: [YvnqxdiwRgqTBVMwS8GatA==] 
FetchNode: 2020/08/16 01:57:15.893539  node: YvnqxdiwRgqTBVMwS8GatA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:57:15.893715 FetchForUpdate: for child    +c9jKlShReCSEgc1fAn4LA==
FetchForUpdate: 2020/08/16 01:57:15.893743 ** Cache FetchForUpdate Cache Key Value: [+c9jKlShReCSEgc1fAn4LA==]   sortk: A#
fetchItems: 2020/08/16 01:57:15.893750 +++  Cache FetchItems for sortk A# UID: [+c9jKlShReCSEgc1fAn4LA==] 
FetchNode: 2020/08/16 01:57:15.893763  node: +c9jKlShReCSEgc1fAn4LA== subKey: A#
DB: 2020/08/16 01:57:15.896898 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.304773ms
DB: 2020/08/16 01:57:15.897944 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.117008ms
DB: 2020/08/16 01:57:15.902330 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.010797ms
DB: 2020/08/16 01:57:15.907234 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.83971ms
DB: 2020/08/16 01:57:15.907315 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.83971ms
DB: 2020/08/16 01:57:15.912274 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.906348ms
DB: 2020/08/16 01:57:15.912291 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.906348ms
DB: 2020/08/16 01:57:15.917625 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.173385ms
DB: 2020/08/16 01:57:15.926123 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 8.347348ms
DB: 2020/08/16 01:57:15.932705 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.249613ms
DB: 2020/08/16 01:57:15.937527 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.511244ms
DB: 2020/08/16 01:57:15.943118 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.997836ms
DB: 2020/08/16 01:57:15.950585 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.984647ms
DB: 2020/08/16 01:57:15.955133 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.480615ms
DB: 2020/08/16 01:57:15.960066 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.865895ms
DB: 2020/08/16 01:57:15.966403 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.271689ms
DB: 2020/08/16 01:57:15.970962 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.482811ms
DB: 2020/08/16 01:57:15.979122 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 8.091655ms
DB: 2020/08/16 01:57:15.983943 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.638075ms
Cache: 2020/08/16 01:57:15.983956 In SetUpredAvailable: pUid, tUID:  YvnqxdiwRgqTBVMwS8GatA== 2vlYBEkCRo6guV3AfvJJ7Q== A#G#:S
Cache: 2020/08/16 01:57:15.983961 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:57:15.988968 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.970657ms
Unlock: 2020/08/16 01:57:15.988982 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:57:15.988987 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:57:15.994217 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.128208ms
grmgr: 2020/08/16 01:57:15.994249 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 01:57:15.994255 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 01:57:15.994261 11.....
rdfLoader: 2020/08/16 01:57:15.994267 22.....error cnt: 0
rdfuuid: 2020/08/16 01:57:15.994273 Powering down...
errlog: 2020/08/16 01:57:15.994277 Powering down...
grmgr: 2020/08/16 01:57:15.994281 Powering down...
anmgr: 2020/08/16 01:57:15.994286 Powering down...
rdfLoader: 2020/08/16 01:57:15.994290 loader exists.....
DB:2020/08/16 01:58:11 log.go:18: ===============================================================================
anmgr: 2020/08/16 01:58:11.884725 Powering on...
rdfLoader: 2020/08/16 01:58:11.884757 saveNode started......
rdfLoader: 2020/08/16 01:58:11.884762 define saveNode limiter......
rdfuuid: 2020/08/16 01:58:11.884766 Powering on...
grmgr: 2020/08/16 01:58:11.884782 Powering on...
errlog: 2020/08/16 01:58:11.884796 Powering on...
rdfLoader: 2020/08/16 01:58:11.884803  principle goroutines started 
RDFreader: 2020/08/16 01:58:11.884818 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:58:11.884831 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 01:58:11.884837 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 01:58:11.884849 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 01:58:11.884854 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 01:58:11.884859 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 01:58:11.884863 spo read:      
RDFreader: 2020/08/16 01:58:11.884868 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 01:58:11.884873 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 01:58:11.884877 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 01:58:11.884882 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 01:58:11.884886 spo read:      
RDFreader: 2020/08/16 01:58:11.884891 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 01:58:11.884896 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 01:58:11.884900 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 01:58:11.884905 spo read:  b  Age  "58"
RDFreader: 2020/08/16 01:58:11.884910 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 01:58:11.884914 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 01:58:11.884919 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 01:58:11.884924 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 01:58:11.884928 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 01:58:11.884932 spo read:      
RDFreader: 2020/08/16 01:58:11.884937 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 01:58:11.884940 Send node batch on channel verifyCh
RDFreader: 2020/08/16 01:58:11.884948 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 01:58:11.884952 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 01:58:11.884957 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 01:58:11.884963 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 01:58:11.884968 spo read:  c  Age  "67"
RDFreader: 2020/08/16 01:58:11.884973 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 01:58:11.884978 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 01:58:11.884982 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 01:58:11.884987 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 01:58:11.884993 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 01:58:11.884997 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 01:58:11.885001 spo read:      
RDFreader: 2020/08/16 01:58:11.885006 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 01:58:11.885010 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 01:58:11.885015 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 01:58:11.885020 spo read:  d  Age  "36"
RDFreader: 2020/08/16 01:58:11.885025 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 01:58:11.885031 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 01:58:11.885034 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 01:58:11.885039 close verify channel
rdfLoader: 2020/08/16 01:58:11.885043 verify started....
rdfLoader: 2020/08/16 01:58:11.885047 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:58:11.885051 .  getType..
rdfLoader: 2020/08/16 01:58:11.885055 node.TyName : [Person]
DB: 2020/08/16 01:58:11.953671 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 68.552378ms
grmgr: 2020/08/16 01:58:11.953841 Looping..... 0
grmgr: 2020/08/16 01:58:11.954073 Looping..... 1
grmgr: 2020/08/16 01:58:11.954094 Looping..... 2
grmgr: 2020/08/16 01:58:11.954250 Looping..... 3
grmgr: 2020/08/16 01:58:11.954426 Looping..... 4
grmgr: 2020/08/16 01:58:11.954601 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:58:11.954612 .  getType..
rdfLoader: 2020/08/16 01:58:11.954617 node.TyName : [Person]
grmgr: 2020/08/16 01:58:11.954622 Looping..... 0
unmarshalRDF: 2020/08/16 01:58:11.954635 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:58:11.954644 Looping..... 1
grmgr: 2020/08/16 01:58:11.954650 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 01:58:11.954654 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 01:58:11.954661 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 01:58:11.954664 .  getType..
rdfLoader: 2020/08/16 01:58:11.954677 node.TyName : [Person]
grmgr: 2020/08/16 01:58:11.954682 Looping..... 0
rdfLoader: 2020/08/16 01:58:11.954692 Add to SS . [Honda]
rdfLoader: 2020/08/16 01:58:11.954696 Add to SS . [Alfa]
anmgr 2020/08/16 01:58:11.954738 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:11.954757 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 01:58:11.954789 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:58:11.954794 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 01:58:11.954803 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:58:11.954829 Looping..... 1
grmgr: 2020/08/16 01:58:11.954834 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 01:58:11.954838 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 01:58:11.954844 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:58:11.954848 Looping..... 0
rdfLoader: 2020/08/16 01:58:11.954857 Add to SS . [Honda]
rdfLoader: 2020/08/16 01:58:11.954861 Add to SS . [VW Golf]
anmgr 2020/08/16 01:58:11.954874 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:11.954879 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 01:58:11.954905 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:58:11.954909 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 01:58:11.954915 .  getType..
rdfLoader: 2020/08/16 01:58:11.954918 node.TyName : [Person]
unmarshalRDF: 2020/08/16 01:58:11.954927 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:58:11.954938 Looping..... 1
rdfLoader: 2020/08/16 01:58:11.954946 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 01:58:11.954950 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 01:58:11.954954 Add to SS . [Honda]
anmgr 2020/08/16 01:58:11.954967 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:11.954990 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 01:58:11.955017 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:58:11.955021 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:58:11.955048 Looping..... 2
grmgr: 2020/08/16 01:58:11.955226 Looping..... 3
grmgr: 2020/08/16 01:58:11.955400 Looping..... 4
grmgr: 2020/08/16 01:58:11.955574 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 01:58:11.955587 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 01:58:11.955592 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 01:58:11.955596 Looping..... 0
grmgr: 2020/08/16 01:58:11.955628 Looping..... 1
SaveRDFNode: xxx 2020/08/16 01:58:11.955638 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.955644 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.955650 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.955656 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.955661 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.955667 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.955672 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:58:11.955676 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 01:58:11.955683 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 01:58:11.955687 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:58:11.955698 UID received  : s6pQV6fDSXOBfYdcm2jNng==
grmgr: 2020/08/16 01:58:11.955936 Looping..... 2
grmgr: 2020/08/16 01:58:11.956116 Looping..... 3
grmgr: 2020/08/16 01:58:11.956289 Looping..... 4
grmgr: 2020/08/16 01:58:11.956463 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 01:58:11.956471 Looping..... 0
unmarshalRDF: 2020/08/16 01:58:11.956484 Entered unmarshalRDF. 
grmgr: 2020/08/16 01:58:11.956493 Looping..... 1
rdfLoader: 2020/08/16 01:58:11.956503 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 01:58:11.956557 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 01:58:11.956563 Exit  unmarshalRDF. 
grmgr: 2020/08/16 01:58:11.956574 Looping..... 2
grmgr: 2020/08/16 01:58:11.956640 Looping..... 3
grmgr: 2020/08/16 01:58:11.956813 Looping..... 4
grmgr: 2020/08/16 01:58:11.956988 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 01:58:11.956996 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 01:58:11.957005 Looping..... 0
grmgr: 2020/08/16 01:58:11.957028 Looping..... 1
grmgr: 2020/08/16 01:58:11.957033 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 01:58:11.957037 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 01:58:11.957046 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.957052 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.957058 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.957064 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.957070 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.957081 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.957087 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:58:11.957091 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 01:58:11.957096 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017f80)}
SaveRDFNode: 2020/08/16 01:58:11.957100 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:58:11.957109 UID received  : tZwVt/6FQv63awfnCA4FnQ==
DB: 2020/08/16 01:58:11.964805 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.065282ms
DB: 2020/08/16 01:58:11.968455 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.614934ms
DB: 2020/08/16 01:58:11.972077 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.587408ms
DB: 2020/08/16 01:58:11.975914 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.650157ms
DB: 2020/08/16 01:58:11.979512 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.563521ms
SaveRDFNode: 2020/08/16 01:58:11.979532 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 01:58:11.979541 Received UID: X18=
SaveRDFNode: 2020/08/16 01:58:11.979554 a: = db.Item{PKey:[]uint8{0xb3, 0xaa, 0x50, 0x57, 0xa7, 0xc3, 0x49, 0x73, 0x81, 0x7d, 0x87, 0x5c, 0x9b, 0x68, 0xcd, 0x9e}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:58:11.980468 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 23.333042ms
DB: 2020/08/16 01:58:11.983168 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.581903ms
SaveRDFNode: 2020/08/16 01:58:11.983181 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 01:58:11.983188 Received UID: X18=
SaveRDFNode: 2020/08/16 01:58:11.983198 a: = db.Item{PKey:[]uint8{0xb3, 0xaa, 0x50, 0x57, 0xa7, 0xc3, 0x49, 0x73, 0x81, 0x7d, 0x87, 0x5c, 0x9b, 0x68, 0xcd, 0x9e}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:58:11.984022 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.495335ms
DB: 2020/08/16 01:58:11.986730 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.500575ms
SaveRDFNode: 2020/08/16 01:58:11.986739 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:58:11.986750 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 01:58:11.986755 Send ack to waiting saveNode...
grmgr: 2020/08/16 01:58:11.986763 Looping..... 0
grmgr: 2020/08/16 01:58:11.986798 Looping..... 1
grmgr: 2020/08/16 01:58:11.986804 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 01:58:11.986808 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 01:58:11.986816 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.986839 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.986846 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.986860 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.986865 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.986879 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:58:11.986885 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:58:11.986889 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 01:58:11.986894 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0004fc7e0)}
SaveRDFNode: 2020/08/16 01:58:11.986898 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:58:11.986907 UID received  : Yf3loPnMREmj/Omk9gWUCw==
DB: 2020/08/16 01:58:11.987575 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.520168ms
DB: 2020/08/16 01:58:11.990553 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.61989ms
DB: 2020/08/16 01:58:11.991227 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.472367ms
DB: 2020/08/16 01:58:11.994132 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.543053ms
DB: 2020/08/16 01:58:11.995680 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.423724ms
SaveRDFNode: 2020/08/16 01:58:11.995693 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017f80)}
SaveRDFNode: 2020/08/16 01:58:11.995700 Received UID: X18=
SaveRDFNode: 2020/08/16 01:58:11.995711 a: = db.Item{PKey:[]uint8{0xb5, 0x9c, 0x15, 0xb7, 0xfe, 0x85, 0x42, 0xfe, 0xb7, 0x6b, 0x7, 0xe7, 0x8, 0xe, 0x5, 0x9d}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:58:11.997668 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.504789ms
DB: 2020/08/16 01:58:11.999356 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.617104ms
SaveRDFNode: 2020/08/16 01:58:11.999369 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017f80)}
SaveRDFNode: 2020/08/16 01:58:11.999375 Received UID: X18=
SaveRDFNode: 2020/08/16 01:58:11.999385 a: = db.Item{PKey:[]uint8{0xb5, 0x9c, 0x15, 0xb7, 0xfe, 0x85, 0x42, 0xfe, 0xb7, 0x6b, 0x7, 0xe7, 0x8, 0xe, 0x5, 0x9d}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:58:12.001281 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.581854ms
DB: 2020/08/16 01:58:12.003103 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.68886ms
SaveRDFNode: 2020/08/16 01:58:12.003258 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:58:12.003272 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 01:58:12.003277 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 01:58:12.003309 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 01:58:12.003317 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/16 01:58:12.003324 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 01:58:12.003329 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 01:58:12.003335 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 01:58:12.003341 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 01:58:12.003347 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 01:58:12.003350 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 01:58:12.003364 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000346060)}
SaveRDFNode: 2020/08/16 01:58:12.003369 Waiting for UID ......................
SaveRDFNode: 2020/08/16 01:58:12.003379 UID received  : zRFeNPYITLm7t/5i1meWHQ==
grmgr: 2020/08/16 01:58:12.003582 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 01:58:12.004983 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.671894ms
SaveRDFNode: 2020/08/16 01:58:12.004995 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0004fc7e0)}
SaveRDFNode: 2020/08/16 01:58:12.005001 Received UID: X18=
SaveRDFNode: 2020/08/16 01:58:12.005012 a: = db.Item{PKey:[]uint8{0x61, 0xfd, 0xe5, 0xa0, 0xf9, 0xcc, 0x44, 0x49, 0xa3, 0xfc, 0xe9, 0xa4, 0xf6, 0x5, 0x94, 0xb}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:58:12.006944 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.537597ms
DB: 2020/08/16 01:58:12.008662 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.620765ms
SaveRDFNode: 2020/08/16 01:58:12.008675 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0004fc7e0)}
SaveRDFNode: 2020/08/16 01:58:12.008681 Received UID: X18=
SaveRDFNode: 2020/08/16 01:58:12.008691 a: = db.Item{PKey:[]uint8{0x61, 0xfd, 0xe5, 0xa0, 0xf9, 0xcc, 0x44, 0x49, 0xa3, 0xfc, 0xe9, 0xa4, 0xf6, 0x5, 0x94, 0xb}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:58:12.011498 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.523238ms
DB: 2020/08/16 01:58:12.012356 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.633832ms
SaveRDFNode: 2020/08/16 01:58:12.012369 Returned.+++++++++++ No error
grmgr: 2020/08/16 01:58:12.012376 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 01:58:12.015144 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.613788ms
DB: 2020/08/16 01:58:12.018857 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.67774ms
DB: 2020/08/16 01:58:12.022815 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.761464ms
SaveRDFNode: 2020/08/16 01:58:12.022832 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346060)}
SaveRDFNode: 2020/08/16 01:58:12.022840 Received UID: X18=
SaveRDFNode: 2020/08/16 01:58:12.022851 a: = db.Item{PKey:[]uint8{0xcd, 0x11, 0x5e, 0x34, 0xf6, 0x8, 0x4c, 0xb9, 0xbb, 0xb7, 0xfe, 0x62, 0xd6, 0x67, 0x96, 0x1d}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:58:12.026447 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.562521ms
SaveRDFNode: 2020/08/16 01:58:12.026460 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346060)}
SaveRDFNode: 2020/08/16 01:58:12.026467 Received UID: X18=
SaveRDFNode: 2020/08/16 01:58:12.026477 a: = db.Item{PKey:[]uint8{0xcd, 0x11, 0x5e, 0x34, 0xf6, 0x8, 0x4c, 0xb9, 0xbb, 0xb7, 0xfe, 0x62, 0xd6, 0x67, 0x96, 0x1d}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 01:58:12.030073 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.562548ms
SaveRDFNode: 2020/08/16 01:58:12.030085 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 01:58:12.030093 saveNode finished waiting...exiting
grmgr: 2020/08/16 01:58:12.030101 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 01:58:12.030113 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.045512 About to run AttachNodeCh: abc  b  s6pQV6fDSXOBfYdcm2jNng== tZwVt/6FQv63awfnCA4FnQ==
anmgr 2020/08/16 01:58:12.045552 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:58:12.045573 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 01:58:12.045581 Looping..... 0
grmgr: 2020/08/16 01:58:12.045821 Looping..... 1
grmgr: 2020/08/16 01:58:12.045996 Looping..... 2
grmgr: 2020/08/16 01:58:12.046170 Looping..... 3
grmgr: 2020/08/16 01:58:12.046344 Looping..... 4
grmgr: 2020/08/16 01:58:12.046520 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:58:12.046531 goroutine about to start 1 cUID,pUID   s6pQV6fDSXOBfYdcm2jNng==  tZwVt/6FQv63awfnCA4FnQ==  
grmgr: 2020/08/16 01:58:12.046840 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:58:12.049253 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.618843ms
DB: 2020/08/16 01:58:12.053226 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.937906ms
DB: 2020/08/16 01:58:12.057211 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.899193ms
anmgr 2020/08/16 01:58:12.062008 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.064470 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.581362ms
AttachNode: main 2020/08/16 01:58:12.064489 FetchForUpdate: for parent    tZwVt/6FQv63awfnCA4FnQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:58:12.064494 ** Cache FetchForUpdate Cache Key Value: [tZwVt/6FQv63awfnCA4FnQ==]   sortk: A#G#:S
FetchNode: 2020/08/16 01:58:12.064501  node: tZwVt/6FQv63awfnCA4FnQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:58:12.064742 FetchForUpdate: for child    s6pQV6fDSXOBfYdcm2jNng==
FetchForUpdate: 2020/08/16 01:58:12.064751 ** Cache FetchForUpdate Cache Key Value: [s6pQV6fDSXOBfYdcm2jNng==]   sortk: A#
FetchNode: 2020/08/16 01:58:12.064765  node: s6pQV6fDSXOBfYdcm2jNng== subKey: A#
DB: 2020/08/16 01:58:12.067977 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.145715ms
FetchForUpdate: 2020/08/16 01:58:12.068149 len(nb): 7
fetchItems: 2020/08/16 01:58:12.068160 +++  Cache FetchItems for sortk A# UID: [s6pQV6fDSXOBfYdcm2jNng==] 
FetchNode: 2020/08/16 01:58:12.068164  node: s6pQV6fDSXOBfYdcm2jNng== subKey: A#
DB: 2020/08/16 01:58:12.068470 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.908844ms
FetchForUpdate: 2020/08/16 01:58:12.068498 len(nb): 1
fetchItems: 2020/08/16 01:58:12.068504 +++  Cache FetchItems for sortk A#G#:S UID: [tZwVt/6FQv63awfnCA4FnQ==] 
FetchNode: 2020/08/16 01:58:12.068508  node: tZwVt/6FQv63awfnCA4FnQ== subKey: A#G#:S
DB: 2020/08/16 01:58:12.070963 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.769142ms
DB: 2020/08/16 01:58:12.071628 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.073249ms
DB: 2020/08/16 01:58:12.079237 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.019795ms
anmgr 2020/08/16 01:58:12.079987 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.084753 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.438756ms
DB: 2020/08/16 01:58:12.088192 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.389853ms
DB: 2020/08/16 01:58:12.092167 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.867757ms
anmgr 2020/08/16 01:58:12.095621 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.098299 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.071448ms
DB: 2020/08/16 01:58:12.102424 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.829772ms
DB: 2020/08/16 01:58:12.106548 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.798737ms
anmgr 2020/08/16 01:58:12.111039 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.113411 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.561986ms
DB: 2020/08/16 01:58:12.117272 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.558922ms
DB: 2020/08/16 01:58:12.121816 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.248004ms
DB: 2020/08/16 01:58:12.125677 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.679918ms
Cache: 2020/08/16 01:58:12.125689 In SetUpredAvailable: pUid, tUID:  tZwVt/6FQv63awfnCA4FnQ== tZwVt/6FQv63awfnCA4FnQ== A#G#:S
Cache: 2020/08/16 01:58:12.125694 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 01:58:12.126494 for loop finished 0  6 
anmgr 2020/08/16 01:58:12.126507 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.126514 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.126523 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.129552 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.82331ms
Unlock: 2020/08/16 01:58:12.129565 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:58:12.129570 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:58:12.134643 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.011616ms
grmgr: 2020/08/16 01:58:12.134662 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:58:12.136823 ** received on attachDoneCh.... 2
anmgr 2020/08/16 01:58:12.136841 About to run AttachNodeCh: abc  c  s6pQV6fDSXOBfYdcm2jNng== Yf3loPnMREmj/Omk9gWUCw==
anmgr 2020/08/16 01:58:12.136850 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:58:12.136856 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 01:58:12.136861 Looping..... 0
grmgr: 2020/08/16 01:58:12.136874 Looping..... 1
grmgr: 2020/08/16 01:58:12.136996 Looping..... 2
grmgr: 2020/08/16 01:58:12.137171 Looping..... 3
grmgr: 2020/08/16 01:58:12.137360 Looping..... 4
grmgr: 2020/08/16 01:58:12.137527 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:58:12.137537 goroutine about to start 2 cUID,pUID   s6pQV6fDSXOBfYdcm2jNng==  Yf3loPnMREmj/Omk9gWUCw==  
grmgr: 2020/08/16 01:58:12.137759 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:58:12.140025 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.406141ms
DB: 2020/08/16 01:58:12.142701 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.645423ms
DB: 2020/08/16 01:58:12.148117 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.366651ms
anmgr 2020/08/16 01:58:12.152302 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.159225 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 10.904735ms
AttachNode: main 2020/08/16 01:58:12.159241 FetchForUpdate: for parent    Yf3loPnMREmj/Omk9gWUCw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:58:12.159246 ** Cache FetchForUpdate Cache Key Value: [Yf3loPnMREmj/Omk9gWUCw==]   sortk: A#G#:S
FetchNode: 2020/08/16 01:58:12.159252  node: Yf3loPnMREmj/Omk9gWUCw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:58:12.159484 FetchForUpdate: for child    s6pQV6fDSXOBfYdcm2jNng==
FetchForUpdate: 2020/08/16 01:58:12.159493 ** Cache FetchForUpdate Cache Key Value: [s6pQV6fDSXOBfYdcm2jNng==]   sortk: A#
fetchItems: 2020/08/16 01:58:12.159508 +++  Cache FetchItems for sortk A# UID: [s6pQV6fDSXOBfYdcm2jNng==] 
FetchNode: 2020/08/16 01:58:12.159521  node: s6pQV6fDSXOBfYdcm2jNng== subKey: A#
DB: 2020/08/16 01:58:12.162377 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.790197ms
DB: 2020/08/16 01:58:12.163211 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.900927ms
FetchForUpdate: 2020/08/16 01:58:12.163246 len(nb): 1
fetchItems: 2020/08/16 01:58:12.163253 +++  Cache FetchItems for sortk A#G#:S UID: [Yf3loPnMREmj/Omk9gWUCw==] 
FetchNode: 2020/08/16 01:58:12.163257  node: Yf3loPnMREmj/Omk9gWUCw== subKey: A#G#:S
DB: 2020/08/16 01:58:12.166108 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.823091ms
anmgr 2020/08/16 01:58:12.168604 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.170140 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.788685ms
DB: 2020/08/16 01:58:12.176609 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.106943ms
DB: 2020/08/16 01:58:12.180496 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.702302ms
anmgr 2020/08/16 01:58:12.183971 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.184694 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.838501ms
DB: 2020/08/16 01:58:12.192779 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.793066ms
DB: 2020/08/16 01:58:12.196742 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.650832ms
anmgr 2020/08/16 01:58:12.199446 for loop finished 1  6 
anmgr 2020/08/16 01:58:12.199461 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.199468 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.199473 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.199478 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.199483 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.200893 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.835326ms
DB: 2020/08/16 01:58:12.207402 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.208937ms
DB: 2020/08/16 01:58:12.211550 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.849731ms
anmgr 2020/08/16 01:58:12.214965 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.215777 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.925923ms
DB: 2020/08/16 01:58:12.219550 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.592004ms
Cache: 2020/08/16 01:58:12.219565 In SetUpredAvailable: pUid, tUID:  Yf3loPnMREmj/Omk9gWUCw== Yf3loPnMREmj/Omk9gWUCw== A#G#:S
Cache: 2020/08/16 01:58:12.219571 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:58:12.223780 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.171049ms
Unlock: 2020/08/16 01:58:12.223791 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:58:12.223796 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:58:12.228213 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.354134ms
grmgr: 2020/08/16 01:58:12.228227 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:58:12.230441 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.230451 ** received on attachDoneCh.... 0
anmgr 2020/08/16 01:58:12.240719 About to run AttachNodeCh: c  abc  Yf3loPnMREmj/Omk9gWUCw== s6pQV6fDSXOBfYdcm2jNng==
anmgr 2020/08/16 01:58:12.240737 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:58:12.240746 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 01:58:12.240758 Looping..... 0
grmgr: 2020/08/16 01:58:12.240888 Looping..... 1
grmgr: 2020/08/16 01:58:12.241070 Looping..... 2
grmgr: 2020/08/16 01:58:12.241243 Looping..... 3
grmgr: 2020/08/16 01:58:12.241266 Looping..... 4
grmgr: 2020/08/16 01:58:12.241417 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:58:12.241426 goroutine about to start 3 cUID,pUID   Yf3loPnMREmj/Omk9gWUCw==  s6pQV6fDSXOBfYdcm2jNng==  
grmgr: 2020/08/16 01:58:12.241631 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:58:12.243851 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.36359ms
DB: 2020/08/16 01:58:12.247320 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.439747ms
DB: 2020/08/16 01:58:12.251247 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.856449ms
DB: 2020/08/16 01:58:12.255878 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.427185ms
AttachNode: main 2020/08/16 01:58:12.255890 FetchForUpdate: for parent    s6pQV6fDSXOBfYdcm2jNng==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:58:12.255899 ** Cache FetchForUpdate Cache Key Value: [s6pQV6fDSXOBfYdcm2jNng==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:58:12.255905 +++  Cache FetchItems for sortk A#G#:S UID: [s6pQV6fDSXOBfYdcm2jNng==] 
FetchNode: 2020/08/16 01:58:12.255910  node: s6pQV6fDSXOBfYdcm2jNng== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:58:12.256086 FetchForUpdate: for child    Yf3loPnMREmj/Omk9gWUCw==
FetchForUpdate: 2020/08/16 01:58:12.256095 ** Cache FetchForUpdate Cache Key Value: [Yf3loPnMREmj/Omk9gWUCw==]   sortk: A#
fetchItems: 2020/08/16 01:58:12.256100 +++  Cache FetchItems for sortk A# UID: [Yf3loPnMREmj/Omk9gWUCw==] 
FetchNode: 2020/08/16 01:58:12.256113  node: Yf3loPnMREmj/Omk9gWUCw== subKey: A#
anmgr 2020/08/16 01:58:12.256762 for loop finished 2  6 
anmgr 2020/08/16 01:58:12.256778 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.256785 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.256791 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.256797 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.256802 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.259739 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.797378ms
DB: 2020/08/16 01:58:12.260495 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.303431ms
fetchItems: 2020/08/16 01:58:12.260658 +++  Cache FetchItems for sortk A# UID: [Yf3loPnMREmj/Omk9gWUCw==] 
FetchNode: 2020/08/16 01:58:12.260665  node: Yf3loPnMREmj/Omk9gWUCw== subKey: A#
DB: 2020/08/16 01:58:12.264247 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.546826ms
DB: 2020/08/16 01:58:12.264776 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.804657ms
anmgr 2020/08/16 01:58:12.272655 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.273476 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.544085ms
DB: 2020/08/16 01:58:12.277179 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.638864ms
DB: 2020/08/16 01:58:12.281064 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.767756ms
DB: 2020/08/16 01:58:12.287078 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.951297ms
anmgr 2020/08/16 01:58:12.288085 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.288100 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.288106 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.290669 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.53445ms
DB: 2020/08/16 01:58:12.297208 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.445907ms
anmgr 2020/08/16 01:58:12.303877 for loop finished 2  6 
anmgr 2020/08/16 01:58:12.303899 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.303907 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.303913 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.303919 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.303924 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.304177 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.85594ms
DB: 2020/08/16 01:58:12.307980 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.744527ms
DB: 2020/08/16 01:58:12.311830 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.783466ms
DB: 2020/08/16 01:58:12.315762 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.880487ms
Cache: 2020/08/16 01:58:12.315774 In SetUpredAvailable: pUid, tUID:  s6pQV6fDSXOBfYdcm2jNng== s6pQV6fDSXOBfYdcm2jNng== A#G#:S
Cache: 2020/08/16 01:58:12.315779 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 01:58:12.319199 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.319619 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.805555ms
Unlock: 2020/08/16 01:58:12.319631 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:58:12.319637 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:58:12.324125 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.389158ms
grmgr: 2020/08/16 01:58:12.324144 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:58:12.324311 ** received on attachDoneCh.... 1
anmgr 2020/08/16 01:58:12.329469 About to run AttachNodeCh: b  c  tZwVt/6FQv63awfnCA4FnQ== Yf3loPnMREmj/Omk9gWUCw==
anmgr 2020/08/16 01:58:12.329482 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.329488 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.329493 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:58:12.329499 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 01:58:12.329504 Looping..... 0
grmgr: 2020/08/16 01:58:12.329639 Looping..... 1
grmgr: 2020/08/16 01:58:12.329810 Looping..... 2
grmgr: 2020/08/16 01:58:12.330002 Looping..... 3
grmgr: 2020/08/16 01:58:12.330196 Looping..... 4
grmgr: 2020/08/16 01:58:12.330374 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:58:12.330388 goroutine about to start 4 cUID,pUID   tZwVt/6FQv63awfnCA4FnQ==  Yf3loPnMREmj/Omk9gWUCw==  
grmgr: 2020/08/16 01:58:12.330611 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:58:12.332863 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.411825ms
DB: 2020/08/16 01:58:12.335377 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.481928ms
DB: 2020/08/16 01:58:12.339343 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.807757ms
DB: 2020/08/16 01:58:12.344010 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.600733ms
AttachNode: main 2020/08/16 01:58:12.344026 FetchForUpdate: for parent    Yf3loPnMREmj/Omk9gWUCw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:58:12.344032 ** Cache FetchForUpdate Cache Key Value: [Yf3loPnMREmj/Omk9gWUCw==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:58:12.344039 +++  Cache FetchItems for sortk A#G#:S UID: [Yf3loPnMREmj/Omk9gWUCw==] 
FetchNode: 2020/08/16 01:58:12.344043  node: Yf3loPnMREmj/Omk9gWUCw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:58:12.344360 FetchForUpdate: for child    tZwVt/6FQv63awfnCA4FnQ==
FetchForUpdate: 2020/08/16 01:58:12.344369 ** Cache FetchForUpdate Cache Key Value: [tZwVt/6FQv63awfnCA4FnQ==]   sortk: A#
fetchItems: 2020/08/16 01:58:12.344374 +++  Cache FetchItems for sortk A# UID: [tZwVt/6FQv63awfnCA4FnQ==] 
FetchNode: 2020/08/16 01:58:12.344391  node: tZwVt/6FQv63awfnCA4FnQ== subKey: A#
anmgr 2020/08/16 01:58:12.344950 for loop finished 3  6 
anmgr 2020/08/16 01:58:12.344963 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.344970 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.344974 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.344998 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.345003 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.346891 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.788304ms
DB: 2020/08/16 01:58:12.348086 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.62626ms
fetchItems: 2020/08/16 01:58:12.348258 +++  Cache FetchItems for sortk A# UID: [tZwVt/6FQv63awfnCA4FnQ==] 
FetchNode: 2020/08/16 01:58:12.348272  node: tZwVt/6FQv63awfnCA4FnQ== subKey: A#
DB: 2020/08/16 01:58:12.351286 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.841873ms
DB: 2020/08/16 01:58:12.352151 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.848823ms
DB: 2020/08/16 01:58:12.354916 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.591783ms
DB: 2020/08/16 01:58:12.354931 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.591783ms
DB: 2020/08/16 01:58:12.358642 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.678022ms
DB: 2020/08/16 01:58:12.358660 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.678022ms
anmgr 2020/08/16 01:58:12.360292 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.360307 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.360312 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.360318 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.360323 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.362698 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.815497ms
DB: 2020/08/16 01:58:12.366625 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.744165ms
DB: 2020/08/16 01:58:12.373263 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.996471ms
anmgr 2020/08/16 01:58:12.375771 for loop finished 3  6 
anmgr 2020/08/16 01:58:12.375787 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.375795 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.375800 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.375805 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.375810 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.377761 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.153444ms
DB: 2020/08/16 01:58:12.382236 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.839174ms
DB: 2020/08/16 01:58:12.388942 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.273461ms
anmgr 2020/08/16 01:58:12.391266 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.391282 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.391288 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.391294 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.391298 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.393075 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.603812ms
DB: 2020/08/16 01:58:12.397243 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.7052ms
DB: 2020/08/16 01:58:12.403773 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.087076ms
anmgr 2020/08/16 01:58:12.406763 for loop finished 3  6 
anmgr 2020/08/16 01:58:12.406897 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.406926 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.406931 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.406937 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.406942 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.408109 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.684295ms
DB: 2020/08/16 01:58:12.412190 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.015142ms
DB: 2020/08/16 01:58:12.415770 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.524395ms
Cache: 2020/08/16 01:58:12.415782 In SetUpredAvailable: pUid, tUID:  Yf3loPnMREmj/Omk9gWUCw== CLi2JX/ETKCJexqNmsI8ow== A#G#:S
Cache: 2020/08/16 01:58:12.415787 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:58:12.419424 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.598608ms
Unlock: 2020/08/16 01:58:12.419435 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:58:12.419439 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 01:58:12.422833 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.422964 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.423005 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.423011 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.423017 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.423652 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.156997ms
grmgr: 2020/08/16 01:58:12.423666 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:58:12.428133 ** received on attachDoneCh.... 1
anmgr 2020/08/16 01:58:12.433236 About to run AttachNodeCh: c  b  Yf3loPnMREmj/Omk9gWUCw== tZwVt/6FQv63awfnCA4FnQ==
anmgr 2020/08/16 01:58:12.433247 for loop finished 4  6 
anmgr 2020/08/16 01:58:12.433254 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.433259 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.433264 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.433269 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.433274 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 01:58:12.433280 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 01:58:12.433285 Looping..... 0
grmgr: 2020/08/16 01:58:12.433404 Looping..... 1
grmgr: 2020/08/16 01:58:12.433578 Looping..... 2
grmgr: 2020/08/16 01:58:12.433753 Looping..... 3
grmgr: 2020/08/16 01:58:12.433960 Looping..... 4
grmgr: 2020/08/16 01:58:12.434110 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:58:12.434120 goroutine about to start 5 cUID,pUID   Yf3loPnMREmj/Omk9gWUCw==  tZwVt/6FQv63awfnCA4FnQ==  
grmgr: 2020/08/16 01:58:12.434624 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:58:12.437938 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.511176ms
DB: 2020/08/16 01:58:12.445398 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.426821ms
anmgr 2020/08/16 01:58:12.448754 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.448768 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.448773 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.448778 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.448783 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.448788 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.448793 for loop finished 4  6 
anmgr 2020/08/16 01:58:12.448797 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.448803 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.448808 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.448813 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.448817 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.449760 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.303985ms
DB: 2020/08/16 01:58:12.454383 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.411153ms
AttachNode: main 2020/08/16 01:58:12.454399 FetchForUpdate: for parent    tZwVt/6FQv63awfnCA4FnQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:58:12.454405 ** Cache FetchForUpdate Cache Key Value: [tZwVt/6FQv63awfnCA4FnQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:58:12.454412 +++  Cache FetchItems for sortk A#G#:S UID: [tZwVt/6FQv63awfnCA4FnQ==] 
FetchNode: 2020/08/16 01:58:12.454417  node: tZwVt/6FQv63awfnCA4FnQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:58:12.454686 FetchForUpdate: for child    Yf3loPnMREmj/Omk9gWUCw==
FetchForUpdate: 2020/08/16 01:58:12.454710 ** Cache FetchForUpdate Cache Key Value: [Yf3loPnMREmj/Omk9gWUCw==]   sortk: A#
fetchItems: 2020/08/16 01:58:12.454720 +++  Cache FetchItems for sortk A# UID: [Yf3loPnMREmj/Omk9gWUCw==] 
FetchNode: 2020/08/16 01:58:12.454740  node: Yf3loPnMREmj/Omk9gWUCw== subKey: A#
DB: 2020/08/16 01:58:12.457489 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.040012ms
DB: 2020/08/16 01:58:12.458547 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.757506ms
DB: 2020/08/16 01:58:12.461735 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.73426ms
anmgr 2020/08/16 01:58:12.465235 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.465250 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.465255 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.465260 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.465265 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.465287 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.465292 for loop finished 4  6 
anmgr 2020/08/16 01:58:12.465297 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.465302 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.465306 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.465311 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.465316 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.465410 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.636563ms
DB: 2020/08/16 01:58:12.465423 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.636563ms
DB: 2020/08/16 01:58:12.468850 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.396293ms
DB: 2020/08/16 01:58:12.468865 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.396293ms
DB: 2020/08/16 01:58:12.473155 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.988671ms
DB: 2020/08/16 01:58:12.477155 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.765198ms
anmgr 2020/08/16 01:58:12.480757 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.480774 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.480779 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.480784 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.480789 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.480794 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.480798 for loop finished 4  6 
anmgr 2020/08/16 01:58:12.480803 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.480808 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.480812 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.480817 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.480821 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.484247 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.476102ms
DB: 2020/08/16 01:58:12.488051 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.556386ms
DB: 2020/08/16 01:58:12.492736 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.045608ms
anmgr 2020/08/16 01:58:12.496284 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.496301 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.496307 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.496312 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.496317 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.496322 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.496327 for loop finished 4  6 
anmgr 2020/08/16 01:58:12.496332 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.496337 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.496342 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.496347 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.496352 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.499441 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.122592ms
DB: 2020/08/16 01:58:12.503372 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.53716ms
DB: 2020/08/16 01:58:12.507782 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.947098ms
anmgr 2020/08/16 01:58:12.511806 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.511824 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.511831 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.511837 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.511842 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.511848 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.511853 for loop finished 4  6 
anmgr 2020/08/16 01:58:12.511859 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.511864 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.511870 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.511876 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.511881 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.514624 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.197922ms
DB: 2020/08/16 01:58:12.518255 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.569485ms
DB: 2020/08/16 01:58:12.522153 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.834001ms
DB: 2020/08/16 01:58:12.525734 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.509973ms
Cache: 2020/08/16 01:58:12.525747 In SetUpredAvailable: pUid, tUID:  tZwVt/6FQv63awfnCA4FnQ== N8qGza87SW6Mv3fznms7Wg== A#G#:S
Cache: 2020/08/16 01:58:12.525752 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 01:58:12.527750 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.527765 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.527771 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.527777 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.527785 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.527791 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.527804 for loop finished 4  6 
anmgr 2020/08/16 01:58:12.527809 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.527815 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.527820 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.527826 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.527843 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 01:58:12.529405 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.617129ms
Unlock: 2020/08/16 01:58:12.529416 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:58:12.529420 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:58:12.534058 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.545175ms
grmgr: 2020/08/16 01:58:12.534073 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 01:58:12.538220 ** received on attachDoneCh.... 2
anmgr 2020/08/16 01:58:12.538237 About to run AttachNodeCh: b  abc  tZwVt/6FQv63awfnCA4FnQ== s6pQV6fDSXOBfYdcm2jNng==
anmgr 2020/08/16 01:58:12.538245 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.538251 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.538255 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.538261 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.538265 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.538270 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 01:58:12.538274 for loop finished 5  6 
attachNode: 2020/08/16 01:58:12.538279 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 01:58:12.538284 Looping..... 0
grmgr: 2020/08/16 01:58:12.538297 Looping..... 1
grmgr: 2020/08/16 01:58:12.538406 Looping..... 2
grmgr: 2020/08/16 01:58:12.538569 Looping..... 3
grmgr: 2020/08/16 01:58:12.538744 Looping..... 4
grmgr: 2020/08/16 01:58:12.538938 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 01:58:12.538947 goroutine about to start 6 cUID,pUID   tZwVt/6FQv63awfnCA4FnQ==  s6pQV6fDSXOBfYdcm2jNng==  
rdfLoader: 2020/08/16 01:58:12.538952 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 01:58:12.539427 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 01:58:12.541630 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.356908ms
DB: 2020/08/16 01:58:12.544509 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.830944ms
DB: 2020/08/16 01:58:12.548300 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.735538ms
DB: 2020/08/16 01:58:12.552651 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.156828ms
AttachNode: main 2020/08/16 01:58:12.552664 FetchForUpdate: for parent    s6pQV6fDSXOBfYdcm2jNng==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 01:58:12.552670 ** Cache FetchForUpdate Cache Key Value: [s6pQV6fDSXOBfYdcm2jNng==]   sortk: A#G#:S
fetchItems: 2020/08/16 01:58:12.552676 +++  Cache FetchItems for sortk A#G#:S UID: [s6pQV6fDSXOBfYdcm2jNng==] 
FetchNode: 2020/08/16 01:58:12.552680  node: s6pQV6fDSXOBfYdcm2jNng== subKey: A#G#:S
AttachNode: gr1 2020/08/16 01:58:12.552867 FetchForUpdate: for child    tZwVt/6FQv63awfnCA4FnQ==
FetchForUpdate: 2020/08/16 01:58:12.552876 ** Cache FetchForUpdate Cache Key Value: [tZwVt/6FQv63awfnCA4FnQ==]   sortk: A#
fetchItems: 2020/08/16 01:58:12.552881 +++  Cache FetchItems for sortk A# UID: [tZwVt/6FQv63awfnCA4FnQ==] 
FetchNode: 2020/08/16 01:58:12.552937  node: tZwVt/6FQv63awfnCA4FnQ== subKey: A#
DB: 2020/08/16 01:58:12.555555 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.842264ms
DB: 2020/08/16 01:58:12.556893 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.903315ms
DB: 2020/08/16 01:58:12.560434 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.389835ms
DB: 2020/08/16 01:58:12.564211 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.744307ms
DB: 2020/08/16 01:58:12.564416 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.744307ms
DB: 2020/08/16 01:58:12.568626 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.168956ms
DB: 2020/08/16 01:58:12.568641 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.168956ms
DB: 2020/08/16 01:58:12.573245 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.514813ms
DB: 2020/08/16 01:58:12.577041 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.73217ms
DB: 2020/08/16 01:58:12.583220 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.090582ms
DB: 2020/08/16 01:58:12.589780 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.156706ms
DB: 2020/08/16 01:58:12.593888 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.99227ms
DB: 2020/08/16 01:58:12.600086 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.12848ms
DB: 2020/08/16 01:58:12.603908 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.744289ms
DB: 2020/08/16 01:58:12.607789 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.803693ms
DB: 2020/08/16 01:58:12.614302 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.064964ms
DB: 2020/08/16 01:58:12.618478 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.71917ms
DB: 2020/08/16 01:58:12.622507 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.685781ms
DB: 2020/08/16 01:58:12.626434 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.861776ms
Cache: 2020/08/16 01:58:12.626468 In SetUpredAvailable: pUid, tUID:  s6pQV6fDSXOBfYdcm2jNng== mZ8NB4s8Rfe6xyVkzoEW0w== A#G#:S
Cache: 2020/08/16 01:58:12.626474 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 01:58:12.630330 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.817334ms
Unlock: 2020/08/16 01:58:12.630340 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 01:58:12.630345 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 01:58:12.634994 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.559343ms
grmgr: 2020/08/16 01:58:12.635035 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 01:58:12.635042 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 01:58:12.635049 11.....
rdfLoader: 2020/08/16 01:58:12.635056 22.....error cnt: 0
rdfuuid: 2020/08/16 01:58:12.635063 Powering down...
errlog: 2020/08/16 01:58:12.635068 Powering down...
grmgr: 2020/08/16 01:58:12.635073 Powering down...
anmgr: 2020/08/16 01:58:12.635077 Powering down...
rdfLoader: 2020/08/16 01:58:12.635082 loader exists.....
DB:2020/08/16 02:14:07 log.go:18: ===============================================================================
anmgr: 2020/08/16 02:14:07.864312 Powering on...
rdfLoader: 2020/08/16 02:14:07.864343 saveNode started......
rdfLoader: 2020/08/16 02:14:07.864348 define saveNode limiter......
rdfuuid: 2020/08/16 02:14:07.864352 Powering on...
grmgr: 2020/08/16 02:14:07.864368 Powering on...
errlog: 2020/08/16 02:14:07.864381 Powering on...
rdfLoader: 2020/08/16 02:14:07.864388  principle goroutines started 
RDFreader: 2020/08/16 02:14:07.864404 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:14:07.864419 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 02:14:07.864425 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 02:14:07.864431 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 02:14:07.864436 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 02:14:07.864441 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 02:14:07.864445 spo read:      
RDFreader: 2020/08/16 02:14:07.864450 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 02:14:07.864454 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 02:14:07.864459 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 02:14:07.864463 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 02:14:07.864467 spo read:      
RDFreader: 2020/08/16 02:14:07.864472 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 02:14:07.864477 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 02:14:07.864482 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 02:14:07.864487 spo read:  b  Age  "58"
RDFreader: 2020/08/16 02:14:07.864491 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 02:14:07.864496 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 02:14:07.864501 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 02:14:07.864506 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 02:14:07.864510 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 02:14:07.864514 spo read:      
RDFreader: 2020/08/16 02:14:07.864523 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 02:14:07.864527 Send node batch on channel verifyCh
RDFreader: 2020/08/16 02:14:07.864534 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:14:07.864538 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 02:14:07.864543 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 02:14:07.864550 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 02:14:07.864555 spo read:  c  Age  "67"
RDFreader: 2020/08/16 02:14:07.864560 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 02:14:07.864564 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 02:14:07.864571 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 02:14:07.864575 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 02:14:07.864580 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 02:14:07.864584 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 02:14:07.864588 spo read:      
RDFreader: 2020/08/16 02:14:07.864593 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 02:14:07.864598 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 02:14:07.864602 spo read:  abc  Friends  _:abc
rdfLoader: 2020/08/16 02:14:07.864606 Send node batch on channel verifyCh
RDFreader: 2020/08/16 02:14:07.864611 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:14:07.864615 spo read:  abc  Friends  _:abc
RDFreader: 2020/08/16 02:14:07.864622 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 02:14:07.864626 spo read:  d  Age  "36"
RDFreader: 2020/08/16 02:14:07.864631 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 02:14:07.864637 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 02:14:07.864641 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 02:14:07.864645 verify started....
rdfLoader: 2020/08/16 02:14:07.864649 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:14:07.864653 .  getType..
rdfLoader: 2020/08/16 02:14:07.864660 node.TyName : [Person]
rdfLoader: 2020/08/16 02:14:07.865183 close verify channel
DB: 2020/08/16 02:14:07.931552 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 66.835753ms
grmgr: 2020/08/16 02:14:07.931701 Looping..... 0
grmgr: 2020/08/16 02:14:07.931932 Looping..... 1
grmgr: 2020/08/16 02:14:07.932110 Looping..... 2
grmgr: 2020/08/16 02:14:07.932288 Looping..... 3
grmgr: 2020/08/16 02:14:07.932466 Looping..... 4
grmgr: 2020/08/16 02:14:07.932644 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:14:07.932654 .  getType..
rdfLoader: 2020/08/16 02:14:07.932658 node.TyName : [Person]
grmgr: 2020/08/16 02:14:07.932663 Looping..... 0
unmarshalRDF: 2020/08/16 02:14:07.932676 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:14:07.932684 Looping..... 1
grmgr: 2020/08/16 02:14:07.932689 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:14:07.932693 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:14:07.932700 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:14:07.932704 .  getType..
rdfLoader: 2020/08/16 02:14:07.932708 node.TyName : [Person]
grmgr: 2020/08/16 02:14:07.932712 Looping..... 0
rdfLoader: 2020/08/16 02:14:07.932721 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:14:07.932725 Add to SS . [Alfa]
anmgr 2020/08/16 02:14:07.933103 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:07.933115 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:14:07.933217 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:14:07.933224 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 02:14:07.933342 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:14:07.934657 Looping..... 1
grmgr: 2020/08/16 02:14:07.934668 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:14:07.934672 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:14:07.934678 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 02:14:07.934682 Looping..... 0
rdfLoader: 2020/08/16 02:14:07.934692 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:14:07.934697 Add to SS . [VW Golf]
anmgr 2020/08/16 02:14:07.934718 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:07.934724 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:14:07.934764 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:14:07.934768 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 02:14:07.934775 .  getType..
rdfLoader: 2020/08/16 02:14:07.934779 node.TyName : [Person]
unmarshalRDF: 2020/08/16 02:14:07.934788 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:14:07.934815 Looping..... 1
rdfLoader: 2020/08/16 02:14:07.934825 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 02:14:07.934829 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 02:14:07.934833 Add to SS . [Honda]
anmgr 2020/08/16 02:14:07.934846 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:07.934852 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:14:07.934883 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:14:07.934888 Exit  unmarshalRDF. 
grmgr: 2020/08/16 02:14:07.934900 Looping..... 2
grmgr: 2020/08/16 02:14:07.935003 Looping..... 3
grmgr: 2020/08/16 02:14:07.935177 Looping..... 4
grmgr: 2020/08/16 02:14:07.935352 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:14:07.935360 Looping..... 0
grmgr: 2020/08/16 02:14:07.935395 Looping..... 1
SaveRDFNode: xxx 2020/08/16 02:14:07.935406 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.935412 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.935418 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.935424 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.935429 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.935434 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.935440 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:14:07.935443 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:14:07.935451 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000016c00)}
SaveRDFNode: 2020/08/16 02:14:07.935455 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:14:07.935466 UID received  : FYO4CDn2QWmSGOwCJB95PA==
grmgr: 2020/08/16 02:14:07.935701 Looping..... 2
grmgr: 2020/08/16 02:14:07.935857 Looping..... 3
grmgr: 2020/08/16 02:14:07.936035 Looping..... 4
grmgr: 2020/08/16 02:14:07.936209 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:14:07.936217 Looping..... 0
rdfLoader: 2020/08/16 02:14:07.936238 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:14:07.936242 .  getType..
rdfLoader: 2020/08/16 02:14:07.936247 node.TyName : []
unmarshalRDF: 2020/08/16 02:14:07.936579 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:14:07.936663 Looping..... 1
unmarshalRDF: 2020/08/16 02:14:07.936720 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:14:07.936726 Exit  unmarshalRDF. 
grmgr: 2020/08/16 02:14:07.936741 Looping..... 2
grmgr: 2020/08/16 02:14:07.936909 Looping..... 3
grmgr: 2020/08/16 02:14:07.937174 Looping..... 4
grmgr: 2020/08/16 02:14:07.937345 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:14:07.937355 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 02:14:07.937360 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 02:14:07.937364 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 02:14:07.937373 Looping..... 0
grmgr: 2020/08/16 02:14:07.937400 Looping..... 1
grmgr: 2020/08/16 02:14:07.937410 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:14:07.937452 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:14:07.937464 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.937470 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.937478 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.937483 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.937504 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.937510 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.937516 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:14:07.937520 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:14:07.937525 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017b00)}
SaveRDFNode: 2020/08/16 02:14:07.937529 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:14:07.937538 UID received  : oKtOtrOaQpu88SgTRaQdpw==
DB: 2020/08/16 02:14:07.943433 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.936526ms
DB: 2020/08/16 02:14:07.949690 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: IV3V865S8V2GVMARG595RTMR9NVV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 02:14:07.949869 Looping..... 0
grmgr: 2020/08/16 02:14:07.949923 Looping..... 1
grmgr: 2020/08/16 02:14:07.949949 Looping..... 2
grmgr: 2020/08/16 02:14:07.950045 Looping..... 3
grmgr: 2020/08/16 02:14:07.950219 Looping..... 4
grmgr: 2020/08/16 02:14:07.950395 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:14:07.950404 .  getType..
rdfLoader: 2020/08/16 02:14:07.950408 node.TyName : []
unmarshalRDF: 2020/08/16 02:14:07.950596 Entered unmarshalRDF. 
unmarshalRDF: 2020/08/16 02:14:07.950604 Exit  unmarshalRDF. 
grmgr: 2020/08/16 02:14:07.950610 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 02:14:07.950615 EndCh received for unmarshall. rCnt = 0 
DB: 2020/08/16 02:14:07.961148 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 23.581927ms
DB: 2020/08/16 02:14:07.961491 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 17.980869ms
DB: 2020/08/16 02:14:07.962122 Sytem error in Query of FetchType. ValidationException: One or more parameter values were invalid: Condition parameter type does not match schema type
	status code: 400, request id: CLQ2KF2UO6IF1CEG5AMK123QVBVV4KQNSO5AEMVJF66Q9ASUAAJG
grmgr: 2020/08/16 02:14:07.962134 Looping..... 0
grmgr: 2020/08/16 02:14:07.962150 Looping..... 1
grmgr: 2020/08/16 02:14:07.962301 Looping..... 2
grmgr: 2020/08/16 02:14:07.962476 Looping..... 3
grmgr: 2020/08/16 02:14:07.962650 Looping..... 4
grmgr: 2020/08/16 02:14:07.962825 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
unmarshalRDF: 2020/08/16 02:14:07.962841 Entered unmarshalRDF. 
unmarshalRDF: 2020/08/16 02:14:07.962846 Exit  unmarshalRDF. 
grmgr: 2020/08/16 02:14:07.962852 StartCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 02:14:07.962857 EndCh received for unmarshall. rCnt = 0 
DB: 2020/08/16 02:14:07.964587 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.404791ms
DB: 2020/08/16 02:14:07.964991 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.467775ms
DB: 2020/08/16 02:14:07.968458 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.426498ms
DB: 2020/08/16 02:14:07.972087 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.461584ms
DB: 2020/08/16 02:14:07.972321 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.809221ms
SaveRDFNode: 2020/08/16 02:14:07.972355 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016c00)}
SaveRDFNode: 2020/08/16 02:14:07.972369 Received UID: X18=
SaveRDFNode: 2020/08/16 02:14:07.972382 a: = db.Item{PKey:[]uint8{0x15, 0x83, 0xb8, 0x8, 0x39, 0xf6, 0x41, 0x69, 0x92, 0x18, 0xec, 0x2, 0x24, 0x1f, 0x79, 0x3c}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:14:07.975740 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.620906ms
DB: 2020/08/16 02:14:07.976012 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.573899ms
SaveRDFNode: 2020/08/16 02:14:07.976024 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016c00)}
SaveRDFNode: 2020/08/16 02:14:07.976032 Received UID: X18=
SaveRDFNode: 2020/08/16 02:14:07.976050 a: = db.Item{PKey:[]uint8{0x15, 0x83, 0xb8, 0x8, 0x39, 0xf6, 0x41, 0x69, 0x92, 0x18, 0xec, 0x2, 0x24, 0x1f, 0x79, 0x3c}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:14:07.979211 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.437524ms
SaveRDFNode: 2020/08/16 02:14:07.979224 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017b00)}
SaveRDFNode: 2020/08/16 02:14:07.979230 Received UID: X18=
SaveRDFNode: 2020/08/16 02:14:07.979240 a: = db.Item{PKey:[]uint8{0xa0, 0xab, 0x4e, 0xb6, 0xb3, 0x9a, 0x42, 0x9b, 0xbc, 0xf1, 0x28, 0x13, 0x45, 0xa4, 0x1d, 0xa7}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:14:07.979786 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.708937ms
SaveRDFNode: 2020/08/16 02:14:07.979796 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:14:07.979803 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:14:07.979808 Send ack to waiting saveNode...
grmgr: 2020/08/16 02:14:07.979815 Looping..... 0
grmgr: 2020/08/16 02:14:07.979848 Looping..... 1
grmgr: 2020/08/16 02:14:07.979854 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:14:07.979858 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:14:07.979866 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.979872 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.979900 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.979906 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.979912 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.979918 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.979923 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:14:07.979927 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:14:07.979933 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000290ae0)}
SaveRDFNode: 2020/08/16 02:14:07.979941 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:14:07.979952 UID received  : 8sNj/MCTT3uRsfpciFxQvg==
DB: 2020/08/16 02:14:07.982624 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.355863ms
SaveRDFNode: 2020/08/16 02:14:07.982795 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017b00)}
SaveRDFNode: 2020/08/16 02:14:07.982808 Received UID: X18=
SaveRDFNode: 2020/08/16 02:14:07.982818 a: = db.Item{PKey:[]uint8{0xa0, 0xab, 0x4e, 0xb6, 0xb3, 0x9a, 0x42, 0x9b, 0xbc, 0xf1, 0x28, 0x13, 0x45, 0xa4, 0x1d, 0xa7}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:14:07.984142 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.165264ms
DB: 2020/08/16 02:14:07.986150 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.302468ms
SaveRDFNode: 2020/08/16 02:14:07.986160 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:14:07.986167 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:14:07.986171 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 02:14:07.986242 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.986252 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.986258 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:14:07.986265 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:14:07.986269 SaveRDFNode : 4 
SaveRDFNode: 2020/08/16 02:14:07.986274 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0002911a0)}
SaveRDFNode: 2020/08/16 02:14:07.986278 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:14:07.986287 UID received  : rUDb3I8gRi+OMDjqYF0yHw==
grmgr: 2020/08/16 02:14:07.986475 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 02:14:07.987474 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.296142ms
DB: 2020/08/16 02:14:07.989762 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.449469ms
DB: 2020/08/16 02:14:07.990964 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.458184ms
DB: 2020/08/16 02:14:07.993282 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.489259ms
SaveRDFNode: 2020/08/16 02:14:07.993294 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0002911a0)}
SaveRDFNode: 2020/08/16 02:14:07.993302 Received UID: X18=
SaveRDFNode: 2020/08/16 02:14:07.993312 a: = db.Item{PKey:[]uint8{0xad, 0x40, 0xdb, 0xdc, 0x8f, 0x20, 0x46, 0x2f, 0x8e, 0x30, 0x38, 0xea, 0x60, 0x5d, 0x32, 0x1f}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:14:07.994349 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.30965ms
DB: 2020/08/16 02:14:07.996582 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.240206ms
SaveRDFNode: 2020/08/16 02:14:07.996595 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0002911a0)}
SaveRDFNode: 2020/08/16 02:14:07.996602 Received UID: X18=
SaveRDFNode: 2020/08/16 02:14:07.996611 a: = db.Item{PKey:[]uint8{0xad, 0x40, 0xdb, 0xdc, 0x8f, 0x20, 0x46, 0x2f, 0x8e, 0x30, 0x38, 0xea, 0x60, 0x5d, 0x32, 0x1f}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:14:07.997675 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.281986ms
SaveRDFNode: 2020/08/16 02:14:07.997692 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000290ae0)}
SaveRDFNode: 2020/08/16 02:14:07.997699 Received UID: X18=
SaveRDFNode: 2020/08/16 02:14:07.997711 a: = db.Item{PKey:[]uint8{0xf2, 0xc3, 0x63, 0xfc, 0xc0, 0x93, 0x4f, 0x7b, 0x91, 0xb1, 0xfa, 0x5c, 0x88, 0x5c, 0x50, 0xbe}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:14:07.999855 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.216144ms
SaveRDFNode: 2020/08/16 02:14:08.000006 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:14:08.000020 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 02:14:08.004511 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.771978ms
SaveRDFNode: 2020/08/16 02:14:08.004541 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000290ae0)}
SaveRDFNode: 2020/08/16 02:14:08.004549 Received UID: X18=
SaveRDFNode: 2020/08/16 02:14:08.004560 a: = db.Item{PKey:[]uint8{0xf2, 0xc3, 0x63, 0xfc, 0xc0, 0x93, 0x4f, 0x7b, 0x91, 0xb1, 0xfa, 0x5c, 0x88, 0x5c, 0x50, 0xbe}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:14:08.042643 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 38.051248ms
SaveRDFNode: 2020/08/16 02:14:08.042843 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 02:14:08.042858 saveNode finished waiting...exiting
grmgr: 2020/08/16 02:14:08.042865 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 02:14:08.042879 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.058355 About to run AttachNodeCh: abc  b  FYO4CDn2QWmSGOwCJB95PA== oKtOtrOaQpu88SgTRaQdpw==
anmgr 2020/08/16 02:14:08.058377 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:14:08.058385 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 02:14:08.058391 Looping..... 0
grmgr: 2020/08/16 02:14:08.058542 Looping..... 1
grmgr: 2020/08/16 02:14:08.058719 Looping..... 2
grmgr: 2020/08/16 02:14:08.058890 Looping..... 3
grmgr: 2020/08/16 02:14:08.059102 Looping..... 4
grmgr: 2020/08/16 02:14:08.059130 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:14:08.059145 goroutine about to start 1 cUID,pUID   FYO4CDn2QWmSGOwCJB95PA==  oKtOtrOaQpu88SgTRaQdpw==  
grmgr: 2020/08/16 02:14:08.059561 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:14:08.061997 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.704738ms
DB: 2020/08/16 02:14:08.064555 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.502932ms
DB: 2020/08/16 02:14:08.069615 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.997377ms
anmgr 2020/08/16 02:14:08.073895 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.076037 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.886676ms
AttachNode: main 2020/08/16 02:14:08.076052 FetchForUpdate: for parent    oKtOtrOaQpu88SgTRaQdpw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:14:08.076057 ** Cache FetchForUpdate Cache Key Value: [oKtOtrOaQpu88SgTRaQdpw==]   sortk: A#G#:S
FetchNode: 2020/08/16 02:14:08.076063  node: oKtOtrOaQpu88SgTRaQdpw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:14:08.076237 FetchForUpdate: for child    FYO4CDn2QWmSGOwCJB95PA==
FetchForUpdate: 2020/08/16 02:14:08.076245 ** Cache FetchForUpdate Cache Key Value: [FYO4CDn2QWmSGOwCJB95PA==]   sortk: A#
FetchNode: 2020/08/16 02:14:08.076258  node: FYO4CDn2QWmSGOwCJB95PA== subKey: A#
DB: 2020/08/16 02:14:08.078492 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.398078ms
FetchForUpdate: 2020/08/16 02:14:08.078561 len(nb): 1
fetchItems: 2020/08/16 02:14:08.078581 +++  Cache FetchItems for sortk A#G#:S UID: [oKtOtrOaQpu88SgTRaQdpw==] 
FetchNode: 2020/08/16 02:14:08.078585  node: oKtOtrOaQpu88SgTRaQdpw== subKey: A#G#:S
DB: 2020/08/16 02:14:08.079722 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.379888ms
FetchForUpdate: 2020/08/16 02:14:08.079843 len(nb): 7
fetchItems: 2020/08/16 02:14:08.079852 +++  Cache FetchItems for sortk A# UID: [FYO4CDn2QWmSGOwCJB95PA==] 
FetchNode: 2020/08/16 02:14:08.079857  node: FYO4CDn2QWmSGOwCJB95PA== subKey: A#
DB: 2020/08/16 02:14:08.080902 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.288029ms
DB: 2020/08/16 02:14:08.082742 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.854381ms
DB: 2020/08/16 02:14:08.085139 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.633716ms
anmgr 2020/08/16 02:14:08.089348 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.091042 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.826909ms
DB: 2020/08/16 02:14:08.094474 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.380357ms
DB: 2020/08/16 02:14:08.098304 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.724511ms
DB: 2020/08/16 02:14:08.105126 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.783008ms
anmgr 2020/08/16 02:14:08.106496 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.109687 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.383652ms
DB: 2020/08/16 02:14:08.113593 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.593729ms
DB: 2020/08/16 02:14:08.119542 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.63497ms
anmgr 2020/08/16 02:14:08.121953 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.123456 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.59424ms
DB: 2020/08/16 02:14:08.127505 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.731416ms
DB: 2020/08/16 02:14:08.131470 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.781695ms
Cache: 2020/08/16 02:14:08.131483 In SetUpredAvailable: pUid, tUID:  oKtOtrOaQpu88SgTRaQdpw== oKtOtrOaQpu88SgTRaQdpw== A#G#:S
Cache: 2020/08/16 02:14:08.131488 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:14:08.134957 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.433302ms
Unlock: 2020/08/16 02:14:08.134966 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:14:08.134971 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:14:08.137368 for loop finished 0  6 
anmgr 2020/08/16 02:14:08.137385 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.137392 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.137397 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.138893 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.873116ms
grmgr: 2020/08/16 02:14:08.138908 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:14:08.142566 ** received on attachDoneCh.... 1
anmgr 2020/08/16 02:14:08.147741 About to run AttachNodeCh: abc  c  FYO4CDn2QWmSGOwCJB95PA== 8sNj/MCTT3uRsfpciFxQvg==
anmgr 2020/08/16 02:14:08.147754 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:14:08.147770 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 02:14:08.147775 Looping..... 0
grmgr: 2020/08/16 02:14:08.147911 Looping..... 1
grmgr: 2020/08/16 02:14:08.148127 Looping..... 2
grmgr: 2020/08/16 02:14:08.148302 Looping..... 3
grmgr: 2020/08/16 02:14:08.148476 Looping..... 4
grmgr: 2020/08/16 02:14:08.148673 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:14:08.148695 goroutine about to start 2 cUID,pUID   FYO4CDn2QWmSGOwCJB95PA==  8sNj/MCTT3uRsfpciFxQvg==  
grmgr: 2020/08/16 02:14:08.148863 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:14:08.151517 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.590607ms
DB: 2020/08/16 02:14:08.154626 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.045704ms
DB: 2020/08/16 02:14:08.158604 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.685856ms
DB: 2020/08/16 02:14:08.163083 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.792018ms
AttachNode: main 2020/08/16 02:14:08.163096 FetchForUpdate: for parent    8sNj/MCTT3uRsfpciFxQvg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:14:08.163101 ** Cache FetchForUpdate Cache Key Value: [8sNj/MCTT3uRsfpciFxQvg==]   sortk: A#G#:S
FetchNode: 2020/08/16 02:14:08.163107  node: 8sNj/MCTT3uRsfpciFxQvg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:14:08.163308 FetchForUpdate: for child    FYO4CDn2QWmSGOwCJB95PA==
FetchForUpdate: 2020/08/16 02:14:08.163317 ** Cache FetchForUpdate Cache Key Value: [FYO4CDn2QWmSGOwCJB95PA==]   sortk: A#
fetchItems: 2020/08/16 02:14:08.163322 +++  Cache FetchItems for sortk A# UID: [FYO4CDn2QWmSGOwCJB95PA==] 
FetchNode: 2020/08/16 02:14:08.163373  node: FYO4CDn2QWmSGOwCJB95PA== subKey: A#
anmgr 2020/08/16 02:14:08.163564 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.165940 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.511797ms
DB: 2020/08/16 02:14:08.166720 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.581715ms
FetchForUpdate: 2020/08/16 02:14:08.166753 len(nb): 1
fetchItems: 2020/08/16 02:14:08.166760 +++  Cache FetchItems for sortk A#G#:S UID: [8sNj/MCTT3uRsfpciFxQvg==] 
FetchNode: 2020/08/16 02:14:08.166765  node: 8sNj/MCTT3uRsfpciFxQvg== subKey: A#G#:S
DB: 2020/08/16 02:14:08.169569 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.776864ms
DB: 2020/08/16 02:14:08.174385 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.307236ms
anmgr 2020/08/16 02:14:08.179741 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.185121 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.860503ms
DB: 2020/08/16 02:14:08.188600 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.429138ms
DB: 2020/08/16 02:14:08.192355 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.666039ms
anmgr 2020/08/16 02:14:08.195200 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.198316 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.903406ms
DB: 2020/08/16 02:14:08.201817 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.42196ms
DB: 2020/08/16 02:14:08.205539 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.629019ms
anmgr 2020/08/16 02:14:08.211093 for loop finished 1  6 
anmgr 2020/08/16 02:14:08.211109 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.211124 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.211129 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.211134 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.211139 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.211405 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.80558ms
DB: 2020/08/16 02:14:08.214737 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.267338ms
DB: 2020/08/16 02:14:08.218339 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.523091ms
DB: 2020/08/16 02:14:08.221867 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.474405ms
Cache: 2020/08/16 02:14:08.221880 In SetUpredAvailable: pUid, tUID:  8sNj/MCTT3uRsfpciFxQvg== 8sNj/MCTT3uRsfpciFxQvg== A#G#:S
Cache: 2020/08/16 02:14:08.221884 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:14:08.225412 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.489497ms
Unlock: 2020/08/16 02:14:08.225426 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:14:08.225432 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:14:08.226562 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.229435 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.923565ms
grmgr: 2020/08/16 02:14:08.229448 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:14:08.231730 ** received on attachDoneCh.... 1
anmgr 2020/08/16 02:14:08.236781 About to run AttachNodeCh: b  c  oKtOtrOaQpu88SgTRaQdpw== 8sNj/MCTT3uRsfpciFxQvg==
anmgr 2020/08/16 02:14:08.236793 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:14:08.236801 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 02:14:08.236806 Looping..... 0
grmgr: 2020/08/16 02:14:08.236827 Looping..... 1
grmgr: 2020/08/16 02:14:08.236952 Looping..... 2
grmgr: 2020/08/16 02:14:08.237145 Looping..... 3
grmgr: 2020/08/16 02:14:08.237350 Looping..... 4
grmgr: 2020/08/16 02:14:08.237544 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:14:08.237554 goroutine about to start 3 cUID,pUID   oKtOtrOaQpu88SgTRaQdpw==  8sNj/MCTT3uRsfpciFxQvg==  
grmgr: 2020/08/16 02:14:08.237762 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:14:08.239967 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.344871ms
DB: 2020/08/16 02:14:08.242152 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.154242ms
DB: 2020/08/16 02:14:08.245765 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.560237ms
DB: 2020/08/16 02:14:08.249710 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.755245ms
AttachNode: main 2020/08/16 02:14:08.249723 FetchForUpdate: for parent    8sNj/MCTT3uRsfpciFxQvg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:14:08.249728 ** Cache FetchForUpdate Cache Key Value: [8sNj/MCTT3uRsfpciFxQvg==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:14:08.249733 +++  Cache FetchItems for sortk A#G#:S UID: [8sNj/MCTT3uRsfpciFxQvg==] 
FetchNode: 2020/08/16 02:14:08.249738  node: 8sNj/MCTT3uRsfpciFxQvg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:14:08.249910 FetchForUpdate: for child    oKtOtrOaQpu88SgTRaQdpw==
FetchForUpdate: 2020/08/16 02:14:08.249931 ** Cache FetchForUpdate Cache Key Value: [oKtOtrOaQpu88SgTRaQdpw==]   sortk: A#
fetchItems: 2020/08/16 02:14:08.249976 +++  Cache FetchItems for sortk A# UID: [oKtOtrOaQpu88SgTRaQdpw==] 
FetchNode: 2020/08/16 02:14:08.250016  node: oKtOtrOaQpu88SgTRaQdpw== subKey: A#
anmgr 2020/08/16 02:14:08.252244 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.252497 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.729159ms
DB: 2020/08/16 02:14:08.253395 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.319323ms
fetchItems: 2020/08/16 02:14:08.253537 +++  Cache FetchItems for sortk A# UID: [oKtOtrOaQpu88SgTRaQdpw==] 
FetchNode: 2020/08/16 02:14:08.253545  node: oKtOtrOaQpu88SgTRaQdpw== subKey: A#
DB: 2020/08/16 02:14:08.256457 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.885978ms
DB: 2020/08/16 02:14:08.257381 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.552803ms
DB: 2020/08/16 02:14:08.260798 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.389129ms
DB: 2020/08/16 02:14:08.260817 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.389129ms
DB: 2020/08/16 02:14:08.264340 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.488867ms
DB: 2020/08/16 02:14:08.264355 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.488867ms
anmgr 2020/08/16 02:14:08.267871 for loop finished 2  6 
anmgr 2020/08/16 02:14:08.267886 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.267893 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.267897 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.267902 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.267908 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.268324 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.81224ms
DB: 2020/08/16 02:14:08.272144 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.669543ms
DB: 2020/08/16 02:14:08.278260 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.792152ms
DB: 2020/08/16 02:14:08.281997 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.538032ms
anmgr 2020/08/16 02:14:08.283324 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.283336 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.283341 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.286103 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.743126ms
DB: 2020/08/16 02:14:08.292456 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.041317ms
DB: 2020/08/16 02:14:08.296157 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.408132ms
anmgr 2020/08/16 02:14:08.298805 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.300014 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.556427ms
DB: 2020/08/16 02:14:08.306198 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.888559ms
DB: 2020/08/16 02:14:08.309881 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.389608ms
DB: 2020/08/16 02:14:08.313774 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.582033ms
anmgr 2020/08/16 02:14:08.314250 for loop finished 2  6 
anmgr 2020/08/16 02:14:08.314266 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.314273 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.314278 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.314283 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.314288 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.317286 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.319239ms
Cache: 2020/08/16 02:14:08.317298 In SetUpredAvailable: pUid, tUID:  8sNj/MCTT3uRsfpciFxQvg== QzzSlMoMQZGc9Jv9Bd0H3w== A#G#:S
Cache: 2020/08/16 02:14:08.317303 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:14:08.321090 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.750343ms
Unlock: 2020/08/16 02:14:08.321100 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:14:08.321104 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:14:08.324972 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.818517ms
grmgr: 2020/08/16 02:14:08.324987 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:14:08.329795 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.329810 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.329815 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.329821 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:14:08.340137 About to run AttachNodeCh: c  abc  8sNj/MCTT3uRsfpciFxQvg== FYO4CDn2QWmSGOwCJB95PA==
anmgr 2020/08/16 02:14:08.340152 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:14:08.340159 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 02:14:08.340165 Looping..... 0
grmgr: 2020/08/16 02:14:08.340308 Looping..... 1
grmgr: 2020/08/16 02:14:08.340484 Looping..... 2
grmgr: 2020/08/16 02:14:08.340670 Looping..... 3
grmgr: 2020/08/16 02:14:08.340837 Looping..... 4
grmgr: 2020/08/16 02:14:08.341014 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:14:08.341024 goroutine about to start 4 cUID,pUID   8sNj/MCTT3uRsfpciFxQvg==  FYO4CDn2QWmSGOwCJB95PA==  
grmgr: 2020/08/16 02:14:08.341232 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:14:08.343216 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.119891ms
DB: 2020/08/16 02:14:08.345519 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.273387ms
DB: 2020/08/16 02:14:08.350090 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.51877ms
DB: 2020/08/16 02:14:08.354022 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.750772ms
AttachNode: main 2020/08/16 02:14:08.354035 FetchForUpdate: for parent    FYO4CDn2QWmSGOwCJB95PA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:14:08.354040 ** Cache FetchForUpdate Cache Key Value: [FYO4CDn2QWmSGOwCJB95PA==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:14:08.354045 +++  Cache FetchItems for sortk A#G#:S UID: [FYO4CDn2QWmSGOwCJB95PA==] 
FetchNode: 2020/08/16 02:14:08.354049  node: FYO4CDn2QWmSGOwCJB95PA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:14:08.354233 FetchForUpdate: for child    8sNj/MCTT3uRsfpciFxQvg==
FetchForUpdate: 2020/08/16 02:14:08.354241 ** Cache FetchForUpdate Cache Key Value: [8sNj/MCTT3uRsfpciFxQvg==]   sortk: A#
fetchItems: 2020/08/16 02:14:08.354247 +++  Cache FetchItems for sortk A# UID: [8sNj/MCTT3uRsfpciFxQvg==] 
FetchNode: 2020/08/16 02:14:08.354305  node: 8sNj/MCTT3uRsfpciFxQvg== subKey: A#
anmgr 2020/08/16 02:14:08.355639 for loop finished 3  6 
anmgr 2020/08/16 02:14:08.355653 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.355659 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.355664 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.355668 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.355673 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.357310 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.22954ms
DB: 2020/08/16 02:14:08.358163 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.810552ms
DB: 2020/08/16 02:14:08.361286 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.64602ms
DB: 2020/08/16 02:14:08.367229 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.872493ms
DB: 2020/08/16 02:14:08.370582 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.30286ms
anmgr 2020/08/16 02:14:08.371066 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.371078 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.371095 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.371100 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.371104 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.374122 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.439577ms
DB: 2020/08/16 02:14:08.380104 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.926063ms
DB: 2020/08/16 02:14:08.384175 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.771943ms
anmgr 2020/08/16 02:14:08.386530 for loop finished 3  6 
anmgr 2020/08/16 02:14:08.386543 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.386562 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.386570 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.386575 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.386592 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.388191 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.697006ms
DB: 2020/08/16 02:14:08.394522 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.020261ms
DB: 2020/08/16 02:14:08.398126 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.313831ms
anmgr 2020/08/16 02:14:08.402099 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.402113 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.402119 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.402124 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.402128 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.402533 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.089651ms
DB: 2020/08/16 02:14:08.406264 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.544906ms
Cache: 2020/08/16 02:14:08.406276 In SetUpredAvailable: pUid, tUID:  FYO4CDn2QWmSGOwCJB95PA== FYO4CDn2QWmSGOwCJB95PA== A#G#:S
Cache: 2020/08/16 02:14:08.406292 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:14:08.409912 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.581599ms
Unlock: 2020/08/16 02:14:08.409922 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:14:08.409927 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:14:08.414017 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.038285ms
grmgr: 2020/08/16 02:14:08.414035 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:14:08.417585 for loop finished 3  6 
anmgr 2020/08/16 02:14:08.417599 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.417606 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.417611 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.417617 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.417621 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.417626 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:14:08.427907 About to run AttachNodeCh: b  abc  oKtOtrOaQpu88SgTRaQdpw== FYO4CDn2QWmSGOwCJB95PA==
anmgr 2020/08/16 02:14:08.427923 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.427929 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.427934 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.427939 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.427944 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:14:08.427951 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 02:14:08.427956 Looping..... 0
grmgr: 2020/08/16 02:14:08.427969 Looping..... 1
grmgr: 2020/08/16 02:14:08.428075 Looping..... 2
grmgr: 2020/08/16 02:14:08.428249 Looping..... 3
grmgr: 2020/08/16 02:14:08.428423 Looping..... 4
grmgr: 2020/08/16 02:14:08.428598 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:14:08.428608 goroutine about to start 5 cUID,pUID   oKtOtrOaQpu88SgTRaQdpw==  FYO4CDn2QWmSGOwCJB95PA==  
grmgr: 2020/08/16 02:14:08.428835 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:14:08.431603 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.929945ms
DB: 2020/08/16 02:14:08.434591 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.934526ms
DB: 2020/08/16 02:14:08.438253 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.583964ms
DB: 2020/08/16 02:14:08.442139 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.713445ms
AttachNode: main 2020/08/16 02:14:08.442152 FetchForUpdate: for parent    FYO4CDn2QWmSGOwCJB95PA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:14:08.442158 ** Cache FetchForUpdate Cache Key Value: [FYO4CDn2QWmSGOwCJB95PA==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:14:08.442164 +++  Cache FetchItems for sortk A#G#:S UID: [FYO4CDn2QWmSGOwCJB95PA==] 
FetchNode: 2020/08/16 02:14:08.442168  node: FYO4CDn2QWmSGOwCJB95PA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:14:08.442349 FetchForUpdate: for child    oKtOtrOaQpu88SgTRaQdpw==
FetchForUpdate: 2020/08/16 02:14:08.442358 ** Cache FetchForUpdate Cache Key Value: [oKtOtrOaQpu88SgTRaQdpw==]   sortk: A#
fetchItems: 2020/08/16 02:14:08.442364 +++  Cache FetchItems for sortk A# UID: [oKtOtrOaQpu88SgTRaQdpw==] 
FetchNode: 2020/08/16 02:14:08.442376  node: oKtOtrOaQpu88SgTRaQdpw== subKey: A#
anmgr 2020/08/16 02:14:08.443749 for loop finished 4  6 
anmgr 2020/08/16 02:14:08.443771 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.443778 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.443783 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.443788 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.443792 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.443797 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.443802 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.443807 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.443811 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.443816 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.443821 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.445180 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.718828ms
DB: 2020/08/16 02:14:08.446227 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.02824ms
DB: 2020/08/16 02:14:08.450135 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.586676ms
DB: 2020/08/16 02:14:08.454325 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.152895ms
DB: 2020/08/16 02:14:08.454342 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.152895ms
DB: 2020/08/16 02:14:08.457740 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.366897ms
DB: 2020/08/16 02:14:08.457755 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.366897ms
anmgr 2020/08/16 02:14:08.459244 for loop finished 4  6 
anmgr 2020/08/16 02:14:08.459259 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.459265 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.459270 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.459275 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.459280 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.459284 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.459289 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.459294 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.459299 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.459304 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.459308 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.461491 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.675997ms
DB: 2020/08/16 02:14:08.465308 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.755698ms
DB: 2020/08/16 02:14:08.471216 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.825816ms
DB: 2020/08/16 02:14:08.474639 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.373443ms
anmgr 2020/08/16 02:14:08.475103 for loop finished 4  6 
anmgr 2020/08/16 02:14:08.475117 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.475124 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.475134 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.475139 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.475144 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.475149 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.475154 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.475159 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.475164 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.475169 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.475173 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.478220 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.477036ms
DB: 2020/08/16 02:14:08.484737 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.047063ms
DB: 2020/08/16 02:14:08.488569 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.41144ms
anmgr 2020/08/16 02:14:08.490551 for loop finished 4  6 
anmgr 2020/08/16 02:14:08.490565 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.490572 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.490577 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.490582 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.490587 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.490592 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.490597 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.490602 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.490607 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.490612 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.490616 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.492959 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.80376ms
DB: 2020/08/16 02:14:08.499398 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.99288ms
DB: 2020/08/16 02:14:08.503344 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.522863ms
anmgr 2020/08/16 02:14:08.506066 for loop finished 4  6 
anmgr 2020/08/16 02:14:08.506082 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.506089 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.506095 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.506101 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.506106 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.506112 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.506117 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.506123 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.506129 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.506134 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.506139 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:14:08.507600 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.67505ms
DB: 2020/08/16 02:14:08.512415 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.531308ms
Cache: 2020/08/16 02:14:08.512430 In SetUpredAvailable: pUid, tUID:  FYO4CDn2QWmSGOwCJB95PA== X366TBffTe+t6UzXioj8qw== A#G#:S
Cache: 2020/08/16 02:14:08.512435 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:14:08.515885 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.413019ms
Unlock: 2020/08/16 02:14:08.515895 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:14:08.515900 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:14:08.519888 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.937299ms
grmgr: 2020/08/16 02:14:08.519902 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:14:08.521626 for loop finished 4  6 
anmgr 2020/08/16 02:14:08.521637 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.521643 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.521648 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.521654 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.521659 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.521664 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.521668 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.521673 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.521678 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.521683 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.521688 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:14:08.521692 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:14:08.532049 About to run AttachNodeCh: c  b  8sNj/MCTT3uRsfpciFxQvg== oKtOtrOaQpu88SgTRaQdpw==
anmgr 2020/08/16 02:14:08.532064 for loop finished 5  6 
attachNode: 2020/08/16 02:14:08.532070 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 02:14:08.532076 Looping..... 0
grmgr: 2020/08/16 02:14:08.533383 Looping..... 1
grmgr: 2020/08/16 02:14:08.533555 Looping..... 2
grmgr: 2020/08/16 02:14:08.533728 Looping..... 3
grmgr: 2020/08/16 02:14:08.533901 Looping..... 4
grmgr: 2020/08/16 02:14:08.534075 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:14:08.534085 goroutine about to start 6 cUID,pUID   8sNj/MCTT3uRsfpciFxQvg==  oKtOtrOaQpu88SgTRaQdpw==  
rdfLoader: 2020/08/16 02:14:08.534092 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 02:14:08.534308 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:14:08.536538 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.384418ms
DB: 2020/08/16 02:14:08.538854 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.285074ms
DB: 2020/08/16 02:14:08.542367 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.462549ms
DB: 2020/08/16 02:14:08.546453 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.80597ms
AttachNode: main 2020/08/16 02:14:08.546465 FetchForUpdate: for parent    oKtOtrOaQpu88SgTRaQdpw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:14:08.546471 ** Cache FetchForUpdate Cache Key Value: [oKtOtrOaQpu88SgTRaQdpw==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:14:08.546477 +++  Cache FetchItems for sortk A#G#:S UID: [oKtOtrOaQpu88SgTRaQdpw==] 
FetchNode: 2020/08/16 02:14:08.546481  node: oKtOtrOaQpu88SgTRaQdpw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:14:08.546675 FetchForUpdate: for child    8sNj/MCTT3uRsfpciFxQvg==
FetchForUpdate: 2020/08/16 02:14:08.546696 ** Cache FetchForUpdate Cache Key Value: [8sNj/MCTT3uRsfpciFxQvg==]   sortk: A#
fetchItems: 2020/08/16 02:14:08.546702 +++  Cache FetchItems for sortk A# UID: [8sNj/MCTT3uRsfpciFxQvg==] 
FetchNode: 2020/08/16 02:14:08.546713  node: 8sNj/MCTT3uRsfpciFxQvg== subKey: A#
DB: 2020/08/16 02:14:08.549808 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.266345ms
DB: 2020/08/16 02:14:08.551059 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.294758ms
DB: 2020/08/16 02:14:08.557569 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.077404ms
DB: 2020/08/16 02:14:08.560830 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.229712ms
DB: 2020/08/16 02:14:08.560845 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.229712ms
DB: 2020/08/16 02:14:08.564308 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.433239ms
DB: 2020/08/16 02:14:08.564334 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.433239ms
DB: 2020/08/16 02:14:08.568483 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.857852ms
DB: 2020/08/16 02:14:08.572572 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.769925ms
DB: 2020/08/16 02:14:08.579588 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.80789ms
DB: 2020/08/16 02:14:08.582995 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.349905ms
DB: 2020/08/16 02:14:08.586632 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.52375ms
DB: 2020/08/16 02:14:08.592537 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.831806ms
DB: 2020/08/16 02:14:08.596002 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.407098ms
DB: 2020/08/16 02:14:08.600157 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.795633ms
DB: 2020/08/16 02:14:08.606611 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.152798ms
DB: 2020/08/16 02:14:08.610222 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.33176ms
DB: 2020/08/16 02:14:08.614142 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.604383ms
DB: 2020/08/16 02:14:08.618102 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.764897ms
Cache: 2020/08/16 02:14:08.618117 In SetUpredAvailable: pUid, tUID:  oKtOtrOaQpu88SgTRaQdpw== aVGLsq+UT1q0GgNzS1a4lw== A#G#:S
Cache: 2020/08/16 02:14:08.618123 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:14:08.622016 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.834972ms
Unlock: 2020/08/16 02:14:08.622026 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:14:08.622031 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:14:08.626044 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.937541ms
grmgr: 2020/08/16 02:14:08.626066 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 02:14:08.626073 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 02:14:08.626089 11.....
rdfLoader: 2020/08/16 02:14:08.626098 22.....error cnt: 2
rdfuuid: 2020/08/16 02:14:08.626451 Powering down...
errlog: 2020/08/16 02:14:08.626479 Powering down...
grmgr: 2020/08/16 02:14:08.626497 Powering down...
anmgr: 2020/08/16 02:14:08.626502 Powering down...
rdfLoader: 2020/08/16 02:14:08.626508 loader exists.....
DB:2020/08/16 02:36:25 log.go:18: ===============================================================================
anmgr: 2020/08/16 02:36:25.310352 Powering on...
rdfLoader: 2020/08/16 02:36:25.310692 saveNode started......
rdfLoader: 2020/08/16 02:36:25.310705 define saveNode limiter......
rdfuuid: 2020/08/16 02:36:25.310710 Powering on...
grmgr: 2020/08/16 02:36:25.310728 Powering on...
errlog: 2020/08/16 02:36:25.310750 Powering on...
rdfLoader: 2020/08/16 02:36:25.310758  principle goroutines started 
RDFreader: 2020/08/16 02:36:25.310773 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:36:25.310787 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 02:36:25.310793 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 02:36:25.310799 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 02:36:25.310804 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 02:36:25.310809 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 02:36:25.310813 spo read:      
RDFreader: 2020/08/16 02:36:25.310818 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 02:36:25.310823 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 02:36:25.310828 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 02:36:25.310833 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 02:36:25.310837 spo read:      
RDFreader: 2020/08/16 02:36:25.310842 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 02:36:25.310847 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 02:36:25.310851 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 02:36:25.310856 spo read:  b  Age  "58"
RDFreader: 2020/08/16 02:36:25.310861 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 02:36:25.310866 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 02:36:25.310871 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 02:36:25.310875 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 02:36:25.310880 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 02:36:25.310884 spo read:      
RDFreader: 2020/08/16 02:36:25.310888 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 02:36:25.310892 Send node batch on channel verifyCh
RDFreader: 2020/08/16 02:36:25.310900 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:36:25.310904 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 02:36:25.310908 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 02:36:25.310915 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 02:36:25.310920 spo read:  c  Age  "67"
RDFreader: 2020/08/16 02:36:25.310925 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 02:36:25.310929 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 02:36:25.310934 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 02:36:25.310938 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 02:36:25.310944 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 02:36:25.310949 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 02:36:25.310953 spo read:      
RDFreader: 2020/08/16 02:36:25.310958 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 02:36:25.310962 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 02:36:25.310967 spo read:  d  Friends  _:abc
RDFreader: 2020/08/16 02:36:25.310972 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 02:36:25.311011 spo read:  d  Age  "36"
RDFreader: 2020/08/16 02:36:25.311019 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 02:36:25.311026 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 02:36:25.311029 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 02:36:25.311036 close verify channel
rdfLoader: 2020/08/16 02:36:25.311040 verify started....
rdfLoader: 2020/08/16 02:36:25.311045 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:36:25.311048 .  getType..
rdfLoader: 2020/08/16 02:36:25.311057 node.TyName : [Person]
DB: 2020/08/16 02:36:25.382657 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 71.524419ms
grmgr: 2020/08/16 02:36:25.383393 Looping..... 0
grmgr: 2020/08/16 02:36:25.384969 Looping..... 1
grmgr: 2020/08/16 02:36:25.385082 Looping..... 2
grmgr: 2020/08/16 02:36:25.385258 Looping..... 3
grmgr: 2020/08/16 02:36:25.385472 Looping..... 4
grmgr: 2020/08/16 02:36:25.385620 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:36:25.385631 .  getType..
rdfLoader: 2020/08/16 02:36:25.385635 node.TyName : [Person]
grmgr: 2020/08/16 02:36:25.385640 Looping..... 0
unmarshalRDF: 2020/08/16 02:36:25.385652 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:36:25.385661 Looping..... 1
grmgr: 2020/08/16 02:36:25.385666 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:36:25.385669 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:36:25.385676 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:36:25.385679 .  getType..
rdfLoader: 2020/08/16 02:36:25.385683 node.TyName : [Person]
grmgr: 2020/08/16 02:36:25.385687 Looping..... 0
rdfLoader: 2020/08/16 02:36:25.385696 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:36:25.385700 Add to SS . [Alfa]
anmgr 2020/08/16 02:36:25.385731 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.385738 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:36:25.385775 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:36:25.385781 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 02:36:25.385790 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:36:25.385812 Looping..... 1
grmgr: 2020/08/16 02:36:25.385817 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:36:25.385820 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:36:25.385825 Looping..... 0
rdfLoader: 2020/08/16 02:36:25.385832 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:36:25.385836 Add to SS . [VW Golf]
anmgr 2020/08/16 02:36:25.385854 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.385859 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:36:25.385884 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:36:25.385888 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 02:36:25.385893 .  getType..
rdfLoader: 2020/08/16 02:36:25.385909 node.TyName : [Person]
unmarshalRDF: 2020/08/16 02:36:25.385917 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:36:25.385927 Looping..... 1
rdfLoader: 2020/08/16 02:36:25.385935 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 02:36:25.385939 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 02:36:25.385943 Add to SS . [Honda]
anmgr 2020/08/16 02:36:25.385954 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.385978 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:36:25.386004 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:36:25.386008 Exit  unmarshalRDF. 
grmgr: 2020/08/16 02:36:25.386032 Looping..... 2
grmgr: 2020/08/16 02:36:25.386212 Looping..... 3
grmgr: 2020/08/16 02:36:25.386387 Looping..... 4
grmgr: 2020/08/16 02:36:25.386562 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:36:25.386569 Looping..... 0
grmgr: 2020/08/16 02:36:25.386595 Looping..... 1
SaveRDFNode: xxx 2020/08/16 02:36:25.386604 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.386610 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.386616 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.386621 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.386626 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.386631 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.386636 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:36:25.386639 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:36:25.386646 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000016c00)}
SaveRDFNode: 2020/08/16 02:36:25.386649 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:36:25.386658 UID received  : Ue3Deeq+RPeEs9wtOe26kA==
grmgr: 2020/08/16 02:36:25.386886 Looping..... 2
grmgr: 2020/08/16 02:36:25.387095 Looping..... 3
grmgr: 2020/08/16 02:36:25.387266 Looping..... 4
grmgr: 2020/08/16 02:36:25.387480 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:36:25.387490 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 02:36:25.387495 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 02:36:25.387499 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 02:36:25.387503 Looping..... 0
unmarshalRDF: 2020/08/16 02:36:25.387534 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:36:25.387549 Looping..... 1
rdfLoader: 2020/08/16 02:36:25.387559 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 02:36:25.387604 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:36:25.387609 Exit  unmarshalRDF. 
anmgr 2020/08/16 02:36:25.387616 received on EdgeSnCn. anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
grmgr: 2020/08/16 02:36:25.387646 Looping..... 2
grmgr: 2020/08/16 02:36:25.387674 Looping..... 3
grmgr: 2020/08/16 02:36:25.387821 Looping..... 4
grmgr: 2020/08/16 02:36:25.387996 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:36:25.388004 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 02:36:25.388012 Looping..... 0
grmgr: 2020/08/16 02:36:25.388033 Looping..... 1
grmgr: 2020/08/16 02:36:25.388037 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:36:25.388041 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:36:25.388049 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.388054 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.388060 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.388065 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.388070 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.388075 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.388080 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:36:25.388083 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:36:25.388088 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0000170e0)}
SaveRDFNode: 2020/08/16 02:36:25.388091 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:36:25.388099 UID received  : TrZfPmWOQQ6D4CqFTby4VA==
DB: 2020/08/16 02:36:25.393872 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.184474ms
DB: 2020/08/16 02:36:25.397800 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.676597ms
DB: 2020/08/16 02:36:25.401360 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.527523ms
DB: 2020/08/16 02:36:25.406941 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.369001ms
DB: 2020/08/16 02:36:25.410307 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 16.402531ms
DB: 2020/08/16 02:36:25.411251 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.274986ms
DB: 2020/08/16 02:36:25.414778 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.496016ms
SaveRDFNode: 2020/08/16 02:36:25.414791 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000170e0)}
SaveRDFNode: 2020/08/16 02:36:25.414799 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:25.414812 a: = db.Item{PKey:[]uint8{0x4e, 0xb6, 0x5f, 0x3e, 0x65, 0x8e, 0x41, 0xe, 0x83, 0xe0, 0x2a, 0x85, 0x4d, 0xbc, 0xb8, 0x54}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:25.415546 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.204914ms
DB: 2020/08/16 02:36:25.418424 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.577832ms
SaveRDFNode: 2020/08/16 02:36:25.418581 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000170e0)}
SaveRDFNode: 2020/08/16 02:36:25.418595 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:25.418606 a: = db.Item{PKey:[]uint8{0x4e, 0xb6, 0x5f, 0x3e, 0x65, 0x8e, 0x41, 0xe, 0x83, 0xe0, 0x2a, 0x85, 0x4d, 0xbc, 0xb8, 0x54}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:25.419051 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.475126ms
DB: 2020/08/16 02:36:25.422160 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.512671ms
SaveRDFNode: 2020/08/16 02:36:25.422171 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:36:25.422180 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:36:25.422184 Send ack to waiting saveNode...
grmgr: 2020/08/16 02:36:25.422192 Looping..... 0
grmgr: 2020/08/16 02:36:25.422208 Looping..... 1
grmgr: 2020/08/16 02:36:25.422240 Looping..... 2
grmgr: 2020/08/16 02:36:25.422245 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:36:25.422264 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:36:25.422273 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.422279 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.422287 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.422292 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.422298 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.422304 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.422309 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:36:25.422313 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:36:25.422319 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000349ec0)}
SaveRDFNode: 2020/08/16 02:36:25.422323 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:36:25.422332 UID received  : 7dnofxrQR6WBWvSD107WUw==
DB: 2020/08/16 02:36:25.422681 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.598113ms
SaveRDFNode: 2020/08/16 02:36:25.422693 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016c00)}
SaveRDFNode: 2020/08/16 02:36:25.422700 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:25.422710 a: = db.Item{PKey:[]uint8{0x51, 0xed, 0xc3, 0x79, 0xea, 0xbe, 0x44, 0xf7, 0x84, 0xb3, 0xdc, 0x2d, 0x39, 0xed, 0xba, 0x90}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:25.426373 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.015929ms
DB: 2020/08/16 02:36:25.426577 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.836931ms
SaveRDFNode: 2020/08/16 02:36:25.426588 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016c00)}
SaveRDFNode: 2020/08/16 02:36:25.426612 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:25.426628 a: = db.Item{PKey:[]uint8{0x51, 0xed, 0xc3, 0x79, 0xea, 0xbe, 0x44, 0xf7, 0x84, 0xb3, 0xdc, 0x2d, 0x39, 0xed, 0xba, 0x90}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:25.429813 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.408382ms
DB: 2020/08/16 02:36:25.430230 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.562572ms
SaveRDFNode: 2020/08/16 02:36:25.430239 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:36:25.430246 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:36:25.430250 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 02:36:25.430274 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.430286 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.430292 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.430299 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.430304 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.430310 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:25.430316 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:36:25.430320 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:36:25.430325 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc00028ca20)}
SaveRDFNode: 2020/08/16 02:36:25.430329 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:36:25.430337 UID received  : zUPlwJLXQQCxe6pA/m76ZA==
grmgr: 2020/08/16 02:36:25.430490 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 02:36:25.433530 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.681417ms
DB: 2020/08/16 02:36:25.434008 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.629882ms
DB: 2020/08/16 02:36:25.437319 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.756939ms
DB: 2020/08/16 02:36:25.437809 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.627459ms
DB: 2020/08/16 02:36:25.441293 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.452648ms
DB: 2020/08/16 02:36:25.442839 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.488013ms
SaveRDFNode: 2020/08/16 02:36:25.442852 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000349ec0)}
SaveRDFNode: 2020/08/16 02:36:25.442860 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:25.442872 a: = db.Item{PKey:[]uint8{0xed, 0xd9, 0xe8, 0x7f, 0x1a, 0xd0, 0x47, 0xa5, 0x81, 0x5a, 0xf4, 0x83, 0xd7, 0x4e, 0xd6, 0x53}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:25.444899 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.573462ms
DB: 2020/08/16 02:36:25.446553 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.649533ms
SaveRDFNode: 2020/08/16 02:36:25.446565 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000349ec0)}
SaveRDFNode: 2020/08/16 02:36:25.446572 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:25.446582 a: = db.Item{PKey:[]uint8{0xed, 0xd9, 0xe8, 0x7f, 0x1a, 0xd0, 0x47, 0xa5, 0x81, 0x5a, 0xf4, 0x83, 0xd7, 0x4e, 0xd6, 0x53}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:25.448345 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.417022ms
SaveRDFNode: 2020/08/16 02:36:25.448358 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00028ca20)}
SaveRDFNode: 2020/08/16 02:36:25.448365 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:25.448375 a: = db.Item{PKey:[]uint8{0xcd, 0x43, 0xe5, 0xc0, 0x92, 0xd7, 0x41, 0x0, 0xb1, 0x7b, 0xaa, 0x40, 0xfe, 0x6e, 0xfa, 0x64}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:25.450169 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.558102ms
SaveRDFNode: 2020/08/16 02:36:25.450346 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:36:25.450362 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 02:36:25.452079 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.674226ms
SaveRDFNode: 2020/08/16 02:36:25.452091 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00028ca20)}
SaveRDFNode: 2020/08/16 02:36:25.452098 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:25.452109 a: = db.Item{PKey:[]uint8{0xcd, 0x43, 0xe5, 0xc0, 0x92, 0xd7, 0x41, 0x0, 0xb1, 0x7b, 0xaa, 0x40, 0xfe, 0x6e, 0xfa, 0x64}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:25.455770 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.607486ms
SaveRDFNode: 2020/08/16 02:36:25.455780 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 02:36:25.455788 saveNode finished waiting...exiting
grmgr: 2020/08/16 02:36:25.455794 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 02:36:25.455806 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.471308 About to run AttachNodeCh: abc  b  Ue3Deeq+RPeEs9wtOe26kA== TrZfPmWOQQ6D4CqFTby4VA==
anmgr 2020/08/16 02:36:25.471345 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:25.471354 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 02:36:25.471360 Looping..... 0
grmgr: 2020/08/16 02:36:25.471546 Looping..... 1
grmgr: 2020/08/16 02:36:25.471715 Looping..... 2
grmgr: 2020/08/16 02:36:25.471892 Looping..... 3
grmgr: 2020/08/16 02:36:25.472069 Looping..... 4
grmgr: 2020/08/16 02:36:25.472258 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:25.472267 goroutine about to start 1 cUID,pUID   Ue3Deeq+RPeEs9wtOe26kA==  TrZfPmWOQQ6D4CqFTby4VA==  
grmgr: 2020/08/16 02:36:25.472528 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:25.474936 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.586343ms
DB: 2020/08/16 02:36:25.477393 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.429037ms
DB: 2020/08/16 02:36:25.482844 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.399463ms
anmgr 2020/08/16 02:36:25.488789 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.491598 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.153967ms
AttachNode: main 2020/08/16 02:36:25.491624 FetchForUpdate: for parent    TrZfPmWOQQ6D4CqFTby4VA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:25.491630 ** Cache FetchForUpdate Cache Key Value: [TrZfPmWOQQ6D4CqFTby4VA==]   sortk: A#G#:S
FetchNode: 2020/08/16 02:36:25.491635  node: TrZfPmWOQQ6D4CqFTby4VA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:25.491831 FetchForUpdate: for child    Ue3Deeq+RPeEs9wtOe26kA==
FetchForUpdate: 2020/08/16 02:36:25.491840 ** Cache FetchForUpdate Cache Key Value: [Ue3Deeq+RPeEs9wtOe26kA==]   sortk: A#
FetchNode: 2020/08/16 02:36:25.491858  node: Ue3Deeq+RPeEs9wtOe26kA== subKey: A#
DB: 2020/08/16 02:36:25.494391 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.721292ms
FetchForUpdate: 2020/08/16 02:36:25.494434 len(nb): 1
fetchItems: 2020/08/16 02:36:25.494441 +++  Cache FetchItems for sortk A#G#:S UID: [TrZfPmWOQQ6D4CqFTby4VA==] 
FetchNode: 2020/08/16 02:36:25.494445  node: TrZfPmWOQQ6D4CqFTby4VA== subKey: A#G#:S
DB: 2020/08/16 02:36:25.498172 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.686206ms
DB: 2020/08/16 02:36:25.502671 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.887024ms
anmgr 2020/08/16 02:36:25.504377 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.508690 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 16.760276ms
FetchForUpdate: 2020/08/16 02:36:25.508821 len(nb): 7
fetchItems: 2020/08/16 02:36:25.508830 +++  Cache FetchItems for sortk A# UID: [Ue3Deeq+RPeEs9wtOe26kA==] 
FetchNode: 2020/08/16 02:36:25.508834  node: Ue3Deeq+RPeEs9wtOe26kA== subKey: A#
DB: 2020/08/16 02:36:25.513554 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.686665ms
anmgr 2020/08/16 02:36:25.521620 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.526195 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.956123ms
DB: 2020/08/16 02:36:25.530064 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.820017ms
DB: 2020/08/16 02:36:25.534047 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.877331ms
anmgr 2020/08/16 02:36:25.537087 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.540614 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.503478ms
DB: 2020/08/16 02:36:25.544976 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.30207ms
DB: 2020/08/16 02:36:25.549229 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.191714ms
anmgr 2020/08/16 02:36:25.552551 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:36:25.556313 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.027397ms
DB: 2020/08/16 02:36:25.560140 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.773484ms
DB: 2020/08/16 02:36:25.564078 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.871189ms
DB: 2020/08/16 02:36:25.567713 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.584361ms
Cache: 2020/08/16 02:36:25.567725 In SetUpredAvailable: pUid, tUID:  TrZfPmWOQQ6D4CqFTby4VA== TrZfPmWOQQ6D4CqFTby4VA== A#G#:S
Cache: 2020/08/16 02:36:25.567730 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 02:36:25.568006 for loop finished 0  7 
anmgr 2020/08/16 02:36:25.568018 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.568024 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.568029 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.572345 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.568955ms
Unlock: 2020/08/16 02:36:25.572358 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:25.572363 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:36:25.582220 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 9.794002ms
grmgr: 2020/08/16 02:36:25.582236 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:36:25.583433 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.583443 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:36:25.593780 About to run AttachNodeCh: b  abc  TrZfPmWOQQ6D4CqFTby4VA== Ue3Deeq+RPeEs9wtOe26kA==
anmgr 2020/08/16 02:36:25.593803 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:25.593813 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 02:36:25.593819 Looping..... 0
grmgr: 2020/08/16 02:36:25.593957 Looping..... 1
grmgr: 2020/08/16 02:36:25.594142 Looping..... 2
grmgr: 2020/08/16 02:36:25.594319 Looping..... 3
grmgr: 2020/08/16 02:36:25.594497 Looping..... 4
grmgr: 2020/08/16 02:36:25.594678 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:25.594689 goroutine about to start 2 cUID,pUID   TrZfPmWOQQ6D4CqFTby4VA==  Ue3Deeq+RPeEs9wtOe26kA==  
grmgr: 2020/08/16 02:36:25.594920 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:25.597379 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.623793ms
DB: 2020/08/16 02:36:25.600623 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.214827ms
DB: 2020/08/16 02:36:25.605044 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.366863ms
anmgr 2020/08/16 02:36:25.609647 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.611695 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.450483ms
AttachNode: main 2020/08/16 02:36:25.611711 FetchForUpdate: for parent    Ue3Deeq+RPeEs9wtOe26kA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:25.611717 ** Cache FetchForUpdate Cache Key Value: [Ue3Deeq+RPeEs9wtOe26kA==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:36:25.611723 +++  Cache FetchItems for sortk A#G#:S UID: [Ue3Deeq+RPeEs9wtOe26kA==] 
FetchNode: 2020/08/16 02:36:25.611728  node: Ue3Deeq+RPeEs9wtOe26kA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:25.611903 FetchForUpdate: for child    TrZfPmWOQQ6D4CqFTby4VA==
FetchForUpdate: 2020/08/16 02:36:25.611912 ** Cache FetchForUpdate Cache Key Value: [TrZfPmWOQQ6D4CqFTby4VA==]   sortk: A#
fetchItems: 2020/08/16 02:36:25.611917 +++  Cache FetchItems for sortk A# UID: [TrZfPmWOQQ6D4CqFTby4VA==] 
FetchNode: 2020/08/16 02:36:25.611930  node: TrZfPmWOQQ6D4CqFTby4VA== subKey: A#
DB: 2020/08/16 02:36:25.615014 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.010183ms
fetchItems: 2020/08/16 02:36:25.615197 +++  Cache FetchItems for sortk A# UID: [TrZfPmWOQQ6D4CqFTby4VA==] 
FetchNode: 2020/08/16 02:36:25.615205  node: TrZfPmWOQQ6D4CqFTby4VA== subKey: A#
DB: 2020/08/16 02:36:25.615508 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.750087ms
DB: 2020/08/16 02:36:25.618089 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.856241ms
anmgr 2020/08/16 02:36:25.625836 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.629649 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 14.056643ms
DB: 2020/08/16 02:36:25.637356 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.350669ms
anmgr 2020/08/16 02:36:25.641267 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:36:25.642182 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.641706ms
DB: 2020/08/16 02:36:25.646729 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.175483ms
DB: 2020/08/16 02:36:25.653561 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.483715ms
anmgr 2020/08/16 02:36:25.656745 for loop finished 1  7 
anmgr 2020/08/16 02:36:25.656762 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.656770 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.656775 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.657839 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.220893ms
DB: 2020/08/16 02:36:25.662081 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.159539ms
DB: 2020/08/16 02:36:25.668363 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.222928ms
anmgr 2020/08/16 02:36:25.672232 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.672248 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.672254 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.672784 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.349505ms
DB: 2020/08/16 02:36:25.676958 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.108409ms
DB: 2020/08/16 02:36:25.680670 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.659009ms
Cache: 2020/08/16 02:36:25.680683 In SetUpredAvailable: pUid, tUID:  Ue3Deeq+RPeEs9wtOe26kA== Ue3Deeq+RPeEs9wtOe26kA== A#G#:S
Cache: 2020/08/16 02:36:25.680688 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:36:25.684432 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.693669ms
Unlock: 2020/08/16 02:36:25.684444 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:25.684449 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:36:25.687657 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.688892 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.386748ms
grmgr: 2020/08/16 02:36:25.688911 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:36:25.692734 ** received on attachDoneCh.... 1
anmgr 2020/08/16 02:36:25.697932 About to run AttachNodeCh: c  abc  7dnofxrQR6WBWvSD107WUw== Ue3Deeq+RPeEs9wtOe26kA==
anmgr 2020/08/16 02:36:25.697947 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:25.697954 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 02:36:25.697960 Looping..... 0
grmgr: 2020/08/16 02:36:25.698101 Looping..... 1
grmgr: 2020/08/16 02:36:25.698274 Looping..... 2
grmgr: 2020/08/16 02:36:25.698449 Looping..... 3
grmgr: 2020/08/16 02:36:25.698631 Looping..... 4
grmgr: 2020/08/16 02:36:25.698799 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:25.698809 goroutine about to start 3 cUID,pUID   7dnofxrQR6WBWvSD107WUw==  Ue3Deeq+RPeEs9wtOe26kA==  
grmgr: 2020/08/16 02:36:25.699073 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:25.702737 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.847554ms
DB: 2020/08/16 02:36:25.706027 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.253313ms
DB: 2020/08/16 02:36:25.711933 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.847127ms
anmgr 2020/08/16 02:36:25.713346 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:36:25.717741 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.738494ms
AttachNode: main 2020/08/16 02:36:25.717755 FetchForUpdate: for parent    Ue3Deeq+RPeEs9wtOe26kA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:25.717760 ** Cache FetchForUpdate Cache Key Value: [Ue3Deeq+RPeEs9wtOe26kA==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:36:25.717767 +++  Cache FetchItems for sortk A#G#:S UID: [Ue3Deeq+RPeEs9wtOe26kA==] 
FetchNode: 2020/08/16 02:36:25.717772  node: Ue3Deeq+RPeEs9wtOe26kA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:25.717940 FetchForUpdate: for child    7dnofxrQR6WBWvSD107WUw==
FetchForUpdate: 2020/08/16 02:36:25.717949 ** Cache FetchForUpdate Cache Key Value: [7dnofxrQR6WBWvSD107WUw==]   sortk: A#
FetchNode: 2020/08/16 02:36:25.717963  node: 7dnofxrQR6WBWvSD107WUw== subKey: A#
DB: 2020/08/16 02:36:25.720829 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.021135ms
DB: 2020/08/16 02:36:25.721692 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.654246ms
FetchForUpdate: 2020/08/16 02:36:25.721814 len(nb): 7
fetchItems: 2020/08/16 02:36:25.721823 +++  Cache FetchItems for sortk A# UID: [7dnofxrQR6WBWvSD107WUw==] 
FetchNode: 2020/08/16 02:36:25.721828  node: 7dnofxrQR6WBWvSD107WUw== subKey: A#
DB: 2020/08/16 02:36:25.724655 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.796138ms
DB: 2020/08/16 02:36:25.727853 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.633199ms
anmgr 2020/08/16 02:36:25.728747 for loop finished 2  7 
anmgr 2020/08/16 02:36:25.728773 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.728780 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.728785 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.731631 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.741829ms
DB: 2020/08/16 02:36:25.731646 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.741829ms
DB: 2020/08/16 02:36:25.736004 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.327393ms
DB: 2020/08/16 02:36:25.736019 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.327393ms
DB: 2020/08/16 02:36:25.741417 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.199011ms
anmgr 2020/08/16 02:36:25.744241 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.744261 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.744266 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.745939 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.35599ms
DB: 2020/08/16 02:36:25.751671 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.398084ms
DB: 2020/08/16 02:36:25.755692 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.839046ms
anmgr 2020/08/16 02:36:25.759693 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.759709 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.759716 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.761163 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.108284ms
DB: 2020/08/16 02:36:25.766762 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.286166ms
DB: 2020/08/16 02:36:25.771365 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.266327ms
anmgr 2020/08/16 02:36:25.775259 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:36:25.775976 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.305729ms
DB: 2020/08/16 02:36:25.782345 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.055891ms
DB: 2020/08/16 02:36:25.786507 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.862277ms
DB: 2020/08/16 02:36:25.790576 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.007218ms
anmgr 2020/08/16 02:36:25.790892 for loop finished 2  7 
anmgr 2020/08/16 02:36:25.790907 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.790935 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.790941 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.794760 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.130529ms
Cache: 2020/08/16 02:36:25.794773 In SetUpredAvailable: pUid, tUID:  Ue3Deeq+RPeEs9wtOe26kA== Lxp+uCucSCmackHZOHThyw== A#G#:S
Cache: 2020/08/16 02:36:25.794778 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:36:25.798797 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.985195ms
Unlock: 2020/08/16 02:36:25.798807 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:25.798811 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:36:25.803233 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.366775ms
grmgr: 2020/08/16 02:36:25.803247 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:36:25.806464 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.806478 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.806484 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.806489 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:36:25.816753 About to run AttachNodeCh: b  c  TrZfPmWOQQ6D4CqFTby4VA== 7dnofxrQR6WBWvSD107WUw==
anmgr 2020/08/16 02:36:25.816771 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.816778 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.816782 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:25.816789 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 02:36:25.816795 Looping..... 0
grmgr: 2020/08/16 02:36:25.816815 Looping..... 1
grmgr: 2020/08/16 02:36:25.816924 Looping..... 2
grmgr: 2020/08/16 02:36:25.817100 Looping..... 3
grmgr: 2020/08/16 02:36:25.817276 Looping..... 4
grmgr: 2020/08/16 02:36:25.817453 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:25.817464 goroutine about to start 4 cUID,pUID   TrZfPmWOQQ6D4CqFTby4VA==  7dnofxrQR6WBWvSD107WUw==  
grmgr: 2020/08/16 02:36:25.817686 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:25.820046 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.519087ms
DB: 2020/08/16 02:36:25.825570 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.490869ms
DB: 2020/08/16 02:36:25.830645 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.009624ms
anmgr 2020/08/16 02:36:25.832231 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:36:25.835153 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.326936ms
AttachNode: main 2020/08/16 02:36:25.835165 FetchForUpdate: for parent    7dnofxrQR6WBWvSD107WUw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:25.835170 ** Cache FetchForUpdate Cache Key Value: [7dnofxrQR6WBWvSD107WUw==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:36:25.835176 +++  Cache FetchItems for sortk A#G#:S UID: [7dnofxrQR6WBWvSD107WUw==] 
FetchNode: 2020/08/16 02:36:25.835180  node: 7dnofxrQR6WBWvSD107WUw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:25.835350 FetchForUpdate: for child    TrZfPmWOQQ6D4CqFTby4VA==
FetchForUpdate: 2020/08/16 02:36:25.835358 ** Cache FetchForUpdate Cache Key Value: [TrZfPmWOQQ6D4CqFTby4VA==]   sortk: A#
fetchItems: 2020/08/16 02:36:25.835364 +++  Cache FetchItems for sortk A# UID: [TrZfPmWOQQ6D4CqFTby4VA==] 
FetchNode: 2020/08/16 02:36:25.835376  node: TrZfPmWOQQ6D4CqFTby4VA== subKey: A#
DB: 2020/08/16 02:36:25.837806 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.594091ms
DB: 2020/08/16 02:36:25.838612 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.149096ms
DB: 2020/08/16 02:36:25.841951 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.897669ms
DB: 2020/08/16 02:36:25.847559 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.285892ms
anmgr 2020/08/16 02:36:25.847928 About to run AttachNodeCh: d  abc  zUPlwJLXQQCxe6pA/m76ZA== Ue3Deeq+RPeEs9wtOe26kA==
anmgr 2020/08/16 02:36:25.847938 for loop finished 3  7 
anmgr 2020/08/16 02:36:25.847946 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.847952 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.847975 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:25.847998 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 02:36:25.848004 Looping..... 0
grmgr: 2020/08/16 02:36:25.848018 Looping..... 1
grmgr: 2020/08/16 02:36:25.848184 Looping..... 2
grmgr: 2020/08/16 02:36:25.848359 Looping..... 3
grmgr: 2020/08/16 02:36:25.848533 Looping..... 4
grmgr: 2020/08/16 02:36:25.848723 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:25.848740 goroutine about to start 5 cUID,pUID   zUPlwJLXQQCxe6pA/m76ZA==  Ue3Deeq+RPeEs9wtOe26kA==  
grmgr: 2020/08/16 02:36:25.848950 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 02:36:25.851178 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.379142ms
DB: 2020/08/16 02:36:25.851917 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.168026ms
DB: 2020/08/16 02:36:25.854546 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.338278ms
DB: 2020/08/16 02:36:25.859300 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.02869ms
DB: 2020/08/16 02:36:25.859993 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.398848ms
DB: 2020/08/16 02:36:25.864159 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.105923ms
AttachNode: main 2020/08/16 02:36:25.864173 FetchForUpdate: for parent    Ue3Deeq+RPeEs9wtOe26kA==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 02:36:25.864178 ** Cache FetchForUpdate Cache Key Value: [Ue3Deeq+RPeEs9wtOe26kA==]   sortk: A#G#:F
fetchItems: 2020/08/16 02:36:25.864184 +++  Cache FetchItems for sortk A#G#:F UID: [Ue3Deeq+RPeEs9wtOe26kA==] 
FetchNode: 2020/08/16 02:36:25.864189  node: Ue3Deeq+RPeEs9wtOe26kA== subKey: A#G#:F
AttachNode: gr1 2020/08/16 02:36:25.864356 FetchForUpdate: for child    zUPlwJLXQQCxe6pA/m76ZA==
FetchForUpdate: 2020/08/16 02:36:25.864365 ** Cache FetchForUpdate Cache Key Value: [zUPlwJLXQQCxe6pA/m76ZA==]   sortk: A#
FetchNode: 2020/08/16 02:36:25.864377  node: zUPlwJLXQQCxe6pA/m76ZA== subKey: A#
anmgr 2020/08/16 02:36:25.864774 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.864785 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.864790 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.864795 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.864800 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.864805 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.864809 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.866378 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.768818ms
DB: 2020/08/16 02:36:25.867249 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.012244ms
DB: 2020/08/16 02:36:25.872947 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 8.503218ms
FetchForUpdate: 2020/08/16 02:36:25.873234 len(nb): 7
fetchItems: 2020/08/16 02:36:25.873250 +++  Cache FetchItems for sortk A# UID: [zUPlwJLXQQCxe6pA/m76ZA==] 
FetchNode: 2020/08/16 02:36:25.873255  node: zUPlwJLXQQCxe6pA/m76ZA== subKey: A#
DB: 2020/08/16 02:36:25.877097 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 10.35941ms
DB: 2020/08/16 02:36:25.878421 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 10.940977ms
DB: 2020/08/16 02:36:25.880589 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 7.280004ms
anmgr 2020/08/16 02:36:25.885242 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.885277 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.885282 for loop finished 3  7 
anmgr 2020/08/16 02:36:25.885288 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.885293 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.885298 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.887734 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.340871ms
DB: 2020/08/16 02:36:25.895438 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 17.714436ms
DB: 2020/08/16 02:36:25.901322 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.253082ms
anmgr 2020/08/16 02:36:25.901905 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.901917 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.901922 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.901927 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.901932 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.901937 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.901960 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.905402 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.662615ms
DB: 2020/08/16 02:36:25.906722 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 18.73614ms
DB: 2020/08/16 02:36:25.910058 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.174753ms
DB: 2020/08/16 02:36:25.914108 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.813907ms
DB: 2020/08/16 02:36:25.914918 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.466408ms
Cache: 2020/08/16 02:36:25.914931 In SetUpredAvailable: pUid, tUID:  7dnofxrQR6WBWvSD107WUw== 7dnofxrQR6WBWvSD107WUw== A#G#:S
Cache: 2020/08/16 02:36:25.914936 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 02:36:25.917756 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.917768 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.917772 for loop finished 3  7 
anmgr 2020/08/16 02:36:25.917777 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.917783 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.917796 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.918956 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.922023ms
Unlock: 2020/08/16 02:36:25.918965 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:25.918969 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:36:25.920035 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.344747ms
DB: 2020/08/16 02:36:25.924964 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.515547ms
DB: 2020/08/16 02:36:25.926514 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.442206ms
grmgr: 2020/08/16 02:36:25.926528 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 02:36:25.928117 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:36:25.928131 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.928137 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.928141 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.928146 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.928151 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.928156 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.928161 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.931614 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.187967ms
DB: 2020/08/16 02:36:25.940573 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.35843ms
anmgr 2020/08/16 02:36:25.943605 About to run AttachNodeCh: c  b  7dnofxrQR6WBWvSD107WUw== TrZfPmWOQQ6D4CqFTby4VA==
anmgr 2020/08/16 02:36:25.943620 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.943626 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.943631 for loop finished 4  7 
anmgr 2020/08/16 02:36:25.943635 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.943641 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.943645 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:25.943651 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 02:36:25.943657 Looping..... 0
grmgr: 2020/08/16 02:36:25.943776 Looping..... 1
grmgr: 2020/08/16 02:36:25.943950 Looping..... 2
grmgr: 2020/08/16 02:36:25.944125 Looping..... 3
grmgr: 2020/08/16 02:36:25.944299 Looping..... 4
DB: 2020/08/16 02:36:25.944522 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.535338ms
grmgr: 2020/08/16 02:36:25.945154 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:25.945176 goroutine about to start 6 cUID,pUID   7dnofxrQR6WBWvSD107WUw==  TrZfPmWOQQ6D4CqFTby4VA==  
grmgr: 2020/08/16 02:36:25.945386 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 02:36:25.948968 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.988337ms
DB: 2020/08/16 02:36:25.953140 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.754561ms
Cache: 2020/08/16 02:36:25.953155 In SetUpredAvailable: pUid, tUID:  Ue3Deeq+RPeEs9wtOe26kA== Ue3Deeq+RPeEs9wtOe26kA== A#G#:F
Cache: 2020/08/16 02:36:25.953160 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:36:25.956840 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.6433ms
Unlock: 2020/08/16 02:36:25.956862 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:25.956867 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:36:25.959178 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.959190 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.959195 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.959200 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.959204 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.959209 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.959213 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.959218 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.959223 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.959227 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.959232 for loop finished 4  7 
anmgr 2020/08/16 02:36:25.959236 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.959241 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.959246 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.960223 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 14.956155ms
DB: 2020/08/16 02:36:25.960985 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.062637ms
grmgr: 2020/08/16 02:36:25.960997 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:25.962814 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.562311ms
anmgr 2020/08/16 02:36:25.964522 ** received on attachDoneCh.... 1
anmgr 2020/08/16 02:36:25.970212 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.970226 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.970232 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.970237 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.970242 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.970247 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.970252 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.970257 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.970263 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.970268 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.970273 for loop finished 5  7 
anmgr 2020/08/16 02:36:25.970277 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.970283 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.970287 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.970395 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.533173ms
DB: 2020/08/16 02:36:25.976013 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.420724ms
AttachNode: main 2020/08/16 02:36:25.976027 FetchForUpdate: for parent    TrZfPmWOQQ6D4CqFTby4VA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:25.976033 ** Cache FetchForUpdate Cache Key Value: [TrZfPmWOQQ6D4CqFTby4VA==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:36:25.976038 +++  Cache FetchItems for sortk A#G#:S UID: [TrZfPmWOQQ6D4CqFTby4VA==] 
FetchNode: 2020/08/16 02:36:25.976051  node: TrZfPmWOQQ6D4CqFTby4VA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:25.976212 FetchForUpdate: for child    7dnofxrQR6WBWvSD107WUw==
FetchForUpdate: 2020/08/16 02:36:25.976220 ** Cache FetchForUpdate Cache Key Value: [7dnofxrQR6WBWvSD107WUw==]   sortk: A#
fetchItems: 2020/08/16 02:36:25.976237 +++  Cache FetchItems for sortk A# UID: [7dnofxrQR6WBWvSD107WUw==] 
FetchNode: 2020/08/16 02:36:25.976251  node: 7dnofxrQR6WBWvSD107WUw== subKey: A#
DB: 2020/08/16 02:36:25.978908 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.824432ms
DB: 2020/08/16 02:36:25.980502 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.192445ms
DB: 2020/08/16 02:36:25.983157 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.035103ms
anmgr 2020/08/16 02:36:25.985906 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.985923 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.985927 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.985932 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.985937 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.985942 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.985946 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.985951 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.985956 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.985972 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:25.985977 for loop finished 5  7 
anmgr 2020/08/16 02:36:25.985982 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.985987 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:25.985991 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:25.986843 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.645199ms
DB: 2020/08/16 02:36:25.986857 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.645199ms
DB: 2020/08/16 02:36:25.990583 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.679938ms
DB: 2020/08/16 02:36:25.990612 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.679938ms
DB: 2020/08/16 02:36:25.994598 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.904026ms
DB: 2020/08/16 02:36:25.999095 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.429682ms
anmgr 2020/08/16 02:36:26.001442 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.001455 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.001460 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.001465 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.001470 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.001475 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.001480 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.001484 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.001489 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:26.001503 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:26.001508 for loop finished 5  7 
anmgr 2020/08/16 02:36:26.001513 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.001518 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.001523 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:26.005827 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.659562ms
DB: 2020/08/16 02:36:26.009631 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.746969ms
DB: 2020/08/16 02:36:26.013699 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.946114ms
anmgr 2020/08/16 02:36:26.016877 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.016892 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.016897 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.016902 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.016907 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.016912 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.016917 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.016922 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.016927 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:26.016934 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:26.016938 for loop finished 5  7 
anmgr 2020/08/16 02:36:26.016943 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.016949 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.016954 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:26.019836 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.063225ms
DB: 2020/08/16 02:36:26.024643 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.468564ms
DB: 2020/08/16 02:36:26.028764 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.77619ms
anmgr 2020/08/16 02:36:26.032431 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.032450 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.032455 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.032460 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.032465 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.032470 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.032475 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.032480 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.032485 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:26.032489 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:26.032494 for loop finished 5  7 
anmgr 2020/08/16 02:36:26.032498 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.032515 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.032520 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:26.035256 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.180081ms
DB: 2020/08/16 02:36:26.039443 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.853328ms
DB: 2020/08/16 02:36:26.043642 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.882927ms
DB: 2020/08/16 02:36:26.047767 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.933341ms
Cache: 2020/08/16 02:36:26.047783 In SetUpredAvailable: pUid, tUID:  TrZfPmWOQQ6D4CqFTby4VA== IlnC4GreR2SKGco6BQBm5w== A#G#:S
Cache: 2020/08/16 02:36:26.047790 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 02:36:26.048003 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.048024 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.048045 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.048056 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.048062 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.048069 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.048074 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.048080 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.048085 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:26.048095 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:26.048100 for loop finished 5  7 
anmgr 2020/08/16 02:36:26.048105 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.048111 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.048116 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:26.052333 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.506743ms
Unlock: 2020/08/16 02:36:26.052345 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:26.052350 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:36:26.056436 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.018654ms
grmgr: 2020/08/16 02:36:26.056451 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:36:26.058452 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:36:26.058466 About to run AttachNodeCh: abc  c  Ue3Deeq+RPeEs9wtOe26kA== 7dnofxrQR6WBWvSD107WUw==
anmgr 2020/08/16 02:36:26.058473 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.058479 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.058483 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.058487 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.058492 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.058496 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.058501 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.058505 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:26.058510 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:26.058514 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:26.058518 for loop finished 6  7 
attachNode: 2020/08/16 02:36:26.058523 read from AttachNodeCh channel 7 now ASK limiter
grmgr: 2020/08/16 02:36:26.058528 Looping..... 0
grmgr: 2020/08/16 02:36:26.058541 Looping..... 1
grmgr: 2020/08/16 02:36:26.058624 Looping..... 2
grmgr: 2020/08/16 02:36:26.058799 Looping..... 3
grmgr: 2020/08/16 02:36:26.058981 Looping..... 4
grmgr: 2020/08/16 02:36:26.059158 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:26.059168 goroutine about to start 7 cUID,pUID   Ue3Deeq+RPeEs9wtOe26kA==  7dnofxrQR6WBWvSD107WUw==  
rdfLoader: 2020/08/16 02:36:26.059173 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 02:36:26.059367 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:26.062345 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.114961ms
DB: 2020/08/16 02:36:26.067641 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.259969ms
DB: 2020/08/16 02:36:26.072867 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.1489ms
DB: 2020/08/16 02:36:26.077639 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.580159ms
AttachNode: main 2020/08/16 02:36:26.077655 FetchForUpdate: for parent    7dnofxrQR6WBWvSD107WUw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:26.077661 ** Cache FetchForUpdate Cache Key Value: [7dnofxrQR6WBWvSD107WUw==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:36:26.077666 +++  Cache FetchItems for sortk A#G#:S UID: [7dnofxrQR6WBWvSD107WUw==] 
FetchNode: 2020/08/16 02:36:26.077671  node: 7dnofxrQR6WBWvSD107WUw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:26.077828 FetchForUpdate: for child    Ue3Deeq+RPeEs9wtOe26kA==
FetchForUpdate: 2020/08/16 02:36:26.077837 ** Cache FetchForUpdate Cache Key Value: [Ue3Deeq+RPeEs9wtOe26kA==]   sortk: A#
fetchItems: 2020/08/16 02:36:26.077842 +++  Cache FetchItems for sortk A# UID: [Ue3Deeq+RPeEs9wtOe26kA==] 
FetchNode: 2020/08/16 02:36:26.077854  node: Ue3Deeq+RPeEs9wtOe26kA== subKey: A#
DB: 2020/08/16 02:36:26.081196 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.491641ms
DB: 2020/08/16 02:36:26.082241 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 13  Duration: 4.32432ms
DB: 2020/08/16 02:36:26.085621 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.078661ms
DB: 2020/08/16 02:36:26.089226 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.569555ms
DB: 2020/08/16 02:36:26.089243 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.569555ms
DB: 2020/08/16 02:36:26.092865 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.591523ms
DB: 2020/08/16 02:36:26.092880 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.591523ms
DB: 2020/08/16 02:36:26.097175 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.138611ms
DB: 2020/08/16 02:36:26.101615 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.291027ms
DB: 2020/08/16 02:36:26.108359 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.354162ms
DB: 2020/08/16 02:36:26.112227 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.677881ms
DB: 2020/08/16 02:36:26.116797 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.179373ms
DB: 2020/08/16 02:36:26.123610 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.304713ms
DB: 2020/08/16 02:36:26.127503 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.597315ms
DB: 2020/08/16 02:36:26.131820 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.009743ms
DB: 2020/08/16 02:36:26.138599 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.363385ms
DB: 2020/08/16 02:36:26.143629 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.447459ms
DB: 2020/08/16 02:36:26.147754 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.030599ms
DB: 2020/08/16 02:36:26.151450 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.630004ms
Cache: 2020/08/16 02:36:26.151463 In SetUpredAvailable: pUid, tUID:  7dnofxrQR6WBWvSD107WUw== AN+r7vWVRbeVeGUQvk5iSw== A#G#:S
Cache: 2020/08/16 02:36:26.151468 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:36:26.155247 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.743486ms
Unlock: 2020/08/16 02:36:26.155256 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:26.155261 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:36:26.159359 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.045378ms
grmgr: 2020/08/16 02:36:26.159390 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 02:36:26.159397 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 02:36:26.159403 11.....
rdfLoader: 2020/08/16 02:36:26.159410 22.....error cnt: 0
rdfuuid: 2020/08/16 02:36:26.159416 Powering down...
errlog: 2020/08/16 02:36:26.159421 Powering down...
grmgr: 2020/08/16 02:36:26.159425 Powering down...
anmgr: 2020/08/16 02:36:26.159429 Powering down...
rdfLoader: 2020/08/16 02:36:26.159434 loader exists.....
DB:2020/08/16 02:36:46 log.go:18: ===============================================================================
anmgr: 2020/08/16 02:36:46.264781 Powering on...
rdfLoader: 2020/08/16 02:36:46.265112 saveNode started......
rdfLoader: 2020/08/16 02:36:46.265125 define saveNode limiter......
rdfuuid: 2020/08/16 02:36:46.265129 Powering on...
grmgr: 2020/08/16 02:36:46.265148 Powering on...
errlog: 2020/08/16 02:36:46.265161 Powering on...
rdfLoader: 2020/08/16 02:36:46.265169  principle goroutines started 
RDFreader: 2020/08/16 02:36:46.265185 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:36:46.265200 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 02:36:46.265206 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 02:36:46.265211 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 02:36:46.265217 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 02:36:46.265222 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 02:36:46.265226 spo read:      
RDFreader: 2020/08/16 02:36:46.265231 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 02:36:46.265236 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 02:36:46.265262 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 02:36:46.265268 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 02:36:46.265272 spo read:      
RDFreader: 2020/08/16 02:36:46.265277 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 02:36:46.265282 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 02:36:46.265287 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 02:36:46.265292 spo read:  b  Age  "58"
RDFreader: 2020/08/16 02:36:46.265297 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 02:36:46.265302 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 02:36:46.265307 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 02:36:46.265312 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 02:36:46.265316 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 02:36:46.265320 spo read:      
RDFreader: 2020/08/16 02:36:46.265325 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 02:36:46.265329 Send node batch on channel verifyCh
RDFreader: 2020/08/16 02:36:46.265337 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:36:46.265341 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 02:36:46.265346 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 02:36:46.265360 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 02:36:46.265365 spo read:  c  Age  "67"
RDFreader: 2020/08/16 02:36:46.265370 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 02:36:46.265375 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 02:36:46.265379 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 02:36:46.265384 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 02:36:46.265390 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 02:36:46.265395 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 02:36:46.265399 spo read:      
RDFreader: 2020/08/16 02:36:46.265421 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 02:36:46.265427 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 02:36:46.265432 spo read:  d  Friends  _:abc
RDFreader: 2020/08/16 02:36:46.265437 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 02:36:46.265442 spo read:  d  Age  "36"
RDFreader: 2020/08/16 02:36:46.265446 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 02:36:46.265453 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 02:36:46.265457 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 02:36:46.265463 close verify channel
rdfLoader: 2020/08/16 02:36:46.265467 verify started....
rdfLoader: 2020/08/16 02:36:46.265471 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:36:46.265475 .  getType..
rdfLoader: 2020/08/16 02:36:46.265479 node.TyName : [Person]
DB: 2020/08/16 02:36:46.334777 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 69.225ms
grmgr: 2020/08/16 02:36:46.334922 Looping..... 0
grmgr: 2020/08/16 02:36:46.335195 Looping..... 1
grmgr: 2020/08/16 02:36:46.335217 Looping..... 2
grmgr: 2020/08/16 02:36:46.335346 Looping..... 3
grmgr: 2020/08/16 02:36:46.335520 Looping..... 4
grmgr: 2020/08/16 02:36:46.335695 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:36:46.335706 .  getType..
rdfLoader: 2020/08/16 02:36:46.335711 node.TyName : [Person]
grmgr: 2020/08/16 02:36:46.335716 Looping..... 0
unmarshalRDF: 2020/08/16 02:36:46.335729 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:36:46.335739 Looping..... 1
grmgr: 2020/08/16 02:36:46.335744 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:36:46.335748 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:36:46.335756 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:36:46.335759 .  getType..
rdfLoader: 2020/08/16 02:36:46.335763 node.TyName : [Person]
grmgr: 2020/08/16 02:36:46.335768 Looping..... 0
rdfLoader: 2020/08/16 02:36:46.335778 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:36:46.335783 Add to SS . [Alfa]
anmgr 2020/08/16 02:36:46.335819 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.335826 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:36:46.335869 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:36:46.335875 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 02:36:46.335885 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:36:46.335909 Looping..... 1
grmgr: 2020/08/16 02:36:46.335914 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:36:46.335919 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:36:46.335924 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 02:36:46.335928 Looping..... 0
rdfLoader: 2020/08/16 02:36:46.335946 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:36:46.335951 Add to SS . [VW Golf]
anmgr 2020/08/16 02:36:46.335964 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.335970 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:36:46.335996 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:36:46.336000 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 02:36:46.336005 .  getType..
rdfLoader: 2020/08/16 02:36:46.336009 node.TyName : [Person]
unmarshalRDF: 2020/08/16 02:36:46.336018 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:36:46.336028 Looping..... 1
rdfLoader: 2020/08/16 02:36:46.336037 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 02:36:46.336041 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 02:36:46.336045 Add to SS . [Honda]
anmgr 2020/08/16 02:36:46.336074 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.336081 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:36:46.336106 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:36:46.336110 Exit  unmarshalRDF. 
grmgr: 2020/08/16 02:36:46.336134 Looping..... 2
grmgr: 2020/08/16 02:36:46.336312 Looping..... 3
grmgr: 2020/08/16 02:36:46.336486 Looping..... 4
grmgr: 2020/08/16 02:36:46.336694 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:36:46.336704 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 02:36:46.336709 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 02:36:46.336713 Looping..... 0
grmgr: 2020/08/16 02:36:46.336746 Looping..... 1
SaveRDFNode: xxx 2020/08/16 02:36:46.336757 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.336763 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.336769 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.336775 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.336780 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.336786 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.336791 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:36:46.336795 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:36:46.336803 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 02:36:46.336816 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:36:46.336834 UID received  : MI0lQ2U9TcyGx4Iebd6EnA==
grmgr: 2020/08/16 02:36:46.337076 Looping..... 2
grmgr: 2020/08/16 02:36:46.337253 Looping..... 3
grmgr: 2020/08/16 02:36:46.337426 Looping..... 4
grmgr: 2020/08/16 02:36:46.337614 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:36:46.337623 Looping..... 0
unmarshalRDF: 2020/08/16 02:36:46.337637 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:36:46.337646 Looping..... 1
rdfLoader: 2020/08/16 02:36:46.337655 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 02:36:46.337689 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:36:46.337694 Exit  unmarshalRDF. 
anmgr 2020/08/16 02:36:46.337700 received on EdgeSnCn. anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
grmgr: 2020/08/16 02:36:46.337710 Looping..... 2
grmgr: 2020/08/16 02:36:46.337791 Looping..... 3
grmgr: 2020/08/16 02:36:46.337965 Looping..... 4
grmgr: 2020/08/16 02:36:46.338139 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:36:46.338147 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 02:36:46.338156 Looping..... 0
grmgr: 2020/08/16 02:36:46.338180 Looping..... 1
grmgr: 2020/08/16 02:36:46.338185 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:36:46.338189 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:36:46.338197 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.338202 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.338209 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.338215 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.338220 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.338226 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.338232 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:36:46.338236 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:36:46.338241 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017f80)}
SaveRDFNode: 2020/08/16 02:36:46.338245 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:36:46.338253 UID received  : aVe3ylcyQneO94Qj+HRNbQ==
DB: 2020/08/16 02:36:46.344524 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.654861ms
DB: 2020/08/16 02:36:46.348521 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.240778ms
DB: 2020/08/16 02:36:46.351907 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.350653ms
DB: 2020/08/16 02:36:46.356104 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.991961ms
DB: 2020/08/16 02:36:46.359626 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.482467ms
DB: 2020/08/16 02:36:46.362018 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 17.378862ms
DB: 2020/08/16 02:36:46.362921 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.259048ms
SaveRDFNode: 2020/08/16 02:36:46.362935 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017f80)}
SaveRDFNode: 2020/08/16 02:36:46.362943 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:46.362956 a: = db.Item{PKey:[]uint8{0x69, 0x57, 0xb7, 0xca, 0x57, 0x32, 0x42, 0x77, 0x8e, 0xf7, 0x84, 0x23, 0xf8, 0x74, 0x4d, 0x6d}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:46.365196 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.134992ms
DB: 2020/08/16 02:36:46.366298 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.311622ms
SaveRDFNode: 2020/08/16 02:36:46.366310 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017f80)}
SaveRDFNode: 2020/08/16 02:36:46.366317 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:46.366328 a: = db.Item{PKey:[]uint8{0x69, 0x57, 0xb7, 0xca, 0x57, 0x32, 0x42, 0x77, 0x8e, 0xf7, 0x84, 0x23, 0xf8, 0x74, 0x4d, 0x6d}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:46.368443 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.213365ms
DB: 2020/08/16 02:36:46.372658 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.298397ms
SaveRDFNode: 2020/08/16 02:36:46.372673 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:36:46.372682 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:36:46.372687 Send ack to waiting saveNode...
grmgr: 2020/08/16 02:36:46.372695 Looping..... 0
grmgr: 2020/08/16 02:36:46.372756 Looping..... 1
grmgr: 2020/08/16 02:36:46.372763 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:36:46.372768 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:36:46.372784 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.372790 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.372798 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.372804 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.372810 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.372816 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.372822 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:36:46.372826 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:36:46.372832 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0003477a0)}
SaveRDFNode: 2020/08/16 02:36:46.372836 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:36:46.372846 UID received  : VG7H75tTQEWtdBJwjtyDEg==
DB: 2020/08/16 02:36:46.373887 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.236159ms
SaveRDFNode: 2020/08/16 02:36:46.373902 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 02:36:46.373909 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:46.373921 a: = db.Item{PKey:[]uint8{0x30, 0x8d, 0x25, 0x43, 0x65, 0x3d, 0x4d, 0xcc, 0x86, 0xc7, 0x82, 0x1e, 0x6d, 0xde, 0x84, 0x9c}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:46.375987 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.112454ms
DB: 2020/08/16 02:36:46.377066 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.101259ms
SaveRDFNode: 2020/08/16 02:36:46.377078 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 02:36:46.377085 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:46.377095 a: = db.Item{PKey:[]uint8{0x30, 0x8d, 0x25, 0x43, 0x65, 0x3d, 0x4d, 0xcc, 0x86, 0xc7, 0x82, 0x1e, 0x6d, 0xde, 0x84, 0x9c}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:46.379084 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.064904ms
DB: 2020/08/16 02:36:46.380351 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.223135ms
SaveRDFNode: 2020/08/16 02:36:46.380360 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:36:46.380367 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:36:46.380372 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 02:36:46.380397 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.380403 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.380408 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.380415 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.380421 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.380426 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:36:46.380432 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:36:46.380435 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:36:46.380461 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0001c2300)}
SaveRDFNode: 2020/08/16 02:36:46.380466 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:36:46.380475 UID received  : beZrwwiLT/aWE8arn+cjzQ==
grmgr: 2020/08/16 02:36:46.380704 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 02:36:46.382022 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.904362ms
DB: 2020/08/16 02:36:46.383520 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.018991ms
DB: 2020/08/16 02:36:46.385174 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.119946ms
DB: 2020/08/16 02:36:46.387096 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.541935ms
DB: 2020/08/16 02:36:46.388467 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.05293ms
SaveRDFNode: 2020/08/16 02:36:46.388482 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003477a0)}
SaveRDFNode: 2020/08/16 02:36:46.388489 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:46.388500 a: = db.Item{PKey:[]uint8{0x54, 0x6e, 0xc7, 0xef, 0x9b, 0x53, 0x40, 0x45, 0xad, 0x74, 0x12, 0x70, 0x8e, 0xdc, 0x83, 0x12}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:46.390156 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.024918ms
DB: 2020/08/16 02:36:46.391598 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.066388ms
SaveRDFNode: 2020/08/16 02:36:46.391619 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003477a0)}
SaveRDFNode: 2020/08/16 02:36:46.391626 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:46.391636 a: = db.Item{PKey:[]uint8{0x54, 0x6e, 0xc7, 0xef, 0x9b, 0x53, 0x40, 0x45, 0xad, 0x74, 0x12, 0x70, 0x8e, 0xdc, 0x83, 0x12}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:46.393519 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.327673ms
DB: 2020/08/16 02:36:46.394625 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.958535ms
SaveRDFNode: 2020/08/16 02:36:46.394635 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:36:46.394642 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 02:36:46.396802 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.24744ms
SaveRDFNode: 2020/08/16 02:36:46.396818 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001c2300)}
SaveRDFNode: 2020/08/16 02:36:46.396825 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:46.396837 a: = db.Item{PKey:[]uint8{0x6d, 0xe6, 0x6b, 0xc3, 0x8, 0x8b, 0x4f, 0xf6, 0x96, 0x13, 0xc6, 0xab, 0x9f, 0xe7, 0x23, 0xcd}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:46.399977 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.107001ms
SaveRDFNode: 2020/08/16 02:36:46.399991 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001c2300)}
SaveRDFNode: 2020/08/16 02:36:46.399998 Received UID: X18=
SaveRDFNode: 2020/08/16 02:36:46.400008 a: = db.Item{PKey:[]uint8{0x6d, 0xe6, 0x6b, 0xc3, 0x8, 0x8b, 0x4f, 0xf6, 0x96, 0x13, 0xc6, 0xab, 0x9f, 0xe7, 0x23, 0xcd}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:36:46.403085 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.047204ms
SaveRDFNode: 2020/08/16 02:36:46.403236 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 02:36:46.403250 saveNode finished waiting...exiting
grmgr: 2020/08/16 02:36:46.403258 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 02:36:46.403270 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.419049 About to run AttachNodeCh: abc  b  MI0lQ2U9TcyGx4Iebd6EnA== aVe3ylcyQneO94Qj+HRNbQ==
anmgr 2020/08/16 02:36:46.419074 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:46.419083 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 02:36:46.419089 Looping..... 0
grmgr: 2020/08/16 02:36:46.419262 Looping..... 1
grmgr: 2020/08/16 02:36:46.419437 Looping..... 2
grmgr: 2020/08/16 02:36:46.419610 Looping..... 3
grmgr: 2020/08/16 02:36:46.419785 Looping..... 4
grmgr: 2020/08/16 02:36:46.419960 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:46.419970 goroutine about to start 1 cUID,pUID   MI0lQ2U9TcyGx4Iebd6EnA==  aVe3ylcyQneO94Qj+HRNbQ==  
grmgr: 2020/08/16 02:36:46.420188 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:46.422198 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.153801ms
DB: 2020/08/16 02:36:46.424986 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.758076ms
DB: 2020/08/16 02:36:46.428336 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.274359ms
anmgr 2020/08/16 02:36:46.434547 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.434821 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.873211ms
AttachNode: main 2020/08/16 02:36:46.434833 FetchForUpdate: for parent    aVe3ylcyQneO94Qj+HRNbQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:46.434859 ** Cache FetchForUpdate Cache Key Value: [aVe3ylcyQneO94Qj+HRNbQ==]   sortk: A#G#:S
FetchNode: 2020/08/16 02:36:46.434865  node: aVe3ylcyQneO94Qj+HRNbQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:46.435039 FetchForUpdate: for child    MI0lQ2U9TcyGx4Iebd6EnA==
FetchForUpdate: 2020/08/16 02:36:46.435048 ** Cache FetchForUpdate Cache Key Value: [MI0lQ2U9TcyGx4Iebd6EnA==]   sortk: A#
FetchNode: 2020/08/16 02:36:46.435062  node: MI0lQ2U9TcyGx4Iebd6EnA== subKey: A#
DB: 2020/08/16 02:36:46.437072 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.175432ms
FetchForUpdate: 2020/08/16 02:36:46.437140 len(nb): 1
fetchItems: 2020/08/16 02:36:46.437154 +++  Cache FetchItems for sortk A#G#:S UID: [aVe3ylcyQneO94Qj+HRNbQ==] 
FetchNode: 2020/08/16 02:36:46.437159  node: aVe3ylcyQneO94Qj+HRNbQ== subKey: A#G#:S
DB: 2020/08/16 02:36:46.439137 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 1.943595ms
DB: 2020/08/16 02:36:46.442943 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.252731ms
anmgr 2020/08/16 02:36:46.450229 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.450858 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 15.736231ms
FetchForUpdate: 2020/08/16 02:36:46.450998 len(nb): 7
fetchItems: 2020/08/16 02:36:46.451007 +++  Cache FetchItems for sortk A# UID: [MI0lQ2U9TcyGx4Iebd6EnA==] 
FetchNode: 2020/08/16 02:36:46.451013  node: MI0lQ2U9TcyGx4Iebd6EnA== subKey: A#
DB: 2020/08/16 02:36:46.453858 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.793179ms
DB: 2020/08/16 02:36:46.464373 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.298334ms
DB: 2020/08/16 02:36:46.467739 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.317738ms
anmgr 2020/08/16 02:36:46.470023 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.473036 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.191792ms
DB: 2020/08/16 02:36:46.478776 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.679092ms
DB: 2020/08/16 02:36:46.482093 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.259064ms
anmgr 2020/08/16 02:36:46.485466 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.486550 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.13026ms
DB: 2020/08/16 02:36:46.492648 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.756743ms
DB: 2020/08/16 02:36:46.496151 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.190401ms
DB: 2020/08/16 02:36:46.500019 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.560689ms
anmgr 2020/08/16 02:36:46.500856 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:36:46.503525 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.312849ms
Cache: 2020/08/16 02:36:46.503539 In SetUpredAvailable: pUid, tUID:  aVe3ylcyQneO94Qj+HRNbQ== aVe3ylcyQneO94Qj+HRNbQ== A#G#:S
Cache: 2020/08/16 02:36:46.503544 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:36:46.506946 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.362734ms
Unlock: 2020/08/16 02:36:46.506956 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:46.506961 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:36:46.513586 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.514333ms
grmgr: 2020/08/16 02:36:46.513601 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:36:46.516209 for loop finished 0  7 
anmgr 2020/08/16 02:36:46.516223 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.516229 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.516234 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.516239 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:36:46.526543 About to run AttachNodeCh: abc  c  MI0lQ2U9TcyGx4Iebd6EnA== VG7H75tTQEWtdBJwjtyDEg==
anmgr 2020/08/16 02:36:46.526568 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:46.526577 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 02:36:46.526584 Looping..... 0
grmgr: 2020/08/16 02:36:46.526715 Looping..... 1
grmgr: 2020/08/16 02:36:46.526861 Looping..... 2
grmgr: 2020/08/16 02:36:46.527035 Looping..... 3
grmgr: 2020/08/16 02:36:46.527218 Looping..... 4
grmgr: 2020/08/16 02:36:46.527396 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:46.527406 goroutine about to start 2 cUID,pUID   MI0lQ2U9TcyGx4Iebd6EnA==  VG7H75tTQEWtdBJwjtyDEg==  
grmgr: 2020/08/16 02:36:46.527793 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:46.529843 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.365618ms
DB: 2020/08/16 02:36:46.532846 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.972433ms
DB: 2020/08/16 02:36:46.536447 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.523306ms
DB: 2020/08/16 02:36:46.540296 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.612259ms
AttachNode: main 2020/08/16 02:36:46.540310 FetchForUpdate: for parent    VG7H75tTQEWtdBJwjtyDEg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:46.540315 ** Cache FetchForUpdate Cache Key Value: [VG7H75tTQEWtdBJwjtyDEg==]   sortk: A#G#:S
FetchNode: 2020/08/16 02:36:46.540321  node: VG7H75tTQEWtdBJwjtyDEg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:46.540482 FetchForUpdate: for child    MI0lQ2U9TcyGx4Iebd6EnA==
FetchForUpdate: 2020/08/16 02:36:46.540491 ** Cache FetchForUpdate Cache Key Value: [MI0lQ2U9TcyGx4Iebd6EnA==]   sortk: A#
fetchItems: 2020/08/16 02:36:46.540496 +++  Cache FetchItems for sortk A# UID: [MI0lQ2U9TcyGx4Iebd6EnA==] 
FetchNode: 2020/08/16 02:36:46.540525  node: MI0lQ2U9TcyGx4Iebd6EnA== subKey: A#
anmgr 2020/08/16 02:36:46.542021 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.542958 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.364223ms
DB: 2020/08/16 02:36:46.543794 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.437724ms
FetchForUpdate: 2020/08/16 02:36:46.543830 len(nb): 1
fetchItems: 2020/08/16 02:36:46.543837 +++  Cache FetchItems for sortk A#G#:S UID: [VG7H75tTQEWtdBJwjtyDEg==] 
FetchNode: 2020/08/16 02:36:46.543841  node: VG7H75tTQEWtdBJwjtyDEg== subKey: A#G#:S
DB: 2020/08/16 02:36:46.547499 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.624982ms
DB: 2020/08/16 02:36:46.551088 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.4397ms
DB: 2020/08/16 02:36:46.556835 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.671191ms
anmgr 2020/08/16 02:36:46.557514 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.560185 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.29042ms
DB: 2020/08/16 02:36:46.565900 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.591763ms
DB: 2020/08/16 02:36:46.571635 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.655738ms
anmgr 2020/08/16 02:36:46.572824 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.575154 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.21975ms
DB: 2020/08/16 02:36:46.578861 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.397298ms
DB: 2020/08/16 02:36:46.584591 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.566534ms
DB: 2020/08/16 02:36:46.587946 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.239957ms
anmgr 2020/08/16 02:36:46.588435 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:36:46.592020 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.747278ms
DB: 2020/08/16 02:36:46.595388 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.30683ms
Cache: 2020/08/16 02:36:46.595402 In SetUpredAvailable: pUid, tUID:  VG7H75tTQEWtdBJwjtyDEg== VG7H75tTQEWtdBJwjtyDEg== A#G#:S
Cache: 2020/08/16 02:36:46.595408 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:36:46.598913 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.465302ms
Unlock: 2020/08/16 02:36:46.598923 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:46.598928 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:36:46.603211 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.210816ms
grmgr: 2020/08/16 02:36:46.603368 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:36:46.604640 for loop finished 1  7 
anmgr 2020/08/16 02:36:46.604655 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.604662 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.604667 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.604672 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.604677 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.604682 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:36:46.615017 About to run AttachNodeCh: b  abc  aVe3ylcyQneO94Qj+HRNbQ== MI0lQ2U9TcyGx4Iebd6EnA==
anmgr 2020/08/16 02:36:46.615038 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:46.615046 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 02:36:46.615052 Looping..... 0
grmgr: 2020/08/16 02:36:46.615194 Looping..... 1
grmgr: 2020/08/16 02:36:46.615374 Looping..... 2
grmgr: 2020/08/16 02:36:46.615546 Looping..... 3
grmgr: 2020/08/16 02:36:46.615720 Looping..... 4
grmgr: 2020/08/16 02:36:46.615895 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:46.615906 goroutine about to start 3 cUID,pUID   aVe3ylcyQneO94Qj+HRNbQ==  MI0lQ2U9TcyGx4Iebd6EnA==  
grmgr: 2020/08/16 02:36:46.616125 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:46.618874 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.904238ms
DB: 2020/08/16 02:36:46.621001 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.09644ms
DB: 2020/08/16 02:36:46.624480 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.427036ms
DB: 2020/08/16 02:36:46.628451 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.781751ms
AttachNode: main 2020/08/16 02:36:46.628465 FetchForUpdate: for parent    MI0lQ2U9TcyGx4Iebd6EnA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:46.628470 ** Cache FetchForUpdate Cache Key Value: [MI0lQ2U9TcyGx4Iebd6EnA==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:36:46.628476 +++  Cache FetchItems for sortk A#G#:S UID: [MI0lQ2U9TcyGx4Iebd6EnA==] 
FetchNode: 2020/08/16 02:36:46.628481  node: MI0lQ2U9TcyGx4Iebd6EnA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:46.628663 FetchForUpdate: for child    aVe3ylcyQneO94Qj+HRNbQ==
FetchForUpdate: 2020/08/16 02:36:46.628672 ** Cache FetchForUpdate Cache Key Value: [aVe3ylcyQneO94Qj+HRNbQ==]   sortk: A#
fetchItems: 2020/08/16 02:36:46.628678 +++  Cache FetchItems for sortk A# UID: [aVe3ylcyQneO94Qj+HRNbQ==] 
FetchNode: 2020/08/16 02:36:46.628691  node: aVe3ylcyQneO94Qj+HRNbQ== subKey: A#
anmgr 2020/08/16 02:36:46.630487 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.631523 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.008948ms
DB: 2020/08/16 02:36:46.632825 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.044247ms
fetchItems: 2020/08/16 02:36:46.632990 +++  Cache FetchItems for sortk A# UID: [aVe3ylcyQneO94Qj+HRNbQ==] 
FetchNode: 2020/08/16 02:36:46.632997  node: aVe3ylcyQneO94Qj+HRNbQ== subKey: A#
DB: 2020/08/16 02:36:46.635534 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.506675ms
DB: 2020/08/16 02:36:46.636452 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.466918ms
DB: 2020/08/16 02:36:46.642497 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.757162ms
DB: 2020/08/16 02:36:46.645954 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.283769ms
anmgr 2020/08/16 02:36:46.648107 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.649845 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.534698ms
DB: 2020/08/16 02:36:46.655808 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.672126ms
DB: 2020/08/16 02:36:46.659595 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.429539ms
anmgr 2020/08/16 02:36:46.663582 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:36:46.663815 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.723792ms
DB: 2020/08/16 02:36:46.670192 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.872504ms
DB: 2020/08/16 02:36:46.674051 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.397866ms
DB: 2020/08/16 02:36:46.677824 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.496755ms
anmgr 2020/08/16 02:36:46.679011 for loop finished 2  7 
anmgr 2020/08/16 02:36:46.679028 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.679036 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.679042 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.679048 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.679053 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.679059 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.679064 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.681376 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.244685ms
Cache: 2020/08/16 02:36:46.681388 In SetUpredAvailable: pUid, tUID:  MI0lQ2U9TcyGx4Iebd6EnA== MI0lQ2U9TcyGx4Iebd6EnA== A#G#:S
Cache: 2020/08/16 02:36:46.681393 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:36:46.684769 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.340841ms
Unlock: 2020/08/16 02:36:46.684779 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:46.684784 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:36:46.688628 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.767634ms
grmgr: 2020/08/16 02:36:46.688642 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:36:46.689363 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:36:46.689390 About to run AttachNodeCh: b  c  aVe3ylcyQneO94Qj+HRNbQ== VG7H75tTQEWtdBJwjtyDEg==
anmgr 2020/08/16 02:36:46.689398 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:46.689403 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 02:36:46.689408 Looping..... 0
grmgr: 2020/08/16 02:36:46.689421 Looping..... 1
grmgr: 2020/08/16 02:36:46.689537 Looping..... 2
grmgr: 2020/08/16 02:36:46.689711 Looping..... 3
grmgr: 2020/08/16 02:36:46.689884 Looping..... 4
grmgr: 2020/08/16 02:36:46.690067 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:46.690076 goroutine about to start 4 cUID,pUID   aVe3ylcyQneO94Qj+HRNbQ==  VG7H75tTQEWtdBJwjtyDEg==  
grmgr: 2020/08/16 02:36:46.690271 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:46.692365 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.230703ms
DB: 2020/08/16 02:36:46.695219 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.813163ms
DB: 2020/08/16 02:36:46.699038 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.62305ms
DB: 2020/08/16 02:36:46.703137 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.837494ms
AttachNode: main 2020/08/16 02:36:46.703153 FetchForUpdate: for parent    VG7H75tTQEWtdBJwjtyDEg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:46.703158 ** Cache FetchForUpdate Cache Key Value: [VG7H75tTQEWtdBJwjtyDEg==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:36:46.703165 +++  Cache FetchItems for sortk A#G#:S UID: [VG7H75tTQEWtdBJwjtyDEg==] 
FetchNode: 2020/08/16 02:36:46.703169  node: VG7H75tTQEWtdBJwjtyDEg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:46.703350 FetchForUpdate: for child    aVe3ylcyQneO94Qj+HRNbQ==
FetchForUpdate: 2020/08/16 02:36:46.703359 ** Cache FetchForUpdate Cache Key Value: [aVe3ylcyQneO94Qj+HRNbQ==]   sortk: A#
fetchItems: 2020/08/16 02:36:46.703365 +++  Cache FetchItems for sortk A# UID: [aVe3ylcyQneO94Qj+HRNbQ==] 
FetchNode: 2020/08/16 02:36:46.703378  node: aVe3ylcyQneO94Qj+HRNbQ== subKey: A#
anmgr 2020/08/16 02:36:46.705008 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.705703 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.501385ms
DB: 2020/08/16 02:36:46.706733 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.271504ms
DB: 2020/08/16 02:36:46.709668 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.473193ms
DB: 2020/08/16 02:36:46.712860 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.160183ms
DB: 2020/08/16 02:36:46.712878 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.160183ms
DB: 2020/08/16 02:36:46.716200 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.282242ms
DB: 2020/08/16 02:36:46.716215 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.282242ms
DB: 2020/08/16 02:36:46.720089 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.701093ms
anmgr 2020/08/16 02:36:46.720454 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:36:46.723708 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.439759ms
DB: 2020/08/16 02:36:46.730818 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.678642ms
DB: 2020/08/16 02:36:46.734223 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.342272ms
anmgr 2020/08/16 02:36:46.736873 About to run AttachNodeCh: d  abc  beZrwwiLT/aWE8arn+cjzQ== MI0lQ2U9TcyGx4Iebd6EnA==
anmgr 2020/08/16 02:36:46.736886 for loop finished 3  7 
anmgr 2020/08/16 02:36:46.736894 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.736900 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.736907 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.736912 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.736917 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.736922 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.736926 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.736931 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.736936 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:46.736941 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 02:36:46.736947 Looping..... 0
grmgr: 2020/08/16 02:36:46.737053 Looping..... 1
grmgr: 2020/08/16 02:36:46.737216 Looping..... 2
grmgr: 2020/08/16 02:36:46.737389 Looping..... 3
grmgr: 2020/08/16 02:36:46.737563 Looping..... 4
DB: 2020/08/16 02:36:46.737775 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.449681ms
grmgr: 2020/08/16 02:36:46.738201 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:46.738214 goroutine about to start 5 cUID,pUID   beZrwwiLT/aWE8arn+cjzQ==  MI0lQ2U9TcyGx4Iebd6EnA==  
grmgr: 2020/08/16 02:36:46.738549 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 02:36:46.740418 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.03567ms
DB: 2020/08/16 02:36:46.742435 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 1.987922ms
DB: 2020/08/16 02:36:46.743435 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.60481ms
DB: 2020/08/16 02:36:46.745833 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.350354ms
DB: 2020/08/16 02:36:46.746936 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.205838ms
DB: 2020/08/16 02:36:46.749770 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.762879ms
AttachNode: main 2020/08/16 02:36:46.749784 FetchForUpdate: for parent    MI0lQ2U9TcyGx4Iebd6EnA==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 02:36:46.749789 ** Cache FetchForUpdate Cache Key Value: [MI0lQ2U9TcyGx4Iebd6EnA==]   sortk: A#G#:F
fetchItems: 2020/08/16 02:36:46.749795 +++  Cache FetchItems for sortk A#G#:F UID: [MI0lQ2U9TcyGx4Iebd6EnA==] 
FetchNode: 2020/08/16 02:36:46.749808  node: MI0lQ2U9TcyGx4Iebd6EnA== subKey: A#G#:F
AttachNode: gr1 2020/08/16 02:36:46.749981 FetchForUpdate: for child    beZrwwiLT/aWE8arn+cjzQ==
FetchForUpdate: 2020/08/16 02:36:46.749990 ** Cache FetchForUpdate Cache Key Value: [beZrwwiLT/aWE8arn+cjzQ==]   sortk: A#
FetchNode: 2020/08/16 02:36:46.750002  node: beZrwwiLT/aWE8arn+cjzQ== subKey: A#
DB: 2020/08/16 02:36:46.750727 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.459351ms
DB: 2020/08/16 02:36:46.752396 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.555622ms
anmgr 2020/08/16 02:36:46.753246 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.753785 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.705963ms
FetchForUpdate: 2020/08/16 02:36:46.753912 len(nb): 7
fetchItems: 2020/08/16 02:36:46.753921 +++  Cache FetchItems for sortk A# UID: [beZrwwiLT/aWE8arn+cjzQ==] 
FetchNode: 2020/08/16 02:36:46.753926  node: beZrwwiLT/aWE8arn+cjzQ== subKey: A#
DB: 2020/08/16 02:36:46.757853 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.028462ms
DB: 2020/08/16 02:36:46.758590 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.528447ms
DB: 2020/08/16 02:36:46.760338 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 6.383635ms
DB: 2020/08/16 02:36:46.769491 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.778907ms
anmgr 2020/08/16 02:36:46.772841 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.772859 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.772864 for loop finished 3  7 
anmgr 2020/08/16 02:36:46.772869 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.772874 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.772879 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.772884 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.772889 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.772894 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.772899 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.772904 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.772909 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.775684 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 16.57396ms
DB: 2020/08/16 02:36:46.779638 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.881215ms
DB: 2020/08/16 02:36:46.783275 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.579085ms
Cache: 2020/08/16 02:36:46.783288 In SetUpredAvailable: pUid, tUID:  VG7H75tTQEWtdBJwjtyDEg== mbb4anhwTnKF243va4yF/w== A#G#:S
Cache: 2020/08/16 02:36:46.783292 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:36:46.786999 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.671545ms
Unlock: 2020/08/16 02:36:46.787534 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:46.787546 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:36:46.787941 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 18.392501ms
anmgr 2020/08/16 02:36:46.788845 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.792214 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.626992ms
DB: 2020/08/16 02:36:46.793882 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.260122ms
grmgr: 2020/08/16 02:36:46.793895 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 02:36:46.793996 ** received on attachDoneCh.... 1
DB: 2020/08/16 02:36:46.798764 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.048504ms
anmgr 2020/08/16 02:36:46.799427 About to run AttachNodeCh: c  b  VG7H75tTQEWtdBJwjtyDEg== aVe3ylcyQneO94Qj+HRNbQ==
anmgr 2020/08/16 02:36:46.799441 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.799447 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.799451 for loop finished 4  7 
anmgr 2020/08/16 02:36:46.799456 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.799489 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.799494 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.799499 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.799504 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.799509 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.799513 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.799518 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.799522 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:36:46.799528 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 02:36:46.799537 Looping..... 0
grmgr: 2020/08/16 02:36:46.799563 Looping..... 1
grmgr: 2020/08/16 02:36:46.799743 Looping..... 2
grmgr: 2020/08/16 02:36:46.799929 Looping..... 3
grmgr: 2020/08/16 02:36:46.800130 Looping..... 4
grmgr: 2020/08/16 02:36:46.800303 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:46.800316 goroutine about to start 6 cUID,pUID   VG7H75tTQEWtdBJwjtyDEg==  aVe3ylcyQneO94Qj+HRNbQ==  
grmgr: 2020/08/16 02:36:46.800550 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 02:36:46.802687 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.474379ms
DB: 2020/08/16 02:36:46.807022 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.724277ms
DB: 2020/08/16 02:36:46.813671 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.029589ms
anmgr 2020/08/16 02:36:46.814998 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.815010 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.815015 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.815020 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.815024 for loop finished 4  7 
anmgr 2020/08/16 02:36:46.815028 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.815034 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.815038 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.815043 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.815048 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.815053 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.815057 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.815068 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.815085 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.815800 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 15.425041ms
DB: 2020/08/16 02:36:46.817574 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.481883ms
DB: 2020/08/16 02:36:46.818401 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.569717ms
DB: 2020/08/16 02:36:46.821721 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.664261ms
DB: 2020/08/16 02:36:46.823255 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.805206ms
DB: 2020/08/16 02:36:46.825571 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.435208ms
Cache: 2020/08/16 02:36:46.825604 In SetUpredAvailable: pUid, tUID:  MI0lQ2U9TcyGx4Iebd6EnA== MI0lQ2U9TcyGx4Iebd6EnA== A#G#:F
Cache: 2020/08/16 02:36:46.825609 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:36:46.829154 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.509662ms
Unlock: 2020/08/16 02:36:46.829164 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:46.829169 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:36:46.830654 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.830665 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.830670 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.830676 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.830681 for loop finished 4  7 
anmgr 2020/08/16 02:36:46.830686 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.830691 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.830712 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.830717 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.830722 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.830727 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.830732 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.830737 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.830741 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.830836 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.200068ms
AttachNode: main 2020/08/16 02:36:46.830847 FetchForUpdate: for parent    aVe3ylcyQneO94Qj+HRNbQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:46.830852 ** Cache FetchForUpdate Cache Key Value: [aVe3ylcyQneO94Qj+HRNbQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:36:46.830857 +++  Cache FetchItems for sortk A#G#:S UID: [aVe3ylcyQneO94Qj+HRNbQ==] 
FetchNode: 2020/08/16 02:36:46.830861  node: aVe3ylcyQneO94Qj+HRNbQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:46.831049 FetchForUpdate: for child    VG7H75tTQEWtdBJwjtyDEg==
FetchForUpdate: 2020/08/16 02:36:46.831058 ** Cache FetchForUpdate Cache Key Value: [VG7H75tTQEWtdBJwjtyDEg==]   sortk: A#
fetchItems: 2020/08/16 02:36:46.831063 +++  Cache FetchItems for sortk A# UID: [VG7H75tTQEWtdBJwjtyDEg==] 
FetchNode: 2020/08/16 02:36:46.831094  node: VG7H75tTQEWtdBJwjtyDEg== subKey: A#
DB: 2020/08/16 02:36:46.832994 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.728891ms
grmgr: 2020/08/16 02:36:46.833014 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:46.833727 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.835292ms
anmgr 2020/08/16 02:36:46.837100 ** received on attachDoneCh.... 1
DB: 2020/08/16 02:36:46.837472 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 6.306043ms
DB: 2020/08/16 02:36:46.839413 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.213741ms
anmgr 2020/08/16 02:36:46.842254 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.842267 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.842272 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.842278 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.842282 for loop finished 5  7 
anmgr 2020/08/16 02:36:46.842286 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.842291 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.842296 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.842301 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.842306 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.842310 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.842315 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.842319 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.842324 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.854949 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 15.369428ms
DB: 2020/08/16 02:36:46.855116 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 15.369428ms
anmgr 2020/08/16 02:36:46.857817 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.857829 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.857834 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.857839 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.857844 for loop finished 5  7 
anmgr 2020/08/16 02:36:46.857849 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.857854 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.857859 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.857864 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.857868 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.857873 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.857878 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.857883 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.857888 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.858391 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.236438ms
DB: 2020/08/16 02:36:46.858405 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.236438ms
DB: 2020/08/16 02:36:46.862606 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.914105ms
DB: 2020/08/16 02:36:46.866359 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.500207ms
DB: 2020/08/16 02:36:46.872864 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.716138ms
anmgr 2020/08/16 02:36:46.873422 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.873436 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.873441 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.873446 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.873451 for loop finished 5  7 
anmgr 2020/08/16 02:36:46.873456 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.873461 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.873469 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.873475 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.873480 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.873485 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.873490 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.873495 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.873499 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.876146 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.225691ms
DB: 2020/08/16 02:36:46.879531 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.280491ms
DB: 2020/08/16 02:36:46.885251 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.658639ms
DB: 2020/08/16 02:36:46.888667 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.305164ms
anmgr 2020/08/16 02:36:46.889500 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.889713 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.889725 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.889730 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.889735 for loop finished 5  7 
anmgr 2020/08/16 02:36:46.889740 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.889746 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.889750 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.889756 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.889761 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.889766 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.889771 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.889776 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.889781 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.892973 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.653023ms
DB: 2020/08/16 02:36:46.899188 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.697218ms
anmgr 2020/08/16 02:36:46.908236 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.908256 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.908263 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.908269 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.908284 for loop finished 5  7 
anmgr 2020/08/16 02:36:46.908290 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.908297 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.908302 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.908308 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.908313 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.908319 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.908324 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.908331 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.908337 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.923854 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.923881 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.923887 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.923893 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.923899 for loop finished 5  7 
anmgr 2020/08/16 02:36:46.923905 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.923911 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.923917 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.923922 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.923928 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.923934 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.923939 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.923945 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.923950 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.930316 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 27.466208ms
DB: 2020/08/16 02:36:46.934355 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.623035ms
DB: 2020/08/16 02:36:46.938104 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.48177ms
Cache: 2020/08/16 02:36:46.938117 In SetUpredAvailable: pUid, tUID:  aVe3ylcyQneO94Qj+HRNbQ== eJGIArAXQ4OeIl4ESRk70A== A#G#:S
Cache: 2020/08/16 02:36:46.938123 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 02:36:46.939417 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.939430 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.939435 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.939441 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.939445 for loop finished 5  7 
anmgr 2020/08/16 02:36:46.939450 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.939455 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.939460 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.939465 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.939475 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.939480 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.939485 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.939499 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.939504 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:36:46.941648 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.49036ms
Unlock: 2020/08/16 02:36:46.941662 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:46.941667 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:36:46.948133 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.406103ms
grmgr: 2020/08/16 02:36:46.948150 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:36:46.949683 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:36:46.949699 About to run AttachNodeCh: c  abc  VG7H75tTQEWtdBJwjtyDEg== MI0lQ2U9TcyGx4Iebd6EnA==
anmgr 2020/08/16 02:36:46.949707 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.949712 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:36:46.949717 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.949722 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:36:46.949726 for loop finished 6  7 
attachNode: 2020/08/16 02:36:46.949731 read from AttachNodeCh channel 7 now ASK limiter
grmgr: 2020/08/16 02:36:46.949737 Looping..... 0
grmgr: 2020/08/16 02:36:46.949753 Looping..... 1
grmgr: 2020/08/16 02:36:46.949857 Looping..... 2
grmgr: 2020/08/16 02:36:46.950030 Looping..... 3
grmgr: 2020/08/16 02:36:46.950204 Looping..... 4
grmgr: 2020/08/16 02:36:46.950378 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:36:46.950388 goroutine about to start 7 cUID,pUID   VG7H75tTQEWtdBJwjtyDEg==  MI0lQ2U9TcyGx4Iebd6EnA==  
rdfLoader: 2020/08/16 02:36:46.950393 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 02:36:46.950599 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:36:46.953550 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.09073ms
DB: 2020/08/16 02:36:46.955742 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.158488ms
DB: 2020/08/16 02:36:46.959565 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.743904ms
DB: 2020/08/16 02:36:46.963849 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.836289ms
AttachNode: main 2020/08/16 02:36:46.963864 FetchForUpdate: for parent    MI0lQ2U9TcyGx4Iebd6EnA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:36:46.963870 ** Cache FetchForUpdate Cache Key Value: [MI0lQ2U9TcyGx4Iebd6EnA==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:36:46.963875 +++  Cache FetchItems for sortk A#G#:S UID: [MI0lQ2U9TcyGx4Iebd6EnA==] 
FetchNode: 2020/08/16 02:36:46.963880  node: MI0lQ2U9TcyGx4Iebd6EnA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:36:46.964093 FetchForUpdate: for child    VG7H75tTQEWtdBJwjtyDEg==
FetchForUpdate: 2020/08/16 02:36:46.964119 ** Cache FetchForUpdate Cache Key Value: [VG7H75tTQEWtdBJwjtyDEg==]   sortk: A#
fetchItems: 2020/08/16 02:36:46.964125 +++  Cache FetchItems for sortk A# UID: [VG7H75tTQEWtdBJwjtyDEg==] 
FetchNode: 2020/08/16 02:36:46.964138  node: VG7H75tTQEWtdBJwjtyDEg== subKey: A#
DB: 2020/08/16 02:36:46.966391 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.478565ms
DB: 2020/08/16 02:36:46.967522 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.323495ms
DB: 2020/08/16 02:36:46.970733 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.781081ms
DB: 2020/08/16 02:36:46.974384 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.609575ms
DB: 2020/08/16 02:36:46.974410 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.609575ms
DB: 2020/08/16 02:36:46.977910 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.466437ms
DB: 2020/08/16 02:36:46.977930 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.466437ms
DB: 2020/08/16 02:36:46.981594 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.590587ms
DB: 2020/08/16 02:36:46.985117 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.456117ms
DB: 2020/08/16 02:36:46.991516 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.056052ms
DB: 2020/08/16 02:36:46.994927 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.322876ms
DB: 2020/08/16 02:36:46.998781 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.725939ms
DB: 2020/08/16 02:36:47.004747 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.86548ms
DB: 2020/08/16 02:36:47.008272 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.451425ms
DB: 2020/08/16 02:36:47.011999 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.640417ms
DB: 2020/08/16 02:36:47.017966 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.895622ms
DB: 2020/08/16 02:36:47.021229 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.181267ms
DB: 2020/08/16 02:36:47.024728 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.429239ms
DB: 2020/08/16 02:36:47.028110 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.322586ms
Cache: 2020/08/16 02:36:47.028122 In SetUpredAvailable: pUid, tUID:  MI0lQ2U9TcyGx4Iebd6EnA== 1wDqCjZ5QAerHFHGxvQEFw== A#G#:S
Cache: 2020/08/16 02:36:47.028128 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:36:47.031547 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.373365ms
Unlock: 2020/08/16 02:36:47.031557 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:36:47.031561 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:36:47.035500 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.882948ms
grmgr: 2020/08/16 02:36:47.035519 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 02:36:47.035524 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 02:36:47.035531 11.....
rdfLoader: 2020/08/16 02:36:47.035549 22.....error cnt: 0
rdfuuid: 2020/08/16 02:36:47.035556 Powering down...
errlog: 2020/08/16 02:36:47.035561 Powering down...
grmgr: 2020/08/16 02:36:47.035565 Powering down...
anmgr: 2020/08/16 02:36:47.035570 Powering down...
rdfLoader: 2020/08/16 02:36:47.035575 loader exists.....
DB:2020/08/16 02:37:24 log.go:18: ===============================================================================
anmgr: 2020/08/16 02:37:24.462061 Powering on...
rdfLoader: 2020/08/16 02:37:24.462612 saveNode started......
rdfLoader: 2020/08/16 02:37:24.462626 define saveNode limiter......
rdfuuid: 2020/08/16 02:37:24.462630 Powering on...
grmgr: 2020/08/16 02:37:24.462660 Powering on...
errlog: 2020/08/16 02:37:24.462674 Powering on...
rdfLoader: 2020/08/16 02:37:24.462681  principle goroutines started 
RDFreader: 2020/08/16 02:37:24.462698 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:37:24.462730 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 02:37:24.462737 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 02:37:24.462743 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 02:37:24.462748 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 02:37:24.462753 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 02:37:24.462757 spo read:      
RDFreader: 2020/08/16 02:37:24.462761 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 02:37:24.462766 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 02:37:24.462771 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 02:37:24.462776 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 02:37:24.462779 spo read:      
RDFreader: 2020/08/16 02:37:24.462784 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 02:37:24.462789 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 02:37:24.462794 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 02:37:24.462799 spo read:  b  Age  "58"
RDFreader: 2020/08/16 02:37:24.462803 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 02:37:24.462808 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 02:37:24.462813 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 02:37:24.462817 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 02:37:24.462822 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 02:37:24.462826 spo read:      
RDFreader: 2020/08/16 02:37:24.462830 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 02:37:24.462834 Send node batch on channel verifyCh
RDFreader: 2020/08/16 02:37:24.462842 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:37:24.462846 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 02:37:24.462851 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 02:37:24.462857 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 02:37:24.462862 spo read:  c  Age  "67"
RDFreader: 2020/08/16 02:37:24.462867 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 02:37:24.462871 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 02:37:24.462876 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 02:37:24.462881 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 02:37:24.462887 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 02:37:24.462891 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 02:37:24.462895 spo read:      
RDFreader: 2020/08/16 02:37:24.462900 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 02:37:24.462904 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 02:37:24.462909 spo read:  d  Friends  _:abc
RDFreader: 2020/08/16 02:37:24.462914 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 02:37:24.462918 spo read:  d  Age  "36"
RDFreader: 2020/08/16 02:37:24.462923 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 02:37:24.462929 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 02:37:24.462933 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 02:37:24.462938 close verify channel
rdfLoader: 2020/08/16 02:37:24.462942 verify started....
rdfLoader: 2020/08/16 02:37:24.462946 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:37:24.462950 .  getType..
rdfLoader: 2020/08/16 02:37:24.462954 node.TyName : [Person]
DB: 2020/08/16 02:37:24.537442 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 74.382479ms
grmgr: 2020/08/16 02:37:24.537596 Looping..... 0
grmgr: 2020/08/16 02:37:24.547055 Looping..... 1
grmgr: 2020/08/16 02:37:24.548384 Looping..... 2
grmgr: 2020/08/16 02:37:24.548557 Looping..... 3
grmgr: 2020/08/16 02:37:24.548741 Looping..... 4
grmgr: 2020/08/16 02:37:24.548918 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:37:24.548931 .  getType..
rdfLoader: 2020/08/16 02:37:24.548936 node.TyName : [Person]
grmgr: 2020/08/16 02:37:24.548942 Looping..... 0
unmarshalRDF: 2020/08/16 02:37:24.548959 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:37:24.548969 Looping..... 1
grmgr: 2020/08/16 02:37:24.548974 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:37:24.548987 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:37:24.548995 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:37:24.548999 .  getType..
rdfLoader: 2020/08/16 02:37:24.549003 node.TyName : [Person]
grmgr: 2020/08/16 02:37:24.549007 Looping..... 0
rdfLoader: 2020/08/16 02:37:24.549019 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:37:24.549024 Add to SS . [Alfa]
anmgr 2020/08/16 02:37:24.549078 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.549087 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:37:24.549124 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:37:24.549129 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 02:37:24.549138 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:37:24.549164 Looping..... 1
grmgr: 2020/08/16 02:37:24.549170 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:37:24.549173 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:37:24.549178 Looping..... 0
rdfLoader: 2020/08/16 02:37:24.549187 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:37:24.549192 Add to SS . [VW Golf]
anmgr 2020/08/16 02:37:24.549209 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.549215 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:37:24.549242 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:37:24.549246 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 02:37:24.549251 .  getType..
rdfLoader: 2020/08/16 02:37:24.549255 node.TyName : [Person]
unmarshalRDF: 2020/08/16 02:37:24.549263 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:37:24.549273 Looping..... 1
rdfLoader: 2020/08/16 02:37:24.549281 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 02:37:24.549285 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 02:37:24.549289 Add to SS . [Honda]
anmgr 2020/08/16 02:37:24.549301 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.549316 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:37:24.549343 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:37:24.549347 Exit  unmarshalRDF. 
grmgr: 2020/08/16 02:37:24.549370 Looping..... 2
grmgr: 2020/08/16 02:37:24.549553 Looping..... 3
grmgr: 2020/08/16 02:37:24.549739 Looping..... 4
grmgr: 2020/08/16 02:37:24.549974 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:37:24.549982 Looping..... 0
grmgr: 2020/08/16 02:37:24.550013 Looping..... 1
SaveRDFNode: xxx 2020/08/16 02:37:24.550023 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.550029 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.550047 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.550053 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.550058 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.550064 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.550070 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:37:24.550073 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:37:24.550081 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0007541e0)}
SaveRDFNode: 2020/08/16 02:37:24.550085 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:37:24.550097 UID received  : MqmvYX88T3iBJQMCUTdMyQ==
grmgr: 2020/08/16 02:37:24.550389 Looping..... 2
grmgr: 2020/08/16 02:37:24.550558 Looping..... 3
grmgr: 2020/08/16 02:37:24.550777 Looping..... 4
grmgr: 2020/08/16 02:37:24.550959 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:37:24.550968 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 02:37:24.550972 Looping..... 0
unmarshalRDF: 2020/08/16 02:37:24.550987 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:37:24.550997 Looping..... 1
rdfLoader: 2020/08/16 02:37:24.551007 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 02:37:24.551042 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:37:24.551047 Exit  unmarshalRDF. 
anmgr 2020/08/16 02:37:24.551053 received on EdgeSnCn. anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
grmgr: 2020/08/16 02:37:24.551063 Looping..... 2
grmgr: 2020/08/16 02:37:24.551966 Looping..... 3
grmgr: 2020/08/16 02:37:24.552143 Looping..... 4
grmgr: 2020/08/16 02:37:24.552315 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:37:24.552324 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 02:37:24.552329 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 02:37:24.552333 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 02:37:24.552342 Looping..... 0
grmgr: 2020/08/16 02:37:24.552493 Looping..... 1
grmgr: 2020/08/16 02:37:24.552502 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:37:24.552506 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:37:24.552516 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.552522 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.552529 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.552540 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.552546 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.552551 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.552557 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:37:24.552561 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:37:24.552566 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0007545a0)}
SaveRDFNode: 2020/08/16 02:37:24.552570 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:37:24.552579 UID received  : WSrS54nGTrOJ9LojG/PBZQ==
DB: 2020/08/16 02:37:24.559438 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.289458ms
DB: 2020/08/16 02:37:24.564076 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 11.468511ms
DB: 2020/08/16 02:37:24.568385 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.271006ms
DB: 2020/08/16 02:37:24.572748 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.315111ms
DB: 2020/08/16 02:37:24.579279 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.498121ms
DB: 2020/08/16 02:37:24.580698 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 21.221961ms
DB: 2020/08/16 02:37:24.583856 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.345793ms
SaveRDFNode: 2020/08/16 02:37:24.583870 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007545a0)}
SaveRDFNode: 2020/08/16 02:37:24.583878 Received UID: X18=
SaveRDFNode: 2020/08/16 02:37:24.583891 a: = db.Item{PKey:[]uint8{0x59, 0x2a, 0xd2, 0xe7, 0x89, 0xc6, 0x4e, 0xb3, 0x89, 0xf4, 0xba, 0x23, 0x1b, 0xf3, 0xc1, 0x65}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:37:24.585095 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.353144ms
DB: 2020/08/16 02:37:24.588151 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.225291ms
SaveRDFNode: 2020/08/16 02:37:24.588165 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007545a0)}
SaveRDFNode: 2020/08/16 02:37:24.588172 Received UID: X18=
SaveRDFNode: 2020/08/16 02:37:24.588183 a: = db.Item{PKey:[]uint8{0x59, 0x2a, 0xd2, 0xe7, 0x89, 0xc6, 0x4e, 0xb3, 0x89, 0xf4, 0xba, 0x23, 0x1b, 0xf3, 0xc1, 0x65}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:37:24.592753 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.623586ms
DB: 2020/08/16 02:37:24.594078 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.866864ms
SaveRDFNode: 2020/08/16 02:37:24.594088 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:37:24.594099 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:37:24.594105 Send ack to waiting saveNode...
grmgr: 2020/08/16 02:37:24.594113 Looping..... 0
grmgr: 2020/08/16 02:37:24.594148 Looping..... 1
grmgr: 2020/08/16 02:37:24.594154 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:37:24.594158 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:37:24.594167 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.594175 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.594203 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.594209 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.594215 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.594221 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.594227 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:37:24.594231 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:37:24.594236 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0000178c0)}
SaveRDFNode: 2020/08/16 02:37:24.594240 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:37:24.594250 UID received  : xpBInSTkRz+Oc/Kt+uLWCw==
DB: 2020/08/16 02:37:24.597125 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.339027ms
SaveRDFNode: 2020/08/16 02:37:24.597142 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007541e0)}
SaveRDFNode: 2020/08/16 02:37:24.597150 Received UID: X18=
SaveRDFNode: 2020/08/16 02:37:24.597165 a: = db.Item{PKey:[]uint8{0x32, 0xa9, 0xaf, 0x61, 0x7f, 0x3c, 0x4f, 0x78, 0x81, 0x25, 0x3, 0x2, 0x51, 0x37, 0x4c, 0xc9}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:37:24.600490 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.20786ms
DB: 2020/08/16 02:37:24.601726 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.531561ms
SaveRDFNode: 2020/08/16 02:37:24.601739 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007541e0)}
SaveRDFNode: 2020/08/16 02:37:24.601746 Received UID: X18=
SaveRDFNode: 2020/08/16 02:37:24.601756 a: = db.Item{PKey:[]uint8{0x32, 0xa9, 0xaf, 0x61, 0x7f, 0x3c, 0x4f, 0x78, 0x81, 0x25, 0x3, 0x2, 0x51, 0x37, 0x4c, 0xc9}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:37:24.604723 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.197434ms
DB: 2020/08/16 02:37:24.606155 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.366306ms
SaveRDFNode: 2020/08/16 02:37:24.606165 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:37:24.606173 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:37:24.606182 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 02:37:24.606229 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.606237 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.606243 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.606250 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.606256 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.606262 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:37:24.606267 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:37:24.606272 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:37:24.606285 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000344ae0)}
SaveRDFNode: 2020/08/16 02:37:24.606289 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:37:24.606302 UID received  : hBaNz6OoTMub49WG9MiqSQ==
grmgr: 2020/08/16 02:37:24.606481 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 02:37:24.608920 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.164861ms
DB: 2020/08/16 02:37:24.610649 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.316564ms
DB: 2020/08/16 02:37:24.613330 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.379738ms
DB: 2020/08/16 02:37:24.615070 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.390971ms
DB: 2020/08/16 02:37:24.617678 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.140379ms
SaveRDFNode: 2020/08/16 02:37:24.617691 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000178c0)}
SaveRDFNode: 2020/08/16 02:37:24.617699 Received UID: X18=
SaveRDFNode: 2020/08/16 02:37:24.617710 a: = db.Item{PKey:[]uint8{0xc6, 0x90, 0x48, 0x9d, 0x24, 0xe4, 0x47, 0x3f, 0x8e, 0x73, 0xf2, 0xad, 0xfa, 0xe2, 0xd6, 0xb}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:37:24.619472 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.369216ms
DB: 2020/08/16 02:37:24.621946 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.204996ms
SaveRDFNode: 2020/08/16 02:37:24.621959 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000178c0)}
SaveRDFNode: 2020/08/16 02:37:24.621966 Received UID: X18=
SaveRDFNode: 2020/08/16 02:37:24.621976 a: = db.Item{PKey:[]uint8{0xc6, 0x90, 0x48, 0x9d, 0x24, 0xe4, 0x47, 0x3f, 0x8e, 0x73, 0xf2, 0xad, 0xfa, 0xe2, 0xd6, 0xb}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:37:24.623981 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.477447ms
DB: 2020/08/16 02:37:24.626316 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.311808ms
SaveRDFNode: 2020/08/16 02:37:24.626327 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:37:24.626336 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 02:37:24.628363 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.352252ms
SaveRDFNode: 2020/08/16 02:37:24.628376 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000344ae0)}
SaveRDFNode: 2020/08/16 02:37:24.628383 Received UID: X18=
SaveRDFNode: 2020/08/16 02:37:24.628394 a: = db.Item{PKey:[]uint8{0x84, 0x16, 0x8d, 0xcf, 0xa3, 0xa8, 0x4c, 0xcb, 0x9b, 0xe3, 0xd5, 0x86, 0xf4, 0xc8, 0xaa, 0x49}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:37:24.632670 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.22641ms
SaveRDFNode: 2020/08/16 02:37:24.632856 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000344ae0)}
SaveRDFNode: 2020/08/16 02:37:24.632868 Received UID: X18=
SaveRDFNode: 2020/08/16 02:37:24.632882 a: = db.Item{PKey:[]uint8{0x84, 0x16, 0x8d, 0xcf, 0xa3, 0xa8, 0x4c, 0xcb, 0x9b, 0xe3, 0xd5, 0x86, 0xf4, 0xc8, 0xaa, 0x49}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:37:24.637132 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.214619ms
SaveRDFNode: 2020/08/16 02:37:24.637143 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 02:37:24.637150 saveNode finished waiting...exiting
grmgr: 2020/08/16 02:37:24.637157 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 02:37:24.637178 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.652610 About to run AttachNodeCh: abc  b  MqmvYX88T3iBJQMCUTdMyQ== WSrS54nGTrOJ9LojG/PBZQ==
anmgr 2020/08/16 02:37:24.652649 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:37:24.652659 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 02:37:24.652666 Looping..... 0
grmgr: 2020/08/16 02:37:24.652864 Looping..... 1
grmgr: 2020/08/16 02:37:24.653036 Looping..... 2
grmgr: 2020/08/16 02:37:24.653210 Looping..... 3
grmgr: 2020/08/16 02:37:24.653388 Looping..... 4
grmgr: 2020/08/16 02:37:24.653562 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:37:24.653572 goroutine about to start 1 cUID,pUID   MqmvYX88T3iBJQMCUTdMyQ==  WSrS54nGTrOJ9LojG/PBZQ==  
grmgr: 2020/08/16 02:37:24.653883 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:37:24.657591 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.936949ms
DB: 2020/08/16 02:37:24.660930 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.247558ms
DB: 2020/08/16 02:37:24.665640 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.636091ms
anmgr 2020/08/16 02:37:24.668069 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.676260 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 9.867474ms
AttachNode: main 2020/08/16 02:37:24.676278 FetchForUpdate: for parent    WSrS54nGTrOJ9LojG/PBZQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:37:24.676284 ** Cache FetchForUpdate Cache Key Value: [WSrS54nGTrOJ9LojG/PBZQ==]   sortk: A#G#:S
FetchNode: 2020/08/16 02:37:24.676290  node: WSrS54nGTrOJ9LojG/PBZQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:37:24.676488 FetchForUpdate: for child    MqmvYX88T3iBJQMCUTdMyQ==
FetchForUpdate: 2020/08/16 02:37:24.676496 ** Cache FetchForUpdate Cache Key Value: [MqmvYX88T3iBJQMCUTdMyQ==]   sortk: A#
FetchNode: 2020/08/16 02:37:24.676510  node: MqmvYX88T3iBJQMCUTdMyQ== subKey: A#
DB: 2020/08/16 02:37:24.680415 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.086852ms
FetchForUpdate: 2020/08/16 02:37:24.680481 len(nb): 1
fetchItems: 2020/08/16 02:37:24.680489 +++  Cache FetchItems for sortk A#G#:S UID: [WSrS54nGTrOJ9LojG/PBZQ==] 
FetchNode: 2020/08/16 02:37:24.680494  node: WSrS54nGTrOJ9LojG/PBZQ== subKey: A#G#:S
anmgr 2020/08/16 02:37:24.683553 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.684352 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.822881ms
DB: 2020/08/16 02:37:24.689253 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.342898ms
DB: 2020/08/16 02:37:24.695398 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 18.802225ms
FetchForUpdate: 2020/08/16 02:37:24.695521 len(nb): 7
fetchItems: 2020/08/16 02:37:24.695529 +++  Cache FetchItems for sortk A# UID: [MqmvYX88T3iBJQMCUTdMyQ==] 
FetchNode: 2020/08/16 02:37:24.695534  node: MqmvYX88T3iBJQMCUTdMyQ== subKey: A#
anmgr 2020/08/16 02:37:24.699098 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.699527 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.965062ms
DB: 2020/08/16 02:37:24.709761 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.803571ms
DB: 2020/08/16 02:37:24.713951 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.138235ms
anmgr 2020/08/16 02:37:24.714671 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.718691 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.633492ms
DB: 2020/08/16 02:37:24.724926 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.170302ms
DB: 2020/08/16 02:37:24.730804 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.334257ms
anmgr 2020/08/16 02:37:24.731709 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:37:24.735438 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.555969ms
DB: 2020/08/16 02:37:24.741553 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.776792ms
DB: 2020/08/16 02:37:24.746863 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.333717ms
anmgr 2020/08/16 02:37:24.747602 for loop finished 0  7 
anmgr 2020/08/16 02:37:24.747616 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.747622 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.747627 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.751784 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.624993ms
DB: 2020/08/16 02:37:24.756193 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.220107ms
Cache: 2020/08/16 02:37:24.756208 In SetUpredAvailable: pUid, tUID:  WSrS54nGTrOJ9LojG/PBZQ== WSrS54nGTrOJ9LojG/PBZQ== A#G#:S
Cache: 2020/08/16 02:37:24.756213 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:37:24.760937 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.688081ms
Unlock: 2020/08/16 02:37:24.760947 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:37:24.760952 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:37:24.763004 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.770944 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 9.916085ms
grmgr: 2020/08/16 02:37:24.770961 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:37:24.773269 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:37:24.773289 About to run AttachNodeCh: b  abc  WSrS54nGTrOJ9LojG/PBZQ== MqmvYX88T3iBJQMCUTdMyQ==
anmgr 2020/08/16 02:37:24.773297 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:37:24.773305 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 02:37:24.773310 Looping..... 0
grmgr: 2020/08/16 02:37:24.773333 Looping..... 1
grmgr: 2020/08/16 02:37:24.773444 Looping..... 2
grmgr: 2020/08/16 02:37:24.773650 Looping..... 3
grmgr: 2020/08/16 02:37:24.773670 Looping..... 4
grmgr: 2020/08/16 02:37:24.773799 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:37:24.773810 goroutine about to start 2 cUID,pUID   WSrS54nGTrOJ9LojG/PBZQ==  MqmvYX88T3iBJQMCUTdMyQ==  
grmgr: 2020/08/16 02:37:24.774161 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:37:24.777885 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.880787ms
DB: 2020/08/16 02:37:24.781692 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.774166ms
DB: 2020/08/16 02:37:24.786210 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.465379ms
anmgr 2020/08/16 02:37:24.788751 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.790931 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.547584ms
AttachNode: main 2020/08/16 02:37:24.790953 FetchForUpdate: for parent    MqmvYX88T3iBJQMCUTdMyQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:37:24.790958 ** Cache FetchForUpdate Cache Key Value: [MqmvYX88T3iBJQMCUTdMyQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:37:24.790964 +++  Cache FetchItems for sortk A#G#:S UID: [MqmvYX88T3iBJQMCUTdMyQ==] 
FetchNode: 2020/08/16 02:37:24.790968  node: MqmvYX88T3iBJQMCUTdMyQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:37:24.791184 FetchForUpdate: for child    WSrS54nGTrOJ9LojG/PBZQ==
FetchForUpdate: 2020/08/16 02:37:24.791193 ** Cache FetchForUpdate Cache Key Value: [WSrS54nGTrOJ9LojG/PBZQ==]   sortk: A#
fetchItems: 2020/08/16 02:37:24.791198 +++  Cache FetchItems for sortk A# UID: [WSrS54nGTrOJ9LojG/PBZQ==] 
FetchNode: 2020/08/16 02:37:24.791225  node: WSrS54nGTrOJ9LojG/PBZQ== subKey: A#
DB: 2020/08/16 02:37:24.793926 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.899269ms
DB: 2020/08/16 02:37:24.795007 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.735135ms
fetchItems: 2020/08/16 02:37:24.795166 +++  Cache FetchItems for sortk A# UID: [WSrS54nGTrOJ9LojG/PBZQ==] 
FetchNode: 2020/08/16 02:37:24.795173  node: WSrS54nGTrOJ9LojG/PBZQ== subKey: A#
DB: 2020/08/16 02:37:24.798715 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.537994ms
DB: 2020/08/16 02:37:24.799484 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.282413ms
anmgr 2020/08/16 02:37:24.805095 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.807124 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.966311ms
DB: 2020/08/16 02:37:24.811602 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.302095ms
DB: 2020/08/16 02:37:24.816547 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.527877ms
anmgr 2020/08/16 02:37:24.820536 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:37:24.822864 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.029093ms
DB: 2020/08/16 02:37:24.827311 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.144862ms
DB: 2020/08/16 02:37:24.833483 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.81482ms
anmgr 2020/08/16 02:37:24.835995 for loop finished 1  7 
anmgr 2020/08/16 02:37:24.836014 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.836021 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.836027 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.839524 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.715805ms
DB: 2020/08/16 02:37:24.844509 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.560331ms
DB: 2020/08/16 02:37:24.849267 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.437738ms
anmgr 2020/08/16 02:37:24.851437 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.851450 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.851455 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.853856 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.400959ms
Cache: 2020/08/16 02:37:24.853871 In SetUpredAvailable: pUid, tUID:  MqmvYX88T3iBJQMCUTdMyQ== MqmvYX88T3iBJQMCUTdMyQ== A#G#:S
Cache: 2020/08/16 02:37:24.853877 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:37:24.858340 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.415503ms
Unlock: 2020/08/16 02:37:24.858354 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:37:24.858359 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:37:24.863461 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.048015ms
grmgr: 2020/08/16 02:37:24.863476 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:37:24.866949 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.866959 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:37:24.877286 About to run AttachNodeCh: c  abc  xpBInSTkRz+Oc/Kt+uLWCw== MqmvYX88T3iBJQMCUTdMyQ==
anmgr 2020/08/16 02:37:24.877317 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:37:24.877326 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 02:37:24.877333 Looping..... 0
grmgr: 2020/08/16 02:37:24.877352 Looping..... 1
grmgr: 2020/08/16 02:37:24.877445 Looping..... 2
grmgr: 2020/08/16 02:37:24.877621 Looping..... 3
grmgr: 2020/08/16 02:37:24.877798 Looping..... 4
grmgr: 2020/08/16 02:37:24.877974 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:37:24.877985 goroutine about to start 3 cUID,pUID   xpBInSTkRz+Oc/Kt+uLWCw==  MqmvYX88T3iBJQMCUTdMyQ==  
grmgr: 2020/08/16 02:37:24.878265 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:37:24.881041 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.978483ms
DB: 2020/08/16 02:37:24.883953 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.857097ms
DB: 2020/08/16 02:37:24.888456 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.431453ms
anmgr 2020/08/16 02:37:24.892785 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:37:24.893331 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.672948ms
AttachNode: main 2020/08/16 02:37:24.893345 FetchForUpdate: for parent    MqmvYX88T3iBJQMCUTdMyQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:37:24.893351 ** Cache FetchForUpdate Cache Key Value: [MqmvYX88T3iBJQMCUTdMyQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:37:24.893357 +++  Cache FetchItems for sortk A#G#:S UID: [MqmvYX88T3iBJQMCUTdMyQ==] 
FetchNode: 2020/08/16 02:37:24.893361  node: MqmvYX88T3iBJQMCUTdMyQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:37:24.893543 FetchForUpdate: for child    xpBInSTkRz+Oc/Kt+uLWCw==
FetchForUpdate: 2020/08/16 02:37:24.893551 ** Cache FetchForUpdate Cache Key Value: [xpBInSTkRz+Oc/Kt+uLWCw==]   sortk: A#
FetchNode: 2020/08/16 02:37:24.893607  node: xpBInSTkRz+Oc/Kt+uLWCw== subKey: A#
DB: 2020/08/16 02:37:24.896873 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.478593ms
DB: 2020/08/16 02:37:24.897729 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.070203ms
FetchForUpdate: 2020/08/16 02:37:24.897859 len(nb): 7
fetchItems: 2020/08/16 02:37:24.897867 +++  Cache FetchItems for sortk A# UID: [xpBInSTkRz+Oc/Kt+uLWCw==] 
FetchNode: 2020/08/16 02:37:24.897872  node: xpBInSTkRz+Oc/Kt+uLWCw== subKey: A#
DB: 2020/08/16 02:37:24.901159 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.249009ms
DB: 2020/08/16 02:37:24.902382 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.159807ms
DB: 2020/08/16 02:37:24.906679 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.266807ms
DB: 2020/08/16 02:37:24.906693 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.266807ms
anmgr 2020/08/16 02:37:24.908392 for loop finished 2  7 
anmgr 2020/08/16 02:37:24.908408 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.908416 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.908421 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.911076 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.345486ms
DB: 2020/08/16 02:37:24.911092 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.345486ms
DB: 2020/08/16 02:37:24.916131 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.87471ms
DB: 2020/08/16 02:37:24.920741 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.389084ms
anmgr 2020/08/16 02:37:24.923865 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.923882 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.923888 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.928376 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.069872ms
DB: 2020/08/16 02:37:24.933006 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.439305ms
DB: 2020/08/16 02:37:24.938405 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.749808ms
anmgr 2020/08/16 02:37:24.939241 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.939254 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.939259 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.944564 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.669182ms
DB: 2020/08/16 02:37:24.949710 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.495551ms
DB: 2020/08/16 02:37:24.954183 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.399745ms
anmgr 2020/08/16 02:37:24.954673 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:37:24.960017 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.772202ms
DB: 2020/08/16 02:37:24.964483 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.405669ms
DB: 2020/08/16 02:37:24.969082 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.532997ms
anmgr 2020/08/16 02:37:24.970276 for loop finished 2  7 
anmgr 2020/08/16 02:37:24.970290 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.970297 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.970302 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:24.973659 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.397077ms
Cache: 2020/08/16 02:37:24.973671 In SetUpredAvailable: pUid, tUID:  MqmvYX88T3iBJQMCUTdMyQ== 6I+Cf3/1RWG1vQUFoNiG2w== A#G#:S
Cache: 2020/08/16 02:37:24.973676 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:37:24.978068 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.357326ms
Unlock: 2020/08/16 02:37:24.978083 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:37:24.978088 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:37:24.982798 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.646759ms
grmgr: 2020/08/16 02:37:24.982826 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:37:24.985815 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.985832 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.985837 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.985846 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:37:24.996215 About to run AttachNodeCh: b  c  WSrS54nGTrOJ9LojG/PBZQ== xpBInSTkRz+Oc/Kt+uLWCw==
anmgr 2020/08/16 02:37:24.996235 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.996242 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:24.996247 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:37:24.996255 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 02:37:24.996261 Looping..... 0
grmgr: 2020/08/16 02:37:24.996382 Looping..... 1
grmgr: 2020/08/16 02:37:24.996562 Looping..... 2
grmgr: 2020/08/16 02:37:24.996751 Looping..... 3
grmgr: 2020/08/16 02:37:24.996924 Looping..... 4
grmgr: 2020/08/16 02:37:24.997101 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:37:24.997115 goroutine about to start 4 cUID,pUID   WSrS54nGTrOJ9LojG/PBZQ==  xpBInSTkRz+Oc/Kt+uLWCw==  
grmgr: 2020/08/16 02:37:24.997394 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:37:25.000490 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.295733ms
DB: 2020/08/16 02:37:25.004506 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.97784ms
DB: 2020/08/16 02:37:25.009184 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.618512ms
anmgr 2020/08/16 02:37:25.012172 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:37:25.014325 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.922812ms
AttachNode: main 2020/08/16 02:37:25.014344 FetchForUpdate: for parent    xpBInSTkRz+Oc/Kt+uLWCw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:37:25.014350 ** Cache FetchForUpdate Cache Key Value: [xpBInSTkRz+Oc/Kt+uLWCw==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:37:25.014357 +++  Cache FetchItems for sortk A#G#:S UID: [xpBInSTkRz+Oc/Kt+uLWCw==] 
FetchNode: 2020/08/16 02:37:25.014362  node: xpBInSTkRz+Oc/Kt+uLWCw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:37:25.014555 FetchForUpdate: for child    WSrS54nGTrOJ9LojG/PBZQ==
FetchForUpdate: 2020/08/16 02:37:25.014583 ** Cache FetchForUpdate Cache Key Value: [WSrS54nGTrOJ9LojG/PBZQ==]   sortk: A#
fetchItems: 2020/08/16 02:37:25.014591 +++  Cache FetchItems for sortk A# UID: [WSrS54nGTrOJ9LojG/PBZQ==] 
FetchNode: 2020/08/16 02:37:25.014619  node: WSrS54nGTrOJ9LojG/PBZQ== subKey: A#
DB: 2020/08/16 02:37:25.018094 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.425533ms
DB: 2020/08/16 02:37:25.019073 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.634377ms
DB: 2020/08/16 02:37:25.023848 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.567848ms
anmgr 2020/08/16 02:37:25.027621 About to run AttachNodeCh: d  abc  hBaNz6OoTMub49WG9MiqSQ== MqmvYX88T3iBJQMCUTdMyQ==
anmgr 2020/08/16 02:37:25.027634 for loop finished 3  7 
anmgr 2020/08/16 02:37:25.027645 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.027652 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.027656 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:37:25.027663 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 02:37:25.027680 Looping..... 0
grmgr: 2020/08/16 02:37:25.027702 Looping..... 1
grmgr: 2020/08/16 02:37:25.027875 Looping..... 2
grmgr: 2020/08/16 02:37:25.028050 Looping..... 3
grmgr: 2020/08/16 02:37:25.028243 Looping..... 4
grmgr: 2020/08/16 02:37:25.028437 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:37:25.028446 goroutine about to start 5 cUID,pUID   hBaNz6OoTMub49WG9MiqSQ==  MqmvYX88T3iBJQMCUTdMyQ==  
grmgr: 2020/08/16 02:37:25.028646 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 02:37:25.029994 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.825101ms
DB: 2020/08/16 02:37:25.032083 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.577276ms
DB: 2020/08/16 02:37:25.034637 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.466514ms
DB: 2020/08/16 02:37:25.036191 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.0589ms
DB: 2020/08/16 02:37:25.040689 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.379713ms
DB: 2020/08/16 02:37:25.041397 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.127965ms
anmgr 2020/08/16 02:37:25.043023 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.043037 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.043042 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.043047 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.043053 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.043058 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.043063 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.046184 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.500628ms
AttachNode: main 2020/08/16 02:37:25.046197 FetchForUpdate: for parent    MqmvYX88T3iBJQMCUTdMyQ==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 02:37:25.046202 ** Cache FetchForUpdate Cache Key Value: [MqmvYX88T3iBJQMCUTdMyQ==]   sortk: A#G#:F
fetchItems: 2020/08/16 02:37:25.046207 +++  Cache FetchItems for sortk A#G#:F UID: [MqmvYX88T3iBJQMCUTdMyQ==] 
FetchNode: 2020/08/16 02:37:25.046212  node: MqmvYX88T3iBJQMCUTdMyQ== subKey: A#G#:F
AttachNode: gr1 2020/08/16 02:37:25.046368 FetchForUpdate: for child    hBaNz6OoTMub49WG9MiqSQ==
FetchForUpdate: 2020/08/16 02:37:25.046376 ** Cache FetchForUpdate Cache Key Value: [hBaNz6OoTMub49WG9MiqSQ==]   sortk: A#
FetchNode: 2020/08/16 02:37:25.046389  node: hBaNz6OoTMub49WG9MiqSQ== subKey: A#
DB: 2020/08/16 02:37:25.047138 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.958455ms
DB: 2020/08/16 02:37:25.049285 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.040916ms
DB: 2020/08/16 02:37:25.051436 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.004999ms
FetchForUpdate: 2020/08/16 02:37:25.051568 len(nb): 7
fetchItems: 2020/08/16 02:37:25.051578 +++  Cache FetchItems for sortk A# UID: [hBaNz6OoTMub49WG9MiqSQ==] 
FetchNode: 2020/08/16 02:37:25.051582  node: hBaNz6OoTMub49WG9MiqSQ== subKey: A#
DB: 2020/08/16 02:37:25.055300 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 8.100297ms
DB: 2020/08/16 02:37:25.057123 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.365726ms
anmgr 2020/08/16 02:37:25.058497 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.058518 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.058523 for loop finished 3  7 
anmgr 2020/08/16 02:37:25.058528 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.058533 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.058538 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.060381 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.589304ms
DB: 2020/08/16 02:37:25.066748 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.850695ms
DB: 2020/08/16 02:37:25.071730 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 20.118945ms
anmgr 2020/08/16 02:37:25.074971 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.074985 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.074990 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.074995 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.075000 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.075005 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.075010 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.079243 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.733517ms
DB: 2020/08/16 02:37:25.083312 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.77587ms
DB: 2020/08/16 02:37:25.085624 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 18.24331ms
DB: 2020/08/16 02:37:25.087593 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.546698ms
anmgr 2020/08/16 02:37:25.090433 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.090445 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.090450 for loop finished 3  7 
anmgr 2020/08/16 02:37:25.090455 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.090460 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.090465 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.090750 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.654493ms
DB: 2020/08/16 02:37:25.093968 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.88256ms
DB: 2020/08/16 02:37:25.095358 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.373164ms
Cache: 2020/08/16 02:37:25.095370 In SetUpredAvailable: pUid, tUID:  xpBInSTkRz+Oc/Kt+uLWCw== xpBInSTkRz+Oc/Kt+uLWCw== A#G#:S
Cache: 2020/08/16 02:37:25.095375 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:37:25.098722 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.311926ms
DB: 2020/08/16 02:37:25.099818 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.407293ms
Unlock: 2020/08/16 02:37:25.099829 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:37:25.099835 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:37:25.103081 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.710269ms
anmgr 2020/08/16 02:37:25.105986 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.106008 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.106014 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.106019 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.106024 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.106029 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.106034 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.108029 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.121713ms
grmgr: 2020/08/16 02:37:25.108043 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:37:25.109736 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.126301ms
anmgr 2020/08/16 02:37:25.111215 ** received on attachDoneCh.... 1
DB: 2020/08/16 02:37:25.114556 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.391897ms
anmgr 2020/08/16 02:37:25.116381 About to run AttachNodeCh: c  b  xpBInSTkRz+Oc/Kt+uLWCw== WSrS54nGTrOJ9LojG/PBZQ==
anmgr 2020/08/16 02:37:25.116398 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.116405 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.116409 for loop finished 4  7 
anmgr 2020/08/16 02:37:25.116414 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.116420 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.116424 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:37:25.116430 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 02:37:25.116436 Looping..... 0
grmgr: 2020/08/16 02:37:25.116562 Looping..... 1
grmgr: 2020/08/16 02:37:25.116578 Looping..... 2
grmgr: 2020/08/16 02:37:25.116737 Looping..... 3
grmgr: 2020/08/16 02:37:25.116911 Looping..... 4
grmgr: 2020/08/16 02:37:25.117086 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:37:25.117108 goroutine about to start 6 cUID,pUID   xpBInSTkRz+Oc/Kt+uLWCw==  WSrS54nGTrOJ9LojG/PBZQ==  
grmgr: 2020/08/16 02:37:25.117312 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 02:37:25.119745 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.570971ms
DB: 2020/08/16 02:37:25.124569 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.557391ms
Cache: 2020/08/16 02:37:25.124584 In SetUpredAvailable: pUid, tUID:  MqmvYX88T3iBJQMCUTdMyQ== MqmvYX88T3iBJQMCUTdMyQ== A#G#:F
Cache: 2020/08/16 02:37:25.124589 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:37:25.129017 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.39365ms
Unlock: 2020/08/16 02:37:25.129028 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:37:25.129033 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:37:25.131800 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.131817 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.131822 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.131828 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.131834 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.131840 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.131848 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.131854 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.131869 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.131875 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.131880 for loop finished 4  7 
anmgr 2020/08/16 02:37:25.131885 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.131891 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.131896 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.132931 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 15.766352ms
DB: 2020/08/16 02:37:25.138563 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.598914ms
DB: 2020/08/16 02:37:25.139979 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 9.563396ms
grmgr: 2020/08/16 02:37:25.140009 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 02:37:25.143392 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:37:25.143410 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.143417 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.143422 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.143426 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.143431 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.143437 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.143442 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.143446 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.143451 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.143456 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.143460 for loop finished 5  7 
anmgr 2020/08/16 02:37:25.143465 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.143470 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.143475 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.144083 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.05046ms
DB: 2020/08/16 02:37:25.149104 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.932795ms
AttachNode: main 2020/08/16 02:37:25.149118 FetchForUpdate: for parent    WSrS54nGTrOJ9LojG/PBZQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:37:25.149123 ** Cache FetchForUpdate Cache Key Value: [WSrS54nGTrOJ9LojG/PBZQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:37:25.149128 +++  Cache FetchItems for sortk A#G#:S UID: [WSrS54nGTrOJ9LojG/PBZQ==] 
FetchNode: 2020/08/16 02:37:25.149132  node: WSrS54nGTrOJ9LojG/PBZQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:37:25.149335 FetchForUpdate: for child    xpBInSTkRz+Oc/Kt+uLWCw==
FetchForUpdate: 2020/08/16 02:37:25.149353 ** Cache FetchForUpdate Cache Key Value: [xpBInSTkRz+Oc/Kt+uLWCw==]   sortk: A#
fetchItems: 2020/08/16 02:37:25.149359 +++  Cache FetchItems for sortk A# UID: [xpBInSTkRz+Oc/Kt+uLWCw==] 
FetchNode: 2020/08/16 02:37:25.149390  node: xpBInSTkRz+Oc/Kt+uLWCw== subKey: A#
DB: 2020/08/16 02:37:25.153070 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.637219ms
DB: 2020/08/16 02:37:25.153569 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.40411ms
DB: 2020/08/16 02:37:25.158372 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.654016ms
anmgr 2020/08/16 02:37:25.159463 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.159488 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.159494 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.159499 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.159505 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.159510 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.159515 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.159521 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.159526 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.159532 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.159537 for loop finished 5  7 
anmgr 2020/08/16 02:37:25.159542 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.159547 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.159552 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.162685 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.277419ms
DB: 2020/08/16 02:37:25.162702 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.277419ms
DB: 2020/08/16 02:37:25.167019 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.281545ms
DB: 2020/08/16 02:37:25.167034 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.281545ms
DB: 2020/08/16 02:37:25.171907 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.78975ms
anmgr 2020/08/16 02:37:25.174961 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.174974 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.174979 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.174984 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.174989 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.174994 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.174998 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.175003 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.175008 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.175013 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.175017 for loop finished 5  7 
anmgr 2020/08/16 02:37:25.175022 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.175026 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.175031 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.176567 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.593783ms
DB: 2020/08/16 02:37:25.182536 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.698616ms
DB: 2020/08/16 02:37:25.187156 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.536485ms
anmgr 2020/08/16 02:37:25.190484 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.190496 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.190501 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.190515 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.190520 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.190525 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.190530 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.190534 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.190539 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.190544 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.190549 for loop finished 5  7 
anmgr 2020/08/16 02:37:25.190554 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.190558 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.190563 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.193237 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.984638ms
DB: 2020/08/16 02:37:25.199605 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.073522ms
DB: 2020/08/16 02:37:25.204524 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.638984ms
anmgr 2020/08/16 02:37:25.205947 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.205959 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.205964 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.205969 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.205974 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.205979 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.205983 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.205988 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.205993 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.205998 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.206002 for loop finished 5  7 
anmgr 2020/08/16 02:37:25.206007 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.206011 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.206016 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.209291 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.438163ms
DB: 2020/08/16 02:37:25.215480 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.880343ms
DB: 2020/08/16 02:37:25.220214 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.438549ms
anmgr 2020/08/16 02:37:25.221459 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.221471 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.221476 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.221481 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.221485 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.221490 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.221495 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.221499 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.221504 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.221518 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.221523 for loop finished 5  7 
anmgr 2020/08/16 02:37:25.221527 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.221532 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.221537 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.225063 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.508265ms
DB: 2020/08/16 02:37:25.231460 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.197442ms
Cache: 2020/08/16 02:37:25.231475 In SetUpredAvailable: pUid, tUID:  WSrS54nGTrOJ9LojG/PBZQ== KIJhf0sgTpuJ+SOiAd4T7A== A#G#:S
Cache: 2020/08/16 02:37:25.231481 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:37:25.236056 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.538979ms
Unlock: 2020/08/16 02:37:25.236067 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:37:25.236072 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:37:25.236921 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.236935 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.236940 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.236946 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.236950 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.236956 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.236960 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.236965 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.236970 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.236975 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.236980 for loop finished 5  7 
anmgr 2020/08/16 02:37:25.236985 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.236990 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.236995 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:37:25.241283 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.137477ms
grmgr: 2020/08/16 02:37:25.241298 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:37:25.242168 ** received on attachDoneCh.... 1
anmgr 2020/08/16 02:37:25.247333 About to run AttachNodeCh: abc  c  MqmvYX88T3iBJQMCUTdMyQ== xpBInSTkRz+Oc/Kt+uLWCw==
anmgr 2020/08/16 02:37:25.247351 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.247357 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.247363 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.247380 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.247385 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.247391 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.247396 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.247402 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:37:25.247407 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.247413 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:37:25.247418 for loop finished 6  7 
attachNode: 2020/08/16 02:37:25.247433 read from AttachNodeCh channel 7 now ASK limiter
grmgr: 2020/08/16 02:37:25.247438 Looping..... 0
grmgr: 2020/08/16 02:37:25.247496 Looping..... 1
grmgr: 2020/08/16 02:37:25.247690 Looping..... 2
grmgr: 2020/08/16 02:37:25.247862 Looping..... 3
grmgr: 2020/08/16 02:37:25.248036 Looping..... 4
grmgr: 2020/08/16 02:37:25.248229 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:37:25.248240 goroutine about to start 7 cUID,pUID   MqmvYX88T3iBJQMCUTdMyQ==  xpBInSTkRz+Oc/Kt+uLWCw==  
rdfLoader: 2020/08/16 02:37:25.248247 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 02:37:25.248450 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:37:25.251075 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.768054ms
DB: 2020/08/16 02:37:25.254000 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.894068ms
DB: 2020/08/16 02:37:25.258428 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.357747ms
DB: 2020/08/16 02:37:25.263818 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.192426ms
AttachNode: main 2020/08/16 02:37:25.263836 FetchForUpdate: for parent    xpBInSTkRz+Oc/Kt+uLWCw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:37:25.263843 ** Cache FetchForUpdate Cache Key Value: [xpBInSTkRz+Oc/Kt+uLWCw==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:37:25.263850 +++  Cache FetchItems for sortk A#G#:S UID: [xpBInSTkRz+Oc/Kt+uLWCw==] 
FetchNode: 2020/08/16 02:37:25.263855  node: xpBInSTkRz+Oc/Kt+uLWCw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:37:25.264048 FetchForUpdate: for child    MqmvYX88T3iBJQMCUTdMyQ==
FetchForUpdate: 2020/08/16 02:37:25.264073 ** Cache FetchForUpdate Cache Key Value: [MqmvYX88T3iBJQMCUTdMyQ==]   sortk: A#
fetchItems: 2020/08/16 02:37:25.264080 +++  Cache FetchItems for sortk A# UID: [MqmvYX88T3iBJQMCUTdMyQ==] 
FetchNode: 2020/08/16 02:37:25.264093  node: MqmvYX88T3iBJQMCUTdMyQ== subKey: A#
DB: 2020/08/16 02:37:25.267243 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.354188ms
DB: 2020/08/16 02:37:25.269188 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 13  Duration: 5.032516ms
DB: 2020/08/16 02:37:25.272043 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.456559ms
DB: 2020/08/16 02:37:25.276310 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.233474ms
DB: 2020/08/16 02:37:25.276325 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.233474ms
DB: 2020/08/16 02:37:25.280629 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.274153ms
DB: 2020/08/16 02:37:25.280648 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.274153ms
DB: 2020/08/16 02:37:25.286331 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.519997ms
DB: 2020/08/16 02:37:25.290915 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.436455ms
DB: 2020/08/16 02:37:25.297929 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.682424ms
DB: 2020/08/16 02:37:25.302310 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.202126ms
DB: 2020/08/16 02:37:25.307342 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.663169ms
DB: 2020/08/16 02:37:25.313383 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.74093ms
DB: 2020/08/16 02:37:25.318160 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.272708ms
DB: 2020/08/16 02:37:25.323246 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.542682ms
DB: 2020/08/16 02:37:25.330286 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.749304ms
DB: 2020/08/16 02:37:25.334763 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.16652ms
DB: 2020/08/16 02:37:25.339757 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.485965ms
DB: 2020/08/16 02:37:25.344744 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.660524ms
Cache: 2020/08/16 02:37:25.344757 In SetUpredAvailable: pUid, tUID:  xpBInSTkRz+Oc/Kt+uLWCw== ZBOkP2bmQA6XlWRKqqWlaA== A#G#:S
Cache: 2020/08/16 02:37:25.344763 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:37:25.349345 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.546743ms
Unlock: 2020/08/16 02:37:25.349358 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:37:25.349364 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:37:25.354367 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.950701ms
grmgr: 2020/08/16 02:37:25.354387 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 02:37:25.354393 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 02:37:25.354399 11.....
rdfLoader: 2020/08/16 02:37:25.354406 22.....error cnt: 0
rdfuuid: 2020/08/16 02:37:25.354413 Powering down...
errlog: 2020/08/16 02:37:25.354418 Powering down...
grmgr: 2020/08/16 02:37:25.354423 Powering down...
anmgr: 2020/08/16 02:37:25.354427 Powering down...
rdfLoader: 2020/08/16 02:37:25.354432 loader exists.....
DB:2020/08/16 02:42:32 log.go:18: ===============================================================================
anmgr: 2020/08/16 02:42:32.520706 Powering on...
rdfLoader: 2020/08/16 02:42:32.520736 saveNode started......
rdfLoader: 2020/08/16 02:42:32.520741 define saveNode limiter......
rdfuuid: 2020/08/16 02:42:32.520745 Powering on...
grmgr: 2020/08/16 02:42:32.520762 Powering on...
errlog: 2020/08/16 02:42:32.520776 Powering on...
rdfLoader: 2020/08/16 02:42:32.520783  principle goroutines started 
RDFreader: 2020/08/16 02:42:32.520798 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:42:32.520813 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 02:42:32.520841 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 02:42:32.520847 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 02:42:32.520852 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 02:42:32.520858 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 02:42:32.520862 spo read:      
RDFreader: 2020/08/16 02:42:32.520867 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 02:42:32.520872 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 02:42:32.520877 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 02:42:32.520882 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 02:42:32.520886 spo read:      
RDFreader: 2020/08/16 02:42:32.520891 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 02:42:32.520896 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 02:42:32.520901 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 02:42:32.520906 spo read:  b  Age  "58"
RDFreader: 2020/08/16 02:42:32.520911 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 02:42:32.520916 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 02:42:32.520921 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 02:42:32.520926 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 02:42:32.520930 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 02:42:32.520934 spo read:      
RDFreader: 2020/08/16 02:42:32.520944 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 02:42:32.520948 Send node batch on channel verifyCh
RDFreader: 2020/08/16 02:42:32.520957 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:42:32.520961 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 02:42:32.520965 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 02:42:32.520972 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 02:42:32.520977 spo read:  c  Age  "67"
RDFreader: 2020/08/16 02:42:32.521000 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 02:42:32.521004 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 02:42:32.521009 spo read:  c  Friends  _:abc
RDFreader: 2020/08/16 02:42:32.521014 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 02:42:32.521020 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 02:42:32.521025 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 02:42:32.521030 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 02:42:32.521033 spo read:      
RDFreader: 2020/08/16 02:42:32.521038 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 02:42:32.521043 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 02:42:32.521047 spo read:  d  Friends  _:abc
RDFreader: 2020/08/16 02:42:32.521052 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 02:42:32.521057 spo read:  d  Age  "36"
RDFreader: 2020/08/16 02:42:32.521061 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 02:42:32.521068 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 02:42:32.521071 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 02:42:32.521077 close verify channel
rdfLoader: 2020/08/16 02:42:32.521081 verify started....
rdfLoader: 2020/08/16 02:42:32.521086 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:42:32.521089 .  getType..
rdfLoader: 2020/08/16 02:42:32.521093 node.TyName : [Person]
DB: 2020/08/16 02:42:32.592272 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 71.114984ms
grmgr: 2020/08/16 02:42:32.592412 Looping..... 0
grmgr: 2020/08/16 02:42:32.592631 Looping..... 1
grmgr: 2020/08/16 02:42:32.592821 Looping..... 2
grmgr: 2020/08/16 02:42:32.592999 Looping..... 3
grmgr: 2020/08/16 02:42:32.593177 Looping..... 4
grmgr: 2020/08/16 02:42:32.593355 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:42:32.593366 .  getType..
rdfLoader: 2020/08/16 02:42:32.593370 node.TyName : [Person]
grmgr: 2020/08/16 02:42:32.593376 Looping..... 0
unmarshalRDF: 2020/08/16 02:42:32.593388 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:42:32.593397 Looping..... 1
grmgr: 2020/08/16 02:42:32.593403 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:42:32.593407 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:42:32.593414 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:42:32.593418 .  getType..
rdfLoader: 2020/08/16 02:42:32.593421 node.TyName : [Person]
grmgr: 2020/08/16 02:42:32.593426 Looping..... 0
rdfLoader: 2020/08/16 02:42:32.593436 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:42:32.593440 Add to SS . [Alfa]
anmgr 2020/08/16 02:42:32.593473 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.593480 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:42:32.593520 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:42:32.593526 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 02:42:32.593535 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:42:32.593568 Looping..... 1
grmgr: 2020/08/16 02:42:32.593574 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:42:32.593578 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:42:32.593583 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 02:42:32.593587 Looping..... 0
rdfLoader: 2020/08/16 02:42:32.593595 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:42:32.593599 Add to SS . [VW Golf]
anmgr 2020/08/16 02:42:32.593614 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.593620 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:42:32.593645 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:42:32.593649 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 02:42:32.593654 .  getType..
rdfLoader: 2020/08/16 02:42:32.593658 node.TyName : [Person]
unmarshalRDF: 2020/08/16 02:42:32.593666 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:42:32.593677 Looping..... 1
rdfLoader: 2020/08/16 02:42:32.593685 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 02:42:32.593689 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 02:42:32.593693 Add to SS . [Honda]
anmgr 2020/08/16 02:42:32.593705 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:32.593720 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:42:32.593745 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:42:32.593749 Exit  unmarshalRDF. 
anmgr 2020/08/16 02:42:32.593754 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/16 02:42:32.593778 Looping..... 2
grmgr: 2020/08/16 02:42:32.593960 Looping..... 3
grmgr: 2020/08/16 02:42:32.594136 Looping..... 4
grmgr: 2020/08/16 02:42:32.594327 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:42:32.594334 Looping..... 0
grmgr: 2020/08/16 02:42:32.594360 Looping..... 1
SaveRDFNode: xxx 2020/08/16 02:42:32.594381 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.594387 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.594393 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.594399 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.594404 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.594409 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.594415 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:42:32.594423 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:42:32.594430 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 02:42:32.594434 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:42:32.594446 UID received  : LdDJhwLLTYSbcnKku3ClTQ==
grmgr: 2020/08/16 02:42:32.594676 Looping..... 2
grmgr: 2020/08/16 02:42:32.594865 Looping..... 3
grmgr: 2020/08/16 02:42:32.595046 Looping..... 4
grmgr: 2020/08/16 02:42:32.595219 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:42:32.595227 Looping..... 0
unmarshalRDF: 2020/08/16 02:42:32.595253 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:42:32.595265 Looping..... 1
rdfLoader: 2020/08/16 02:42:32.595273 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 02:42:32.595304 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:42:32.595308 Exit  unmarshalRDF. 
anmgr 2020/08/16 02:42:32.595315 received on EdgeSnCn. anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
grmgr: 2020/08/16 02:42:32.595324 Looping..... 2
grmgr: 2020/08/16 02:42:32.595423 Looping..... 3
grmgr: 2020/08/16 02:42:32.595630 Looping..... 4
grmgr: 2020/08/16 02:42:32.595808 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:42:32.595816 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 02:42:32.595820 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 02:42:32.595825 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 02:42:32.595833 Looping..... 0
grmgr: 2020/08/16 02:42:32.595857 Looping..... 1
grmgr: 2020/08/16 02:42:32.595861 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:42:32.595866 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:42:32.595887 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.595892 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.595897 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.595901 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.595907 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.595912 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.595917 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:42:32.595921 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:42:32.595926 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017f80)}
SaveRDFNode: 2020/08/16 02:42:32.595929 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:42:32.595936 UID received  : yL4FXcc/QKqVX4i3TGfQFA==
DB: 2020/08/16 02:42:32.601909 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.434087ms
DB: 2020/08/16 02:42:32.606620 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.648754ms
DB: 2020/08/16 02:42:32.611495 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.838128ms
DB: 2020/08/16 02:42:32.616263 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.600796ms
DB: 2020/08/16 02:42:32.620982 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.673141ms
DB: 2020/08/16 02:42:32.625161 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.088456ms
SaveRDFNode: 2020/08/16 02:42:32.625173 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017f80)}
SaveRDFNode: 2020/08/16 02:42:32.625179 Received UID: X18=
SaveRDFNode: 2020/08/16 02:42:32.625191 a: = db.Item{PKey:[]uint8{0xc8, 0xbe, 0x5, 0x5d, 0xc7, 0x3f, 0x40, 0xaa, 0x95, 0x5f, 0x88, 0xb7, 0x4c, 0x67, 0xd0, 0x14}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:42:32.625563 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 23.622851ms
DB: 2020/08/16 02:42:32.629683 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.076802ms
DB: 2020/08/16 02:42:32.630186 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.785492ms
SaveRDFNode: 2020/08/16 02:42:32.630199 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017f80)}
SaveRDFNode: 2020/08/16 02:42:32.630205 Received UID: X18=
SaveRDFNode: 2020/08/16 02:42:32.630247 a: = db.Item{PKey:[]uint8{0xc8, 0xbe, 0x5, 0x5d, 0xc7, 0x3f, 0x40, 0xaa, 0x95, 0x5f, 0x88, 0xb7, 0x4c, 0x67, 0xd0, 0x14}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:42:32.633863 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.813902ms
DB: 2020/08/16 02:42:32.637740 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.844162ms
SaveRDFNode: 2020/08/16 02:42:32.637757 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 02:42:32.637764 Received UID: X18=
SaveRDFNode: 2020/08/16 02:42:32.637775 a: = db.Item{PKey:[]uint8{0x2d, 0xd0, 0xc9, 0x87, 0x2, 0xcb, 0x4d, 0x84, 0x9b, 0x72, 0x72, 0xa4, 0xbb, 0x70, 0xa5, 0x4d}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:42:32.641689 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.879393ms
SaveRDFNode: 2020/08/16 02:42:32.641702 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 02:42:32.641709 Received UID: X18=
SaveRDFNode: 2020/08/16 02:42:32.641719 a: = db.Item{PKey:[]uint8{0x2d, 0xd0, 0xc9, 0x87, 0x2, 0xcb, 0x4d, 0x84, 0x9b, 0x72, 0x72, 0xa4, 0xbb, 0x70, 0xa5, 0x4d}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:42:32.645744 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.93738ms
SaveRDFNode: 2020/08/16 02:42:32.646027 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:42:32.646042 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:42:32.646047 Send ack to waiting saveNode...
grmgr: 2020/08/16 02:42:32.646055 Looping..... 0
grmgr: 2020/08/16 02:42:32.646089 Looping..... 1
grmgr: 2020/08/16 02:42:32.646095 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:42:32.646099 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:42:32.646108 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.646114 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.646125 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.646133 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.646139 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.646144 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.646150 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:42:32.646153 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:42:32.646159 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000017b60)}
SaveRDFNode: 2020/08/16 02:42:32.646163 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:42:32.646189 UID received  : 3mgg9BJRTQWWsJM8VXLkXg==
DB: 2020/08/16 02:42:32.647725 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 17.422283ms
SaveRDFNode: 2020/08/16 02:42:32.647782 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:42:32.647797 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:42:32.647807 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 02:42:32.647857 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.647873 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.647895 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.647900 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.647905 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.647910 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:42:32.647944 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:42:32.647949 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:42:32.647957 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0000e4240)}
SaveRDFNode: 2020/08/16 02:42:32.647961 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:42:32.647969 UID received  : H8olX7bNSUapEVGwBJjYMg==
grmgr: 2020/08/16 02:42:32.648140 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 02:42:32.649956 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.739253ms
DB: 2020/08/16 02:42:32.651924 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.928096ms
DB: 2020/08/16 02:42:32.654034 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.027633ms
DB: 2020/08/16 02:42:32.655666 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.705933ms
DB: 2020/08/16 02:42:32.657916 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.850451ms
DB: 2020/08/16 02:42:32.659673 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.972511ms
DB: 2020/08/16 02:42:32.661697 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.748743ms
DB: 2020/08/16 02:42:32.664238 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.533054ms
DB: 2020/08/16 02:42:32.665691 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.819509ms
SaveRDFNode: 2020/08/16 02:42:32.665704 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017b60)}
SaveRDFNode: 2020/08/16 02:42:32.665710 Received UID: X18=
SaveRDFNode: 2020/08/16 02:42:32.665721 a: = db.Item{PKey:[]uint8{0xde, 0x68, 0x20, 0xf4, 0x12, 0x51, 0x4d, 0x5, 0x96, 0xb0, 0x93, 0x3c, 0x55, 0x72, 0xe4, 0x5e}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:42:32.668033 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.756072ms
SaveRDFNode: 2020/08/16 02:42:32.668045 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000e4240)}
SaveRDFNode: 2020/08/16 02:42:32.668052 Received UID: X18=
SaveRDFNode: 2020/08/16 02:42:32.668062 a: = db.Item{PKey:[]uint8{0x1f, 0xca, 0x25, 0x5f, 0xb6, 0xcd, 0x49, 0x46, 0xa9, 0x11, 0x51, 0xb0, 0x4, 0x98, 0xd8, 0x32}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:42:32.669524 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.775506ms
SaveRDFNode: 2020/08/16 02:42:32.669535 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017b60)}
SaveRDFNode: 2020/08/16 02:42:32.669542 Received UID: X18=
SaveRDFNode: 2020/08/16 02:42:32.669551 a: = db.Item{PKey:[]uint8{0xde, 0x68, 0x20, 0xf4, 0x12, 0x51, 0x4d, 0x5, 0x96, 0xb0, 0x93, 0x3c, 0x55, 0x72, 0xe4, 0x5e}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:42:32.671865 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.771183ms
SaveRDFNode: 2020/08/16 02:42:32.671878 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000e4240)}
SaveRDFNode: 2020/08/16 02:42:32.671884 Received UID: X18=
SaveRDFNode: 2020/08/16 02:42:32.671894 a: = db.Item{PKey:[]uint8{0x1f, 0xca, 0x25, 0x5f, 0xb6, 0xcd, 0x49, 0x46, 0xa9, 0x11, 0x51, 0xb0, 0x4, 0x98, 0xd8, 0x32}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:42:32.673393 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.814779ms
SaveRDFNode: 2020/08/16 02:42:32.673402 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:42:32.673409 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 02:42:32.675724 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.803036ms
SaveRDFNode: 2020/08/16 02:42:32.675733 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 02:42:32.675740 saveNode finished waiting...exiting
grmgr: 2020/08/16 02:42:32.675746 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 02:42:32.675756 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.691252 About to run AttachNodeCh: abc  b  LdDJhwLLTYSbcnKku3ClTQ== yL4FXcc/QKqVX4i3TGfQFA==
anmgr 2020/08/16 02:42:32.691443 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:42:32.691456 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 02:42:32.691461 Looping..... 0
grmgr: 2020/08/16 02:42:32.691474 Looping..... 1
grmgr: 2020/08/16 02:42:32.691619 Looping..... 2
grmgr: 2020/08/16 02:42:32.691818 Looping..... 3
grmgr: 2020/08/16 02:42:32.691993 Looping..... 4
grmgr: 2020/08/16 02:42:32.692163 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:42:32.692173 goroutine about to start 1 cUID,pUID   LdDJhwLLTYSbcnKku3ClTQ==  yL4FXcc/QKqVX4i3TGfQFA==  
grmgr: 2020/08/16 02:42:32.692715 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:42:32.696235 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.195135ms
DB: 2020/08/16 02:42:32.699636 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.370783ms
DB: 2020/08/16 02:42:32.704334 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.617556ms
anmgr 2020/08/16 02:42:32.706998 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.713204 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.354156ms
AttachNode: main 2020/08/16 02:42:32.713217 FetchForUpdate: for parent    yL4FXcc/QKqVX4i3TGfQFA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:42:32.713222 ** Cache FetchForUpdate Cache Key Value: [yL4FXcc/QKqVX4i3TGfQFA==]   sortk: A#G#:S
FetchNode: 2020/08/16 02:42:32.713228  node: yL4FXcc/QKqVX4i3TGfQFA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:42:32.713418 FetchForUpdate: for child    LdDJhwLLTYSbcnKku3ClTQ==
FetchForUpdate: 2020/08/16 02:42:32.713426 ** Cache FetchForUpdate Cache Key Value: [LdDJhwLLTYSbcnKku3ClTQ==]   sortk: A#
FetchNode: 2020/08/16 02:42:32.713439  node: LdDJhwLLTYSbcnKku3ClTQ== subKey: A#
DB: 2020/08/16 02:42:32.716264 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.004695ms
FetchForUpdate: 2020/08/16 02:42:32.716331 len(nb): 1
fetchItems: 2020/08/16 02:42:32.716340 +++  Cache FetchItems for sortk A#G#:S UID: [yL4FXcc/QKqVX4i3TGfQFA==] 
FetchNode: 2020/08/16 02:42:32.716344  node: yL4FXcc/QKqVX4i3TGfQFA== subKey: A#G#:S
DB: 2020/08/16 02:42:32.716925 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.393724ms
FetchForUpdate: 2020/08/16 02:42:32.717045 len(nb): 7
fetchItems: 2020/08/16 02:42:32.717066 +++  Cache FetchItems for sortk A# UID: [LdDJhwLLTYSbcnKku3ClTQ==] 
FetchNode: 2020/08/16 02:42:32.717070  node: LdDJhwLLTYSbcnKku3ClTQ== subKey: A#
DB: 2020/08/16 02:42:32.719450 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.066868ms
DB: 2020/08/16 02:42:32.721104 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.002987ms
DB: 2020/08/16 02:42:32.724500 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.408826ms
anmgr 2020/08/16 02:42:32.725715 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.731719 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.337953ms
DB: 2020/08/16 02:42:32.735645 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.870298ms
DB: 2020/08/16 02:42:32.740648 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.897086ms
anmgr 2020/08/16 02:42:32.741447 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:32.747494 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.782139ms
DB: 2020/08/16 02:42:32.751286 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.734996ms
DB: 2020/08/16 02:42:32.755601 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.143883ms
anmgr 2020/08/16 02:42:32.757124 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.762081 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.192241ms
DB: 2020/08/16 02:42:32.766352 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.95478ms
DB: 2020/08/16 02:42:32.770785 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.128399ms
anmgr 2020/08/16 02:42:32.772936 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.774916 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.952405ms
Cache: 2020/08/16 02:42:32.774938 In SetUpredAvailable: pUid, tUID:  yL4FXcc/QKqVX4i3TGfQFA== yL4FXcc/QKqVX4i3TGfQFA== A#G#:S
Cache: 2020/08/16 02:42:32.774943 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:42:32.778800 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.807535ms
Unlock: 2020/08/16 02:42:32.778810 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:42:32.778815 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:42:32.783508 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.638192ms
grmgr: 2020/08/16 02:42:32.783522 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:42:32.788369 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:32.788379 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:42:32.798756 About to run AttachNodeCh: d  abc  H8olX7bNSUapEVGwBJjYMg== LdDJhwLLTYSbcnKku3ClTQ==
anmgr 2020/08/16 02:42:32.798785 for loop finished 1  8 
anmgr 2020/08/16 02:42:32.798807 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.798813 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.798818 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:42:32.798825 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 02:42:32.798831 Looping..... 0
grmgr: 2020/08/16 02:42:32.798903 Looping..... 1
grmgr: 2020/08/16 02:42:32.799071 Looping..... 2
grmgr: 2020/08/16 02:42:32.799244 Looping..... 3
grmgr: 2020/08/16 02:42:32.799417 Looping..... 4
grmgr: 2020/08/16 02:42:32.799630 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:42:32.799650 goroutine about to start 2 cUID,pUID   H8olX7bNSUapEVGwBJjYMg==  LdDJhwLLTYSbcnKku3ClTQ==  
grmgr: 2020/08/16 02:42:32.799838 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:42:32.803201 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.080293ms
DB: 2020/08/16 02:42:32.805898 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.658115ms
DB: 2020/08/16 02:42:32.810021 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.04435ms
DB: 2020/08/16 02:42:32.814029 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.835822ms
AttachNode: main 2020/08/16 02:42:32.814041 FetchForUpdate: for parent    LdDJhwLLTYSbcnKku3ClTQ==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 02:42:32.814046 ** Cache FetchForUpdate Cache Key Value: [LdDJhwLLTYSbcnKku3ClTQ==]   sortk: A#G#:F
fetchItems: 2020/08/16 02:42:32.814051 +++  Cache FetchItems for sortk A#G#:F UID: [LdDJhwLLTYSbcnKku3ClTQ==] 
FetchNode: 2020/08/16 02:42:32.814055  node: LdDJhwLLTYSbcnKku3ClTQ== subKey: A#G#:F
AttachNode: gr1 2020/08/16 02:42:32.814217 FetchForUpdate: for child    H8olX7bNSUapEVGwBJjYMg==
FetchForUpdate: 2020/08/16 02:42:32.814225 ** Cache FetchForUpdate Cache Key Value: [H8olX7bNSUapEVGwBJjYMg==]   sortk: A#
FetchNode: 2020/08/16 02:42:32.814237  node: H8olX7bNSUapEVGwBJjYMg== subKey: A#
anmgr 2020/08/16 02:42:32.814922 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.817556 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.277702ms
FetchForUpdate: 2020/08/16 02:42:32.817689 len(nb): 7
fetchItems: 2020/08/16 02:42:32.817698 +++  Cache FetchItems for sortk A# UID: [H8olX7bNSUapEVGwBJjYMg==] 
FetchNode: 2020/08/16 02:42:32.817703  node: H8olX7bNSUapEVGwBJjYMg== subKey: A#
DB: 2020/08/16 02:42:32.818042 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.946709ms
DB: 2020/08/16 02:42:32.820781 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.051365ms
DB: 2020/08/16 02:42:32.822777 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.967004ms
DB: 2020/08/16 02:42:32.829021 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.168944ms
anmgr 2020/08/16 02:42:32.830384 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.832941 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.875193ms
DB: 2020/08/16 02:42:32.837543 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.228417ms
DB: 2020/08/16 02:42:32.844135 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.295018ms
anmgr 2020/08/16 02:42:32.845824 About to run AttachNodeCh: b  c  yL4FXcc/QKqVX4i3TGfQFA== 3mgg9BJRTQWWsJM8VXLkXg==
anmgr 2020/08/16 02:42:32.845839 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/16 02:42:32.845847 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 02:42:32.845853 Looping..... 0
grmgr: 2020/08/16 02:42:32.845997 Looping..... 1
grmgr: 2020/08/16 02:42:32.846172 Looping..... 2
grmgr: 2020/08/16 02:42:32.846347 Looping..... 3
grmgr: 2020/08/16 02:42:32.846523 Looping..... 4
grmgr: 2020/08/16 02:42:32.846699 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:42:32.846709 goroutine about to start 3 cUID,pUID   yL4FXcc/QKqVX4i3TGfQFA==  3mgg9BJRTQWWsJM8VXLkXg==  
grmgr: 2020/08/16 02:42:32.846911 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 02:42:32.847984 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.543742ms
DB: 2020/08/16 02:42:32.849906 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.14162ms
DB: 2020/08/16 02:42:32.852126 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.078253ms
DB: 2020/08/16 02:42:32.853982 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.039012ms
DB: 2020/08/16 02:42:32.858057 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.012634ms
DB: 2020/08/16 02:42:32.859163 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.977762ms
anmgr 2020/08/16 02:42:32.861615 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.863442 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.934564ms
DB: 2020/08/16 02:42:32.865298 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.069261ms
AttachNode: main 2020/08/16 02:42:32.865311 FetchForUpdate: for parent    3mgg9BJRTQWWsJM8VXLkXg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:42:32.865316 ** Cache FetchForUpdate Cache Key Value: [3mgg9BJRTQWWsJM8VXLkXg==]   sortk: A#G#:S
FetchNode: 2020/08/16 02:42:32.865322  node: 3mgg9BJRTQWWsJM8VXLkXg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:42:32.865488 FetchForUpdate: for child    yL4FXcc/QKqVX4i3TGfQFA==
FetchForUpdate: 2020/08/16 02:42:32.865496 ** Cache FetchForUpdate Cache Key Value: [yL4FXcc/QKqVX4i3TGfQFA==]   sortk: A#
fetchItems: 2020/08/16 02:42:32.865502 +++  Cache FetchItems for sortk A# UID: [yL4FXcc/QKqVX4i3TGfQFA==] 
FetchNode: 2020/08/16 02:42:32.865515  node: yL4FXcc/QKqVX4i3TGfQFA== subKey: A#
DB: 2020/08/16 02:42:32.868413 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.05937ms
FetchForUpdate: 2020/08/16 02:42:32.868462 len(nb): 1
fetchItems: 2020/08/16 02:42:32.868471 +++  Cache FetchItems for sortk A#G#:S UID: [3mgg9BJRTQWWsJM8VXLkXg==] 
FetchNode: 2020/08/16 02:42:32.868476  node: 3mgg9BJRTQWWsJM8VXLkXg== subKey: A#G#:S
DB: 2020/08/16 02:42:32.868893 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.949723ms
DB: 2020/08/16 02:42:32.872217 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.702463ms
DB: 2020/08/16 02:42:32.875051 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 9.469836ms
fetchItems: 2020/08/16 02:42:32.875241 +++  Cache FetchItems for sortk A# UID: [yL4FXcc/QKqVX4i3TGfQFA==] 
FetchNode: 2020/08/16 02:42:32.875250  node: yL4FXcc/QKqVX4i3TGfQFA== subKey: A#
DB: 2020/08/16 02:42:32.876927 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.860096ms
Cache: 2020/08/16 02:42:32.876938 In SetUpredAvailable: pUid, tUID:  LdDJhwLLTYSbcnKku3ClTQ== LdDJhwLLTYSbcnKku3ClTQ== A#G#:F
Cache: 2020/08/16 02:42:32.876943 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:42:32.878593 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.314385ms
anmgr 2020/08/16 02:42:32.879519 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.882578 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.600093ms
Unlock: 2020/08/16 02:42:32.882588 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:42:32.882593 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:42:32.894894 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:32.894910 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:32.894916 for loop finished 1  8 
anmgr 2020/08/16 02:42:32.894922 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.894928 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.894934 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.895261 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 22.816174ms
DB: 2020/08/16 02:42:32.898170 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 15.514097ms
grmgr: 2020/08/16 02:42:32.898196 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 02:42:32.900085 ** received on attachDoneCh.... 1
anmgr 2020/08/16 02:42:32.905262 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.917605 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 21.791852ms
anmgr 2020/08/16 02:42:32.920724 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.920743 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.920749 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:32.924599 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.520661ms
DB: 2020/08/16 02:42:32.930819 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.636404ms
anmgr 2020/08/16 02:42:32.936585 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.937328 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.021043ms
DB: 2020/08/16 02:42:32.941435 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.785678ms
DB: 2020/08/16 02:42:32.945956 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.217986ms
DB: 2020/08/16 02:42:32.951747 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.489002ms
anmgr 2020/08/16 02:42:32.952223 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.955989 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.928703ms
DB: 2020/08/16 02:42:32.960584 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.271437ms
DB: 2020/08/16 02:42:32.965213 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.450421ms
Cache: 2020/08/16 02:42:32.965225 In SetUpredAvailable: pUid, tUID:  3mgg9BJRTQWWsJM8VXLkXg== 3mgg9BJRTQWWsJM8VXLkXg== A#G#:S
Cache: 2020/08/16 02:42:32.965230 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 02:42:32.967703 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:32.967718 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:32.967723 for loop finished 2  8 
anmgr 2020/08/16 02:42:32.967728 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.967734 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.967738 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:32.973893 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 8.617106ms
Unlock: 2020/08/16 02:42:32.973907 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:42:32.973912 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:42:32.979937 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.96436ms
grmgr: 2020/08/16 02:42:32.979951 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:42:32.983190 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.983204 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:42:32.993547 About to run AttachNodeCh: b  abc  yL4FXcc/QKqVX4i3TGfQFA== LdDJhwLLTYSbcnKku3ClTQ==
anmgr 2020/08/16 02:42:32.993567 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.993573 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:32.993579 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/16 02:42:32.993586 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 02:42:32.993592 Looping..... 0
grmgr: 2020/08/16 02:42:32.993715 Looping..... 1
grmgr: 2020/08/16 02:42:32.993891 Looping..... 2
grmgr: 2020/08/16 02:42:32.994066 Looping..... 3
grmgr: 2020/08/16 02:42:32.994240 Looping..... 4
grmgr: 2020/08/16 02:42:32.994425 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:42:32.994435 goroutine about to start 4 cUID,pUID   yL4FXcc/QKqVX4i3TGfQFA==  LdDJhwLLTYSbcnKku3ClTQ==  
grmgr: 2020/08/16 02:42:32.994671 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:42:32.997257 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.754166ms
DB: 2020/08/16 02:42:33.000686 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.399022ms
DB: 2020/08/16 02:42:33.007784 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.951852ms
anmgr 2020/08/16 02:42:33.009023 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.012259 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.073981ms
AttachNode: main 2020/08/16 02:42:33.012273 FetchForUpdate: for parent    LdDJhwLLTYSbcnKku3ClTQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:42:33.012278 ** Cache FetchForUpdate Cache Key Value: [LdDJhwLLTYSbcnKku3ClTQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:42:33.012283 +++  Cache FetchItems for sortk A#G#:S UID: [LdDJhwLLTYSbcnKku3ClTQ==] 
FetchNode: 2020/08/16 02:42:33.012296  node: LdDJhwLLTYSbcnKku3ClTQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:42:33.012522 FetchForUpdate: for child    yL4FXcc/QKqVX4i3TGfQFA==
FetchForUpdate: 2020/08/16 02:42:33.012542 ** Cache FetchForUpdate Cache Key Value: [yL4FXcc/QKqVX4i3TGfQFA==]   sortk: A#
fetchItems: 2020/08/16 02:42:33.012547 +++  Cache FetchItems for sortk A# UID: [yL4FXcc/QKqVX4i3TGfQFA==] 
FetchNode: 2020/08/16 02:42:33.012575  node: yL4FXcc/QKqVX4i3TGfQFA== subKey: A#
DB: 2020/08/16 02:42:33.015136 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.803786ms
DB: 2020/08/16 02:42:33.019280 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.893612ms
anmgr 2020/08/16 02:42:33.024605 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.028526 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 15.902564ms
DB: 2020/08/16 02:42:33.036188 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.063627ms
DB: 2020/08/16 02:42:33.040440 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.923591ms
anmgr 2020/08/16 02:42:33.041267 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.041279 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.041284 for loop finished 3  8 
anmgr 2020/08/16 02:42:33.041289 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.041311 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.041318 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.045143 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.046529ms
DB: 2020/08/16 02:42:33.051808 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.222103ms
DB: 2020/08/16 02:42:33.056095 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.749138ms
anmgr 2020/08/16 02:42:33.056942 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.056954 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.056959 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.056970 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.056976 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.060726 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.038968ms
DB: 2020/08/16 02:42:33.067570 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.338862ms
DB: 2020/08/16 02:42:33.072576 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.514044ms
anmgr 2020/08/16 02:42:33.073047 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.076511 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.865143ms
DB: 2020/08/16 02:42:33.080368 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.804276ms
Cache: 2020/08/16 02:42:33.080384 In SetUpredAvailable: pUid, tUID:  LdDJhwLLTYSbcnKku3ClTQ== LdDJhwLLTYSbcnKku3ClTQ== A#G#:S
Cache: 2020/08/16 02:42:33.080389 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:42:33.084415 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.988726ms
Unlock: 2020/08/16 02:42:33.084431 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:42:33.084437 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:42:33.088519 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.090102 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.560993ms
grmgr: 2020/08/16 02:42:33.090252 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:42:33.093698 ** received on attachDoneCh.... 1
anmgr 2020/08/16 02:42:33.098914 About to run AttachNodeCh: c  b  3mgg9BJRTQWWsJM8VXLkXg== yL4FXcc/QKqVX4i3TGfQFA==
anmgr 2020/08/16 02:42:33.098928 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.098933 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.098937 for loop finished 4  8 
anmgr 2020/08/16 02:42:33.098942 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.098947 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.098951 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:42:33.098957 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 02:42:33.098961 Looping..... 0
grmgr: 2020/08/16 02:42:33.099064 Looping..... 1
grmgr: 2020/08/16 02:42:33.099236 Looping..... 2
grmgr: 2020/08/16 02:42:33.099460 Looping..... 3
grmgr: 2020/08/16 02:42:33.099570 Looping..... 4
grmgr: 2020/08/16 02:42:33.099639 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:42:33.099650 goroutine about to start 5 cUID,pUID   3mgg9BJRTQWWsJM8VXLkXg==  yL4FXcc/QKqVX4i3TGfQFA==  
grmgr: 2020/08/16 02:42:33.099853 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:42:33.102513 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.807901ms
DB: 2020/08/16 02:42:33.105382 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.838336ms
DB: 2020/08/16 02:42:33.109894 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.346087ms
anmgr 2020/08/16 02:42:33.114344 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.114359 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.114365 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.114371 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.114376 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.116081 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.869798ms
AttachNode: main 2020/08/16 02:42:33.116095 FetchForUpdate: for parent    yL4FXcc/QKqVX4i3TGfQFA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:42:33.116101 ** Cache FetchForUpdate Cache Key Value: [yL4FXcc/QKqVX4i3TGfQFA==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:42:33.116106 +++  Cache FetchItems for sortk A#G#:S UID: [yL4FXcc/QKqVX4i3TGfQFA==] 
FetchNode: 2020/08/16 02:42:33.116110  node: yL4FXcc/QKqVX4i3TGfQFA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:42:33.116389 FetchForUpdate: for child    3mgg9BJRTQWWsJM8VXLkXg==
FetchForUpdate: 2020/08/16 02:42:33.116402 ** Cache FetchForUpdate Cache Key Value: [3mgg9BJRTQWWsJM8VXLkXg==]   sortk: A#
fetchItems: 2020/08/16 02:42:33.116419 +++  Cache FetchItems for sortk A# UID: [3mgg9BJRTQWWsJM8VXLkXg==] 
FetchNode: 2020/08/16 02:42:33.116432  node: 3mgg9BJRTQWWsJM8VXLkXg== subKey: A#
DB: 2020/08/16 02:42:33.119134 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.980343ms
DB: 2020/08/16 02:42:33.120359 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.883059ms
fetchItems: 2020/08/16 02:42:33.120522 +++  Cache FetchItems for sortk A# UID: [3mgg9BJRTQWWsJM8VXLkXg==] 
FetchNode: 2020/08/16 02:42:33.120536  node: 3mgg9BJRTQWWsJM8VXLkXg== subKey: A#
DB: 2020/08/16 02:42:33.123890 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.309844ms
DB: 2020/08/16 02:42:33.125276 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.625479ms
DB: 2020/08/16 02:42:33.129005 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.697258ms
DB: 2020/08/16 02:42:33.129021 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.697258ms
anmgr 2020/08/16 02:42:33.130337 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.132855 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.801405ms
DB: 2020/08/16 02:42:33.132873 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.801405ms
DB: 2020/08/16 02:42:33.136995 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.048311ms
DB: 2020/08/16 02:42:33.141076 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.013362ms
anmgr 2020/08/16 02:42:33.145783 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.145795 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.145813 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.145818 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.145822 for loop finished 4  8 
anmgr 2020/08/16 02:42:33.145827 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.145831 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.145836 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.147344 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.205054ms
DB: 2020/08/16 02:42:33.151411 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.902107ms
DB: 2020/08/16 02:42:33.155720 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.912652ms
DB: 2020/08/16 02:42:33.161605 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.577917ms
anmgr 2020/08/16 02:42:33.162729 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.162741 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.162746 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.162751 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.162756 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.165966 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.8966ms
DB: 2020/08/16 02:42:33.170580 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.110903ms
DB: 2020/08/16 02:42:33.177594 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.46562ms
anmgr 2020/08/16 02:42:33.178494 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.182230 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.896387ms
DB: 2020/08/16 02:42:33.186650 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.934577ms
DB: 2020/08/16 02:42:33.190827 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.877253ms
Cache: 2020/08/16 02:42:33.190850 In SetUpredAvailable: pUid, tUID:  yL4FXcc/QKqVX4i3TGfQFA== ZuZZqhXiRjOlaaERsiot+w== A#G#:S
Cache: 2020/08/16 02:42:33.190855 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 02:42:33.193914 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.193928 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.193934 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.193939 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.193944 for loop finished 4  8 
anmgr 2020/08/16 02:42:33.193949 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.193954 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.193959 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.194814 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.921639ms
Unlock: 2020/08/16 02:42:33.194824 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:42:33.194828 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:42:33.199224 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.343853ms
grmgr: 2020/08/16 02:42:33.199257 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:42:33.204234 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:42:33.204269 About to run AttachNodeCh: abc  c  LdDJhwLLTYSbcnKku3ClTQ== 3mgg9BJRTQWWsJM8VXLkXg==
anmgr 2020/08/16 02:42:33.204289 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.204297 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.204302 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.204311 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.204316 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/16 02:42:33.204344 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 02:42:33.204365 Looping..... 0
grmgr: 2020/08/16 02:42:33.204444 Looping..... 1
grmgr: 2020/08/16 02:42:33.204566 Looping..... 2
grmgr: 2020/08/16 02:42:33.204736 Looping..... 3
grmgr: 2020/08/16 02:42:33.204908 Looping..... 4
grmgr: 2020/08/16 02:42:33.205080 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:42:33.205089 goroutine about to start 6 cUID,pUID   LdDJhwLLTYSbcnKku3ClTQ==  3mgg9BJRTQWWsJM8VXLkXg==  
grmgr: 2020/08/16 02:42:33.205463 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:42:33.208761 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.497166ms
DB: 2020/08/16 02:42:33.211413 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.61035ms
DB: 2020/08/16 02:42:33.217508 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.040895ms
anmgr 2020/08/16 02:42:33.219720 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.221844 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.150264ms
AttachNode: main 2020/08/16 02:42:33.221857 FetchForUpdate: for parent    3mgg9BJRTQWWsJM8VXLkXg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:42:33.221862 ** Cache FetchForUpdate Cache Key Value: [3mgg9BJRTQWWsJM8VXLkXg==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:42:33.221868 +++  Cache FetchItems for sortk A#G#:S UID: [3mgg9BJRTQWWsJM8VXLkXg==] 
FetchNode: 2020/08/16 02:42:33.221873  node: 3mgg9BJRTQWWsJM8VXLkXg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:42:33.222051 FetchForUpdate: for child    LdDJhwLLTYSbcnKku3ClTQ==
FetchForUpdate: 2020/08/16 02:42:33.222066 ** Cache FetchForUpdate Cache Key Value: [LdDJhwLLTYSbcnKku3ClTQ==]   sortk: A#
fetchItems: 2020/08/16 02:42:33.222072 +++  Cache FetchItems for sortk A# UID: [LdDJhwLLTYSbcnKku3ClTQ==] 
FetchNode: 2020/08/16 02:42:33.222084  node: LdDJhwLLTYSbcnKku3ClTQ== subKey: A#
DB: 2020/08/16 02:42:33.225131 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.225455ms
DB: 2020/08/16 02:42:33.226596 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 13  Duration: 4.373695ms
DB: 2020/08/16 02:42:33.230461 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.825635ms
DB: 2020/08/16 02:42:33.234704 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.053741ms
DB: 2020/08/16 02:42:33.234720 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.053741ms
anmgr 2020/08/16 02:42:33.236172 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.236202 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.236207 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.236212 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.236216 for loop finished 5  8 
anmgr 2020/08/16 02:42:33.236221 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.236234 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.236240 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.236245 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.236249 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.236254 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.236259 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.236263 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.236268 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.238581 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.708499ms
DB: 2020/08/16 02:42:33.238596 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.708499ms
DB: 2020/08/16 02:42:33.242645 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.983615ms
DB: 2020/08/16 02:42:33.246903 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.20128ms
anmgr 2020/08/16 02:42:33.251689 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.253695 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.715853ms
DB: 2020/08/16 02:42:33.258256 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.512449ms
DB: 2020/08/16 02:42:33.263504 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.118796ms
anmgr 2020/08/16 02:42:33.267175 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.267189 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.267194 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.267204 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.267209 for loop finished 5  8 
anmgr 2020/08/16 02:42:33.267214 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.267228 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.267237 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.267242 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.267247 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.267253 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.267257 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.267275 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.267289 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.275304 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 11.728011ms
DB: 2020/08/16 02:42:33.279364 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.001004ms
anmgr 2020/08/16 02:42:33.282755 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:42:33.283575 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.145517ms
DB: 2020/08/16 02:42:33.289800 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.167001ms
DB: 2020/08/16 02:42:33.293526 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.675371ms
DB: 2020/08/16 02:42:33.297723 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.124494ms
anmgr 2020/08/16 02:42:33.298099 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.298111 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.298116 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.298121 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.298126 for loop finished 5  8 
anmgr 2020/08/16 02:42:33.298130 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.298135 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.298140 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.298145 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.298150 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.298155 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.298159 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.298164 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.298169 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.301709 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.93024ms
Cache: 2020/08/16 02:42:33.301724 In SetUpredAvailable: pUid, tUID:  3mgg9BJRTQWWsJM8VXLkXg== cNHw04PHTbKqymp5lC2sag== A#G#:S
Cache: 2020/08/16 02:42:33.301730 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:42:33.305767 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.001489ms
Unlock: 2020/08/16 02:42:33.305778 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:42:33.305782 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:42:33.310003 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.165576ms
grmgr: 2020/08/16 02:42:33.310017 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:42:33.313664 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.313700 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:42:33.324015 About to run AttachNodeCh: c  abc  3mgg9BJRTQWWsJM8VXLkXg== LdDJhwLLTYSbcnKku3ClTQ==
anmgr 2020/08/16 02:42:33.324032 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.324039 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.324044 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.324050 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.324055 for loop finished 6  8 
anmgr 2020/08/16 02:42:33.324061 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.324067 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.324072 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.324077 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.324083 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.324088 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.324094 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.324100 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.324106 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/16 02:42:33.324114 read from AttachNodeCh channel 7 now ASK limiter
grmgr: 2020/08/16 02:42:33.324120 Looping..... 0
grmgr: 2020/08/16 02:42:33.324136 Looping..... 1
grmgr: 2020/08/16 02:42:33.324338 Looping..... 2
grmgr: 2020/08/16 02:42:33.324515 Looping..... 3
grmgr: 2020/08/16 02:42:33.324689 Looping..... 4
grmgr: 2020/08/16 02:42:33.324882 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:42:33.324892 goroutine about to start 7 cUID,pUID   3mgg9BJRTQWWsJM8VXLkXg==  LdDJhwLLTYSbcnKku3ClTQ==  
grmgr: 2020/08/16 02:42:33.325105 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:42:33.330024 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.050408ms
DB: 2020/08/16 02:42:33.332819 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.765059ms
DB: 2020/08/16 02:42:33.337117 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.227425ms
anmgr 2020/08/16 02:42:33.339469 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339482 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339487 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339492 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339497 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.339502 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.339506 for loop finished 6  8 
anmgr 2020/08/16 02:42:33.339511 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339516 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339520 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339525 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339530 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339535 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339539 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339544 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.339548 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.341457 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.166988ms
AttachNode: main 2020/08/16 02:42:33.341472 FetchForUpdate: for parent    LdDJhwLLTYSbcnKku3ClTQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:42:33.341478 ** Cache FetchForUpdate Cache Key Value: [LdDJhwLLTYSbcnKku3ClTQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:42:33.341485 +++  Cache FetchItems for sortk A#G#:S UID: [LdDJhwLLTYSbcnKku3ClTQ==] 
FetchNode: 2020/08/16 02:42:33.341490  node: LdDJhwLLTYSbcnKku3ClTQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:42:33.341686 FetchForUpdate: for child    3mgg9BJRTQWWsJM8VXLkXg==
FetchForUpdate: 2020/08/16 02:42:33.341696 ** Cache FetchForUpdate Cache Key Value: [3mgg9BJRTQWWsJM8VXLkXg==]   sortk: A#
fetchItems: 2020/08/16 02:42:33.341719 +++  Cache FetchItems for sortk A# UID: [3mgg9BJRTQWWsJM8VXLkXg==] 
FetchNode: 2020/08/16 02:42:33.341735  node: 3mgg9BJRTQWWsJM8VXLkXg== subKey: A#
DB: 2020/08/16 02:42:33.344559 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.034572ms
DB: 2020/08/16 02:42:33.345456 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.660394ms
DB: 2020/08/16 02:42:33.348959 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.026357ms
DB: 2020/08/16 02:42:33.352618 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.62288ms
DB: 2020/08/16 02:42:33.352633 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.62288ms
anmgr 2020/08/16 02:42:33.355463 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355475 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355480 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355485 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355490 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.355495 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.355500 for loop finished 6  8 
anmgr 2020/08/16 02:42:33.355504 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355509 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355514 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355519 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355524 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355529 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355534 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355539 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.355543 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.356693 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.010532ms
DB: 2020/08/16 02:42:33.356706 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.010532ms
DB: 2020/08/16 02:42:33.360995 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.091305ms
DB: 2020/08/16 02:42:33.365477 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.175732ms
anmgr 2020/08/16 02:42:33.371466 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371491 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371513 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371525 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371535 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.371546 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.371556 for loop finished 6  8 
anmgr 2020/08/16 02:42:33.371566 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371578 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371607 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371619 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371629 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371640 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371650 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371660 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.371671 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.372279 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.250977ms
DB: 2020/08/16 02:42:33.377532 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.062594ms
DB: 2020/08/16 02:42:33.382051 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.162449ms
anmgr 2020/08/16 02:42:33.387769 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387781 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387787 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387792 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387809 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.387814 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.387818 for loop finished 6  8 
anmgr 2020/08/16 02:42:33.387823 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387828 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387833 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387838 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387842 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387847 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387851 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387856 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.387861 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.388797 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.402307ms
DB: 2020/08/16 02:42:33.394054 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.967254ms
DB: 2020/08/16 02:42:33.398817 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.067816ms
anmgr 2020/08/16 02:42:33.403385 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403398 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403403 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403408 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403419 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.403424 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.403428 for loop finished 6  8 
anmgr 2020/08/16 02:42:33.403433 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403438 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403443 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403448 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403453 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403458 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403462 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403467 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.403472 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.405118 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.242055ms
DB: 2020/08/16 02:42:33.409009 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.827189ms
DB: 2020/08/16 02:42:33.413235 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.108557ms
DB: 2020/08/16 02:42:33.417022 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.615656ms
Cache: 2020/08/16 02:42:33.417036 In SetUpredAvailable: pUid, tUID:  LdDJhwLLTYSbcnKku3ClTQ== 1f0/ONKXQWytpZOyvR64lg== A#G#:S
Cache: 2020/08/16 02:42:33.417040 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 02:42:33.418899 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418910 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418915 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418920 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418925 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.418930 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.418935 for loop finished 6  8 
anmgr 2020/08/16 02:42:33.418940 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418945 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418950 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418955 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418962 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418968 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418972 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418977 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.418982 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:42:33.421025 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.950388ms
Unlock: 2020/08/16 02:42:33.421034 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:42:33.421039 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:42:33.425729 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.619519ms
grmgr: 2020/08/16 02:42:33.425743 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:42:33.429375 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:42:33.429394 About to run AttachNodeCh: c  abc  3mgg9BJRTQWWsJM8VXLkXg== LdDJhwLLTYSbcnKku3ClTQ==
anmgr 2020/08/16 02:42:33.429403 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.429410 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.429415 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.429421 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:42:33.429426 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.429432 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:42:33.429437 for loop finished 7  8 
attachNode: 2020/08/16 02:42:33.429443 read from AttachNodeCh channel 8 now ASK limiter
grmgr: 2020/08/16 02:42:33.429449 Looping..... 0
grmgr: 2020/08/16 02:42:33.429639 Looping..... 1
grmgr: 2020/08/16 02:42:33.429802 Looping..... 2
grmgr: 2020/08/16 02:42:33.429976 Looping..... 3
grmgr: 2020/08/16 02:42:33.430183 Looping..... 4
grmgr: 2020/08/16 02:42:33.430333 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:42:33.430344 goroutine about to start 8 cUID,pUID   3mgg9BJRTQWWsJM8VXLkXg==  LdDJhwLLTYSbcnKku3ClTQ==  
rdfLoader: 2020/08/16 02:42:33.430350 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 02:42:33.430755 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:42:33.433486 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.882771ms
DB: 2020/08/16 02:42:33.436329 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.81282ms
DB: 2020/08/16 02:42:33.447300 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 10.921374ms
DB: 2020/08/16 02:42:33.451645 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.171024ms
AttachNode: main 2020/08/16 02:42:33.451660 FetchForUpdate: for parent    LdDJhwLLTYSbcnKku3ClTQ==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 02:42:33.451665 ** Cache FetchForUpdate Cache Key Value: [LdDJhwLLTYSbcnKku3ClTQ==]   sortk: A#G#:F
fetchItems: 2020/08/16 02:42:33.451670 +++  Cache FetchItems for sortk A#G#:F UID: [LdDJhwLLTYSbcnKku3ClTQ==] 
FetchNode: 2020/08/16 02:42:33.451675  node: LdDJhwLLTYSbcnKku3ClTQ== subKey: A#G#:F
AttachNode: gr1 2020/08/16 02:42:33.451855 FetchForUpdate: for child    3mgg9BJRTQWWsJM8VXLkXg==
FetchForUpdate: 2020/08/16 02:42:33.451863 ** Cache FetchForUpdate Cache Key Value: [3mgg9BJRTQWWsJM8VXLkXg==]   sortk: A#
fetchItems: 2020/08/16 02:42:33.451868 +++  Cache FetchItems for sortk A# UID: [3mgg9BJRTQWWsJM8VXLkXg==] 
FetchNode: 2020/08/16 02:42:33.451880  node: 3mgg9BJRTQWWsJM8VXLkXg== subKey: A#
DB: 2020/08/16 02:42:33.454964 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.25568ms
DB: 2020/08/16 02:42:33.455908 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.948172ms
DB: 2020/08/16 02:42:33.460971 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.638155ms
DB: 2020/08/16 02:42:33.464966 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.960296ms
DB: 2020/08/16 02:42:33.464985 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.960296ms
DB: 2020/08/16 02:42:33.468815 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.795368ms
DB: 2020/08/16 02:42:33.468831 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.795368ms
DB: 2020/08/16 02:42:33.473765 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.766691ms
DB: 2020/08/16 02:42:33.477795 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.880155ms
DB: 2020/08/16 02:42:33.484383 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.2672ms
DB: 2020/08/16 02:42:33.488511 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.951655ms
DB: 2020/08/16 02:42:33.493227 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.194355ms
DB: 2020/08/16 02:42:33.500054 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.364325ms
DB: 2020/08/16 02:42:33.504303 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.955986ms
DB: 2020/08/16 02:42:33.508729 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.117545ms
DB: 2020/08/16 02:42:33.516285 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.123635ms
DB: 2020/08/16 02:42:33.520547 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.722539ms
DB: 2020/08/16 02:42:33.525067 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.079395ms
DB: 2020/08/16 02:42:33.529749 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.430335ms
Cache: 2020/08/16 02:42:33.529762 In SetUpredAvailable: pUid, tUID:  LdDJhwLLTYSbcnKku3ClTQ== r00RtR7mQdKm7+dhiET87g== A#G#:F
Cache: 2020/08/16 02:42:33.529767 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:42:33.533769 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.965257ms
Unlock: 2020/08/16 02:42:33.533782 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:42:33.533788 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:42:33.538361 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.518441ms
grmgr: 2020/08/16 02:42:33.538380 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 02:42:33.538386 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 02:42:33.538393 11.....
rdfLoader: 2020/08/16 02:42:33.538400 22.....error cnt: 0
rdfuuid: 2020/08/16 02:42:33.538407 Powering down...
errlog: 2020/08/16 02:42:33.538411 Powering down...
grmgr: 2020/08/16 02:42:33.538416 Powering down...
anmgr: 2020/08/16 02:42:33.538421 Powering down...
rdfLoader: 2020/08/16 02:42:33.538425 loader exists.....
DB:2020/08/16 02:45:53 log.go:18: ===============================================================================
anmgr: 2020/08/16 02:45:53.364271 Powering on...
rdfLoader: 2020/08/16 02:45:53.364342 saveNode started......
rdfLoader: 2020/08/16 02:45:53.364349 define saveNode limiter......
rdfuuid: 2020/08/16 02:45:53.364353 Powering on...
grmgr: 2020/08/16 02:45:53.364371 Powering on...
errlog: 2020/08/16 02:45:53.364385 Powering on...
rdfLoader: 2020/08/16 02:45:53.364392  principle goroutines started 
RDFreader: 2020/08/16 02:45:53.364409 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:45:53.364423 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 02:45:53.364429 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 02:45:53.364435 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 02:45:53.364440 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 02:45:53.364446 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 02:45:53.364450 spo read:      
RDFreader: 2020/08/16 02:45:53.364474 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 02:45:53.364482 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 02:45:53.364486 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 02:45:53.364497 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 02:45:53.364502 spo read:      
RDFreader: 2020/08/16 02:45:53.364507 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 02:45:53.364511 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 02:45:53.364528 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 02:45:53.364533 spo read:  b  Age  "58"
RDFreader: 2020/08/16 02:45:53.364537 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 02:45:53.364542 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 02:45:53.364547 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 02:45:53.364551 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 02:45:53.364555 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 02:45:53.364559 spo read:      
RDFreader: 2020/08/16 02:45:53.364564 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 02:45:53.364567 Send node batch on channel verifyCh
RDFreader: 2020/08/16 02:45:53.364576 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 02:45:53.364579 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 02:45:53.364584 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 02:45:53.364591 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 02:45:53.364596 spo read:  c  Age  "67"
RDFreader: 2020/08/16 02:45:53.364600 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 02:45:53.364605 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 02:45:53.364609 spo read:  c  Friends  _:abc
RDFreader: 2020/08/16 02:45:53.364614 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 02:45:53.364620 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 02:45:53.364624 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 02:45:53.364629 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 02:45:53.364632 spo read:      
RDFreader: 2020/08/16 02:45:53.364637 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 02:45:53.364641 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 02:45:53.364646 spo read:  d  Friends  _:abc
RDFreader: 2020/08/16 02:45:53.364650 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 02:45:53.364655 spo read:  d  Age  "36"
RDFreader: 2020/08/16 02:45:53.364659 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 02:45:53.364665 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 02:45:53.364669 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 02:45:53.364674 close verify channel
rdfLoader: 2020/08/16 02:45:53.364678 verify started....
rdfLoader: 2020/08/16 02:45:53.364682 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:45:53.364686 .  getType..
rdfLoader: 2020/08/16 02:45:53.364689 node.TyName : [Person]
DB: 2020/08/16 02:45:53.441813 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 77.056586ms
grmgr: 2020/08/16 02:45:53.441963 Looping..... 0
grmgr: 2020/08/16 02:45:53.442248 Looping..... 1
grmgr: 2020/08/16 02:45:53.442386 Looping..... 2
grmgr: 2020/08/16 02:45:53.442571 Looping..... 3
grmgr: 2020/08/16 02:45:53.442800 Looping..... 4
grmgr: 2020/08/16 02:45:53.442975 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:45:53.442989 .  getType..
rdfLoader: 2020/08/16 02:45:53.442994 node.TyName : [Person]
grmgr: 2020/08/16 02:45:53.443000 Looping..... 0
unmarshalRDF: 2020/08/16 02:45:53.443014 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:45:53.443024 Looping..... 1
grmgr: 2020/08/16 02:45:53.443029 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:45:53.443033 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 02:45:53.443041 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 02:45:53.443045 .  getType..
rdfLoader: 2020/08/16 02:45:53.443049 node.TyName : [Person]
grmgr: 2020/08/16 02:45:53.443054 Looping..... 0
rdfLoader: 2020/08/16 02:45:53.443064 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:45:53.443069 Add to SS . [Alfa]
anmgr 2020/08/16 02:45:53.443106 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.443135 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:45:53.443169 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:45:53.443175 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 02:45:53.443184 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:45:53.443210 Looping..... 1
grmgr: 2020/08/16 02:45:53.443215 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 02:45:53.443219 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:45:53.443224 Looping..... 0
rdfLoader: 2020/08/16 02:45:53.443232 Add to SS . [Honda]
rdfLoader: 2020/08/16 02:45:53.443237 Add to SS . [VW Golf]
anmgr 2020/08/16 02:45:53.443254 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.443260 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:45:53.443287 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:45:53.443291 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 02:45:53.443296 .  getType..
rdfLoader: 2020/08/16 02:45:53.443300 node.TyName : [Person]
unmarshalRDF: 2020/08/16 02:45:53.443308 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:45:53.443318 Looping..... 1
rdfLoader: 2020/08/16 02:45:53.443326 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 02:45:53.443330 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 02:45:53.443334 Add to SS . [Honda]
anmgr 2020/08/16 02:45:53.443347 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:53.443362 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 02:45:53.443398 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:45:53.443402 Exit  unmarshalRDF. 
anmgr 2020/08/16 02:45:53.443408 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/16 02:45:53.443433 Looping..... 2
grmgr: 2020/08/16 02:45:53.443609 Looping..... 3
grmgr: 2020/08/16 02:45:53.443809 Looping..... 4
grmgr: 2020/08/16 02:45:53.443953 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:45:53.443961 Looping..... 0
grmgr: 2020/08/16 02:45:53.443995 Looping..... 1
SaveRDFNode: xxx 2020/08/16 02:45:53.444005 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.444011 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.444026 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.444032 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.444037 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.444043 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.444048 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:45:53.444052 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:45:53.444060 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0007542a0)}
SaveRDFNode: 2020/08/16 02:45:53.444064 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:45:53.444075 UID received  : pqG6QwsnSdKTrz2sd/GVLg==
grmgr: 2020/08/16 02:45:53.444341 Looping..... 2
grmgr: 2020/08/16 02:45:53.444514 Looping..... 3
grmgr: 2020/08/16 02:45:53.444691 Looping..... 4
grmgr: 2020/08/16 02:45:53.444862 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 02:45:53.444870 Looping..... 0
unmarshalRDF: 2020/08/16 02:45:53.444884 Entered unmarshalRDF. 
grmgr: 2020/08/16 02:45:53.444894 Looping..... 1
rdfLoader: 2020/08/16 02:45:53.444903 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 02:45:53.444937 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 02:45:53.444941 Exit  unmarshalRDF. 
anmgr 2020/08/16 02:45:53.444948 received on EdgeSnCn. anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
grmgr: 2020/08/16 02:45:53.444958 Looping..... 2
grmgr: 2020/08/16 02:45:53.445040 Looping..... 3
grmgr: 2020/08/16 02:45:53.445216 Looping..... 4
grmgr: 2020/08/16 02:45:53.445391 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 02:45:53.445401 EndCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/16 02:45:53.445406 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 02:45:53.445410 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 02:45:53.445415 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 02:45:53.445423 Looping..... 0
grmgr: 2020/08/16 02:45:53.445449 Looping..... 1
grmgr: 2020/08/16 02:45:53.445455 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:45:53.445459 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:45:53.445467 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.445473 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.445480 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.445486 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.445491 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.445497 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.445508 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:45:53.445512 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:45:53.445518 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000754660)}
SaveRDFNode: 2020/08/16 02:45:53.445522 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:45:53.445530 UID received  : 4hvHeKPnS2CTWlt1EndEcw==
DB: 2020/08/16 02:45:53.452602 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.480972ms
DB: 2020/08/16 02:45:53.457008 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 11.426269ms
DB: 2020/08/16 02:45:53.461473 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.428703ms
DB: 2020/08/16 02:45:53.466160 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.490155ms
DB: 2020/08/16 02:45:53.470568 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.366527ms
DB: 2020/08/16 02:45:53.472662 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 20.017222ms
DB: 2020/08/16 02:45:53.474962 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.356729ms
SaveRDFNode: 2020/08/16 02:45:53.474976 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000754660)}
SaveRDFNode: 2020/08/16 02:45:53.474985 Received UID: X18=
SaveRDFNode: 2020/08/16 02:45:53.475005 a: = db.Item{PKey:[]uint8{0xe2, 0x1b, 0xc7, 0x78, 0xa3, 0xe7, 0x4b, 0x60, 0x93, 0x5a, 0x5b, 0x75, 0x12, 0x77, 0x44, 0x73}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:45:53.477101 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.403919ms
DB: 2020/08/16 02:45:53.479187 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.142604ms
SaveRDFNode: 2020/08/16 02:45:53.479203 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000754660)}
SaveRDFNode: 2020/08/16 02:45:53.479211 Received UID: X18=
SaveRDFNode: 2020/08/16 02:45:53.479222 a: = db.Item{PKey:[]uint8{0xe2, 0x1b, 0xc7, 0x78, 0xa3, 0xe7, 0x4b, 0x60, 0x93, 0x5a, 0x5b, 0x75, 0x12, 0x77, 0x44, 0x73}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:45:53.483498 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.241443ms
SaveRDFNode: 2020/08/16 02:45:53.483513 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:45:53.483523 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:45:53.483528 Send ack to waiting saveNode...
grmgr: 2020/08/16 02:45:53.483536 Looping..... 0
grmgr: 2020/08/16 02:45:53.483589 Looping..... 1
grmgr: 2020/08/16 02:45:53.483596 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 02:45:53.483600 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 02:45:53.483610 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.483617 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.483623 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.483631 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.483637 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.483653 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.483659 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:45:53.483663 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:45:53.483669 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0000177a0)}
SaveRDFNode: 2020/08/16 02:45:53.483673 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:45:53.483685 UID received  : iNn9v8yKRyCEKr/puKS0Fw==
DB: 2020/08/16 02:45:53.487818 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.520607ms
DB: 2020/08/16 02:45:53.488211 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.495568ms
DB: 2020/08/16 02:45:53.492693 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.823949ms
SaveRDFNode: 2020/08/16 02:45:53.492713 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007542a0)}
SaveRDFNode: 2020/08/16 02:45:53.492722 Received UID: X18=
SaveRDFNode: 2020/08/16 02:45:53.492739 a: = db.Item{PKey:[]uint8{0xa6, 0xa1, 0xba, 0x43, 0xb, 0x27, 0x49, 0xd2, 0x93, 0xaf, 0x3d, 0xac, 0x77, 0xf1, 0x95, 0x2e}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:45:53.493003 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.73077ms
DB: 2020/08/16 02:45:53.502316 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.271288ms
DB: 2020/08/16 02:45:53.502642 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 9.867759ms
SaveRDFNode: 2020/08/16 02:45:53.502655 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0007542a0)}
SaveRDFNode: 2020/08/16 02:45:53.502664 Received UID: X18=
SaveRDFNode: 2020/08/16 02:45:53.502694 a: = db.Item{PKey:[]uint8{0xa6, 0xa1, 0xba, 0x43, 0xb, 0x27, 0x49, 0xd2, 0x93, 0xaf, 0x3d, 0xac, 0x77, 0xf1, 0x95, 0x2e}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:45:53.506681 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.288483ms
DB: 2020/08/16 02:45:53.507562 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.834919ms
SaveRDFNode: 2020/08/16 02:45:53.507573 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:45:53.507583 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 02:45:53.507588 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 02:45:53.507622 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.507631 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.507637 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.507643 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.507706 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.507715 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 02:45:53.507721 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 02:45:53.507728 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 02:45:53.507735 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0003470e0)}
SaveRDFNode: 2020/08/16 02:45:53.507750 Waiting for UID ......................
SaveRDFNode: 2020/08/16 02:45:53.507762 UID received  : JlLuxbuwTzaGuT8VpVDemA==
grmgr: 2020/08/16 02:45:53.507993 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 02:45:53.511236 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.464637ms
SaveRDFNode: 2020/08/16 02:45:53.511415 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000177a0)}
SaveRDFNode: 2020/08/16 02:45:53.511428 Received UID: X18=
SaveRDFNode: 2020/08/16 02:45:53.511440 a: = db.Item{PKey:[]uint8{0x88, 0xd9, 0xfd, 0xbf, 0xcc, 0x8a, 0x47, 0x20, 0x84, 0x2a, 0xbf, 0xe9, 0xb8, 0xa4, 0xb4, 0x17}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:45:53.512994 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.204699ms
DB: 2020/08/16 02:45:53.515795 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.324506ms
SaveRDFNode: 2020/08/16 02:45:53.515807 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000177a0)}
SaveRDFNode: 2020/08/16 02:45:53.515814 Received UID: X18=
SaveRDFNode: 2020/08/16 02:45:53.515824 a: = db.Item{PKey:[]uint8{0x88, 0xd9, 0xfd, 0xbf, 0xcc, 0x8a, 0x47, 0x20, 0x84, 0x2a, 0xbf, 0xe9, 0xb8, 0xa4, 0xb4, 0x17}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:45:53.517428 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.402002ms
DB: 2020/08/16 02:45:53.520133 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.267377ms
SaveRDFNode: 2020/08/16 02:45:53.520143 Returned.+++++++++++ No error
grmgr: 2020/08/16 02:45:53.520151 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 02:45:53.521965 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.491ms
DB: 2020/08/16 02:45:53.526235 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.239511ms
DB: 2020/08/16 02:45:53.530535 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.267965ms
SaveRDFNode: 2020/08/16 02:45:53.530713 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003470e0)}
SaveRDFNode: 2020/08/16 02:45:53.530728 Received UID: X18=
SaveRDFNode: 2020/08/16 02:45:53.530740 a: = db.Item{PKey:[]uint8{0x26, 0x52, 0xee, 0xc5, 0xbb, 0xb0, 0x4f, 0x36, 0x86, 0xb9, 0x3f, 0x15, 0xa5, 0x50, 0xde, 0x98}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:45:53.535258 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.483777ms
SaveRDFNode: 2020/08/16 02:45:53.535272 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003470e0)}
SaveRDFNode: 2020/08/16 02:45:53.535279 Received UID: X18=
SaveRDFNode: 2020/08/16 02:45:53.535289 a: = db.Item{PKey:[]uint8{0x26, 0x52, 0xee, 0xc5, 0xbb, 0xb0, 0x4f, 0x36, 0x86, 0xb9, 0x3f, 0x15, 0xa5, 0x50, 0xde, 0x98}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 02:45:53.539736 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.416101ms
SaveRDFNode: 2020/08/16 02:45:53.539747 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 02:45:53.539753 saveNode finished waiting...exiting
grmgr: 2020/08/16 02:45:53.539760 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 02:45:53.539771 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.555257 About to run AttachNodeCh: abc  b  pqG6QwsnSdKTrz2sd/GVLg== 4hvHeKPnS2CTWlt1EndEcw==
anmgr 2020/08/16 02:45:53.555283 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:45:53.555291 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 02:45:53.555306 Looping..... 0
grmgr: 2020/08/16 02:45:53.555511 Looping..... 1
grmgr: 2020/08/16 02:45:53.555726 Looping..... 2
grmgr: 2020/08/16 02:45:53.555871 Looping..... 3
grmgr: 2020/08/16 02:45:53.556045 Looping..... 4
grmgr: 2020/08/16 02:45:53.556220 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:45:53.556230 goroutine about to start 1 cUID,pUID   pqG6QwsnSdKTrz2sd/GVLg==  4hvHeKPnS2CTWlt1EndEcw==  
grmgr: 2020/08/16 02:45:53.556506 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:45:53.560115 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.807822ms
DB: 2020/08/16 02:45:53.563856 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.710852ms
DB: 2020/08/16 02:45:53.568503 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.580015ms
anmgr 2020/08/16 02:45:53.570786 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.577233 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.663331ms
AttachNode: main 2020/08/16 02:45:53.577250 FetchForUpdate: for parent    4hvHeKPnS2CTWlt1EndEcw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:45:53.577255 ** Cache FetchForUpdate Cache Key Value: [4hvHeKPnS2CTWlt1EndEcw==]   sortk: A#G#:S
FetchNode: 2020/08/16 02:45:53.577260  node: 4hvHeKPnS2CTWlt1EndEcw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:45:53.577433 FetchForUpdate: for child    pqG6QwsnSdKTrz2sd/GVLg==
FetchForUpdate: 2020/08/16 02:45:53.577442 ** Cache FetchForUpdate Cache Key Value: [pqG6QwsnSdKTrz2sd/GVLg==]   sortk: A#
FetchNode: 2020/08/16 02:45:53.577456  node: pqG6QwsnSdKTrz2sd/GVLg== subKey: A#
DB: 2020/08/16 02:45:53.580611 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.315995ms
FetchForUpdate: 2020/08/16 02:45:53.580676 len(nb): 1
fetchItems: 2020/08/16 02:45:53.580696 +++  Cache FetchItems for sortk A#G#:S UID: [4hvHeKPnS2CTWlt1EndEcw==] 
FetchNode: 2020/08/16 02:45:53.580701  node: 4hvHeKPnS2CTWlt1EndEcw== subKey: A#G#:S
DB: 2020/08/16 02:45:53.583868 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.112816ms
anmgr 2020/08/16 02:45:53.586184 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.589065 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.504518ms
DB: 2020/08/16 02:45:53.596321 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 18.796786ms
FetchForUpdate: 2020/08/16 02:45:53.596462 len(nb): 7
fetchItems: 2020/08/16 02:45:53.596473 +++  Cache FetchItems for sortk A# UID: [pqG6QwsnSdKTrz2sd/GVLg==] 
FetchNode: 2020/08/16 02:45:53.596477  node: pqG6QwsnSdKTrz2sd/GVLg== subKey: A#
DB: 2020/08/16 02:45:53.600789 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.275188ms
anmgr 2020/08/16 02:45:53.602313 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:45:53.613656 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.878358ms
anmgr 2020/08/16 02:45:53.617717 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.618337 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.608518ms
DB: 2020/08/16 02:45:53.622989 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.537799ms
DB: 2020/08/16 02:45:53.628881 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.800917ms
DB: 2020/08/16 02:45:53.633324 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.357813ms
anmgr 2020/08/16 02:45:53.633861 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.637991 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.559943ms
DB: 2020/08/16 02:45:53.643961 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.868155ms
DB: 2020/08/16 02:45:53.648767 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.726235ms
anmgr 2020/08/16 02:45:53.649603 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:45:53.653244 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.401401ms
DB: 2020/08/16 02:45:53.657600 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.287146ms
Cache: 2020/08/16 02:45:53.657613 In SetUpredAvailable: pUid, tUID:  4hvHeKPnS2CTWlt1EndEcw== 4hvHeKPnS2CTWlt1EndEcw== A#G#:S
Cache: 2020/08/16 02:45:53.657618 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:45:53.662012 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.357095ms
Unlock: 2020/08/16 02:45:53.662021 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:45:53.662026 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:45:53.665053 for loop finished 0  8 
anmgr 2020/08/16 02:45:53.665071 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.665078 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.665084 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.671424 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 9.344004ms
grmgr: 2020/08/16 02:45:53.671441 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:45:53.675403 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:45:53.675421 About to run AttachNodeCh: abc  c  pqG6QwsnSdKTrz2sd/GVLg== iNn9v8yKRyCEKr/puKS0Fw==
anmgr 2020/08/16 02:45:53.675429 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:45:53.675435 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 02:45:53.675440 Looping..... 0
grmgr: 2020/08/16 02:45:53.675455 Looping..... 1
grmgr: 2020/08/16 02:45:53.675582 Looping..... 2
grmgr: 2020/08/16 02:45:53.675778 Looping..... 3
grmgr: 2020/08/16 02:45:53.675974 Looping..... 4
grmgr: 2020/08/16 02:45:53.676170 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:45:53.676180 goroutine about to start 2 cUID,pUID   pqG6QwsnSdKTrz2sd/GVLg==  iNn9v8yKRyCEKr/puKS0Fw==  
grmgr: 2020/08/16 02:45:53.676409 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:45:53.679615 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.371145ms
DB: 2020/08/16 02:45:53.682484 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.835362ms
DB: 2020/08/16 02:45:53.687043 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.476227ms
anmgr 2020/08/16 02:45:53.690884 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.692059 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.833568ms
AttachNode: main 2020/08/16 02:45:53.692071 FetchForUpdate: for parent    iNn9v8yKRyCEKr/puKS0Fw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:45:53.692076 ** Cache FetchForUpdate Cache Key Value: [iNn9v8yKRyCEKr/puKS0Fw==]   sortk: A#G#:S
FetchNode: 2020/08/16 02:45:53.692082  node: iNn9v8yKRyCEKr/puKS0Fw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:45:53.692268 FetchForUpdate: for child    pqG6QwsnSdKTrz2sd/GVLg==
FetchForUpdate: 2020/08/16 02:45:53.692286 ** Cache FetchForUpdate Cache Key Value: [pqG6QwsnSdKTrz2sd/GVLg==]   sortk: A#
fetchItems: 2020/08/16 02:45:53.692291 +++  Cache FetchItems for sortk A# UID: [pqG6QwsnSdKTrz2sd/GVLg==] 
FetchNode: 2020/08/16 02:45:53.692347  node: pqG6QwsnSdKTrz2sd/GVLg== subKey: A#
DB: 2020/08/16 02:45:53.695624 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.511183ms
FetchForUpdate: 2020/08/16 02:45:53.695692 len(nb): 1
fetchItems: 2020/08/16 02:45:53.695700 +++  Cache FetchItems for sortk A#G#:S UID: [iNn9v8yKRyCEKr/puKS0Fw==] 
FetchNode: 2020/08/16 02:45:53.695704  node: iNn9v8yKRyCEKr/puKS0Fw== subKey: A#G#:S
DB: 2020/08/16 02:45:53.696124 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.72783ms
DB: 2020/08/16 02:45:53.699554 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.822533ms
DB: 2020/08/16 02:45:53.704106 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.462729ms
anmgr 2020/08/16 02:45:53.707055 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:45:53.709985 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.791385ms
DB: 2020/08/16 02:45:53.714469 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.431211ms
DB: 2020/08/16 02:45:53.719083 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.503036ms
anmgr 2020/08/16 02:45:53.722546 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.724867 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.711429ms
DB: 2020/08/16 02:45:53.729249 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.320163ms
DB: 2020/08/16 02:45:53.733638 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.317466ms
anmgr 2020/08/16 02:45:53.738025 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.739324 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.623085ms
DB: 2020/08/16 02:45:53.743782 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.38668ms
DB: 2020/08/16 02:45:53.748341 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.492765ms
DB: 2020/08/16 02:45:53.752958 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.431063ms
Cache: 2020/08/16 02:45:53.752970 In SetUpredAvailable: pUid, tUID:  iNn9v8yKRyCEKr/puKS0Fw== iNn9v8yKRyCEKr/puKS0Fw== A#G#:S
Cache: 2020/08/16 02:45:53.752975 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 02:45:53.754106 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:45:53.757200 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.169416ms
Unlock: 2020/08/16 02:45:53.757211 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:45:53.757216 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:45:53.763114 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.83757ms
grmgr: 2020/08/16 02:45:53.763139 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:45:53.764389 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:45:53.764411 About to run AttachNodeCh: d  abc  JlLuxbuwTzaGuT8VpVDemA== pqG6QwsnSdKTrz2sd/GVLg==
anmgr 2020/08/16 02:45:53.764418 for loop finished 2  8 
anmgr 2020/08/16 02:45:53.764427 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.764444 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.764449 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.764454 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.764459 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:45:53.764465 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 02:45:53.764471 Looping..... 0
grmgr: 2020/08/16 02:45:53.764496 Looping..... 1
grmgr: 2020/08/16 02:45:53.764680 Looping..... 2
grmgr: 2020/08/16 02:45:53.764703 Looping..... 3
grmgr: 2020/08/16 02:45:53.764873 Looping..... 4
grmgr: 2020/08/16 02:45:53.765041 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:45:53.765052 goroutine about to start 3 cUID,pUID   JlLuxbuwTzaGuT8VpVDemA==  pqG6QwsnSdKTrz2sd/GVLg==  
grmgr: 2020/08/16 02:45:53.765358 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:45:53.769111 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.976816ms
DB: 2020/08/16 02:45:53.772832 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.688916ms
DB: 2020/08/16 02:45:53.777234 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.330551ms
anmgr 2020/08/16 02:45:53.779892 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.781964 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.51485ms
AttachNode: main 2020/08/16 02:45:53.781977 FetchForUpdate: for parent    pqG6QwsnSdKTrz2sd/GVLg==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 02:45:53.781982 ** Cache FetchForUpdate Cache Key Value: [pqG6QwsnSdKTrz2sd/GVLg==]   sortk: A#G#:F
fetchItems: 2020/08/16 02:45:53.781987 +++  Cache FetchItems for sortk A#G#:F UID: [pqG6QwsnSdKTrz2sd/GVLg==] 
FetchNode: 2020/08/16 02:45:53.781992  node: pqG6QwsnSdKTrz2sd/GVLg== subKey: A#G#:F
AttachNode: gr1 2020/08/16 02:45:53.782178 FetchForUpdate: for child    JlLuxbuwTzaGuT8VpVDemA==
FetchForUpdate: 2020/08/16 02:45:53.782187 ** Cache FetchForUpdate Cache Key Value: [JlLuxbuwTzaGuT8VpVDemA==]   sortk: A#
FetchNode: 2020/08/16 02:45:53.782201  node: JlLuxbuwTzaGuT8VpVDemA== subKey: A#
DB: 2020/08/16 02:45:53.784973 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.946474ms
DB: 2020/08/16 02:45:53.785707 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.409852ms
FetchForUpdate: 2020/08/16 02:45:53.785809 len(nb): 7
fetchItems: 2020/08/16 02:45:53.785817 +++  Cache FetchItems for sortk A# UID: [JlLuxbuwTzaGuT8VpVDemA==] 
FetchNode: 2020/08/16 02:45:53.785822  node: JlLuxbuwTzaGuT8VpVDemA== subKey: A#
DB: 2020/08/16 02:45:53.789436 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.582465ms
DB: 2020/08/16 02:45:53.789943 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.659692ms
DB: 2020/08/16 02:45:53.795730 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.708359ms
anmgr 2020/08/16 02:45:53.796061 About to run AttachNodeCh: b  c  4hvHeKPnS2CTWlt1EndEcw== iNn9v8yKRyCEKr/puKS0Fw==
anmgr 2020/08/16 02:45:53.796076 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/16 02:45:53.796084 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 02:45:53.796090 Looping..... 0
grmgr: 2020/08/16 02:45:53.796231 Looping..... 1
grmgr: 2020/08/16 02:45:53.796430 Looping..... 2
grmgr: 2020/08/16 02:45:53.796455 Looping..... 3
grmgr: 2020/08/16 02:45:53.796630 Looping..... 4
grmgr: 2020/08/16 02:45:53.796655 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:45:53.796664 goroutine about to start 4 cUID,pUID   4hvHeKPnS2CTWlt1EndEcw==  iNn9v8yKRyCEKr/puKS0Fw==  
grmgr: 2020/08/16 02:45:53.796885 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 02:45:53.800368 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.58642ms
DB: 2020/08/16 02:45:53.800697 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.961765ms
DB: 2020/08/16 02:45:53.804632 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.901886ms
DB: 2020/08/16 02:45:53.804960 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.495846ms
DB: 2020/08/16 02:45:53.809308 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.619739ms
DB: 2020/08/16 02:45:53.810776 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.747316ms
anmgr 2020/08/16 02:45:53.811256 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.814209 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.732619ms
AttachNode: main 2020/08/16 02:45:53.814222 FetchForUpdate: for parent    iNn9v8yKRyCEKr/puKS0Fw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:45:53.814229 ** Cache FetchForUpdate Cache Key Value: [iNn9v8yKRyCEKr/puKS0Fw==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:45:53.814235 +++  Cache FetchItems for sortk A#G#:S UID: [iNn9v8yKRyCEKr/puKS0Fw==] 
FetchNode: 2020/08/16 02:45:53.814239  node: iNn9v8yKRyCEKr/puKS0Fw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:45:53.814395 FetchForUpdate: for child    4hvHeKPnS2CTWlt1EndEcw==
FetchForUpdate: 2020/08/16 02:45:53.814403 ** Cache FetchForUpdate Cache Key Value: [4hvHeKPnS2CTWlt1EndEcw==]   sortk: A#
fetchItems: 2020/08/16 02:45:53.814409 +++  Cache FetchItems for sortk A# UID: [4hvHeKPnS2CTWlt1EndEcw==] 
FetchNode: 2020/08/16 02:45:53.814422  node: 4hvHeKPnS2CTWlt1EndEcw== subKey: A#
DB: 2020/08/16 02:45:53.815491 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.391445ms
DB: 2020/08/16 02:45:53.817333 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.0594ms
DB: 2020/08/16 02:45:53.820298 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 5.814416ms
fetchItems: 2020/08/16 02:45:53.820952 +++  Cache FetchItems for sortk A# UID: [4hvHeKPnS2CTWlt1EndEcw==] 
FetchNode: 2020/08/16 02:45:53.820966  node: 4hvHeKPnS2CTWlt1EndEcw== subKey: A#
DB: 2020/08/16 02:45:53.823037 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.200953ms
DB: 2020/08/16 02:45:53.828871 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 11.126563ms
anmgr 2020/08/16 02:45:53.829217 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.829599 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 8.591075ms
DB: 2020/08/16 02:45:53.834289 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.277024ms
DB: 2020/08/16 02:45:53.834304 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.277024ms
DB: 2020/08/16 02:45:53.838959 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.62212ms
DB: 2020/08/16 02:45:53.839098 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.62212ms
anmgr 2020/08/16 02:45:53.844762 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:53.844777 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:53.844791 for loop finished 2  8 
anmgr 2020/08/16 02:45:53.844797 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.844803 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.844808 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.844813 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.844818 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.846418 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 23.302226ms
DB: 2020/08/16 02:45:53.851802 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.942203ms
DB: 2020/08/16 02:45:53.855956 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 16.641725ms
DB: 2020/08/16 02:45:53.857293 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.986703ms
anmgr 2020/08/16 02:45:53.860183 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.860198 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.860204 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:45:53.860822 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.594789ms
DB: 2020/08/16 02:45:53.862196 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.633993ms
Cache: 2020/08/16 02:45:53.862207 In SetUpredAvailable: pUid, tUID:  pqG6QwsnSdKTrz2sd/GVLg== pqG6QwsnSdKTrz2sd/GVLg== A#G#:F
Cache: 2020/08/16 02:45:53.862212 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:45:53.866907 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.645311ms
Unlock: 2020/08/16 02:45:53.866917 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:45:53.866922 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:45:53.867314 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.956103ms
DB: 2020/08/16 02:45:53.871846 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.250377ms
anmgr 2020/08/16 02:45:53.875695 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.876628 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 9.630679ms
grmgr: 2020/08/16 02:45:53.876643 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:45:53.876907 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.419422ms
anmgr 2020/08/16 02:45:53.880855 ** received on attachDoneCh.... 1
DB: 2020/08/16 02:45:53.883761 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.369364ms
anmgr 2020/08/16 02:45:53.886035 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.889048 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.85163ms
DB: 2020/08/16 02:45:53.894736 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.136967ms
DB: 2020/08/16 02:45:53.901405 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.093378ms
anmgr 2020/08/16 02:45:53.902153 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:53.902165 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:53.902170 for loop finished 3  8 
anmgr 2020/08/16 02:45:53.902175 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.902213 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.902235 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.902240 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.902245 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.906693 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.74761ms
DB: 2020/08/16 02:45:53.912874 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.570757ms
anmgr 2020/08/16 02:45:53.917855 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.917869 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.917874 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 02:45:53.918050 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.78908ms
Cache: 2020/08/16 02:45:53.918060 In SetUpredAvailable: pUid, tUID:  iNn9v8yKRyCEKr/puKS0Fw== sF9D9TWrRYKc+B3q9Ck6fQ== A#G#:S
Cache: 2020/08/16 02:45:53.918064 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:45:53.922737 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.635409ms
Unlock: 2020/08/16 02:45:53.922847 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:45:53.922857 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:45:53.928100 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.179287ms
grmgr: 2020/08/16 02:45:53.928118 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:45:53.928208 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:45:53.928223 About to run AttachNodeCh: c  abc  iNn9v8yKRyCEKr/puKS0Fw== pqG6QwsnSdKTrz2sd/GVLg==
anmgr 2020/08/16 02:45:53.928231 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:45:53.928238 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 02:45:53.928243 Looping..... 0
grmgr: 2020/08/16 02:45:53.928257 Looping..... 1
grmgr: 2020/08/16 02:45:53.928381 Looping..... 2
grmgr: 2020/08/16 02:45:53.928556 Looping..... 3
grmgr: 2020/08/16 02:45:53.928730 Looping..... 4
grmgr: 2020/08/16 02:45:53.929048 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:45:53.929063 goroutine about to start 5 cUID,pUID   iNn9v8yKRyCEKr/puKS0Fw==  pqG6QwsnSdKTrz2sd/GVLg==  
grmgr: 2020/08/16 02:45:53.929288 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:45:53.933119 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.990232ms
DB: 2020/08/16 02:45:53.936924 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.757578ms
DB: 2020/08/16 02:45:53.942210 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.217418ms
anmgr 2020/08/16 02:45:53.943637 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.947495 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.86319ms
AttachNode: main 2020/08/16 02:45:53.947592 FetchForUpdate: for parent    pqG6QwsnSdKTrz2sd/GVLg==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 02:45:53.947600 ** Cache FetchForUpdate Cache Key Value: [pqG6QwsnSdKTrz2sd/GVLg==]   sortk: A#G#:F
fetchItems: 2020/08/16 02:45:53.947607 +++  Cache FetchItems for sortk A#G#:F UID: [pqG6QwsnSdKTrz2sd/GVLg==] 
FetchNode: 2020/08/16 02:45:53.947630  node: pqG6QwsnSdKTrz2sd/GVLg== subKey: A#G#:F
AttachNode: gr1 2020/08/16 02:45:53.947822 FetchForUpdate: for child    iNn9v8yKRyCEKr/puKS0Fw==
FetchForUpdate: 2020/08/16 02:45:53.947830 ** Cache FetchForUpdate Cache Key Value: [iNn9v8yKRyCEKr/puKS0Fw==]   sortk: A#
fetchItems: 2020/08/16 02:45:53.947861 +++  Cache FetchItems for sortk A# UID: [iNn9v8yKRyCEKr/puKS0Fw==] 
FetchNode: 2020/08/16 02:45:53.947879  node: iNn9v8yKRyCEKr/puKS0Fw== subKey: A#
DB: 2020/08/16 02:45:53.950854 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.187527ms
DB: 2020/08/16 02:45:53.956395 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.001024ms
anmgr 2020/08/16 02:45:53.959180 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:53.959199 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:53.959205 for loop finished 4  8 
anmgr 2020/08/16 02:45:53.959211 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.959216 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.959223 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.959228 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.959234 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.960920 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.486782ms
DB: 2020/08/16 02:45:53.960936 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.486782ms
DB: 2020/08/16 02:45:53.961687 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 13.76382ms
DB: 2020/08/16 02:45:53.965433 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.460768ms
DB: 2020/08/16 02:45:53.965561 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.460768ms
DB: 2020/08/16 02:45:53.970779 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.014028ms
anmgr 2020/08/16 02:45:53.974641 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.974656 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:53.974661 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:53.974666 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:53.974671 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.975935 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.959557ms
DB: 2020/08/16 02:45:53.986169 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.588698ms
DB: 2020/08/16 02:45:53.991232 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.979837ms
anmgr 2020/08/16 02:45:53.991865 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:53.996035 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.691116ms
DB: 2020/08/16 02:45:54.002221 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.116077ms
DB: 2020/08/16 02:45:54.006761 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.465469ms
anmgr 2020/08/16 02:45:54.007924 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.007937 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.007942 for loop finished 4  8 
anmgr 2020/08/16 02:45:54.007948 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.007953 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.007968 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.007973 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.007978 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.012156 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.90169ms
DB: 2020/08/16 02:45:54.018857 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.165071ms
anmgr 2020/08/16 02:45:54.023473 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.023490 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.023495 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.023500 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.023505 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.024101 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.64549ms
DB: 2020/08/16 02:45:54.029516 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.902692ms
DB: 2020/08/16 02:45:54.034595 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.687552ms
Cache: 2020/08/16 02:45:54.034618 In SetUpredAvailable: pUid, tUID:  pqG6QwsnSdKTrz2sd/GVLg== V/+Z/9q6Sbaeh+DNshSJrw== A#G#:F
Cache: 2020/08/16 02:45:54.034623 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 02:45:54.038881 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.039387 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.715636ms
Unlock: 2020/08/16 02:45:54.039400 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:45:54.039406 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:45:54.044531 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.980316ms
grmgr: 2020/08/16 02:45:54.044639 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:45:54.049247 ** received on attachDoneCh.... 2
anmgr 2020/08/16 02:45:54.049270 About to run AttachNodeCh: c  b  iNn9v8yKRyCEKr/puKS0Fw== 4hvHeKPnS2CTWlt1EndEcw==
anmgr 2020/08/16 02:45:54.049282 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.049289 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.049293 for loop finished 5  8 
anmgr 2020/08/16 02:45:54.049298 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.049304 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.049309 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.049314 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.049319 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:45:54.049325 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 02:45:54.049331 Looping..... 0
grmgr: 2020/08/16 02:45:54.049345 Looping..... 1
grmgr: 2020/08/16 02:45:54.049418 Looping..... 2
grmgr: 2020/08/16 02:45:54.049593 Looping..... 3
grmgr: 2020/08/16 02:45:54.049767 Looping..... 4
grmgr: 2020/08/16 02:45:54.049943 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:45:54.049953 goroutine about to start 6 cUID,pUID   iNn9v8yKRyCEKr/puKS0Fw==  4hvHeKPnS2CTWlt1EndEcw==  
grmgr: 2020/08/16 02:45:54.050404 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:45:54.053174 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.968594ms
DB: 2020/08/16 02:45:54.057376 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.157235ms
DB: 2020/08/16 02:45:54.062492 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.925597ms
anmgr 2020/08/16 02:45:54.064857 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.064873 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.064879 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.064884 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.064889 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.069403 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.525101ms
AttachNode: main 2020/08/16 02:45:54.069421 FetchForUpdate: for parent    4hvHeKPnS2CTWlt1EndEcw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:45:54.069427 ** Cache FetchForUpdate Cache Key Value: [4hvHeKPnS2CTWlt1EndEcw==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:45:54.069432 +++  Cache FetchItems for sortk A#G#:S UID: [4hvHeKPnS2CTWlt1EndEcw==] 
FetchNode: 2020/08/16 02:45:54.069437  node: 4hvHeKPnS2CTWlt1EndEcw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:45:54.069678 FetchForUpdate: for child    iNn9v8yKRyCEKr/puKS0Fw==
FetchForUpdate: 2020/08/16 02:45:54.069687 ** Cache FetchForUpdate Cache Key Value: [iNn9v8yKRyCEKr/puKS0Fw==]   sortk: A#
fetchItems: 2020/08/16 02:45:54.069693 +++  Cache FetchItems for sortk A# UID: [iNn9v8yKRyCEKr/puKS0Fw==] 
FetchNode: 2020/08/16 02:45:54.069723  node: iNn9v8yKRyCEKr/puKS0Fw== subKey: A#
DB: 2020/08/16 02:45:54.073736 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.957033ms
DB: 2020/08/16 02:45:54.075709 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 6.213194ms
DB: 2020/08/16 02:45:54.080972 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.800397ms
anmgr 2020/08/16 02:45:54.081526 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.081539 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.081545 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.081551 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.081555 for loop finished 5  8 
anmgr 2020/08/16 02:45:54.081560 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.081566 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.081570 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.081576 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.081581 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.085533 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.522574ms
DB: 2020/08/16 02:45:54.085548 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.522574ms
DB: 2020/08/16 02:45:54.090233 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.646696ms
DB: 2020/08/16 02:45:54.090261 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.646696ms
DB: 2020/08/16 02:45:54.095315 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.968213ms
anmgr 2020/08/16 02:45:54.097006 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.097038 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.097054 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.097059 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.097064 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.100377 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.817752ms
DB: 2020/08/16 02:45:54.106975 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.043721ms
DB: 2020/08/16 02:45:54.112009 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.677033ms
anmgr 2020/08/16 02:45:54.112886 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.112899 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.112925 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.112936 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.112941 for loop finished 5  8 
anmgr 2020/08/16 02:45:54.112946 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.112951 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.112956 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.112961 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.112966 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.117506 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.794633ms
DB: 2020/08/16 02:45:54.124307 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.362137ms
anmgr 2020/08/16 02:45:54.128491 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.128504 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.128509 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.128514 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.128520 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.129377 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.549619ms
DB: 2020/08/16 02:45:54.134681 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.759995ms
anmgr 2020/08/16 02:45:54.143984 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.144002 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.144009 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.144014 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.144019 for loop finished 5  8 
anmgr 2020/08/16 02:45:54.144025 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.144031 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.144036 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.144042 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.144047 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.145141 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 10.003002ms
DB: 2020/08/16 02:45:54.150552 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.890432ms
DB: 2020/08/16 02:45:54.155990 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.93469ms
anmgr 2020/08/16 02:45:54.159507 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.159523 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.159529 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.159535 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.159539 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.160955 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.71204ms
Cache: 2020/08/16 02:45:54.161082 In SetUpredAvailable: pUid, tUID:  4hvHeKPnS2CTWlt1EndEcw== Nzx/JKCVR02MjVePQ8l86Q== A#G#:S
Cache: 2020/08/16 02:45:54.161092 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:45:54.165982 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.853163ms
Unlock: 2020/08/16 02:45:54.165992 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:45:54.165996 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:45:54.170916 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.858ms
grmgr: 2020/08/16 02:45:54.170930 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:45:54.175046 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.175062 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.175068 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.175074 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.175079 for loop finished 5  8 
anmgr 2020/08/16 02:45:54.175084 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.175090 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.175094 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.175100 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.175105 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.175110 ** received on attachDoneCh.... 0
anmgr 2020/08/16 02:45:54.185481 About to run AttachNodeCh: b  abc  4hvHeKPnS2CTWlt1EndEcw== pqG6QwsnSdKTrz2sd/GVLg==
anmgr 2020/08/16 02:45:54.185518 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.185525 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.185530 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.185537 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.185542 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 02:45:54.185551 read from AttachNodeCh channel 7 now ASK limiter
grmgr: 2020/08/16 02:45:54.185558 Looping..... 0
grmgr: 2020/08/16 02:45:54.185634 Looping..... 1
grmgr: 2020/08/16 02:45:54.185817 Looping..... 2
grmgr: 2020/08/16 02:45:54.185991 Looping..... 3
grmgr: 2020/08/16 02:45:54.186165 Looping..... 4
grmgr: 2020/08/16 02:45:54.186341 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:45:54.186351 goroutine about to start 7 cUID,pUID   4hvHeKPnS2CTWlt1EndEcw==  pqG6QwsnSdKTrz2sd/GVLg==  
grmgr: 2020/08/16 02:45:54.186671 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:45:54.190595 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.166305ms
DB: 2020/08/16 02:45:54.194638 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.008864ms
DB: 2020/08/16 02:45:54.199353 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.655059ms
anmgr 2020/08/16 02:45:54.201146 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.201161 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.201168 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.201174 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.201179 for loop finished 6  8 
anmgr 2020/08/16 02:45:54.201185 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.201191 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.201196 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.201202 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.201207 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.201213 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.201218 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.201224 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.201230 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.201236 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.201241 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.204737 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.146827ms
AttachNode: main 2020/08/16 02:45:54.204753 FetchForUpdate: for parent    pqG6QwsnSdKTrz2sd/GVLg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:45:54.204758 ** Cache FetchForUpdate Cache Key Value: [pqG6QwsnSdKTrz2sd/GVLg==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:45:54.204764 +++  Cache FetchItems for sortk A#G#:S UID: [pqG6QwsnSdKTrz2sd/GVLg==] 
FetchNode: 2020/08/16 02:45:54.204768  node: pqG6QwsnSdKTrz2sd/GVLg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:45:54.204963 FetchForUpdate: for child    4hvHeKPnS2CTWlt1EndEcw==
FetchForUpdate: 2020/08/16 02:45:54.205003 ** Cache FetchForUpdate Cache Key Value: [4hvHeKPnS2CTWlt1EndEcw==]   sortk: A#
fetchItems: 2020/08/16 02:45:54.205014 +++  Cache FetchItems for sortk A# UID: [4hvHeKPnS2CTWlt1EndEcw==] 
FetchNode: 2020/08/16 02:45:54.205028  node: 4hvHeKPnS2CTWlt1EndEcw== subKey: A#
DB: 2020/08/16 02:45:54.208537 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.459559ms
DB: 2020/08/16 02:45:54.210249 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.446363ms
DB: 2020/08/16 02:45:54.215973 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.334109ms
anmgr 2020/08/16 02:45:54.216801 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.216816 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.216822 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.216828 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.216834 for loop finished 6  8 
anmgr 2020/08/16 02:45:54.216839 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.216845 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.216851 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.216857 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.216862 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.216889 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.216907 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.216913 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.216919 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.216925 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.217049 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.223787 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.190243ms
DB: 2020/08/16 02:45:54.228833 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.798517ms
anmgr 2020/08/16 02:45:54.232578 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.232595 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.232601 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.232607 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.232612 for loop finished 6  8 
anmgr 2020/08/16 02:45:54.232617 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.232622 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.232627 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.232632 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.232637 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.232642 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.232647 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.232651 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.232668 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.232674 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.232679 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.234044 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.782205ms
DB: 2020/08/16 02:45:54.239972 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.843752ms
DB: 2020/08/16 02:45:54.244506 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.448042ms
anmgr 2020/08/16 02:45:54.248150 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.248163 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.248169 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.248185 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.248190 for loop finished 6  8 
anmgr 2020/08/16 02:45:54.248203 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.248208 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.248220 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.248226 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.248230 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.248236 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.248240 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.248245 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.248250 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.248265 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.248270 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.250196 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.60784ms
DB: 2020/08/16 02:45:54.256876 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.569781ms
DB: 2020/08/16 02:45:54.261571 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.592629ms
anmgr 2020/08/16 02:45:54.263649 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.263665 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.263671 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.263677 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.263682 for loop finished 6  8 
anmgr 2020/08/16 02:45:54.263688 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.263694 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.263699 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.263705 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.263710 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.263715 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.263721 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.263726 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.263731 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.263736 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.263741 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.266341 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.698639ms
DB: 2020/08/16 02:45:54.271196 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.778607ms
Cache: 2020/08/16 02:45:54.271214 In SetUpredAvailable: pUid, tUID:  pqG6QwsnSdKTrz2sd/GVLg== pqG6QwsnSdKTrz2sd/GVLg== A#G#:S
Cache: 2020/08/16 02:45:54.271219 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:45:54.275775 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.518656ms
Unlock: 2020/08/16 02:45:54.275786 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:45:54.275790 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 02:45:54.279172 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.279184 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.279190 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.279195 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.279200 for loop finished 6  8 
anmgr 2020/08/16 02:45:54.279205 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.279210 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.279215 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.279220 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.279225 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.279229 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.279234 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.279248 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.279253 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.279258 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.279263 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 02:45:54.280658 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.80919ms
grmgr: 2020/08/16 02:45:54.280671 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 02:45:54.284426 ** received on attachDoneCh.... 1
anmgr 2020/08/16 02:45:54.289608 About to run AttachNodeCh: c  abc  iNn9v8yKRyCEKr/puKS0Fw== pqG6QwsnSdKTrz2sd/GVLg==
anmgr 2020/08/16 02:45:54.289625 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.289632 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 02:45:54.289637 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.289643 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 02:45:54.289648 for loop finished 7  8 
attachNode: 2020/08/16 02:45:54.289654 read from AttachNodeCh channel 8 now ASK limiter
grmgr: 2020/08/16 02:45:54.289660 Looping..... 0
grmgr: 2020/08/16 02:45:54.289781 Looping..... 1
grmgr: 2020/08/16 02:45:54.289954 Looping..... 2
grmgr: 2020/08/16 02:45:54.290144 Looping..... 3
grmgr: 2020/08/16 02:45:54.290163 Looping..... 4
grmgr: 2020/08/16 02:45:54.290353 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 02:45:54.290364 goroutine about to start 8 cUID,pUID   iNn9v8yKRyCEKr/puKS0Fw==  pqG6QwsnSdKTrz2sd/GVLg==  
rdfLoader: 2020/08/16 02:45:54.290370 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 02:45:54.290605 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 02:45:54.294000 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.563304ms
DB: 2020/08/16 02:45:54.301333 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.304449ms
DB: 2020/08/16 02:45:54.306138 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.747465ms
DB: 2020/08/16 02:45:54.310953 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.739634ms
AttachNode: main 2020/08/16 02:45:54.310968 FetchForUpdate: for parent    pqG6QwsnSdKTrz2sd/GVLg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 02:45:54.310973 ** Cache FetchForUpdate Cache Key Value: [pqG6QwsnSdKTrz2sd/GVLg==]   sortk: A#G#:S
fetchItems: 2020/08/16 02:45:54.310996 +++  Cache FetchItems for sortk A#G#:S UID: [pqG6QwsnSdKTrz2sd/GVLg==] 
FetchNode: 2020/08/16 02:45:54.311002  node: pqG6QwsnSdKTrz2sd/GVLg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 02:45:54.311193 FetchForUpdate: for child    iNn9v8yKRyCEKr/puKS0Fw==
FetchForUpdate: 2020/08/16 02:45:54.311201 ** Cache FetchForUpdate Cache Key Value: [iNn9v8yKRyCEKr/puKS0Fw==]   sortk: A#
fetchItems: 2020/08/16 02:45:54.311206 +++  Cache FetchItems for sortk A# UID: [iNn9v8yKRyCEKr/puKS0Fw==] 
FetchNode: 2020/08/16 02:45:54.311220  node: iNn9v8yKRyCEKr/puKS0Fw== subKey: A#
DB: 2020/08/16 02:45:54.314735 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.420174ms
DB: 2020/08/16 02:45:54.315816 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.769318ms
DB: 2020/08/16 02:45:54.320983 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.829897ms
DB: 2020/08/16 02:45:54.325634 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.605065ms
DB: 2020/08/16 02:45:54.325660 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.605065ms
DB: 2020/08/16 02:45:54.330315 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.588651ms
DB: 2020/08/16 02:45:54.330337 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.588651ms
DB: 2020/08/16 02:45:54.335651 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.094326ms
DB: 2020/08/16 02:45:54.340757 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.938566ms
DB: 2020/08/16 02:45:54.347197 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.106596ms
DB: 2020/08/16 02:45:54.352671 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.268249ms
DB: 2020/08/16 02:45:54.357518 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.739747ms
DB: 2020/08/16 02:45:54.363797 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.205895ms
DB: 2020/08/16 02:45:54.368448 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.583397ms
DB: 2020/08/16 02:45:54.373796 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.985947ms
DB: 2020/08/16 02:45:54.380333 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.220241ms
DB: 2020/08/16 02:45:54.385366 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.718347ms
DB: 2020/08/16 02:45:54.391693 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.83765ms
DB: 2020/08/16 02:45:54.396800 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.781489ms
Cache: 2020/08/16 02:45:54.396822 In SetUpredAvailable: pUid, tUID:  pqG6QwsnSdKTrz2sd/GVLg== 5azS0ApgTLOeY3zuoE5o4w== A#G#:S
Cache: 2020/08/16 02:45:54.396977 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 02:45:54.401731 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.684825ms
Unlock: 2020/08/16 02:45:54.401744 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 02:45:54.401749 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 02:45:54.406760 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.903996ms
grmgr: 2020/08/16 02:45:54.406809 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 02:45:54.406817 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 02:45:54.406823 11.....
rdfLoader: 2020/08/16 02:45:54.406831 22.....error cnt: 0
rdfuuid: 2020/08/16 02:45:54.406838 Powering down...
errlog: 2020/08/16 02:45:54.406843 Powering down...
grmgr: 2020/08/16 02:45:54.406847 Powering down...
anmgr: 2020/08/16 02:45:54.406852 Powering down...
rdfLoader: 2020/08/16 02:45:54.406857 loader exists.....
DB:2020/08/16 03:13:08 log.go:18: ===============================================================================
anmgr: 2020/08/16 03:13:08.720142 Powering on...
rdfLoader: 2020/08/16 03:13:08.720193 saveNode started......
rdfLoader: 2020/08/16 03:13:08.720199 define saveNode limiter......
rdfuuid: 2020/08/16 03:13:08.720203 Powering on...
grmgr: 2020/08/16 03:13:08.720220 Powering on...
errlog: 2020/08/16 03:13:08.720234 Powering on...
rdfLoader: 2020/08/16 03:13:08.720241  principle goroutines started 
RDFreader: 2020/08/16 03:13:08.720258 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 03:13:08.720272 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 03:13:08.720278 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 03:13:08.720290 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 03:13:08.720296 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 03:13:08.720301 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 03:13:08.720305 spo read:      
RDFreader: 2020/08/16 03:13:08.720310 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 03:13:08.720314 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 03:13:08.720345 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 03:13:08.720350 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 03:13:08.720354 spo read:      
RDFreader: 2020/08/16 03:13:08.720359 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 03:13:08.720364 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 03:13:08.720368 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 03:13:08.720373 spo read:  b  Age  "58"
RDFreader: 2020/08/16 03:13:08.720378 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 03:13:08.720383 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 03:13:08.720388 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 03:13:08.720392 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 03:13:08.720397 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 03:13:08.720400 spo read:      
RDFreader: 2020/08/16 03:13:08.720405 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 03:13:08.720409 Send node batch on channel verifyCh
RDFreader: 2020/08/16 03:13:08.720418 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 03:13:08.720422 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 03:13:08.720426 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 03:13:08.720434 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 03:13:08.720438 spo read:  c  Age  "67"
RDFreader: 2020/08/16 03:13:08.720443 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 03:13:08.720448 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 03:13:08.720452 spo read:  c  Friends  _:abc
RDFreader: 2020/08/16 03:13:08.720457 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 03:13:08.720463 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 03:13:08.720467 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 03:13:08.720472 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 03:13:08.720476 spo read:      
RDFreader: 2020/08/16 03:13:08.720481 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 03:13:08.720502 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 03:13:08.720508 spo read:  d  Friends  _:abc
RDFreader: 2020/08/16 03:13:08.720513 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 03:13:08.720517 spo read:  d  Age  "36"
RDFreader: 2020/08/16 03:13:08.720522 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 03:13:08.720528 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 03:13:08.720532 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 03:13:08.720538 close verify channel
rdfLoader: 2020/08/16 03:13:08.720542 verify started....
rdfLoader: 2020/08/16 03:13:08.720546 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 03:13:08.720550 .  getType..
rdfLoader: 2020/08/16 03:13:08.720554 node.TyName : [Person]
DB: 2020/08/16 03:13:08.790573 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 69.955772ms
grmgr: 2020/08/16 03:13:08.790708 Looping..... 0
grmgr: 2020/08/16 03:13:08.790939 Looping..... 1
grmgr: 2020/08/16 03:13:08.790969 Looping..... 2
grmgr: 2020/08/16 03:13:08.791010 Looping..... 3
grmgr: 2020/08/16 03:13:08.791190 Looping..... 4
grmgr: 2020/08/16 03:13:08.791366 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 03:13:08.791376 .  getType..
rdfLoader: 2020/08/16 03:13:08.791380 node.TyName : [Person]
grmgr: 2020/08/16 03:13:08.791386 Looping..... 0
unmarshalRDF: 2020/08/16 03:13:08.791398 Entered unmarshalRDF. 
grmgr: 2020/08/16 03:13:08.791407 Looping..... 1
grmgr: 2020/08/16 03:13:08.791412 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 03:13:08.791416 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 03:13:08.791432 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 03:13:08.791436 .  getType..
rdfLoader: 2020/08/16 03:13:08.791440 node.TyName : [Person]
grmgr: 2020/08/16 03:13:08.791444 Looping..... 0
rdfLoader: 2020/08/16 03:13:08.791454 Add to SS . [Honda]
rdfLoader: 2020/08/16 03:13:08.791459 Add to SS . [Alfa]
anmgr 2020/08/16 03:13:08.791492 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:08.791500 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 03:13:08.791544 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 03:13:08.791550 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 03:13:08.791559 Entered unmarshalRDF. 
grmgr: 2020/08/16 03:13:08.791585 Looping..... 1
grmgr: 2020/08/16 03:13:08.791590 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 03:13:08.791594 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 03:13:08.791598 Looping..... 0
rdfLoader: 2020/08/16 03:13:08.791606 Add to SS . [Honda]
rdfLoader: 2020/08/16 03:13:08.791611 Add to SS . [VW Golf]
anmgr 2020/08/16 03:13:08.791626 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:08.791632 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 03:13:08.791658 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 03:13:08.791663 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 03:13:08.791668 .  getType..
rdfLoader: 2020/08/16 03:13:08.791672 node.TyName : [Person]
unmarshalRDF: 2020/08/16 03:13:08.791680 Entered unmarshalRDF. 
grmgr: 2020/08/16 03:13:08.791690 Looping..... 1
rdfLoader: 2020/08/16 03:13:08.791698 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 03:13:08.791702 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 03:13:08.791707 Add to SS . [Honda]
anmgr 2020/08/16 03:13:08.791719 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:08.791724 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 03:13:08.791759 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 03:13:08.791764 Exit  unmarshalRDF. 
anmgr 2020/08/16 03:13:08.791770 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/16 03:13:08.791794 Looping..... 2
grmgr: 2020/08/16 03:13:08.791972 Looping..... 3
grmgr: 2020/08/16 03:13:08.792152 Looping..... 4
grmgr: 2020/08/16 03:13:08.792325 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 03:13:08.792334 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 03:13:08.792338 Looping..... 0
grmgr: 2020/08/16 03:13:08.792367 Looping..... 1
SaveRDFNode: xxx 2020/08/16 03:13:08.792377 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.792383 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.792389 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.792395 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.792400 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.792406 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.792411 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 03:13:08.792415 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 03:13:08.792422 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000346240)}
SaveRDFNode: 2020/08/16 03:13:08.792426 Waiting for UID ......................
SaveRDFNode: 2020/08/16 03:13:08.792436 UID received  : +gyO4GYoTrGqagKbuCjbXw==
grmgr: 2020/08/16 03:13:08.792665 Looping..... 2
grmgr: 2020/08/16 03:13:08.792840 Looping..... 3
grmgr: 2020/08/16 03:13:08.793014 Looping..... 4
grmgr: 2020/08/16 03:13:08.793191 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 03:13:08.793200 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 03:13:08.793205 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 03:13:08.793209 Looping..... 0
unmarshalRDF: 2020/08/16 03:13:08.793222 Entered unmarshalRDF. 
grmgr: 2020/08/16 03:13:08.793232 Looping..... 1
rdfLoader: 2020/08/16 03:13:08.793241 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 03:13:08.793276 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 03:13:08.793281 Exit  unmarshalRDF. 
anmgr 2020/08/16 03:13:08.793287 received on EdgeSnCn. anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
grmgr: 2020/08/16 03:13:08.793297 Looping..... 2
grmgr: 2020/08/16 03:13:08.793380 Looping..... 3
grmgr: 2020/08/16 03:13:08.793542 Looping..... 4
grmgr: 2020/08/16 03:13:08.793716 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 03:13:08.793725 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 03:13:08.793734 Looping..... 0
grmgr: 2020/08/16 03:13:08.793757 Looping..... 1
grmgr: 2020/08/16 03:13:08.793762 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 03:13:08.793766 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 03:13:08.793774 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.793780 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.793787 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.793798 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.793803 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.793809 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.793815 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 03:13:08.793819 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 03:13:08.793824 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0003469c0)}
SaveRDFNode: 2020/08/16 03:13:08.793828 Waiting for UID ......................
SaveRDFNode: 2020/08/16 03:13:08.793836 UID received  : cADc/xJDTeCFal5P5G5wtw==
DB: 2020/08/16 03:13:08.800403 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.93139ms
DB: 2020/08/16 03:13:08.803745 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.881484ms
DB: 2020/08/16 03:13:08.807004 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.198705ms
DB: 2020/08/16 03:13:08.810846 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.670439ms
DB: 2020/08/16 03:13:08.814407 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.52787ms
DB: 2020/08/16 03:13:08.817837 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.399068ms
SaveRDFNode: 2020/08/16 03:13:08.817850 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003469c0)}
SaveRDFNode: 2020/08/16 03:13:08.817857 Received UID: X18=
SaveRDFNode: 2020/08/16 03:13:08.817870 a: = db.Item{PKey:[]uint8{0x70, 0x0, 0xdc, 0xff, 0x12, 0x43, 0x4d, 0xe0, 0x85, 0x6a, 0x5e, 0x4f, 0xe4, 0x6e, 0x70, 0xb7}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 03:13:08.818710 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 18.272729ms
DB: 2020/08/16 03:13:08.821807 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.905937ms
SaveRDFNode: 2020/08/16 03:13:08.821820 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003469c0)}
SaveRDFNode: 2020/08/16 03:13:08.821826 Received UID: X18=
SaveRDFNode: 2020/08/16 03:13:08.821837 a: = db.Item{PKey:[]uint8{0x70, 0x0, 0xdc, 0xff, 0x12, 0x43, 0x4d, 0xe0, 0x85, 0x6a, 0x5e, 0x4f, 0xe4, 0x6e, 0x70, 0xb7}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 03:13:08.822460 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.718919ms
DB: 2020/08/16 03:13:08.825504 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.635702ms
SaveRDFNode: 2020/08/16 03:13:08.825516 Returned.+++++++++++ No error
grmgr: 2020/08/16 03:13:08.825525 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 03:13:08.825530 Send ack to waiting saveNode...
grmgr: 2020/08/16 03:13:08.825537 Looping..... 0
grmgr: 2020/08/16 03:13:08.825568 Looping..... 1
grmgr: 2020/08/16 03:13:08.825574 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 03:13:08.825578 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 03:13:08.825598 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.825605 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.825620 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.825626 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.825631 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.825637 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.825642 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 03:13:08.825646 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 03:13:08.825652 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000017c80)}
SaveRDFNode: 2020/08/16 03:13:08.825655 Waiting for UID ......................
SaveRDFNode: 2020/08/16 03:13:08.825664 UID received  : coUZlMB0SPayW5VNf+uSdA==
DB: 2020/08/16 03:13:08.826124 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.491571ms
DB: 2020/08/16 03:13:08.829579 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.423826ms
SaveRDFNode: 2020/08/16 03:13:08.829592 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346240)}
SaveRDFNode: 2020/08/16 03:13:08.829599 Received UID: X18=
SaveRDFNode: 2020/08/16 03:13:08.829613 a: = db.Item{PKey:[]uint8{0xfa, 0xc, 0x8e, 0xe0, 0x66, 0x28, 0x4e, 0xb1, 0xaa, 0x6a, 0x2, 0x9b, 0xb8, 0x28, 0xdb, 0x5f}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 03:13:08.832526 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.835256ms
DB: 2020/08/16 03:13:08.833107 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.465568ms
SaveRDFNode: 2020/08/16 03:13:08.833119 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346240)}
SaveRDFNode: 2020/08/16 03:13:08.833126 Received UID: X18=
SaveRDFNode: 2020/08/16 03:13:08.833136 a: = db.Item{PKey:[]uint8{0xfa, 0xc, 0x8e, 0xe0, 0x66, 0x28, 0x4e, 0xb1, 0xaa, 0x6a, 0x2, 0x9b, 0xb8, 0x28, 0xdb, 0x5f}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 03:13:08.836453 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.28447ms
SaveRDFNode: 2020/08/16 03:13:08.836464 Returned.+++++++++++ No error
grmgr: 2020/08/16 03:13:08.836472 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 03:13:08.836476 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 03:13:08.836501 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.836508 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.836514 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.836520 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.836526 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.836532 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 03:13:08.836556 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 03:13:08.836561 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 03:13:08.836567 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0001aca20)}
SaveRDFNode: 2020/08/16 03:13:08.836577 Waiting for UID ......................
SaveRDFNode: 2020/08/16 03:13:08.836587 UID received  : C6AfCDXSQna1a6TAvTPwWw==
grmgr: 2020/08/16 03:13:08.836765 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 03:13:08.837020 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.462391ms
DB: 2020/08/16 03:13:08.839819 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.205614ms
DB: 2020/08/16 03:13:08.840342 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.28814ms
DB: 2020/08/16 03:13:08.843130 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.119961ms
DB: 2020/08/16 03:13:08.843619 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.246095ms
DB: 2020/08/16 03:13:08.846413 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.251624ms
DB: 2020/08/16 03:13:08.846840 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.188635ms
SaveRDFNode: 2020/08/16 03:13:08.846852 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017c80)}
SaveRDFNode: 2020/08/16 03:13:08.846860 Received UID: X18=
SaveRDFNode: 2020/08/16 03:13:08.846871 a: = db.Item{PKey:[]uint8{0x72, 0x85, 0x19, 0x94, 0xc0, 0x74, 0x48, 0xf6, 0xb2, 0x5b, 0x95, 0x4d, 0x7f, 0xeb, 0x92, 0x74}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 03:13:08.849449 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.000427ms
DB: 2020/08/16 03:13:08.850244 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.344735ms
SaveRDFNode: 2020/08/16 03:13:08.850255 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017c80)}
SaveRDFNode: 2020/08/16 03:13:08.850265 Received UID: X18=
SaveRDFNode: 2020/08/16 03:13:08.850275 a: = db.Item{PKey:[]uint8{0x72, 0x85, 0x19, 0x94, 0xc0, 0x74, 0x48, 0xf6, 0xb2, 0x5b, 0x95, 0x4d, 0x7f, 0xeb, 0x92, 0x74}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 03:13:08.852561 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.081622ms
SaveRDFNode: 2020/08/16 03:13:08.852574 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001aca20)}
SaveRDFNode: 2020/08/16 03:13:08.852580 Received UID: X18=
SaveRDFNode: 2020/08/16 03:13:08.852591 a: = db.Item{PKey:[]uint8{0xb, 0xa0, 0x1f, 0x8, 0x35, 0xd2, 0x42, 0x76, 0xb5, 0x6b, 0xa4, 0xc0, 0xbd, 0x33, 0xf0, 0x5b}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 03:13:08.853514 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.210742ms
SaveRDFNode: 2020/08/16 03:13:08.853523 Returned.+++++++++++ No error
grmgr: 2020/08/16 03:13:08.853532 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 03:13:08.855795 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.171462ms
SaveRDFNode: 2020/08/16 03:13:08.855957 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001aca20)}
SaveRDFNode: 2020/08/16 03:13:08.855970 Received UID: X18=
SaveRDFNode: 2020/08/16 03:13:08.855983 a: = db.Item{PKey:[]uint8{0xb, 0xa0, 0x1f, 0x8, 0x35, 0xd2, 0x42, 0x76, 0xb5, 0x6b, 0xa4, 0xc0, 0xbd, 0x33, 0xf0, 0x5b}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 03:13:08.859872 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.855215ms
SaveRDFNode: 2020/08/16 03:13:08.859883 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 03:13:08.859890 saveNode finished waiting...exiting
grmgr: 2020/08/16 03:13:08.859905 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 03:13:08.859920 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:08.875420 About to run AttachNodeCh: abc  b  +gyO4GYoTrGqagKbuCjbXw== cADc/xJDTeCFal5P5G5wtw==
anmgr 2020/08/16 03:13:08.875456 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 03:13:08.875465 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 03:13:08.875472 Looping..... 0
grmgr: 2020/08/16 03:13:08.875668 Looping..... 1
grmgr: 2020/08/16 03:13:08.875846 Looping..... 2
grmgr: 2020/08/16 03:13:08.876024 Looping..... 3
grmgr: 2020/08/16 03:13:08.876213 Looping..... 4
grmgr: 2020/08/16 03:13:08.876382 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 03:13:08.876392 goroutine about to start 1 cUID,pUID   +gyO4GYoTrGqagKbuCjbXw==  cADc/xJDTeCFal5P5G5wtw==  
grmgr: 2020/08/16 03:13:08.876681 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 03:13:08.879023 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.550414ms
DB: 2020/08/16 03:13:08.881264 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.210187ms
DB: 2020/08/16 03:13:08.885017 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.695534ms
anmgr 2020/08/16 03:13:08.890977 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:08.892602 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.975882ms
AttachNode: main 2020/08/16 03:13:08.892618 FetchForUpdate: for parent    cADc/xJDTeCFal5P5G5wtw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 03:13:08.892623 ** Cache FetchForUpdate Cache Key Value: [cADc/xJDTeCFal5P5G5wtw==]   sortk: A#G#:S
FetchNode: 2020/08/16 03:13:08.892629  node: cADc/xJDTeCFal5P5G5wtw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 03:13:08.892806 FetchForUpdate: for child    +gyO4GYoTrGqagKbuCjbXw==
FetchForUpdate: 2020/08/16 03:13:08.892818 ** Cache FetchForUpdate Cache Key Value: [+gyO4GYoTrGqagKbuCjbXw==]   sortk: A#
FetchNode: 2020/08/16 03:13:08.892831  node: +gyO4GYoTrGqagKbuCjbXw== subKey: A#
DB: 2020/08/16 03:13:08.895025 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.35986ms
FetchForUpdate: 2020/08/16 03:13:08.895087 len(nb): 1
fetchItems: 2020/08/16 03:13:08.895096 +++  Cache FetchItems for sortk A#G#:S UID: [cADc/xJDTeCFal5P5G5wtw==] 
FetchNode: 2020/08/16 03:13:08.895100  node: cADc/xJDTeCFal5P5G5wtw== subKey: A#G#:S
DB: 2020/08/16 03:13:08.897676 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.543724ms
DB: 2020/08/16 03:13:08.901383 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.61817ms
anmgr 2020/08/16 03:13:08.907957 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:08.912093 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 19.19794ms
FetchForUpdate: 2020/08/16 03:13:08.912226 len(nb): 7
fetchItems: 2020/08/16 03:13:08.912235 +++  Cache FetchItems for sortk A# UID: [+gyO4GYoTrGqagKbuCjbXw==] 
FetchNode: 2020/08/16 03:13:08.912240  node: +gyO4GYoTrGqagKbuCjbXw== subKey: A#
DB: 2020/08/16 03:13:08.914727 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.458499ms
anmgr 2020/08/16 03:13:08.924264 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 03:13:08.924548 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.320677ms
DB: 2020/08/16 03:13:08.927953 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.213037ms
DB: 2020/08/16 03:13:08.931887 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.575378ms
DB: 2020/08/16 03:13:08.937838 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.647511ms
anmgr 2020/08/16 03:13:08.939666 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:08.941554 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.390716ms
DB: 2020/08/16 03:13:08.945387 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.529615ms
DB: 2020/08/16 03:13:08.951424 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.725237ms
DB: 2020/08/16 03:13:08.955052 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.341062ms
anmgr 2020/08/16 03:13:08.955686 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:08.958947 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.593358ms
DB: 2020/08/16 03:13:08.962570 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.434803ms
Cache: 2020/08/16 03:13:08.962584 In SetUpredAvailable: pUid, tUID:  cADc/xJDTeCFal5P5G5wtw== cADc/xJDTeCFal5P5G5wtw== A#G#:S
Cache: 2020/08/16 03:13:08.962589 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 03:13:08.966033 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.390862ms
Unlock: 2020/08/16 03:13:08.966046 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 03:13:08.966050 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 03:13:08.971449 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 03:13:08.976813 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 10.709442ms
grmgr: 2020/08/16 03:13:08.976830 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 03:13:08.981765 ** received on attachDoneCh.... 2
anmgr 2020/08/16 03:13:08.981785 About to run AttachNodeCh: d  abc  C6AfCDXSQna1a6TAvTPwWw== +gyO4GYoTrGqagKbuCjbXw==
anmgr 2020/08/16 03:13:08.981791 for loop finished 1  8 
anmgr 2020/08/16 03:13:08.981798 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:08.981803 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:08.981808 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 03:13:08.981815 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 03:13:08.981820 Looping..... 0
grmgr: 2020/08/16 03:13:08.981832 Looping..... 1
grmgr: 2020/08/16 03:13:08.981939 Looping..... 2
grmgr: 2020/08/16 03:13:08.982120 Looping..... 3
grmgr: 2020/08/16 03:13:08.982294 Looping..... 4
grmgr: 2020/08/16 03:13:08.982469 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 03:13:08.982479 goroutine about to start 2 cUID,pUID   C6AfCDXSQna1a6TAvTPwWw==  +gyO4GYoTrGqagKbuCjbXw==  
grmgr: 2020/08/16 03:13:08.982811 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 03:13:08.985158 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.496819ms
DB: 2020/08/16 03:13:08.987543 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.355406ms
DB: 2020/08/16 03:13:08.990979 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.386762ms
DB: 2020/08/16 03:13:08.995082 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.927027ms
AttachNode: main 2020/08/16 03:13:08.995098 FetchForUpdate: for parent    +gyO4GYoTrGqagKbuCjbXw==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 03:13:08.995104 ** Cache FetchForUpdate Cache Key Value: [+gyO4GYoTrGqagKbuCjbXw==]   sortk: A#G#:F
fetchItems: 2020/08/16 03:13:08.995120 +++  Cache FetchItems for sortk A#G#:F UID: [+gyO4GYoTrGqagKbuCjbXw==] 
FetchNode: 2020/08/16 03:13:08.995125  node: +gyO4GYoTrGqagKbuCjbXw== subKey: A#G#:F
AttachNode: gr1 2020/08/16 03:13:08.995300 FetchForUpdate: for child    C6AfCDXSQna1a6TAvTPwWw==
FetchForUpdate: 2020/08/16 03:13:08.995310 ** Cache FetchForUpdate Cache Key Value: [C6AfCDXSQna1a6TAvTPwWw==]   sortk: A#
FetchNode: 2020/08/16 03:13:08.995333  node: C6AfCDXSQna1a6TAvTPwWw== subKey: A#
anmgr 2020/08/16 03:13:08.997611 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:08.997735 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.579256ms
DB: 2020/08/16 03:13:08.999206 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.803786ms
FetchForUpdate: 2020/08/16 03:13:08.999327 len(nb): 7
fetchItems: 2020/08/16 03:13:08.999336 +++  Cache FetchItems for sortk A# UID: [C6AfCDXSQna1a6TAvTPwWw==] 
FetchNode: 2020/08/16 03:13:08.999341  node: C6AfCDXSQna1a6TAvTPwWw== subKey: A#
DB: 2020/08/16 03:13:09.001594 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.600348ms
DB: 2020/08/16 03:13:09.004525 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.155906ms
anmgr 2020/08/16 03:13:09.014018 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.015222 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.525352ms
DB: 2020/08/16 03:13:09.020364 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.089668ms
DB: 2020/08/16 03:13:09.024074 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.612917ms
DB: 2020/08/16 03:13:09.029961 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.828448ms
anmgr 2020/08/16 03:13:09.030729 About to run AttachNodeCh: b  c  cADc/xJDTeCFal5P5G5wtw== coUZlMB0SPayW5VNf+uSdA==
anmgr 2020/08/16 03:13:09.030749 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/16 03:13:09.030756 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 03:13:09.030764 Looping..... 0
grmgr: 2020/08/16 03:13:09.030903 Looping..... 1
grmgr: 2020/08/16 03:13:09.031137 Looping..... 2
grmgr: 2020/08/16 03:13:09.031317 Looping..... 3
grmgr: 2020/08/16 03:13:09.031508 Looping..... 4
grmgr: 2020/08/16 03:13:09.031675 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 03:13:09.031686 goroutine about to start 3 cUID,pUID   cADc/xJDTeCFal5P5G5wtw==  coUZlMB0SPayW5VNf+uSdA==  
grmgr: 2020/08/16 03:13:09.032023 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 03:13:09.033460 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.429526ms
DB: 2020/08/16 03:13:09.034439 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.567795ms
DB: 2020/08/16 03:13:09.036579 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.109073ms
DB: 2020/08/16 03:13:09.037034 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.504386ms
DB: 2020/08/16 03:13:09.041031 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.374524ms
DB: 2020/08/16 03:13:09.043899 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.561933ms
DB: 2020/08/16 03:13:09.045176 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.956628ms
AttachNode: main 2020/08/16 03:13:09.045189 FetchForUpdate: for parent    coUZlMB0SPayW5VNf+uSdA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 03:13:09.045204 ** Cache FetchForUpdate Cache Key Value: [coUZlMB0SPayW5VNf+uSdA==]   sortk: A#G#:S
FetchNode: 2020/08/16 03:13:09.045210  node: coUZlMB0SPayW5VNf+uSdA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 03:13:09.045444 FetchForUpdate: for child    cADc/xJDTeCFal5P5G5wtw==
FetchForUpdate: 2020/08/16 03:13:09.045468 ** Cache FetchForUpdate Cache Key Value: [cADc/xJDTeCFal5P5G5wtw==]   sortk: A#
fetchItems: 2020/08/16 03:13:09.045478 +++  Cache FetchItems for sortk A# UID: [cADc/xJDTeCFal5P5G5wtw==] 
FetchNode: 2020/08/16 03:13:09.045493  node: cADc/xJDTeCFal5P5G5wtw== subKey: A#
anmgr 2020/08/16 03:13:09.046460 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.047679 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.470968ms
DB: 2020/08/16 03:13:09.048511 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.264322ms
FetchForUpdate: 2020/08/16 03:13:09.048562 len(nb): 1
fetchItems: 2020/08/16 03:13:09.048570 +++  Cache FetchItems for sortk A#G#:S UID: [coUZlMB0SPayW5VNf+uSdA==] 
FetchNode: 2020/08/16 03:13:09.048575  node: coUZlMB0SPayW5VNf+uSdA== subKey: A#G#:S
DB: 2020/08/16 03:13:09.051766 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 6.224506ms
fetchItems: 2020/08/16 03:13:09.051923 +++  Cache FetchItems for sortk A# UID: [cADc/xJDTeCFal5P5G5wtw==] 
FetchNode: 2020/08/16 03:13:09.051931  node: cADc/xJDTeCFal5P5G5wtw== subKey: A#
DB: 2020/08/16 03:13:09.054006 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.991313ms
DB: 2020/08/16 03:13:09.055635 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 7.028054ms
DB: 2020/08/16 03:13:09.061259 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.906421ms
Cache: 2020/08/16 03:13:09.061271 In SetUpredAvailable: pUid, tUID:  +gyO4GYoTrGqagKbuCjbXw== +gyO4GYoTrGqagKbuCjbXw== A#G#:F
Cache: 2020/08/16 03:13:09.061277 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 03:13:09.062708 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.067249 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 15.271651ms
DB: 2020/08/16 03:13:09.073786 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 16.426467ms
DB: 2020/08/16 03:13:09.077574 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 16.244048ms
Unlock: 2020/08/16 03:13:09.077586 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 03:13:09.077591 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 03:13:09.079730 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.079745 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.079751 for loop finished 1  8 
anmgr 2020/08/16 03:13:09.079756 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.079762 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.079767 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.080350 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.237091ms
DB: 2020/08/16 03:13:09.083816 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.28066ms
DB: 2020/08/16 03:13:09.084678 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.9871ms
grmgr: 2020/08/16 03:13:09.084693 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 03:13:09.084922 ** received on attachDoneCh.... 1
DB: 2020/08/16 03:13:09.087978 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.554501ms
anmgr 2020/08/16 03:13:09.090095 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.094371 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.088504ms
DB: 2020/08/16 03:13:09.098334 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.487186ms
DB: 2020/08/16 03:13:09.102388 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.487388ms
anmgr 2020/08/16 03:13:09.105498 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.105511 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.105517 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 03:13:09.108805 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.866212ms
DB: 2020/08/16 03:13:09.112674 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.335474ms
DB: 2020/08/16 03:13:09.116891 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.609893ms
DB: 2020/08/16 03:13:09.120811 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.469544ms
Cache: 2020/08/16 03:13:09.120828 In SetUpredAvailable: pUid, tUID:  coUZlMB0SPayW5VNf+uSdA== coUZlMB0SPayW5VNf+uSdA== A#G#:S
Cache: 2020/08/16 03:13:09.120834 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 03:13:09.121140 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.124073 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.204637ms
Unlock: 2020/08/16 03:13:09.124083 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 03:13:09.124087 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 03:13:09.128239 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.095435ms
grmgr: 2020/08/16 03:13:09.128256 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 03:13:09.131382 ** received on attachDoneCh.... 2
anmgr 2020/08/16 03:13:09.131399 About to run AttachNodeCh: c  abc  coUZlMB0SPayW5VNf+uSdA== +gyO4GYoTrGqagKbuCjbXw==
anmgr 2020/08/16 03:13:09.131408 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 03:13:09.131414 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 03:13:09.131424 Looping..... 0
grmgr: 2020/08/16 03:13:09.131439 Looping..... 1
grmgr: 2020/08/16 03:13:09.131559 Looping..... 2
grmgr: 2020/08/16 03:13:09.131733 Looping..... 3
grmgr: 2020/08/16 03:13:09.131917 Looping..... 4
grmgr: 2020/08/16 03:13:09.132091 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 03:13:09.132103 goroutine about to start 4 cUID,pUID   coUZlMB0SPayW5VNf+uSdA==  +gyO4GYoTrGqagKbuCjbXw==  
grmgr: 2020/08/16 03:13:09.132453 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 03:13:09.135254 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.958263ms
DB: 2020/08/16 03:13:09.137249 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 1.960705ms
DB: 2020/08/16 03:13:09.140939 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.63611ms
DB: 2020/08/16 03:13:09.144800 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.797539ms
AttachNode: main 2020/08/16 03:13:09.144814 FetchForUpdate: for parent    +gyO4GYoTrGqagKbuCjbXw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 03:13:09.144830 ** Cache FetchForUpdate Cache Key Value: [+gyO4GYoTrGqagKbuCjbXw==]   sortk: A#G#:S
fetchItems: 2020/08/16 03:13:09.144836 +++  Cache FetchItems for sortk A#G#:S UID: [+gyO4GYoTrGqagKbuCjbXw==] 
FetchNode: 2020/08/16 03:13:09.144842  node: +gyO4GYoTrGqagKbuCjbXw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 03:13:09.145019 FetchForUpdate: for child    coUZlMB0SPayW5VNf+uSdA==
FetchForUpdate: 2020/08/16 03:13:09.145028 ** Cache FetchForUpdate Cache Key Value: [coUZlMB0SPayW5VNf+uSdA==]   sortk: A#
fetchItems: 2020/08/16 03:13:09.145033 +++  Cache FetchItems for sortk A# UID: [coUZlMB0SPayW5VNf+uSdA==] 
FetchNode: 2020/08/16 03:13:09.145081  node: coUZlMB0SPayW5VNf+uSdA== subKey: A#
anmgr 2020/08/16 03:13:09.146955 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.146967 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.146972 for loop finished 3  8 
anmgr 2020/08/16 03:13:09.146977 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.146982 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.146987 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.148241 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.114276ms
fetchItems: 2020/08/16 03:13:09.148436 +++  Cache FetchItems for sortk A# UID: [coUZlMB0SPayW5VNf+uSdA==] 
FetchNode: 2020/08/16 03:13:09.148445  node: coUZlMB0SPayW5VNf+uSdA== subKey: A#
DB: 2020/08/16 03:13:09.148742 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.868729ms
DB: 2020/08/16 03:13:09.152524 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.049608ms
DB: 2020/08/16 03:13:09.154294 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.215568ms
DB: 2020/08/16 03:13:09.160609 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.828198ms
anmgr 2020/08/16 03:13:09.164538 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.168953 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 8.0964ms
DB: 2020/08/16 03:13:09.174021 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.341886ms
anmgr 2020/08/16 03:13:09.180149 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.180162 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.180168 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 03:13:09.180692 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.227893ms
DB: 2020/08/16 03:13:09.184356 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.076782ms
DB: 2020/08/16 03:13:09.188478 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.562318ms
DB: 2020/08/16 03:13:09.195096 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.134705ms
anmgr 2020/08/16 03:13:09.195708 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.195719 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.195725 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.198850 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.31633ms
DB: 2020/08/16 03:13:09.202951 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.414401ms
DB: 2020/08/16 03:13:09.206193 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.186641ms
Cache: 2020/08/16 03:13:09.206217 In SetUpredAvailable: pUid, tUID:  +gyO4GYoTrGqagKbuCjbXw== +gyO4GYoTrGqagKbuCjbXw== A#G#:S
Cache: 2020/08/16 03:13:09.206223 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 03:13:09.209487 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.228316ms
Unlock: 2020/08/16 03:13:09.209497 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 03:13:09.209502 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 03:13:09.211179 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.211191 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.211196 for loop finished 3  8 
anmgr 2020/08/16 03:13:09.211201 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.211206 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.211210 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.213699 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.12837ms
grmgr: 2020/08/16 03:13:09.213712 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 03:13:09.216371 ** received on attachDoneCh.... 1
anmgr 2020/08/16 03:13:09.221419 About to run AttachNodeCh: abc  c  +gyO4GYoTrGqagKbuCjbXw== coUZlMB0SPayW5VNf+uSdA==
anmgr 2020/08/16 03:13:09.221438 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 03:13:09.221447 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 03:13:09.221453 Looping..... 0
grmgr: 2020/08/16 03:13:09.221640 Looping..... 1
grmgr: 2020/08/16 03:13:09.221814 Looping..... 2
grmgr: 2020/08/16 03:13:09.221987 Looping..... 3
grmgr: 2020/08/16 03:13:09.222167 Looping..... 4
grmgr: 2020/08/16 03:13:09.222341 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 03:13:09.222351 goroutine about to start 5 cUID,pUID   +gyO4GYoTrGqagKbuCjbXw==  coUZlMB0SPayW5VNf+uSdA==  
grmgr: 2020/08/16 03:13:09.222793 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 03:13:09.225058 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.429657ms
DB: 2020/08/16 03:13:09.227977 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.889563ms
DB: 2020/08/16 03:13:09.231681 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.654494ms
DB: 2020/08/16 03:13:09.235642 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.7852ms
AttachNode: main 2020/08/16 03:13:09.235654 FetchForUpdate: for parent    coUZlMB0SPayW5VNf+uSdA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 03:13:09.235660 ** Cache FetchForUpdate Cache Key Value: [coUZlMB0SPayW5VNf+uSdA==]   sortk: A#G#:S
fetchItems: 2020/08/16 03:13:09.235665 +++  Cache FetchItems for sortk A#G#:S UID: [coUZlMB0SPayW5VNf+uSdA==] 
FetchNode: 2020/08/16 03:13:09.235670  node: coUZlMB0SPayW5VNf+uSdA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 03:13:09.235844 FetchForUpdate: for child    +gyO4GYoTrGqagKbuCjbXw==
FetchForUpdate: 2020/08/16 03:13:09.235852 ** Cache FetchForUpdate Cache Key Value: [+gyO4GYoTrGqagKbuCjbXw==]   sortk: A#
fetchItems: 2020/08/16 03:13:09.235857 +++  Cache FetchItems for sortk A# UID: [+gyO4GYoTrGqagKbuCjbXw==] 
FetchNode: 2020/08/16 03:13:09.235869  node: +gyO4GYoTrGqagKbuCjbXw== subKey: A#
anmgr 2020/08/16 03:13:09.237249 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.237263 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.237269 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 03:13:09.238653 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.951829ms
DB: 2020/08/16 03:13:09.239731 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 13  Duration: 3.779362ms
DB: 2020/08/16 03:13:09.242856 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.845147ms
DB: 2020/08/16 03:13:09.247179 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.791928ms
DB: 2020/08/16 03:13:09.251193 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.539389ms
anmgr 2020/08/16 03:13:09.252994 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.253010 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.253016 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.255235 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.576173ms
DB: 2020/08/16 03:13:09.258607 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.174257ms
Cache: 2020/08/16 03:13:09.258618 In SetUpredAvailable: pUid, tUID:  coUZlMB0SPayW5VNf+uSdA== coUZlMB0SPayW5VNf+uSdA== A#G#:S
Cache: 2020/08/16 03:13:09.258623 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 03:13:09.262408 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.7508ms
Unlock: 2020/08/16 03:13:09.262418 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 03:13:09.262423 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 03:13:09.266730 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.253699ms
grmgr: 2020/08/16 03:13:09.266744 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 03:13:09.268497 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.268509 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.268513 for loop finished 4  8 
anmgr 2020/08/16 03:13:09.268518 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.268523 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.268528 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.268533 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.268538 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.268543 ** received on attachDoneCh.... 0
anmgr 2020/08/16 03:13:09.278929 About to run AttachNodeCh: b  abc  cADc/xJDTeCFal5P5G5wtw== +gyO4GYoTrGqagKbuCjbXw==
anmgr 2020/08/16 03:13:09.278948 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.278955 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.278961 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/16 03:13:09.278968 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 03:13:09.278974 Looping..... 0
grmgr: 2020/08/16 03:13:09.279091 Looping..... 1
grmgr: 2020/08/16 03:13:09.279282 Looping..... 2
grmgr: 2020/08/16 03:13:09.279446 Looping..... 3
grmgr: 2020/08/16 03:13:09.279619 Looping..... 4
grmgr: 2020/08/16 03:13:09.279794 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 03:13:09.279804 goroutine about to start 6 cUID,pUID   cADc/xJDTeCFal5P5G5wtw==  +gyO4GYoTrGqagKbuCjbXw==  
grmgr: 2020/08/16 03:13:09.280157 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 03:13:09.282567 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.564778ms
DB: 2020/08/16 03:13:09.284959 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.345158ms
DB: 2020/08/16 03:13:09.288625 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.590613ms
DB: 2020/08/16 03:13:09.292639 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.733842ms
AttachNode: main 2020/08/16 03:13:09.292651 FetchForUpdate: for parent    +gyO4GYoTrGqagKbuCjbXw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 03:13:09.292656 ** Cache FetchForUpdate Cache Key Value: [+gyO4GYoTrGqagKbuCjbXw==]   sortk: A#G#:S
fetchItems: 2020/08/16 03:13:09.292662 +++  Cache FetchItems for sortk A#G#:S UID: [+gyO4GYoTrGqagKbuCjbXw==] 
FetchNode: 2020/08/16 03:13:09.292666  node: +gyO4GYoTrGqagKbuCjbXw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 03:13:09.292885 FetchForUpdate: for child    cADc/xJDTeCFal5P5G5wtw==
FetchForUpdate: 2020/08/16 03:13:09.292900 ** Cache FetchForUpdate Cache Key Value: [cADc/xJDTeCFal5P5G5wtw==]   sortk: A#
fetchItems: 2020/08/16 03:13:09.292906 +++  Cache FetchItems for sortk A# UID: [cADc/xJDTeCFal5P5G5wtw==] 
FetchNode: 2020/08/16 03:13:09.292935  node: cADc/xJDTeCFal5P5G5wtw== subKey: A#
anmgr 2020/08/16 03:13:09.294400 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.294411 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.294416 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 03:13:09.295599 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.614637ms
DB: 2020/08/16 03:13:09.297505 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.78542ms
DB: 2020/08/16 03:13:09.301254 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.472663ms
DB: 2020/08/16 03:13:09.305031 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.414761ms
DB: 2020/08/16 03:13:09.308791 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.323745ms
anmgr 2020/08/16 03:13:09.309848 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.309860 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.309865 for loop finished 5  8 
anmgr 2020/08/16 03:13:09.309870 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.309875 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.309880 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.309885 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.309889 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.309894 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.309899 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.309904 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.309911 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 03:13:09.312716 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.489014ms
DB: 2020/08/16 03:13:09.316236 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.10826ms
Cache: 2020/08/16 03:13:09.316249 In SetUpredAvailable: pUid, tUID:  +gyO4GYoTrGqagKbuCjbXw== +gyO4GYoTrGqagKbuCjbXw== A#G#:S
Cache: 2020/08/16 03:13:09.316254 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 03:13:09.320221 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.932896ms
Unlock: 2020/08/16 03:13:09.320239 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 03:13:09.320244 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 03:13:09.324254 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.953646ms
grmgr: 2020/08/16 03:13:09.324266 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 03:13:09.325579 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.325590 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.325595 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.325600 ** received on attachDoneCh.... 0
anmgr 2020/08/16 03:13:09.335942 About to run AttachNodeCh: c  b  coUZlMB0SPayW5VNf+uSdA== cADc/xJDTeCFal5P5G5wtw==
anmgr 2020/08/16 03:13:09.335958 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.335965 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.335970 for loop finished 6  8 
anmgr 2020/08/16 03:13:09.335976 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.335981 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.335987 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.335992 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.335998 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.336003 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.336009 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.336014 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.336019 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/16 03:13:09.336027 read from AttachNodeCh channel 7 now ASK limiter
grmgr: 2020/08/16 03:13:09.336033 Looping..... 0
grmgr: 2020/08/16 03:13:09.336196 Looping..... 1
grmgr: 2020/08/16 03:13:09.336371 Looping..... 2
grmgr: 2020/08/16 03:13:09.336545 Looping..... 3
grmgr: 2020/08/16 03:13:09.336719 Looping..... 4
grmgr: 2020/08/16 03:13:09.336893 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 03:13:09.336903 goroutine about to start 7 cUID,pUID   coUZlMB0SPayW5VNf+uSdA==  cADc/xJDTeCFal5P5G5wtw==  
grmgr: 2020/08/16 03:13:09.337308 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 03:13:09.340045 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.890315ms
DB: 2020/08/16 03:13:09.342574 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.501119ms
DB: 2020/08/16 03:13:09.346002 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.370441ms
DB: 2020/08/16 03:13:09.349991 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.781036ms
AttachNode: main 2020/08/16 03:13:09.350004 FetchForUpdate: for parent    cADc/xJDTeCFal5P5G5wtw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 03:13:09.350008 ** Cache FetchForUpdate Cache Key Value: [cADc/xJDTeCFal5P5G5wtw==]   sortk: A#G#:S
fetchItems: 2020/08/16 03:13:09.350014 +++  Cache FetchItems for sortk A#G#:S UID: [cADc/xJDTeCFal5P5G5wtw==] 
FetchNode: 2020/08/16 03:13:09.350018  node: cADc/xJDTeCFal5P5G5wtw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 03:13:09.350184 FetchForUpdate: for child    coUZlMB0SPayW5VNf+uSdA==
FetchForUpdate: 2020/08/16 03:13:09.350193 ** Cache FetchForUpdate Cache Key Value: [coUZlMB0SPayW5VNf+uSdA==]   sortk: A#
fetchItems: 2020/08/16 03:13:09.350198 +++  Cache FetchItems for sortk A# UID: [coUZlMB0SPayW5VNf+uSdA==] 
FetchNode: 2020/08/16 03:13:09.350215  node: coUZlMB0SPayW5VNf+uSdA== subKey: A#
anmgr 2020/08/16 03:13:09.351647 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351662 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351668 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351673 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351679 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.351684 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.351689 for loop finished 6  8 
anmgr 2020/08/16 03:13:09.351695 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351700 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351706 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351711 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351716 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351722 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351727 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351732 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.351738 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 03:13:09.353480 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.423105ms
DB: 2020/08/16 03:13:09.354399 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.122604ms
anmgr 2020/08/16 03:13:09.367222 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367238 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367244 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367250 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367256 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.367261 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.367267 for loop finished 6  8 
anmgr 2020/08/16 03:13:09.367272 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367278 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367283 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367289 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367295 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367301 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367306 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367312 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.367317 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 03:13:09.368802 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 15.019513ms
DB: 2020/08/16 03:13:09.372776 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.634732ms
DB: 2020/08/16 03:13:09.377073 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.003232ms
DB: 2020/08/16 03:13:09.380912 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.445325ms
anmgr 2020/08/16 03:13:09.382784 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382796 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382801 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382806 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382811 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.382816 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.382820 for loop finished 6  8 
anmgr 2020/08/16 03:13:09.382825 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382830 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382835 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382839 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382844 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382849 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382854 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382858 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.382863 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 03:13:09.384418 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.325666ms
Cache: 2020/08/16 03:13:09.384432 In SetUpredAvailable: pUid, tUID:  cADc/xJDTeCFal5P5G5wtw== cADc/xJDTeCFal5P5G5wtw== A#G#:S
Cache: 2020/08/16 03:13:09.384437 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 03:13:09.387692 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.21594ms
Unlock: 2020/08/16 03:13:09.387705 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 03:13:09.387710 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 03:13:09.391992 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.223628ms
grmgr: 2020/08/16 03:13:09.392058 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 03:13:09.393140 ** received on attachDoneCh.... 2
anmgr 2020/08/16 03:13:09.393154 About to run AttachNodeCh: c  abc  coUZlMB0SPayW5VNf+uSdA== +gyO4GYoTrGqagKbuCjbXw==
anmgr 2020/08/16 03:13:09.393162 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.393167 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.393172 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.393177 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 03:13:09.393181 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.393186 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 03:13:09.393190 for loop finished 7  8 
attachNode: 2020/08/16 03:13:09.393196 read from AttachNodeCh channel 8 now ASK limiter
grmgr: 2020/08/16 03:13:09.393201 Looping..... 0
grmgr: 2020/08/16 03:13:09.393215 Looping..... 1
grmgr: 2020/08/16 03:13:09.393314 Looping..... 2
grmgr: 2020/08/16 03:13:09.393526 Looping..... 3
grmgr: 2020/08/16 03:13:09.393556 Looping..... 4
grmgr: 2020/08/16 03:13:09.393582 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 03:13:09.393597 goroutine about to start 8 cUID,pUID   coUZlMB0SPayW5VNf+uSdA==  +gyO4GYoTrGqagKbuCjbXw==  
rdfLoader: 2020/08/16 03:13:09.393608 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 03:13:09.394097 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 03:13:09.396999 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.044262ms
DB: 2020/08/16 03:13:09.399136 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.103934ms
DB: 2020/08/16 03:13:09.402608 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.424337ms
DB: 2020/08/16 03:13:09.406765 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.989502ms
AttachNode: main 2020/08/16 03:13:09.406781 FetchForUpdate: for parent    +gyO4GYoTrGqagKbuCjbXw==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 03:13:09.406787 ** Cache FetchForUpdate Cache Key Value: [+gyO4GYoTrGqagKbuCjbXw==]   sortk: A#G#:F
fetchItems: 2020/08/16 03:13:09.406793 +++  Cache FetchItems for sortk A#G#:F UID: [+gyO4GYoTrGqagKbuCjbXw==] 
FetchNode: 2020/08/16 03:13:09.406797  node: +gyO4GYoTrGqagKbuCjbXw== subKey: A#G#:F
AttachNode: gr1 2020/08/16 03:13:09.406973 FetchForUpdate: for child    coUZlMB0SPayW5VNf+uSdA==
FetchForUpdate: 2020/08/16 03:13:09.406982 ** Cache FetchForUpdate Cache Key Value: [coUZlMB0SPayW5VNf+uSdA==]   sortk: A#
fetchItems: 2020/08/16 03:13:09.406987 +++  Cache FetchItems for sortk A# UID: [coUZlMB0SPayW5VNf+uSdA==] 
FetchNode: 2020/08/16 03:13:09.406999  node: coUZlMB0SPayW5VNf+uSdA== subKey: A#
DB: 2020/08/16 03:13:09.409458 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.616562ms
DB: 2020/08/16 03:13:09.411262 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.172748ms
DB: 2020/08/16 03:13:09.413376 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.571905ms
DB: 2020/08/16 03:13:09.416803 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.327064ms
DB: 2020/08/16 03:13:09.425179 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.94674ms
DB: 2020/08/16 03:13:09.429185 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.409878ms
DB: 2020/08/16 03:13:09.432544 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.307008ms
Cache: 2020/08/16 03:13:09.432556 In SetUpredAvailable: pUid, tUID:  +gyO4GYoTrGqagKbuCjbXw== +gyO4GYoTrGqagKbuCjbXw== A#G#:F
Cache: 2020/08/16 03:13:09.432560 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 03:13:09.435657 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.063904ms
Unlock: 2020/08/16 03:13:09.435667 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 03:13:09.435671 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 03:13:09.439621 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.902814ms
grmgr: 2020/08/16 03:13:09.439639 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 03:13:09.439644 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 03:13:09.439650 11.....
rdfLoader: 2020/08/16 03:13:09.439657 22.....error cnt: 0
rdfuuid: 2020/08/16 03:13:09.439663 Powering down...
errlog: 2020/08/16 03:13:09.439667 Powering down...
grmgr: 2020/08/16 03:13:09.439672 Powering down...
anmgr: 2020/08/16 03:13:09.439676 Powering down...
rdfLoader: 2020/08/16 03:13:09.439681 loader exists.....
DB:2020/08/16 23:21:24 log.go:18: ===============================================================================
anmgr: 2020/08/16 23:21:24.891770 Powering on...
rdfLoader: 2020/08/16 23:21:24.891803 saveNode started......
rdfLoader: 2020/08/16 23:21:24.891808 define saveNode limiter......
rdfuuid: 2020/08/16 23:21:24.891813 Powering on...
grmgr: 2020/08/16 23:21:24.891829 Powering on...
errlog: 2020/08/16 23:21:24.891859 Powering on...
rdfLoader: 2020/08/16 23:21:24.891876  principle goroutines started 
RDFreader: 2020/08/16 23:21:24.891894 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 23:21:24.891916 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 23:21:24.891923 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 23:21:24.891928 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 23:21:24.891933 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 23:21:24.891938 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 23:21:24.891942 spo read:      
RDFreader: 2020/08/16 23:21:24.891947 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 23:21:24.891952 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 23:21:24.891956 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 23:21:24.891961 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 23:21:24.891965 spo read:      
RDFreader: 2020/08/16 23:21:24.891970 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 23:21:24.891974 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 23:21:24.891979 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 23:21:24.891984 spo read:  b  Age  "58"
RDFreader: 2020/08/16 23:21:24.891989 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 23:21:24.891993 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 23:21:24.891998 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 23:21:24.892003 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 23:21:24.892007 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 23:21:24.892011 spo read:      
RDFreader: 2020/08/16 23:21:24.892016 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 23:21:24.892019 Send node batch on channel verifyCh
RDFreader: 2020/08/16 23:21:24.892027 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 23:21:24.892031 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 23:21:24.892036 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 23:21:24.892056 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 23:21:24.892061 spo read:  c  Age  "67"
RDFreader: 2020/08/16 23:21:24.892065 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 23:21:24.892070 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 23:21:24.892074 spo read:  c  Friends  _:abc
RDFreader: 2020/08/16 23:21:24.892078 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 23:21:24.892085 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 23:21:24.892089 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 23:21:24.892094 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 23:21:24.892097 spo read:      
RDFreader: 2020/08/16 23:21:24.892102 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 23:21:24.892106 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 23:21:24.892110 spo read:  d  Friends  _:abc
RDFreader: 2020/08/16 23:21:24.892115 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 23:21:24.892119 spo read:  d  Age  "36"
RDFreader: 2020/08/16 23:21:24.892124 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 23:21:24.892130 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 23:21:24.892133 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 23:21:24.892138 close verify channel
rdfLoader: 2020/08/16 23:21:24.892142 verify started....
rdfLoader: 2020/08/16 23:21:24.892146 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 23:21:24.892150 .  getType..
rdfLoader: 2020/08/16 23:21:24.892159 node.TyName : [Person]
DB: 2020/08/16 23:21:24.995180 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 102.953446ms
grmgr: 2020/08/16 23:21:24.995350 Looping..... 0
grmgr: 2020/08/16 23:21:24.995675 Looping..... 1
grmgr: 2020/08/16 23:21:24.995859 Looping..... 2
grmgr: 2020/08/16 23:21:24.996038 Looping..... 3
grmgr: 2020/08/16 23:21:24.996218 Looping..... 4
grmgr: 2020/08/16 23:21:24.996398 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 23:21:24.996410 .  getType..
rdfLoader: 2020/08/16 23:21:24.996415 node.TyName : [Person]
grmgr: 2020/08/16 23:21:24.996421 Looping..... 0
unmarshalRDF: 2020/08/16 23:21:24.996434 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:21:24.996580 Looping..... 1
grmgr: 2020/08/16 23:21:24.996589 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 23:21:24.996594 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 23:21:24.996604 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 23:21:24.996608 .  getType..
rdfLoader: 2020/08/16 23:21:24.996612 node.TyName : [Person]
grmgr: 2020/08/16 23:21:24.996616 Looping..... 0
rdfLoader: 2020/08/16 23:21:24.996638 Add to SS . [Honda]
rdfLoader: 2020/08/16 23:21:24.996644 Add to SS . [Alfa]
anmgr 2020/08/16 23:21:24.996683 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:24.996691 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:21:24.996746 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:21:24.996756 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 23:21:24.996766 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:21:24.996777 Looping..... 1
grmgr: 2020/08/16 23:21:24.996782 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 23:21:24.996786 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 23:21:24.996791 Looping..... 0
rdfLoader: 2020/08/16 23:21:24.996799 Add to SS . [Honda]
rdfLoader: 2020/08/16 23:21:24.996804 Add to SS . [VW Golf]
anmgr 2020/08/16 23:21:24.996821 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:24.996827 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:21:24.996855 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:21:24.996859 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 23:21:24.996865 .  getType..
rdfLoader: 2020/08/16 23:21:24.996869 node.TyName : [Person]
unmarshalRDF: 2020/08/16 23:21:24.996878 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:21:24.996902 Looping..... 1
rdfLoader: 2020/08/16 23:21:24.996912 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 23:21:24.996917 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 23:21:24.996921 Add to SS . [Honda]
anmgr 2020/08/16 23:21:24.996936 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:24.996942 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:21:24.996970 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:21:24.996980 Exit  unmarshalRDF. 
anmgr 2020/08/16 23:21:24.996986 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/16 23:21:24.996996 Looping..... 2
grmgr: 2020/08/16 23:21:24.997088 Looping..... 3
grmgr: 2020/08/16 23:21:24.997265 Looping..... 4
grmgr: 2020/08/16 23:21:24.997440 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 23:21:24.997447 Looping..... 0
grmgr: 2020/08/16 23:21:24.997480 Looping..... 1
SaveRDFNode: xxx 2020/08/16 23:21:24.997490 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.997496 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.997502 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.997508 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.997513 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.997519 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.997525 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:21:24.997529 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:21:24.997537 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000016f60)}
SaveRDFNode: 2020/08/16 23:21:24.997541 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:21:24.997553 UID received  : 9ArtkOJWRamFCYxS1609Wg==
grmgr: 2020/08/16 23:21:24.997852 Looping..... 2
grmgr: 2020/08/16 23:21:24.997947 Looping..... 3
grmgr: 2020/08/16 23:21:24.998122 Looping..... 4
grmgr: 2020/08/16 23:21:24.998313 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 23:21:24.998323 Looping..... 0
unmarshalRDF: 2020/08/16 23:21:24.998339 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:21:24.998350 Looping..... 1
rdfLoader: 2020/08/16 23:21:24.998360 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 23:21:24.998397 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:21:24.998402 Exit  unmarshalRDF. 
anmgr 2020/08/16 23:21:24.998408 received on EdgeSnCn. anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
grmgr: 2020/08/16 23:21:24.998420 Looping..... 2
grmgr: 2020/08/16 23:21:24.998477 Looping..... 3
grmgr: 2020/08/16 23:21:24.998494 Looping..... 4
grmgr: 2020/08/16 23:21:24.998508 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 23:21:24.998514 EndCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/16 23:21:24.998519 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 23:21:24.998523 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 23:21:24.998528 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 23:21:24.998536 Looping..... 0
grmgr: 2020/08/16 23:21:24.998568 Looping..... 1
grmgr: 2020/08/16 23:21:24.998573 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 23:21:24.998577 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 23:21:24.998585 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.998597 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.998605 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.998611 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.998632 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.998639 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:21:24.998645 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:21:24.998649 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:21:24.998655 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 23:21:24.998659 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:21:24.998667 UID received  : Y89RPywLQ2ChiFVKgO5i+w==
DB: 2020/08/16 23:21:25.004737 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.144805ms
DB: 2020/08/16 23:21:25.009492 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.794632ms
DB: 2020/08/16 23:21:25.012747 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.215235ms
DB: 2020/08/16 23:21:25.016138 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.164358ms
DB: 2020/08/16 23:21:25.019293 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.12039ms
DB: 2020/08/16 23:21:25.022388 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.060819ms
SaveRDFNode: 2020/08/16 23:21:25.022405 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 23:21:25.022415 Received UID: X18=
SaveRDFNode: 2020/08/16 23:21:25.022429 a: = db.Item{PKey:[]uint8{0x63, 0xcf, 0x51, 0x3f, 0x2c, 0xb, 0x43, 0x60, 0xa1, 0x88, 0x55, 0x4a, 0x80, 0xee, 0x62, 0xfb}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:21:25.023794 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 19.011561ms
DB: 2020/08/16 23:21:25.025553 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.083347ms
SaveRDFNode: 2020/08/16 23:21:25.025566 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017860)}
SaveRDFNode: 2020/08/16 23:21:25.025574 Received UID: X18=
SaveRDFNode: 2020/08/16 23:21:25.025585 a: = db.Item{PKey:[]uint8{0x63, 0xcf, 0x51, 0x3f, 0x2c, 0xb, 0x43, 0x60, 0xa1, 0x88, 0x55, 0x4a, 0x80, 0xee, 0x62, 0xfb}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:21:25.026946 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.113713ms
DB: 2020/08/16 23:21:25.028837 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.213927ms
DB: 2020/08/16 23:21:25.030453 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.471144ms
DB: 2020/08/16 23:21:25.032210 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.183903ms
DB: 2020/08/16 23:21:25.035570 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.328162ms
DB: 2020/08/16 23:21:25.038634 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.033342ms
SaveRDFNode: 2020/08/16 23:21:25.038657 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:21:25.038670 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 23:21:25.038675 Send ack to waiting saveNode...
grmgr: 2020/08/16 23:21:25.038684 Looping..... 0
grmgr: 2020/08/16 23:21:25.038731 Looping..... 1
grmgr: 2020/08/16 23:21:25.038737 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 23:21:25.038741 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 23:21:25.038750 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.038756 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.038768 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.038774 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.038779 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.038785 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.038791 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:21:25.038794 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:21:25.038800 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0004ca6c0)}
SaveRDFNode: 2020/08/16 23:21:25.038804 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:21:25.038825 UID received  : BJtUUDtTSUqP2qc2oW8+FQ==
DB: 2020/08/16 23:21:25.041891 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.035738ms
DB: 2020/08/16 23:21:25.044999 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.063304ms
DB: 2020/08/16 23:21:25.048425 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.38546ms
DB: 2020/08/16 23:21:25.051641 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.182872ms
DB: 2020/08/16 23:21:25.054717 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.025956ms
SaveRDFNode: 2020/08/16 23:21:25.054731 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0004ca6c0)}
SaveRDFNode: 2020/08/16 23:21:25.054738 Received UID: X18=
SaveRDFNode: 2020/08/16 23:21:25.054754 a: = db.Item{PKey:[]uint8{0x4, 0x9b, 0x54, 0x50, 0x3b, 0x53, 0x49, 0x4a, 0x8f, 0xda, 0xa7, 0x36, 0xa1, 0x6f, 0x3e, 0x15}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:21:25.057763 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.97924ms
SaveRDFNode: 2020/08/16 23:21:25.057775 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0004ca6c0)}
SaveRDFNode: 2020/08/16 23:21:25.057782 Received UID: X18=
SaveRDFNode: 2020/08/16 23:21:25.057792 a: = db.Item{PKey:[]uint8{0x4, 0x9b, 0x54, 0x50, 0x3b, 0x53, 0x49, 0x4a, 0x8f, 0xda, 0xa7, 0x36, 0xa1, 0x6f, 0x3e, 0x15}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:21:25.059042 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 28.553509ms
SaveRDFNode: 2020/08/16 23:21:25.059054 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016f60)}
SaveRDFNode: 2020/08/16 23:21:25.059061 Received UID: X18=
SaveRDFNode: 2020/08/16 23:21:25.059071 a: = db.Item{PKey:[]uint8{0xf4, 0xa, 0xed, 0x90, 0xe2, 0x56, 0x45, 0xa9, 0x85, 0x9, 0x8c, 0x52, 0xd7, 0xad, 0x3d, 0x5a}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:21:25.060859 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.038577ms
DB: 2020/08/16 23:21:25.063559 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.450929ms
SaveRDFNode: 2020/08/16 23:21:25.063572 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016f60)}
SaveRDFNode: 2020/08/16 23:21:25.063578 Received UID: X18=
SaveRDFNode: 2020/08/16 23:21:25.063587 a: = db.Item{PKey:[]uint8{0xf4, 0xa, 0xed, 0x90, 0xe2, 0x56, 0x45, 0xa9, 0x85, 0x9, 0x8c, 0x52, 0xd7, 0xad, 0x3d, 0x5a}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:21:25.064844 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.789136ms
DB: 2020/08/16 23:21:25.071915 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.035964ms
DB: 2020/08/16 23:21:25.072191 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 8.575564ms
DB: 2020/08/16 23:21:25.075071 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.122939ms
DB: 2020/08/16 23:21:25.075431 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.209449ms
DB: 2020/08/16 23:21:25.078282 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.178578ms
SaveRDFNode: 2020/08/16 23:21:25.078456 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:21:25.078470 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 23:21:25.078476 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 23:21:25.078511 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.078518 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.078523 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.078528 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.078535 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.078540 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:21:25.078546 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:21:25.078550 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:21:25.078556 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000346f00)}
SaveRDFNode: 2020/08/16 23:21:25.078560 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:21:25.078570 UID received  : rNPfz5GeTnWC9v4oEQQC1w==
grmgr: 2020/08/16 23:21:25.078748 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 23:21:25.080179 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.663163ms
DB: 2020/08/16 23:21:25.081674 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.075929ms
DB: 2020/08/16 23:21:25.083458 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.218175ms
SaveRDFNode: 2020/08/16 23:21:25.083469 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:21:25.083477 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 23:21:25.084743 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.03382ms
DB: 2020/08/16 23:21:25.087808 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.00256ms
DB: 2020/08/16 23:21:25.090923 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.077433ms
DB: 2020/08/16 23:21:25.093870 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.911628ms
SaveRDFNode: 2020/08/16 23:21:25.094039 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346f00)}
SaveRDFNode: 2020/08/16 23:21:25.094054 Received UID: X18=
SaveRDFNode: 2020/08/16 23:21:25.094067 a: = db.Item{PKey:[]uint8{0xac, 0xd3, 0xdf, 0xcf, 0x91, 0x9e, 0x4e, 0x75, 0x82, 0xf6, 0xfe, 0x28, 0x11, 0x4, 0x2, 0xd7}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:21:25.097197 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.096661ms
SaveRDFNode: 2020/08/16 23:21:25.097210 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346f00)}
SaveRDFNode: 2020/08/16 23:21:25.097218 Received UID: X18=
SaveRDFNode: 2020/08/16 23:21:25.097228 a: = db.Item{PKey:[]uint8{0xac, 0xd3, 0xdf, 0xcf, 0x91, 0x9e, 0x4e, 0x75, 0x82, 0xf6, 0xfe, 0x28, 0x11, 0x4, 0x2, 0xd7}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:21:25.100229 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.967681ms
DB: 2020/08/16 23:21:25.103481 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.215247ms
DB: 2020/08/16 23:21:25.106805 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.270384ms
SaveRDFNode: 2020/08/16 23:21:25.106816 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 23:21:25.106822 saveNode finished waiting...exiting
grmgr: 2020/08/16 23:21:25.106829 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 23:21:25.106842 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.122349 About to run AttachNodeCh: abc  b  9ArtkOJWRamFCYxS1609Wg== Y89RPywLQ2ChiFVKgO5i+w==
anmgr 2020/08/16 23:21:25.122369 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:21:25.122377 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 23:21:25.122383 Looping..... 0
grmgr: 2020/08/16 23:21:25.122545 Looping..... 1
grmgr: 2020/08/16 23:21:25.122732 Looping..... 2
grmgr: 2020/08/16 23:21:25.122898 Looping..... 3
grmgr: 2020/08/16 23:21:25.123075 Looping..... 4
grmgr: 2020/08/16 23:21:25.123254 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:21:25.123264 goroutine about to start 1 cUID,pUID   9ArtkOJWRamFCYxS1609Wg==  Y89RPywLQ2ChiFVKgO5i+w==  
grmgr: 2020/08/16 23:21:25.123489 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:21:25.131195 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.848582ms
DB: 2020/08/16 23:21:25.134166 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.919917ms
DB: 2020/08/16 23:21:25.137758 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.506568ms
anmgr 2020/08/16 23:21:25.138567 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.150275 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 11.915075ms
AttachNode: main 2020/08/16 23:21:25.150289 FetchForUpdate: for parent    Y89RPywLQ2ChiFVKgO5i+w==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:21:25.150295 ** Cache FetchForUpdate Cache Key Value: [Y89RPywLQ2ChiFVKgO5i+w==]   sortk: A#G#:S
FetchNode: 2020/08/16 23:21:25.150301  node: Y89RPywLQ2ChiFVKgO5i+w== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:21:25.150528 FetchForUpdate: for child    9ArtkOJWRamFCYxS1609Wg==
FetchForUpdate: 2020/08/16 23:21:25.150558 ** Cache FetchForUpdate Cache Key Value: [9ArtkOJWRamFCYxS1609Wg==]   sortk: A#
FetchNode: 2020/08/16 23:21:25.150587  node: 9ArtkOJWRamFCYxS1609Wg== subKey: A#
DB: 2020/08/16 23:21:25.152856 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.516399ms
FetchForUpdate: 2020/08/16 23:21:25.152929 len(nb): 1
fetchItems: 2020/08/16 23:21:25.152938 +++  Cache FetchItems for sortk A#G#:S UID: [Y89RPywLQ2ChiFVKgO5i+w==] 
FetchNode: 2020/08/16 23:21:25.152943  node: Y89RPywLQ2ChiFVKgO5i+w== subKey: A#G#:S
anmgr 2020/08/16 23:21:25.154073 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.155347 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.37221ms
DB: 2020/08/16 23:21:25.159430 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.458292ms
DB: 2020/08/16 23:21:25.164816 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 14.179341ms
FetchForUpdate: 2020/08/16 23:21:25.164972 len(nb): 7
fetchItems: 2020/08/16 23:21:25.164982 +++  Cache FetchItems for sortk A# UID: [9ArtkOJWRamFCYxS1609Wg==] 
FetchNode: 2020/08/16 23:21:25.164987  node: 9ArtkOJWRamFCYxS1609Wg== subKey: A#
DB: 2020/08/16 23:21:25.167826 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.808404ms
anmgr 2020/08/16 23:21:25.170695 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:21:25.180478 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.488427ms
DB: 2020/08/16 23:21:25.183917 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.383126ms
anmgr 2020/08/16 23:21:25.186173 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.187538 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.521363ms
DB: 2020/08/16 23:21:25.193813 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.204229ms
DB: 2020/08/16 23:21:25.197321 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.453052ms
DB: 2020/08/16 23:21:25.201830 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.195949ms
anmgr 2020/08/16 23:21:25.202403 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.208180 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.009012ms
DB: 2020/08/16 23:21:25.211726 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.24169ms
DB: 2020/08/16 23:21:25.215660 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.611854ms
anmgr 2020/08/16 23:21:25.217985 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:21:25.221246 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.407651ms
Cache: 2020/08/16 23:21:25.221258 In SetUpredAvailable: pUid, tUID:  Y89RPywLQ2ChiFVKgO5i+w== Y89RPywLQ2ChiFVKgO5i+w== A#G#:S
Cache: 2020/08/16 23:21:25.221264 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:21:25.225025 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.724357ms
Unlock: 2020/08/16 23:21:25.225038 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:21:25.225044 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:21:25.233458 for loop finished 0  8 
anmgr 2020/08/16 23:21:25.233471 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.233488 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.233492 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.248990 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.264370 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.279840 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:21:25.288454 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 63.348051ms
grmgr: 2020/08/16 23:21:25.288472 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:21:25.290244 ** received on attachDoneCh.... 2
anmgr 2020/08/16 23:21:25.290276 About to run AttachNodeCh: c  abc  BJtUUDtTSUqP2qc2oW8+FQ== 9ArtkOJWRamFCYxS1609Wg==
anmgr 2020/08/16 23:21:25.290293 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:21:25.290308 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 23:21:25.290319 Looping..... 0
grmgr: 2020/08/16 23:21:25.290344 Looping..... 1
grmgr: 2020/08/16 23:21:25.290365 Looping..... 2
grmgr: 2020/08/16 23:21:25.290417 Looping..... 3
grmgr: 2020/08/16 23:21:25.290596 Looping..... 4
grmgr: 2020/08/16 23:21:25.290622 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:21:25.290641 goroutine about to start 2 cUID,pUID   BJtUUDtTSUqP2qc2oW8+FQ==  9ArtkOJWRamFCYxS1609Wg==  
grmgr: 2020/08/16 23:21:25.290939 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:21:25.294442 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.726829ms
DB: 2020/08/16 23:21:25.297904 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.429886ms
DB: 2020/08/16 23:21:25.301716 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.73485ms
DB: 2020/08/16 23:21:25.305987 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.094043ms
AttachNode: main 2020/08/16 23:21:25.306000 FetchForUpdate: for parent    9ArtkOJWRamFCYxS1609Wg==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 23:21:25.306006 ** Cache FetchForUpdate Cache Key Value: [9ArtkOJWRamFCYxS1609Wg==]   sortk: A#G#:F
fetchItems: 2020/08/16 23:21:25.306012 +++  Cache FetchItems for sortk A#G#:F UID: [9ArtkOJWRamFCYxS1609Wg==] 
FetchNode: 2020/08/16 23:21:25.306017  node: 9ArtkOJWRamFCYxS1609Wg== subKey: A#G#:F
AttachNode: gr1 2020/08/16 23:21:25.306266 FetchForUpdate: for child    BJtUUDtTSUqP2qc2oW8+FQ==
FetchForUpdate: 2020/08/16 23:21:25.306275 ** Cache FetchForUpdate Cache Key Value: [BJtUUDtTSUqP2qc2oW8+FQ==]   sortk: A#
FetchNode: 2020/08/16 23:21:25.306296  node: BJtUUDtTSUqP2qc2oW8+FQ== subKey: A#
anmgr 2020/08/16 23:21:25.306569 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.309214 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.871926ms
FetchForUpdate: 2020/08/16 23:21:25.309350 len(nb): 7
fetchItems: 2020/08/16 23:21:25.309359 +++  Cache FetchItems for sortk A# UID: [BJtUUDtTSUqP2qc2oW8+FQ==] 
FetchNode: 2020/08/16 23:21:25.309363  node: BJtUUDtTSUqP2qc2oW8+FQ== subKey: A#
DB: 2020/08/16 23:21:25.309751 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.70026ms
DB: 2020/08/16 23:21:25.311836 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.442182ms
DB: 2020/08/16 23:21:25.313791 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.814228ms
DB: 2020/08/16 23:21:25.322151 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.031383ms
anmgr 2020/08/16 23:21:25.322879 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:21:25.325648 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.308692ms
DB: 2020/08/16 23:21:25.329786 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.785035ms
DB: 2020/08/16 23:21:25.335960 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.90345ms
anmgr 2020/08/16 23:21:25.338345 for loop finished 1  8 
anmgr 2020/08/16 23:21:25.338363 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.338371 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.338377 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.339876 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.58354ms
DB: 2020/08/16 23:21:25.343927 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.750375ms
DB: 2020/08/16 23:21:25.350297 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.079241ms
anmgr 2020/08/16 23:21:25.353860 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.354486 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.839987ms
DB: 2020/08/16 23:21:25.358530 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.76259ms
DB: 2020/08/16 23:21:25.362059 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.347769ms
Cache: 2020/08/16 23:21:25.362073 In SetUpredAvailable: pUid, tUID:  9ArtkOJWRamFCYxS1609Wg== 9ArtkOJWRamFCYxS1609Wg== A#G#:F
Cache: 2020/08/16 23:21:25.362078 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:21:25.365604 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.493384ms
Unlock: 2020/08/16 23:21:25.365614 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:21:25.365619 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:21:25.369271 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.369577 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.896973ms
grmgr: 2020/08/16 23:21:25.369593 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:21:25.374423 ** received on attachDoneCh.... 1
anmgr 2020/08/16 23:21:25.379602 About to run AttachNodeCh: b  c  Y89RPywLQ2ChiFVKgO5i+w== BJtUUDtTSUqP2qc2oW8+FQ==
anmgr 2020/08/16 23:21:25.379616 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.379623 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.379628 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:21:25.379635 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 23:21:25.379640 Looping..... 0
grmgr: 2020/08/16 23:21:25.379795 Looping..... 1
grmgr: 2020/08/16 23:21:25.379967 Looping..... 2
grmgr: 2020/08/16 23:21:25.380144 Looping..... 3
grmgr: 2020/08/16 23:21:25.380339 Looping..... 4
grmgr: 2020/08/16 23:21:25.380495 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:21:25.380506 goroutine about to start 3 cUID,pUID   Y89RPywLQ2ChiFVKgO5i+w==  BJtUUDtTSUqP2qc2oW8+FQ==  
grmgr: 2020/08/16 23:21:25.380733 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:21:25.382839 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.265614ms
DB: 2020/08/16 23:21:25.385583 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.715147ms
DB: 2020/08/16 23:21:25.390424 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.737479ms
DB: 2020/08/16 23:21:25.394331 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.714271ms
AttachNode: main 2020/08/16 23:21:25.394344 FetchForUpdate: for parent    BJtUUDtTSUqP2qc2oW8+FQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:21:25.394361 ** Cache FetchForUpdate Cache Key Value: [BJtUUDtTSUqP2qc2oW8+FQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:21:25.394368 +++  Cache FetchItems for sortk A#G#:S UID: [BJtUUDtTSUqP2qc2oW8+FQ==] 
FetchNode: 2020/08/16 23:21:25.394372  node: BJtUUDtTSUqP2qc2oW8+FQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:21:25.394597 FetchForUpdate: for child    Y89RPywLQ2ChiFVKgO5i+w==
FetchForUpdate: 2020/08/16 23:21:25.394606 ** Cache FetchForUpdate Cache Key Value: [Y89RPywLQ2ChiFVKgO5i+w==]   sortk: A#
fetchItems: 2020/08/16 23:21:25.394612 +++  Cache FetchItems for sortk A# UID: [Y89RPywLQ2ChiFVKgO5i+w==] 
FetchNode: 2020/08/16 23:21:25.394630  node: Y89RPywLQ2ChiFVKgO5i+w== subKey: A#
anmgr 2020/08/16 23:21:25.395097 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.397473 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.069846ms
DB: 2020/08/16 23:21:25.398408 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.732191ms
fetchItems: 2020/08/16 23:21:25.398744 +++  Cache FetchItems for sortk A# UID: [Y89RPywLQ2ChiFVKgO5i+w==] 
FetchNode: 2020/08/16 23:21:25.398755  node: Y89RPywLQ2ChiFVKgO5i+w== subKey: A#
DB: 2020/08/16 23:21:25.401532 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.746814ms
DB: 2020/08/16 23:21:25.402477 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.737323ms
anmgr 2020/08/16 23:21:25.411112 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:21:25.411195 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.194337ms
DB: 2020/08/16 23:21:25.415064 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.344285ms
DB: 2020/08/16 23:21:25.418850 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.687065ms
DB: 2020/08/16 23:21:25.424782 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.864973ms
anmgr 2020/08/16 23:21:25.426606 About to run AttachNodeCh: d  abc  rNPfz5GeTnWC9v4oEQQC1w== 9ArtkOJWRamFCYxS1609Wg==
anmgr 2020/08/16 23:21:25.426618 for loop finished 2  8 
anmgr 2020/08/16 23:21:25.426626 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.426633 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.426638 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:21:25.426644 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 23:21:25.426662 Looping..... 0
grmgr: 2020/08/16 23:21:25.426762 Looping..... 1
grmgr: 2020/08/16 23:21:25.426937 Looping..... 2
grmgr: 2020/08/16 23:21:25.427111 Looping..... 3
grmgr: 2020/08/16 23:21:25.427286 Looping..... 4
grmgr: 2020/08/16 23:21:25.427461 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:21:25.427472 goroutine about to start 4 cUID,pUID   rNPfz5GeTnWC9v4oEQQC1w==  9ArtkOJWRamFCYxS1609Wg==  
grmgr: 2020/08/16 23:21:25.427691 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 23:21:25.428090 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.249911ms
DB: 2020/08/16 23:21:25.429707 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.159633ms
DB: 2020/08/16 23:21:25.431604 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.449673ms
DB: 2020/08/16 23:21:25.432798 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.041375ms
DB: 2020/08/16 23:21:25.436091 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.241849ms
DB: 2020/08/16 23:21:25.437353 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.680503ms
DB: 2020/08/16 23:21:25.440187 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.026495ms
AttachNode: main 2020/08/16 23:21:25.440199 FetchForUpdate: for parent    9ArtkOJWRamFCYxS1609Wg==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 23:21:25.440205 ** Cache FetchForUpdate Cache Key Value: [9ArtkOJWRamFCYxS1609Wg==]   sortk: A#G#:F
fetchItems: 2020/08/16 23:21:25.440211 +++  Cache FetchItems for sortk A#G#:F UID: [9ArtkOJWRamFCYxS1609Wg==] 
FetchNode: 2020/08/16 23:21:25.440217  node: 9ArtkOJWRamFCYxS1609Wg== subKey: A#G#:F
AttachNode: gr1 2020/08/16 23:21:25.440408 FetchForUpdate: for child    rNPfz5GeTnWC9v4oEQQC1w==
FetchForUpdate: 2020/08/16 23:21:25.440417 ** Cache FetchForUpdate Cache Key Value: [rNPfz5GeTnWC9v4oEQQC1w==]   sortk: A#
FetchNode: 2020/08/16 23:21:25.440447  node: rNPfz5GeTnWC9v4oEQQC1w== subKey: A#
DB: 2020/08/16 23:21:25.440973 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.564932ms
anmgr 2020/08/16 23:21:25.442191 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.442518 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.256283ms
DB: 2020/08/16 23:21:25.444588 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.097744ms
FetchForUpdate: 2020/08/16 23:21:25.444718 len(nb): 7
fetchItems: 2020/08/16 23:21:25.444727 +++  Cache FetchItems for sortk A# UID: [rNPfz5GeTnWC9v4oEQQC1w==] 
FetchNode: 2020/08/16 23:21:25.444731  node: rNPfz5GeTnWC9v4oEQQC1w== subKey: A#
DB: 2020/08/16 23:21:25.449580 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 8.542896ms
DB: 2020/08/16 23:21:25.450243 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.543034ms
DB: 2020/08/16 23:21:25.453670 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.805277ms
Cache: 2020/08/16 23:21:25.453830 In SetUpredAvailable: pUid, tUID:  BJtUUDtTSUqP2qc2oW8+FQ== BJtUUDtTSUqP2qc2oW8+FQ== A#G#:S
Cache: 2020/08/16 23:21:25.453840 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:21:25.457952 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.06706ms
Unlock: 2020/08/16 23:21:25.457962 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:21:25.457967 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:21:25.458356 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.458367 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.458372 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.458381 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.458386 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.464921 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 20.16001ms
DB: 2020/08/16 23:21:25.470464 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.718964ms
DB: 2020/08/16 23:21:25.473370 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 15.314321ms
grmgr: 2020/08/16 23:21:25.473396 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 23:21:25.473827 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.473836 ** received on attachDoneCh.... 0
DB: 2020/08/16 23:21:25.474754 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.681148ms
anmgr 2020/08/16 23:21:25.484145 About to run AttachNodeCh: c  b  BJtUUDtTSUqP2qc2oW8+FQ== Y89RPywLQ2ChiFVKgO5i+w==
anmgr 2020/08/16 23:21:25.484163 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.484169 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.484174 for loop finished 3  8 
anmgr 2020/08/16 23:21:25.484179 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.484185 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.484189 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:21:25.484196 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 23:21:25.484202 Looping..... 0
DB: 2020/08/16 23:21:25.484351 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 9.079065ms
grmgr: 2020/08/16 23:21:25.484725 Looping..... 1
grmgr: 2020/08/16 23:21:25.484899 Looping..... 2
grmgr: 2020/08/16 23:21:25.485072 Looping..... 3
grmgr: 2020/08/16 23:21:25.485248 Looping..... 4
grmgr: 2020/08/16 23:21:25.485463 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:21:25.485480 goroutine about to start 5 cUID,pUID   BJtUUDtTSUqP2qc2oW8+FQ==  Y89RPywLQ2ChiFVKgO5i+w==  
grmgr: 2020/08/16 23:21:25.485719 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 23:21:25.488562 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.156918ms
Cache: 2020/08/16 23:21:25.488578 In SetUpredAvailable: pUid, tUID:  9ArtkOJWRamFCYxS1609Wg== 9ArtkOJWRamFCYxS1609Wg== A#G#:F
Cache: 2020/08/16 23:21:25.488585 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:21:25.492238 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.615063ms
Unlock: 2020/08/16 23:21:25.492249 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:21:25.492254 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:21:25.496129 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.820375ms
grmgr: 2020/08/16 23:21:25.496145 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 23:21:25.499649 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.499661 ** received on attachDoneCh.... 0
DB: 2020/08/16 23:21:25.501341 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 15.795821ms
DB: 2020/08/16 23:21:25.504414 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.037416ms
DB: 2020/08/16 23:21:25.508001 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.342119ms
anmgr 2020/08/16 23:21:25.510020 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.510035 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.510041 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.510047 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.510056 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.515581 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.183177ms
AttachNode: main 2020/08/16 23:21:25.515595 FetchForUpdate: for parent    Y89RPywLQ2ChiFVKgO5i+w==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:21:25.515610 ** Cache FetchForUpdate Cache Key Value: [Y89RPywLQ2ChiFVKgO5i+w==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:21:25.515617 +++  Cache FetchItems for sortk A#G#:S UID: [Y89RPywLQ2ChiFVKgO5i+w==] 
FetchNode: 2020/08/16 23:21:25.515622  node: Y89RPywLQ2ChiFVKgO5i+w== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:21:25.515816 FetchForUpdate: for child    BJtUUDtTSUqP2qc2oW8+FQ==
FetchForUpdate: 2020/08/16 23:21:25.515840 ** Cache FetchForUpdate Cache Key Value: [BJtUUDtTSUqP2qc2oW8+FQ==]   sortk: A#
fetchItems: 2020/08/16 23:21:25.515847 +++  Cache FetchItems for sortk A# UID: [BJtUUDtTSUqP2qc2oW8+FQ==] 
FetchNode: 2020/08/16 23:21:25.515879  node: BJtUUDtTSUqP2qc2oW8+FQ== subKey: A#
DB: 2020/08/16 23:21:25.517984 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.327666ms
DB: 2020/08/16 23:21:25.519960 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.033707ms
DB: 2020/08/16 23:21:25.525418 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.891418ms
anmgr 2020/08/16 23:21:25.527343 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.527354 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.527360 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.527366 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.527370 for loop finished 4  8 
anmgr 2020/08/16 23:21:25.527375 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.527380 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.527385 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.529609 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.455857ms
DB: 2020/08/16 23:21:25.533012 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.32584ms
DB: 2020/08/16 23:21:25.536116 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.036028ms
DB: 2020/08/16 23:21:25.539447 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.28018ms
Cache: 2020/08/16 23:21:25.539463 In SetUpredAvailable: pUid, tUID:  Y89RPywLQ2ChiFVKgO5i+w== Y89RPywLQ2ChiFVKgO5i+w== A#G#:S
Cache: 2020/08/16 23:21:25.539469 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:21:25.542886 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.381014ms
Unlock: 2020/08/16 23:21:25.542898 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:21:25.542903 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:21:25.545120 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.546898 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.941051ms
grmgr: 2020/08/16 23:21:25.546911 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:21:25.550305 ** received on attachDoneCh.... 1
anmgr 2020/08/16 23:21:25.555447 About to run AttachNodeCh: b  abc  Y89RPywLQ2ChiFVKgO5i+w== 9ArtkOJWRamFCYxS1609Wg==
anmgr 2020/08/16 23:21:25.555466 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.555473 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.555479 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.555487 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.555502 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:21:25.555512 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 23:21:25.555519 Looping..... 0
grmgr: 2020/08/16 23:21:25.555942 Looping..... 1
grmgr: 2020/08/16 23:21:25.556129 Looping..... 2
grmgr: 2020/08/16 23:21:25.556293 Looping..... 3
grmgr: 2020/08/16 23:21:25.556467 Looping..... 4
grmgr: 2020/08/16 23:21:25.556642 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:21:25.556652 goroutine about to start 6 cUID,pUID   Y89RPywLQ2ChiFVKgO5i+w==  9ArtkOJWRamFCYxS1609Wg==  
grmgr: 2020/08/16 23:21:25.557084 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:21:25.558956 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.102858ms
DB: 2020/08/16 23:21:25.561231 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.244316ms
DB: 2020/08/16 23:21:25.564694 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.412018ms
DB: 2020/08/16 23:21:25.568468 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.607607ms
AttachNode: main 2020/08/16 23:21:25.568480 FetchForUpdate: for parent    9ArtkOJWRamFCYxS1609Wg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:21:25.568485 ** Cache FetchForUpdate Cache Key Value: [9ArtkOJWRamFCYxS1609Wg==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:21:25.568492 +++  Cache FetchItems for sortk A#G#:S UID: [9ArtkOJWRamFCYxS1609Wg==] 
FetchNode: 2020/08/16 23:21:25.568496  node: 9ArtkOJWRamFCYxS1609Wg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:21:25.568691 FetchForUpdate: for child    Y89RPywLQ2ChiFVKgO5i+w==
FetchForUpdate: 2020/08/16 23:21:25.568733 ** Cache FetchForUpdate Cache Key Value: [Y89RPywLQ2ChiFVKgO5i+w==]   sortk: A#
fetchItems: 2020/08/16 23:21:25.568755 +++  Cache FetchItems for sortk A# UID: [Y89RPywLQ2ChiFVKgO5i+w==] 
FetchNode: 2020/08/16 23:21:25.568768  node: Y89RPywLQ2ChiFVKgO5i+w== subKey: A#
anmgr 2020/08/16 23:21:25.570952 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.570968 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.570974 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.570980 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.570986 for loop finished 5  8 
anmgr 2020/08/16 23:21:25.570991 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.570997 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.571003 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.571659 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.13ms
DB: 2020/08/16 23:21:25.575502 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.501517ms
anmgr 2020/08/16 23:21:25.586381 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.586396 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.586402 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.586407 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.586413 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.586418 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.586424 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.601316 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 32.500096ms
anmgr 2020/08/16 23:21:25.603975 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.604037 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.604045 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.604051 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.604055 for loop finished 5  8 
anmgr 2020/08/16 23:21:25.604061 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.604066 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.604071 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.609651 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.905641ms
DB: 2020/08/16 23:21:25.613419 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.605418ms
DB: 2020/08/16 23:21:25.617614 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.835443ms
anmgr 2020/08/16 23:21:25.619574 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.619587 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.619592 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.619598 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.619603 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.619609 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.619614 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.623708 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.797068ms
DB: 2020/08/16 23:21:25.627337 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.302884ms
DB: 2020/08/16 23:21:25.631363 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.719631ms
anmgr 2020/08/16 23:21:25.635051 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.635064 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.635070 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.635075 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.635080 for loop finished 5  8 
anmgr 2020/08/16 23:21:25.635084 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.635089 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.635094 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.637415 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.989403ms
DB: 2020/08/16 23:21:25.640880 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.38689ms
DB: 2020/08/16 23:21:25.644811 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.861637ms
DB: 2020/08/16 23:21:25.648892 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.015187ms
Cache: 2020/08/16 23:21:25.648908 In SetUpredAvailable: pUid, tUID:  9ArtkOJWRamFCYxS1609Wg== 9ArtkOJWRamFCYxS1609Wg== A#G#:S
Cache: 2020/08/16 23:21:25.648915 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 23:21:25.650583 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.650597 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.650602 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.650608 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.650625 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.650631 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.650635 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.652516 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.5566ms
Unlock: 2020/08/16 23:21:25.652528 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:21:25.652534 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:21:25.656510 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.910544ms
grmgr: 2020/08/16 23:21:25.656527 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:21:25.660934 ** received on attachDoneCh.... 2
anmgr 2020/08/16 23:21:25.660950 About to run AttachNodeCh: c  abc  BJtUUDtTSUqP2qc2oW8+FQ== 9ArtkOJWRamFCYxS1609Wg==
anmgr 2020/08/16 23:21:25.660957 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.660963 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.660967 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.660972 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.660976 for loop finished 6  8 
anmgr 2020/08/16 23:21:25.660980 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.660985 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.660991 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:21:25.660998 read from AttachNodeCh channel 7 now ASK limiter
grmgr: 2020/08/16 23:21:25.661003 Looping..... 0
grmgr: 2020/08/16 23:21:25.661019 Looping..... 1
grmgr: 2020/08/16 23:21:25.661042 Looping..... 2
grmgr: 2020/08/16 23:21:25.661146 Looping..... 3
grmgr: 2020/08/16 23:21:25.661323 Looping..... 4
grmgr: 2020/08/16 23:21:25.661555 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:21:25.661574 goroutine about to start 7 cUID,pUID   BJtUUDtTSUqP2qc2oW8+FQ==  9ArtkOJWRamFCYxS1609Wg==  
grmgr: 2020/08/16 23:21:25.661981 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:21:25.664630 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.947589ms
DB: 2020/08/16 23:21:25.667434 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.775039ms
DB: 2020/08/16 23:21:25.671152 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.663811ms
DB: 2020/08/16 23:21:25.675103 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.868212ms
AttachNode: main 2020/08/16 23:21:25.675116 FetchForUpdate: for parent    9ArtkOJWRamFCYxS1609Wg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:21:25.675121 ** Cache FetchForUpdate Cache Key Value: [9ArtkOJWRamFCYxS1609Wg==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:21:25.675127 +++  Cache FetchItems for sortk A#G#:S UID: [9ArtkOJWRamFCYxS1609Wg==] 
FetchNode: 2020/08/16 23:21:25.675132  node: 9ArtkOJWRamFCYxS1609Wg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:21:25.675306 FetchForUpdate: for child    BJtUUDtTSUqP2qc2oW8+FQ==
FetchForUpdate: 2020/08/16 23:21:25.675329 ** Cache FetchForUpdate Cache Key Value: [BJtUUDtTSUqP2qc2oW8+FQ==]   sortk: A#
fetchItems: 2020/08/16 23:21:25.675336 +++  Cache FetchItems for sortk A# UID: [BJtUUDtTSUqP2qc2oW8+FQ==] 
FetchNode: 2020/08/16 23:21:25.675349  node: BJtUUDtTSUqP2qc2oW8+FQ== subKey: A#
anmgr 2020/08/16 23:21:25.676698 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.676709 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.676720 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.676725 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.676734 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.676739 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.676744 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.676748 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.676753 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.676758 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.676762 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.676767 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.676771 for loop finished 6  8 
anmgr 2020/08/16 23:21:25.676776 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.676781 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.676786 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.678417 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.022582ms
DB: 2020/08/16 23:21:25.679167 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.003106ms
DB: 2020/08/16 23:21:25.682935 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.624918ms
DB: 2020/08/16 23:21:25.686678 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.655644ms
DB: 2020/08/16 23:21:25.690660 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.673328ms
anmgr 2020/08/16 23:21:25.692366 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.692391 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.692402 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.692414 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.692424 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.692435 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.692444 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.692455 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.692465 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.692477 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.692488 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.692516 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.692527 for loop finished 6  8 
anmgr 2020/08/16 23:21:25.692538 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.692548 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.692558 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:21:25.694317 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.57194ms
DB: 2020/08/16 23:21:25.698920 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.510632ms
Cache: 2020/08/16 23:21:25.698932 In SetUpredAvailable: pUid, tUID:  9ArtkOJWRamFCYxS1609Wg== 9ArtkOJWRamFCYxS1609Wg== A#G#:S
Cache: 2020/08/16 23:21:25.698943 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:21:25.702550 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.569097ms
Unlock: 2020/08/16 23:21:25.702563 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:21:25.702569 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:21:25.706537 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.917322ms
grmgr: 2020/08/16 23:21:25.706555 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:21:25.708257 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.708269 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.708274 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.708279 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.708284 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.708289 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.708307 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.708313 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.708318 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.708323 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.708327 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.708333 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.708337 for loop finished 6  8 
anmgr 2020/08/16 23:21:25.708342 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.708347 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.708352 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.708357 ** received on attachDoneCh.... 0
anmgr 2020/08/16 23:21:25.718685 About to run AttachNodeCh: abc  c  9ArtkOJWRamFCYxS1609Wg== BJtUUDtTSUqP2qc2oW8+FQ==
anmgr 2020/08/16 23:21:25.718703 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.718710 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.718728 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.718734 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.718739 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.718745 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.718751 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.718757 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.718762 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.718768 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:21:25.718773 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.718778 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:21:25.718784 for loop finished 7  8 
attachNode: 2020/08/16 23:21:25.718791 read from AttachNodeCh channel 8 now ASK limiter
grmgr: 2020/08/16 23:21:25.718797 Looping..... 0
grmgr: 2020/08/16 23:21:25.718915 Looping..... 1
grmgr: 2020/08/16 23:21:25.719080 Looping..... 2
grmgr: 2020/08/16 23:21:25.719100 Looping..... 3
grmgr: 2020/08/16 23:21:25.719271 Looping..... 4
grmgr: 2020/08/16 23:21:25.719464 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:21:25.719475 goroutine about to start 8 cUID,pUID   9ArtkOJWRamFCYxS1609Wg==  BJtUUDtTSUqP2qc2oW8+FQ==  
rdfLoader: 2020/08/16 23:21:25.719495 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 23:21:25.719752 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:21:25.722231 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.661114ms
DB: 2020/08/16 23:21:25.725543 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.280277ms
DB: 2020/08/16 23:21:25.729397 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.781823ms
DB: 2020/08/16 23:21:25.734009 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.354426ms
AttachNode: main 2020/08/16 23:21:25.734134 FetchForUpdate: for parent    BJtUUDtTSUqP2qc2oW8+FQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:21:25.734144 ** Cache FetchForUpdate Cache Key Value: [BJtUUDtTSUqP2qc2oW8+FQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:21:25.734150 +++  Cache FetchItems for sortk A#G#:S UID: [BJtUUDtTSUqP2qc2oW8+FQ==] 
FetchNode: 2020/08/16 23:21:25.734156  node: BJtUUDtTSUqP2qc2oW8+FQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:21:25.734366 FetchForUpdate: for child    9ArtkOJWRamFCYxS1609Wg==
FetchForUpdate: 2020/08/16 23:21:25.734387 ** Cache FetchForUpdate Cache Key Value: [9ArtkOJWRamFCYxS1609Wg==]   sortk: A#
fetchItems: 2020/08/16 23:21:25.734393 +++  Cache FetchItems for sortk A# UID: [9ArtkOJWRamFCYxS1609Wg==] 
FetchNode: 2020/08/16 23:21:25.734405  node: 9ArtkOJWRamFCYxS1609Wg== subKey: A#
DB: 2020/08/16 23:21:25.737896 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 13  Duration: 3.407347ms
DB: 2020/08/16 23:21:25.740211 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 6.013695ms
DB: 2020/08/16 23:21:25.744923 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.755834ms
DB: 2020/08/16 23:21:25.749241 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.211992ms
DB: 2020/08/16 23:21:25.752864 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.557447ms
DB: 2020/08/16 23:21:25.756471 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.527884ms
DB: 2020/08/16 23:21:25.760316 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.642072ms
Cache: 2020/08/16 23:21:25.760329 In SetUpredAvailable: pUid, tUID:  BJtUUDtTSUqP2qc2oW8+FQ== BJtUUDtTSUqP2qc2oW8+FQ== A#G#:S
Cache: 2020/08/16 23:21:25.760334 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:21:25.764026 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.656741ms
Unlock: 2020/08/16 23:21:25.764048 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:21:25.764053 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:21:25.768435 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.329623ms
grmgr: 2020/08/16 23:21:25.768454 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 23:21:25.768472 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 23:21:25.768480 11.....
rdfLoader: 2020/08/16 23:21:25.768496 22.....error cnt: 0
rdfuuid: 2020/08/16 23:21:25.768504 Powering down...
errlog: 2020/08/16 23:21:25.768509 Powering down...
grmgr: 2020/08/16 23:21:25.768514 Powering down...
anmgr: 2020/08/16 23:21:25.768519 Powering down...
rdfLoader: 2020/08/16 23:21:25.768543 loader exists.....
DB:2020/08/16 23:30:13 log.go:18: ===============================================================================
anmgr: 2020/08/16 23:30:13.938984 Powering on...
rdfLoader: 2020/08/16 23:30:13.939021 saveNode started......
rdfLoader: 2020/08/16 23:30:13.939026 define saveNode limiter......
rdfuuid: 2020/08/16 23:30:13.939030 Powering on...
grmgr: 2020/08/16 23:30:13.939047 Powering on...
errlog: 2020/08/16 23:30:13.939072 Powering on...
rdfLoader: 2020/08/16 23:30:13.939080  principle goroutines started 
RDFreader: 2020/08/16 23:30:13.939096 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 23:30:13.939110 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 23:30:13.939116 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 23:30:13.939122 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 23:30:13.939127 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 23:30:13.939132 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 23:30:13.939136 spo read:      
RDFreader: 2020/08/16 23:30:13.939140 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 23:30:13.939145 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 23:30:13.939150 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 23:30:13.939154 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 23:30:13.939158 spo read:      
RDFreader: 2020/08/16 23:30:13.939163 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 23:30:13.939168 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 23:30:13.939173 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 23:30:13.939178 spo read:  b  Age  "58"
RDFreader: 2020/08/16 23:30:13.939182 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 23:30:13.939187 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 23:30:13.939192 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 23:30:13.939196 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 23:30:13.939201 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 23:30:13.939205 spo read:      
RDFreader: 2020/08/16 23:30:13.939209 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 23:30:13.939213 Send node batch on channel verifyCh
RDFreader: 2020/08/16 23:30:13.939220 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 23:30:13.939224 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 23:30:13.939229 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 23:30:13.939237 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 23:30:13.939242 spo read:  c  Age  "67"
RDFreader: 2020/08/16 23:30:13.939247 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 23:30:13.939251 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 23:30:13.939256 spo read:  c  Friends  _:abc
RDFreader: 2020/08/16 23:30:13.939260 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 23:30:13.939266 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 23:30:13.939271 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 23:30:13.939276 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 23:30:13.939280 spo read:      
RDFreader: 2020/08/16 23:30:13.939284 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 23:30:13.939289 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 23:30:13.939293 spo read:  d  Friends  _:abc
RDFreader: 2020/08/16 23:30:13.939298 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 23:30:13.939303 spo read:  d  Age  "36"
RDFreader: 2020/08/16 23:30:13.939307 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 23:30:13.939317 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 23:30:13.939320 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 23:30:13.939325 close verify channel
rdfLoader: 2020/08/16 23:30:13.939329 verify started....
rdfLoader: 2020/08/16 23:30:13.939334 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 23:30:13.939337 .  getType..
rdfLoader: 2020/08/16 23:30:13.939344 node.TyName : [Person]
DB: 2020/08/16 23:30:14.011704 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 72.297795ms
grmgr: 2020/08/16 23:30:14.011888 Looping..... 0
grmgr: 2020/08/16 23:30:14.012260 Looping..... 1
grmgr: 2020/08/16 23:30:14.012282 Looping..... 2
grmgr: 2020/08/16 23:30:14.012441 Looping..... 3
grmgr: 2020/08/16 23:30:14.012623 Looping..... 4
grmgr: 2020/08/16 23:30:14.012802 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 23:30:14.012813 .  getType..
rdfLoader: 2020/08/16 23:30:14.012818 node.TyName : [Person]
grmgr: 2020/08/16 23:30:14.012823 Looping..... 0
unmarshalRDF: 2020/08/16 23:30:14.012837 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:30:14.012847 Looping..... 1
grmgr: 2020/08/16 23:30:14.012852 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 23:30:14.012856 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 23:30:14.012864 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 23:30:14.012867 .  getType..
rdfLoader: 2020/08/16 23:30:14.012871 node.TyName : [Person]
grmgr: 2020/08/16 23:30:14.012875 Looping..... 0
rdfLoader: 2020/08/16 23:30:14.012885 Add to SS . [Honda]
rdfLoader: 2020/08/16 23:30:14.012890 Add to SS . [Alfa]
anmgr 2020/08/16 23:30:14.012936 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.012955 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:30:14.012993 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", C:"", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", C:"", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", C:"", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:30:14.012998 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 23:30:14.013008 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:30:14.013030 Looping..... 1
grmgr: 2020/08/16 23:30:14.013035 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 23:30:14.013039 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 23:30:14.013043 Looping..... 0
rdfLoader: 2020/08/16 23:30:14.013052 Add to SS . [Honda]
rdfLoader: 2020/08/16 23:30:14.013056 Add to SS . [VW Golf]
anmgr 2020/08/16 23:30:14.013069 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.013075 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:30:14.013103 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", C:"", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", C:"", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", C:"", Value:58}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:30:14.013123 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 23:30:14.013129 .  getType..
rdfLoader: 2020/08/16 23:30:14.013133 node.TyName : [Person]
unmarshalRDF: 2020/08/16 23:30:14.013142 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:30:14.013166 Looping..... 1
rdfLoader: 2020/08/16 23:30:14.013175 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 23:30:14.013180 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 23:30:14.013184 Add to SS . [Honda]
anmgr 2020/08/16 23:30:14.013198 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.013204 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:30:14.013237 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", C:"", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", C:"C", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", C:"", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", C:"", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:30:14.013247 Exit  unmarshalRDF. 
anmgr 2020/08/16 23:30:14.013253 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/16 23:30:14.013263 Looping..... 2
grmgr: 2020/08/16 23:30:14.013346 Looping..... 3
grmgr: 2020/08/16 23:30:14.013528 Looping..... 4
grmgr: 2020/08/16 23:30:14.013704 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 23:30:14.013723 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 23:30:14.013729 Looping..... 0
grmgr: 2020/08/16 23:30:14.013763 Looping..... 1
SaveRDFNode: xxx 2020/08/16 23:30:14.013773 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.013779 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", C:"", Value:62}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.013786 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.013792 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", C:"", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.013798 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", C:"", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.013804 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.013809 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:30:14.013813 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:30:14.013820 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0000177a0)}
SaveRDFNode: 2020/08/16 23:30:14.013824 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:30:14.013836 UID received  : mm8c8lF9TnCKg2k1knTH8A==
grmgr: 2020/08/16 23:30:14.014086 Looping..... 2
grmgr: 2020/08/16 23:30:14.014263 Looping..... 3
grmgr: 2020/08/16 23:30:14.014438 Looping..... 4
grmgr: 2020/08/16 23:30:14.014613 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 23:30:14.014622 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 23:30:14.014626 Looping..... 0
unmarshalRDF: 2020/08/16 23:30:14.014640 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:30:14.014650 Looping..... 1
rdfLoader: 2020/08/16 23:30:14.014659 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 23:30:14.014697 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", C:"", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", C:"", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", C:"", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:30:14.014702 Exit  unmarshalRDF. 
anmgr 2020/08/16 23:30:14.014708 received on EdgeSnCn. anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
grmgr: 2020/08/16 23:30:14.014718 Looping..... 2
grmgr: 2020/08/16 23:30:14.014791 Looping..... 3
grmgr: 2020/08/16 23:30:14.014965 Looping..... 4
grmgr: 2020/08/16 23:30:14.015143 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 23:30:14.015158 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 23:30:14.015162 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 23:30:14.015171 Looping..... 0
grmgr: 2020/08/16 23:30:14.015200 Looping..... 1
grmgr: 2020/08/16 23:30:14.015205 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 23:30:14.015209 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 23:30:14.015219 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.015226 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.015232 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", C:"", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.015237 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", C:"", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.015243 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", C:"", Value:58}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.015249 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.015255 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:30:14.015259 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:30:14.015264 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017aa0)}
SaveRDFNode: 2020/08/16 23:30:14.015268 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:30:14.015277 UID received  : zf/EKesnSJyGy7bEPnGWkQ==
DB: 2020/08/16 23:30:14.021027 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.145545ms
DB: 2020/08/16 23:30:14.025306 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.989891ms
DB: 2020/08/16 23:30:14.029295 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.952183ms
DB: 2020/08/16 23:30:14.035618 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.072973ms
DB: 2020/08/16 23:30:14.039935 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.280703ms
DB: 2020/08/16 23:30:14.042170 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 21.082607ms
DB: 2020/08/16 23:30:14.044085 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.111926ms
SaveRDFNode: 2020/08/16 23:30:14.044102 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017aa0)}
SaveRDFNode: 2020/08/16 23:30:14.044111 Received UID: X18=
SaveRDFNode: 2020/08/16 23:30:14.044125 a: = db.Item{PKey:[]uint8{0xcd, 0xff, 0xc4, 0x29, 0xeb, 0x27, 0x48, 0x9c, 0x86, 0xcb, 0xb6, 0xc4, 0x3e, 0x71, 0x96, 0x91}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:30:14.046100 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.884094ms
DB: 2020/08/16 23:30:14.049463 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.27036ms
SaveRDFNode: 2020/08/16 23:30:14.049480 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017aa0)}
SaveRDFNode: 2020/08/16 23:30:14.049487 Received UID: X18=
SaveRDFNode: 2020/08/16 23:30:14.049498 a: = db.Item{PKey:[]uint8{0xcd, 0xff, 0xc4, 0x29, 0xeb, 0x27, 0x48, 0x9c, 0x86, 0xcb, 0xb6, 0xc4, 0x3e, 0x71, 0x96, 0x91}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:30:14.050631 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.322143ms
DB: 2020/08/16 23:30:14.054301 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.765065ms
DB: 2020/08/16 23:30:14.055868 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.184043ms
SaveRDFNode: 2020/08/16 23:30:14.055881 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000177a0)}
SaveRDFNode: 2020/08/16 23:30:14.055888 Received UID: X18=
SaveRDFNode: 2020/08/16 23:30:14.055898 a: = db.Item{PKey:[]uint8{0x9a, 0x6f, 0x1c, 0xf2, 0x51, 0x7d, 0x4e, 0x70, 0x8a, 0x83, 0x69, 0x35, 0x92, 0x74, 0xc7, 0xf0}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:30:14.058342 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.008525ms
DB: 2020/08/16 23:30:14.060415 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.487812ms
SaveRDFNode: 2020/08/16 23:30:14.060427 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0000177a0)}
SaveRDFNode: 2020/08/16 23:30:14.060433 Received UID: X18=
SaveRDFNode: 2020/08/16 23:30:14.060443 a: = db.Item{PKey:[]uint8{0x9a, 0x6f, 0x1c, 0xf2, 0x51, 0x7d, 0x4e, 0x70, 0x8a, 0x83, 0x69, 0x35, 0x92, 0x74, 0xc7, 0xf0}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:30:14.062309 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.935652ms
DB: 2020/08/16 23:30:14.064411 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.937479ms
DB: 2020/08/16 23:30:14.066718 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.2263ms
SaveRDFNode: 2020/08/16 23:30:14.066729 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:30:14.066737 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 23:30:14.066742 Send ack to waiting saveNode...
grmgr: 2020/08/16 23:30:14.066751 Looping..... 0
grmgr: 2020/08/16 23:30:14.066847 Looping..... 1
grmgr: 2020/08/16 23:30:14.066857 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 23:30:14.066861 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 23:30:14.066871 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.066878 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", C:"", Value:67}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.066886 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", C:"C", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.066892 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", C:"", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.066898 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", C:"", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.066904 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.066909 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:30:14.066913 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:30:14.066919 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000348240)}
SaveRDFNode: 2020/08/16 23:30:14.066923 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:30:14.066934 UID received  : tGbMJWLNQD+FLw1hKdGtZQ==
DB: 2020/08/16 23:30:14.070978 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.997979ms
DB: 2020/08/16 23:30:14.073453 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.010047ms
DB: 2020/08/16 23:30:14.075043 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.029907ms
DB: 2020/08/16 23:30:14.077773 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.27466ms
DB: 2020/08/16 23:30:14.079343 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.265558ms
DB: 2020/08/16 23:30:14.083714 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.324637ms
DB: 2020/08/16 23:30:14.088132 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.379331ms
SaveRDFNode: 2020/08/16 23:30:14.088148 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000348240)}
SaveRDFNode: 2020/08/16 23:30:14.088156 Received UID: X18=
SaveRDFNode: 2020/08/16 23:30:14.088169 a: = db.Item{PKey:[]uint8{0xb4, 0x66, 0xcc, 0x25, 0x62, 0xcd, 0x40, 0x3f, 0x85, 0x2f, 0xd, 0x61, 0x29, 0xd1, 0xad, 0x65}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:30:14.089421 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 11.474324ms
SaveRDFNode: 2020/08/16 23:30:14.089433 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:30:14.089441 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 23:30:14.089446 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 23:30:14.089479 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.089486 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", C:"", Value:36}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.089494 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.089501 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", C:"", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.089531 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", C:"", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.089538 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:30:14.089544 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:30:14.089548 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:30:14.089554 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0003497a0)}
SaveRDFNode: 2020/08/16 23:30:14.089559 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:30:14.089570 UID received  : VcQZHDkqQpSuxTG6Fw2AZA==
grmgr: 2020/08/16 23:30:14.089781 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 23:30:14.093502 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.297061ms
SaveRDFNode: 2020/08/16 23:30:14.093691 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000348240)}
SaveRDFNode: 2020/08/16 23:30:14.093704 Received UID: X18=
SaveRDFNode: 2020/08/16 23:30:14.093715 a: = db.Item{PKey:[]uint8{0xb4, 0x66, 0xcc, 0x25, 0x62, 0xcd, 0x40, 0x3f, 0x85, 0x2f, 0xd, 0x61, 0x29, 0xd1, 0xad, 0x65}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:30:14.096839 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.240722ms
DB: 2020/08/16 23:30:14.098369 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.620083ms
DB: 2020/08/16 23:30:14.101053 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.180646ms
DB: 2020/08/16 23:30:14.102152 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.742037ms
DB: 2020/08/16 23:30:14.104880 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.79143ms
DB: 2020/08/16 23:30:14.106027 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.812158ms
DB: 2020/08/16 23:30:14.109122 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.208027ms
DB: 2020/08/16 23:30:14.110291 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.232186ms
DB: 2020/08/16 23:30:14.114392 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.068015ms
SaveRDFNode: 2020/08/16 23:30:14.114403 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:30:14.114413 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 23:30:14.114770 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.429082ms
SaveRDFNode: 2020/08/16 23:30:14.114783 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003497a0)}
SaveRDFNode: 2020/08/16 23:30:14.114791 Received UID: X18=
SaveRDFNode: 2020/08/16 23:30:14.114805 a: = db.Item{PKey:[]uint8{0x55, 0xc4, 0x19, 0x1c, 0x39, 0x2a, 0x42, 0x94, 0xae, 0xc5, 0x31, 0xba, 0x17, 0xd, 0x80, 0x64}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:30:14.119556 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.695669ms
SaveRDFNode: 2020/08/16 23:30:14.119572 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003497a0)}
SaveRDFNode: 2020/08/16 23:30:14.119579 Received UID: X18=
SaveRDFNode: 2020/08/16 23:30:14.119591 a: = db.Item{PKey:[]uint8{0x55, 0xc4, 0x19, 0x1c, 0x39, 0x2a, 0x42, 0x94, 0xae, 0xc5, 0x31, 0xba, 0x17, 0xd, 0x80, 0x64}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:30:14.124212 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.584492ms
DB: 2020/08/16 23:30:14.128602 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.355605ms
DB: 2020/08/16 23:30:14.132828 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.031751ms
SaveRDFNode: 2020/08/16 23:30:14.132841 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 23:30:14.132849 saveNode finished waiting...exiting
grmgr: 2020/08/16 23:30:14.132857 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 23:30:14.132870 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.148378 About to run AttachNodeCh: abc  b  mm8c8lF9TnCKg2k1knTH8A== zf/EKesnSJyGy7bEPnGWkQ==
anmgr 2020/08/16 23:30:14.148410 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:30:14.148419 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 23:30:14.148426 Looping..... 0
grmgr: 2020/08/16 23:30:14.148615 Looping..... 1
grmgr: 2020/08/16 23:30:14.148812 Looping..... 2
grmgr: 2020/08/16 23:30:14.148981 Looping..... 3
grmgr: 2020/08/16 23:30:14.149160 Looping..... 4
grmgr: 2020/08/16 23:30:14.149337 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:30:14.149348 goroutine about to start 1 cUID,pUID   mm8c8lF9TnCKg2k1knTH8A==  zf/EKesnSJyGy7bEPnGWkQ==  
grmgr: 2020/08/16 23:30:14.149643 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:30:14.154438 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 5.002445ms
DB: 2020/08/16 23:30:14.157962 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.468541ms
DB: 2020/08/16 23:30:14.162457 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.413585ms
anmgr 2020/08/16 23:30:14.163935 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.169705 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.329257ms
AttachNode: main 2020/08/16 23:30:14.169722 FetchForUpdate: for parent    zf/EKesnSJyGy7bEPnGWkQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:30:14.169727 ** Cache FetchForUpdate Cache Key Value: [zf/EKesnSJyGy7bEPnGWkQ==]   sortk: A#G#:S
FetchNode: 2020/08/16 23:30:14.169734  node: zf/EKesnSJyGy7bEPnGWkQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:30:14.169942 FetchForUpdate: for child    mm8c8lF9TnCKg2k1knTH8A==
FetchForUpdate: 2020/08/16 23:30:14.169951 ** Cache FetchForUpdate Cache Key Value: [mm8c8lF9TnCKg2k1knTH8A==]   sortk: A#
FetchNode: 2020/08/16 23:30:14.169970  node: mm8c8lF9TnCKg2k1knTH8A== subKey: A#
DB: 2020/08/16 23:30:14.172644 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.87458ms
FetchForUpdate: 2020/08/16 23:30:14.172692 len(nb): 1
fetchItems: 2020/08/16 23:30:14.172699 +++  Cache FetchItems for sortk A#G#:S UID: [zf/EKesnSJyGy7bEPnGWkQ==] 
FetchNode: 2020/08/16 23:30:14.172704  node: zf/EKesnSJyGy7bEPnGWkQ== subKey: A#G#:S
DB: 2020/08/16 23:30:14.175526 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.79267ms
DB: 2020/08/16 23:30:14.179513 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.887356ms
anmgr 2020/08/16 23:30:14.179772 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.187355 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 17.316005ms
FetchForUpdate: 2020/08/16 23:30:14.187515 len(nb): 7
fetchItems: 2020/08/16 23:30:14.187526 +++  Cache FetchItems for sortk A# UID: [mm8c8lF9TnCKg2k1knTH8A==] 
FetchNode: 2020/08/16 23:30:14.187531  node: mm8c8lF9TnCKg2k1knTH8A== subKey: A#
DB: 2020/08/16 23:30:14.190179 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.611612ms
anmgr 2020/08/16 23:30:14.196455 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:30:14.201236 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.964973ms
DB: 2020/08/16 23:30:14.205551 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.119512ms
DB: 2020/08/16 23:30:14.209949 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.016748ms
anmgr 2020/08/16 23:30:14.211897 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.215987 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.734419ms
DB: 2020/08/16 23:30:14.219553 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.251152ms
DB: 2020/08/16 23:30:14.223467 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.563436ms
anmgr 2020/08/16 23:30:14.227362 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.229635 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.88742ms
DB: 2020/08/16 23:30:14.233469 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.545303ms
DB: 2020/08/16 23:30:14.237586 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.810829ms
DB: 2020/08/16 23:30:14.241371 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.611773ms
Cache: 2020/08/16 23:30:14.241384 In SetUpredAvailable: pUid, tUID:  zf/EKesnSJyGy7bEPnGWkQ== zf/EKesnSJyGy7bEPnGWkQ== A#G#:S
Cache: 2020/08/16 23:30:14.241399 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 23:30:14.242999 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:30:14.249619 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 8.183475ms
Unlock: 2020/08/16 23:30:14.249633 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:30:14.249639 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:30:14.258526 for loop finished 0  8 
anmgr 2020/08/16 23:30:14.258544 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.258552 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.258557 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.259240 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 9.540589ms
grmgr: 2020/08/16 23:30:14.259255 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:30:14.263726 ** received on attachDoneCh.... 1
anmgr 2020/08/16 23:30:14.268841 About to run AttachNodeCh: abc  c  mm8c8lF9TnCKg2k1knTH8A== tGbMJWLNQD+FLw1hKdGtZQ==
anmgr 2020/08/16 23:30:14.268870 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:30:14.268878 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 23:30:14.268884 Looping..... 0
grmgr: 2020/08/16 23:30:14.268904 Looping..... 1
grmgr: 2020/08/16 23:30:14.269008 Looping..... 2
grmgr: 2020/08/16 23:30:14.269193 Looping..... 3
grmgr: 2020/08/16 23:30:14.269367 Looping..... 4
grmgr: 2020/08/16 23:30:14.269543 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:30:14.269553 goroutine about to start 2 cUID,pUID   mm8c8lF9TnCKg2k1knTH8A==  tGbMJWLNQD+FLw1hKdGtZQ==  
grmgr: 2020/08/16 23:30:14.269788 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:30:14.272736 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.098717ms
DB: 2020/08/16 23:30:14.275136 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.369577ms
DB: 2020/08/16 23:30:14.279072 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.860423ms
DB: 2020/08/16 23:30:14.283219 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.957914ms
AttachNode: main 2020/08/16 23:30:14.283232 FetchForUpdate: for parent    tGbMJWLNQD+FLw1hKdGtZQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:30:14.283237 ** Cache FetchForUpdate Cache Key Value: [tGbMJWLNQD+FLw1hKdGtZQ==]   sortk: A#G#:S
FetchNode: 2020/08/16 23:30:14.283243  node: tGbMJWLNQD+FLw1hKdGtZQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:30:14.283453 FetchForUpdate: for child    mm8c8lF9TnCKg2k1knTH8A==
FetchForUpdate: 2020/08/16 23:30:14.283485 ** Cache FetchForUpdate Cache Key Value: [mm8c8lF9TnCKg2k1knTH8A==]   sortk: A#
fetchItems: 2020/08/16 23:30:14.283492 +++  Cache FetchItems for sortk A# UID: [mm8c8lF9TnCKg2k1knTH8A==] 
FetchNode: 2020/08/16 23:30:14.283505  node: mm8c8lF9TnCKg2k1knTH8A== subKey: A#
anmgr 2020/08/16 23:30:14.284631 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.286447 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.168343ms
FetchForUpdate: 2020/08/16 23:30:14.286514 len(nb): 1
fetchItems: 2020/08/16 23:30:14.286522 +++  Cache FetchItems for sortk A#G#:S UID: [tGbMJWLNQD+FLw1hKdGtZQ==] 
FetchNode: 2020/08/16 23:30:14.286527  node: tGbMJWLNQD+FLw1hKdGtZQ== subKey: A#G#:S
DB: 2020/08/16 23:30:14.288418 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.868814ms
DB: 2020/08/16 23:30:14.289264 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.709722ms
DB: 2020/08/16 23:30:14.293071 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.595571ms
DB: 2020/08/16 23:30:14.299085 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.621146ms
anmgr 2020/08/16 23:30:14.300170 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:30:14.302726 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.469813ms
DB: 2020/08/16 23:30:14.306943 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.838992ms
DB: 2020/08/16 23:30:14.313397 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.139099ms
anmgr 2020/08/16 23:30:14.315655 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.317389 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.706834ms
DB: 2020/08/16 23:30:14.321093 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.63674ms
DB: 2020/08/16 23:30:14.326904 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.734267ms
DB: 2020/08/16 23:30:14.330747 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.558032ms
anmgr 2020/08/16 23:30:14.331238 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.334552 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.491266ms
DB: 2020/08/16 23:30:14.338174 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.563878ms
Cache: 2020/08/16 23:30:14.338188 In SetUpredAvailable: pUid, tUID:  tGbMJWLNQD+FLw1hKdGtZQ== tGbMJWLNQD+FLw1hKdGtZQ== A#G#:S
Cache: 2020/08/16 23:30:14.338193 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:30:14.342657 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.430287ms
Unlock: 2020/08/16 23:30:14.342667 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:30:14.342672 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:30:14.346710 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:30:14.347263 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.521362ms
grmgr: 2020/08/16 23:30:14.347278 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:30:14.351885 ** received on attachDoneCh.... 1
anmgr 2020/08/16 23:30:14.357056 About to run AttachNodeCh: d  abc  VcQZHDkqQpSuxTG6Fw2AZA== mm8c8lF9TnCKg2k1knTH8A==
anmgr 2020/08/16 23:30:14.357068 for loop finished 2  8 
anmgr 2020/08/16 23:30:14.357075 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.357081 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.357086 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.357091 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.357096 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:30:14.357104 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 23:30:14.357109 Looping..... 0
grmgr: 2020/08/16 23:30:14.357124 Looping..... 1
grmgr: 2020/08/16 23:30:14.357217 Looping..... 2
grmgr: 2020/08/16 23:30:14.357395 Looping..... 3
grmgr: 2020/08/16 23:30:14.357591 Looping..... 4
grmgr: 2020/08/16 23:30:14.357786 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:30:14.357797 goroutine about to start 3 cUID,pUID   VcQZHDkqQpSuxTG6Fw2AZA==  mm8c8lF9TnCKg2k1knTH8A==  
grmgr: 2020/08/16 23:30:14.358010 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:30:14.360626 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.755702ms
DB: 2020/08/16 23:30:14.364072 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.418732ms
DB: 2020/08/16 23:30:14.367829 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.701733ms
DB: 2020/08/16 23:30:14.371581 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.684779ms
AttachNode: main 2020/08/16 23:30:14.371595 FetchForUpdate: for parent    mm8c8lF9TnCKg2k1knTH8A==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 23:30:14.371600 ** Cache FetchForUpdate Cache Key Value: [mm8c8lF9TnCKg2k1knTH8A==]   sortk: A#G#:F
fetchItems: 2020/08/16 23:30:14.371606 +++  Cache FetchItems for sortk A#G#:F UID: [mm8c8lF9TnCKg2k1knTH8A==] 
FetchNode: 2020/08/16 23:30:14.371611  node: mm8c8lF9TnCKg2k1knTH8A== subKey: A#G#:F
AttachNode: gr1 2020/08/16 23:30:14.371769 FetchForUpdate: for child    VcQZHDkqQpSuxTG6Fw2AZA==
FetchForUpdate: 2020/08/16 23:30:14.371792 ** Cache FetchForUpdate Cache Key Value: [VcQZHDkqQpSuxTG6Fw2AZA==]   sortk: A#
FetchNode: 2020/08/16 23:30:14.371807  node: VcQZHDkqQpSuxTG6Fw2AZA== subKey: A#
anmgr 2020/08/16 23:30:14.372541 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.374645 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.002769ms
DB: 2020/08/16 23:30:14.375134 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.278852ms
FetchForUpdate: 2020/08/16 23:30:14.375514 len(nb): 7
fetchItems: 2020/08/16 23:30:14.375530 +++  Cache FetchItems for sortk A# UID: [VcQZHDkqQpSuxTG6Fw2AZA==] 
FetchNode: 2020/08/16 23:30:14.375535  node: VcQZHDkqQpSuxTG6Fw2AZA== subKey: A#
DB: 2020/08/16 23:30:14.378183 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.434908ms
DB: 2020/08/16 23:30:14.379586 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.95299ms
DB: 2020/08/16 23:30:14.387778 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.00282ms
anmgr 2020/08/16 23:30:14.388486 About to run AttachNodeCh: b  c  zf/EKesnSJyGy7bEPnGWkQ== tGbMJWLNQD+FLw1hKdGtZQ==
anmgr 2020/08/16 23:30:14.388502 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/16 23:30:14.388510 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 23:30:14.388515 Looping..... 0
grmgr: 2020/08/16 23:30:14.388538 Looping..... 1
grmgr: 2020/08/16 23:30:14.388680 Looping..... 2
grmgr: 2020/08/16 23:30:14.388861 Looping..... 3
grmgr: 2020/08/16 23:30:14.389019 Looping..... 4
grmgr: 2020/08/16 23:30:14.389189 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:30:14.389201 goroutine about to start 4 cUID,pUID   zf/EKesnSJyGy7bEPnGWkQ==  tGbMJWLNQD+FLw1hKdGtZQ==  
grmgr: 2020/08/16 23:30:14.389423 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 23:30:14.391782 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.951136ms
DB: 2020/08/16 23:30:14.392421 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.141638ms
DB: 2020/08/16 23:30:14.394654 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.201986ms
DB: 2020/08/16 23:30:14.396231 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.08005ms
DB: 2020/08/16 23:30:14.398332 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.627122ms
DB: 2020/08/16 23:30:14.402703 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.189559ms
AttachNode: main 2020/08/16 23:30:14.402730 FetchForUpdate: for parent    tGbMJWLNQD+FLw1hKdGtZQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:30:14.402736 ** Cache FetchForUpdate Cache Key Value: [tGbMJWLNQD+FLw1hKdGtZQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:30:14.402741 +++  Cache FetchItems for sortk A#G#:S UID: [tGbMJWLNQD+FLw1hKdGtZQ==] 
FetchNode: 2020/08/16 23:30:14.402745  node: tGbMJWLNQD+FLw1hKdGtZQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:30:14.402959 FetchForUpdate: for child    zf/EKesnSJyGy7bEPnGWkQ==
FetchForUpdate: 2020/08/16 23:30:14.402973 ** Cache FetchForUpdate Cache Key Value: [zf/EKesnSJyGy7bEPnGWkQ==]   sortk: A#
fetchItems: 2020/08/16 23:30:14.402979 +++  Cache FetchItems for sortk A# UID: [zf/EKesnSJyGy7bEPnGWkQ==] 
FetchNode: 2020/08/16 23:30:14.402989  node: zf/EKesnSJyGy7bEPnGWkQ== subKey: A#
DB: 2020/08/16 23:30:14.403462 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.9251ms
anmgr 2020/08/16 23:30:14.404021 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.407179 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.151168ms
fetchItems: 2020/08/16 23:30:14.407512 +++  Cache FetchItems for sortk A# UID: [zf/EKesnSJyGy7bEPnGWkQ==] 
FetchNode: 2020/08/16 23:30:14.407523  node: zf/EKesnSJyGy7bEPnGWkQ== subKey: A#
DB: 2020/08/16 23:30:14.408176 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.379962ms
DB: 2020/08/16 23:30:14.412352 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.78539ms
DB: 2020/08/16 23:30:14.414420 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 10.667014ms
DB: 2020/08/16 23:30:14.417576 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 9.005517ms
DB: 2020/08/16 23:30:14.421281 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.382842ms
anmgr 2020/08/16 23:30:14.422140 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.436011 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 17.803107ms
anmgr 2020/08/16 23:30:14.437608 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.437621 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.437627 for loop finished 2  8 
anmgr 2020/08/16 23:30:14.437632 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.437638 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.437643 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.437648 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.437653 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.439467 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 17.658007ms
DB: 2020/08/16 23:30:14.443320 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.798641ms
DB: 2020/08/16 23:30:14.446862 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.471308ms
DB: 2020/08/16 23:30:14.450647 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.728004ms
Cache: 2020/08/16 23:30:14.450660 In SetUpredAvailable: pUid, tUID:  mm8c8lF9TnCKg2k1knTH8A== mm8c8lF9TnCKg2k1knTH8A== A#G#:F
Cache: 2020/08/16 23:30:14.450665 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 23:30:14.453075 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.453099 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.453105 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:30:14.453624 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 16.988788ms
DB: 2020/08/16 23:30:14.454579 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.875206ms
Unlock: 2020/08/16 23:30:14.454589 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:30:14.454593 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:30:14.457464 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.776824ms
DB: 2020/08/16 23:30:14.461369 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.648039ms
Cache: 2020/08/16 23:30:14.461382 In SetUpredAvailable: pUid, tUID:  tGbMJWLNQD+FLw1hKdGtZQ== tGbMJWLNQD+FLw1hKdGtZQ== A#G#:S
Cache: 2020/08/16 23:30:14.461386 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:30:14.462694 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.046871ms
grmgr: 2020/08/16 23:30:14.462708 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 23:30:14.463443 ** received on attachDoneCh.... 2
anmgr 2020/08/16 23:30:14.463456 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.466357 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.932965ms
Unlock: 2020/08/16 23:30:14.466378 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:30:14.466386 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:30:14.470962 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.482363ms
grmgr: 2020/08/16 23:30:14.471123 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:30:14.473783 ** received on attachDoneCh.... 2
anmgr 2020/08/16 23:30:14.473800 About to run AttachNodeCh: c  abc  tGbMJWLNQD+FLw1hKdGtZQ== mm8c8lF9TnCKg2k1knTH8A==
anmgr 2020/08/16 23:30:14.473808 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:30:14.473815 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 23:30:14.473820 Looping..... 0
grmgr: 2020/08/16 23:30:14.473968 Looping..... 1
grmgr: 2020/08/16 23:30:14.473990 Looping..... 2
grmgr: 2020/08/16 23:30:14.474145 Looping..... 3
grmgr: 2020/08/16 23:30:14.474319 Looping..... 4
grmgr: 2020/08/16 23:30:14.474495 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:30:14.474505 goroutine about to start 5 cUID,pUID   tGbMJWLNQD+FLw1hKdGtZQ==  mm8c8lF9TnCKg2k1knTH8A==  
grmgr: 2020/08/16 23:30:14.474721 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:30:14.477344 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.779161ms
DB: 2020/08/16 23:30:14.479964 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.591444ms
DB: 2020/08/16 23:30:14.483657 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.64861ms
DB: 2020/08/16 23:30:14.488053 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.094211ms
AttachNode: main 2020/08/16 23:30:14.488202 FetchForUpdate: for parent    mm8c8lF9TnCKg2k1knTH8A==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:30:14.488212 ** Cache FetchForUpdate Cache Key Value: [mm8c8lF9TnCKg2k1knTH8A==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:30:14.488218 +++  Cache FetchItems for sortk A#G#:S UID: [mm8c8lF9TnCKg2k1knTH8A==] 
FetchNode: 2020/08/16 23:30:14.488222  node: mm8c8lF9TnCKg2k1knTH8A== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:30:14.488406 FetchForUpdate: for child    tGbMJWLNQD+FLw1hKdGtZQ==
FetchForUpdate: 2020/08/16 23:30:14.488414 ** Cache FetchForUpdate Cache Key Value: [tGbMJWLNQD+FLw1hKdGtZQ==]   sortk: A#
fetchItems: 2020/08/16 23:30:14.488420 +++  Cache FetchItems for sortk A# UID: [tGbMJWLNQD+FLw1hKdGtZQ==] 
FetchNode: 2020/08/16 23:30:14.488453  node: tGbMJWLNQD+FLw1hKdGtZQ== subKey: A#
anmgr 2020/08/16 23:30:14.489306 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.489318 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.489322 for loop finished 4  8 
anmgr 2020/08/16 23:30:14.489330 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.489336 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.489340 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.489345 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.489350 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.491232 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.958923ms
DB: 2020/08/16 23:30:14.492204 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.70492ms
DB: 2020/08/16 23:30:14.495551 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.957786ms
DB: 2020/08/16 23:30:14.501581 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.884844ms
DB: 2020/08/16 23:30:14.505253 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.412438ms
anmgr 2020/08/16 23:30:14.506221 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.506250 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.506256 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:30:14.509811 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.791358ms
DB: 2020/08/16 23:30:14.516219 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.908544ms
DB: 2020/08/16 23:30:14.520001 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.374573ms
anmgr 2020/08/16 23:30:14.522008 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.522023 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.522029 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.524116 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.524849ms
DB: 2020/08/16 23:30:14.530604 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.98889ms
DB: 2020/08/16 23:30:14.534369 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.349726ms
anmgr 2020/08/16 23:30:14.537529 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.537545 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.537550 for loop finished 4  8 
anmgr 2020/08/16 23:30:14.537556 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.537573 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.537579 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.537584 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.537589 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.538479 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.650341ms
DB: 2020/08/16 23:30:14.542475 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.492599ms
Cache: 2020/08/16 23:30:14.542489 In SetUpredAvailable: pUid, tUID:  mm8c8lF9TnCKg2k1knTH8A== mm8c8lF9TnCKg2k1knTH8A== A#G#:S
Cache: 2020/08/16 23:30:14.542494 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:30:14.546364 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.821741ms
Unlock: 2020/08/16 23:30:14.546374 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:30:14.546378 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:30:14.550663 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.230118ms
grmgr: 2020/08/16 23:30:14.550678 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:30:14.553120 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.553131 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.553137 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.553142 ** received on attachDoneCh.... 0
anmgr 2020/08/16 23:30:14.563493 About to run AttachNodeCh: c  abc  tGbMJWLNQD+FLw1hKdGtZQ== mm8c8lF9TnCKg2k1knTH8A==
anmgr 2020/08/16 23:30:14.563510 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.563517 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.563522 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:30:14.563529 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 23:30:14.563535 Looping..... 0
grmgr: 2020/08/16 23:30:14.563704 Looping..... 1
grmgr: 2020/08/16 23:30:14.563879 Looping..... 2
grmgr: 2020/08/16 23:30:14.564053 Looping..... 3
grmgr: 2020/08/16 23:30:14.564240 Looping..... 4
grmgr: 2020/08/16 23:30:14.564415 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:30:14.564426 goroutine about to start 6 cUID,pUID   tGbMJWLNQD+FLw1hKdGtZQ==  mm8c8lF9TnCKg2k1knTH8A==  
grmgr: 2020/08/16 23:30:14.564639 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:30:14.567738 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.250828ms
DB: 2020/08/16 23:30:14.570308 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.53983ms
DB: 2020/08/16 23:30:14.574159 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.766995ms
DB: 2020/08/16 23:30:14.578924 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.276163ms
AttachNode: main 2020/08/16 23:30:14.579079 FetchForUpdate: for parent    mm8c8lF9TnCKg2k1knTH8A==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 23:30:14.579089 ** Cache FetchForUpdate Cache Key Value: [mm8c8lF9TnCKg2k1knTH8A==]   sortk: A#G#:F
fetchItems: 2020/08/16 23:30:14.579095 +++  Cache FetchItems for sortk A#G#:F UID: [mm8c8lF9TnCKg2k1knTH8A==] 
FetchNode: 2020/08/16 23:30:14.579101  node: mm8c8lF9TnCKg2k1knTH8A== subKey: A#G#:F
AttachNode: gr1 2020/08/16 23:30:14.579283 FetchForUpdate: for child    tGbMJWLNQD+FLw1hKdGtZQ==
FetchForUpdate: 2020/08/16 23:30:14.579292 ** Cache FetchForUpdate Cache Key Value: [tGbMJWLNQD+FLw1hKdGtZQ==]   sortk: A#
fetchItems: 2020/08/16 23:30:14.579298 +++  Cache FetchItems for sortk A# UID: [tGbMJWLNQD+FLw1hKdGtZQ==] 
FetchNode: 2020/08/16 23:30:14.579328  node: tGbMJWLNQD+FLw1hKdGtZQ== subKey: A#
anmgr 2020/08/16 23:30:14.579579 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.579589 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.579599 for loop finished 5  8 
anmgr 2020/08/16 23:30:14.579604 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.579609 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.579614 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.579619 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.579623 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.582510 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.375311ms
DB: 2020/08/16 23:30:14.583777 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.385598ms
DB: 2020/08/16 23:30:14.586674 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.777819ms
DB: 2020/08/16 23:30:14.590974 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.753759ms
DB: 2020/08/16 23:30:14.595092 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.667216ms
anmgr 2020/08/16 23:30:14.595953 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.595971 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.595976 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.595981 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.596002 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.596008 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.596012 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.599224 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.496809ms
DB: 2020/08/16 23:30:14.603552 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.067399ms
Cache: 2020/08/16 23:30:14.603566 In SetUpredAvailable: pUid, tUID:  mm8c8lF9TnCKg2k1knTH8A== mm8c8lF9TnCKg2k1knTH8A== A#G#:F
Cache: 2020/08/16 23:30:14.603571 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:30:14.607129 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.522231ms
Unlock: 2020/08/16 23:30:14.607139 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:30:14.607144 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:30:14.611452 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.611468 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.611473 for loop finished 5  8 
anmgr 2020/08/16 23:30:14.611479 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.611485 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.611490 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.611496 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.611501 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.612517 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.321172ms
grmgr: 2020/08/16 23:30:14.612532 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:30:14.616693 ** received on attachDoneCh.... 1
anmgr 2020/08/16 23:30:14.621899 About to run AttachNodeCh: b  abc  zf/EKesnSJyGy7bEPnGWkQ== mm8c8lF9TnCKg2k1knTH8A==
anmgr 2020/08/16 23:30:14.621916 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.621930 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.621935 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.621940 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.621945 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.621950 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.621954 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:30:14.621960 read from AttachNodeCh channel 7 now ASK limiter
grmgr: 2020/08/16 23:30:14.621968 Looping..... 0
grmgr: 2020/08/16 23:30:14.622071 Looping..... 1
grmgr: 2020/08/16 23:30:14.622247 Looping..... 2
grmgr: 2020/08/16 23:30:14.622424 Looping..... 3
grmgr: 2020/08/16 23:30:14.622600 Looping..... 4
grmgr: 2020/08/16 23:30:14.622790 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:30:14.622801 goroutine about to start 7 cUID,pUID   zf/EKesnSJyGy7bEPnGWkQ==  mm8c8lF9TnCKg2k1knTH8A==  
grmgr: 2020/08/16 23:30:14.623016 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:30:14.625841 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.980849ms
DB: 2020/08/16 23:30:14.628845 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.974166ms
DB: 2020/08/16 23:30:14.632667 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.636299ms
DB: 2020/08/16 23:30:14.637174 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.249986ms
AttachNode: main 2020/08/16 23:30:14.637186 FetchForUpdate: for parent    mm8c8lF9TnCKg2k1knTH8A==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:30:14.637190 ** Cache FetchForUpdate Cache Key Value: [mm8c8lF9TnCKg2k1knTH8A==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:30:14.637195 +++  Cache FetchItems for sortk A#G#:S UID: [mm8c8lF9TnCKg2k1knTH8A==] 
FetchNode: 2020/08/16 23:30:14.637200  node: mm8c8lF9TnCKg2k1knTH8A== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:30:14.637378 FetchForUpdate: for child    zf/EKesnSJyGy7bEPnGWkQ==
FetchForUpdate: 2020/08/16 23:30:14.637401 ** Cache FetchForUpdate Cache Key Value: [zf/EKesnSJyGy7bEPnGWkQ==]   sortk: A#
fetchItems: 2020/08/16 23:30:14.637407 +++  Cache FetchItems for sortk A# UID: [zf/EKesnSJyGy7bEPnGWkQ==] 
FetchNode: 2020/08/16 23:30:14.637440  node: zf/EKesnSJyGy7bEPnGWkQ== subKey: A#
anmgr 2020/08/16 23:30:14.637654 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.637671 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.637675 for loop finished 6  8 
anmgr 2020/08/16 23:30:14.637694 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.637699 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.637704 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.637708 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.637716 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.637720 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.637724 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.637729 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.637733 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.637738 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.637743 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.637747 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.637757 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.640014 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.785388ms
DB: 2020/08/16 23:30:14.641896 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.414217ms
DB: 2020/08/16 23:30:14.645269 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.92814ms
DB: 2020/08/16 23:30:14.649299 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.702964ms
DB: 2020/08/16 23:30:14.652990 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.625465ms
anmgr 2020/08/16 23:30:14.655437 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.655449 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.655453 for loop finished 6  8 
anmgr 2020/08/16 23:30:14.655457 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.655462 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.655466 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.655471 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.655476 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.655480 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.655484 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.655488 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.655493 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.655497 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.655501 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.655506 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.655510 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:30:14.656460 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.412181ms
DB: 2020/08/16 23:30:14.659951 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.43753ms
Cache: 2020/08/16 23:30:14.659963 In SetUpredAvailable: pUid, tUID:  mm8c8lF9TnCKg2k1knTH8A== mm8c8lF9TnCKg2k1knTH8A== A#G#:S
Cache: 2020/08/16 23:30:14.659968 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:30:14.663919 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.917046ms
Unlock: 2020/08/16 23:30:14.663932 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:30:14.663938 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:30:14.668603 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.612884ms
grmgr: 2020/08/16 23:30:14.668618 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:30:14.671256 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.671267 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.671272 for loop finished 6  8 
anmgr 2020/08/16 23:30:14.671278 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.671283 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.671290 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.671302 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.671307 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.671312 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.671317 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.671322 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.671326 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.671333 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.671337 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.671342 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.671347 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:30:14.671351 ** received on attachDoneCh.... 0
anmgr 2020/08/16 23:30:14.681553 About to run AttachNodeCh: c  b  tGbMJWLNQD+FLw1hKdGtZQ== zf/EKesnSJyGy7bEPnGWkQ==
anmgr 2020/08/16 23:30:14.681570 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.681577 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:30:14.681582 for loop finished 7  8 
attachNode: 2020/08/16 23:30:14.681589 read from AttachNodeCh channel 8 now ASK limiter
grmgr: 2020/08/16 23:30:14.681595 Looping..... 0
grmgr: 2020/08/16 23:30:14.681722 Looping..... 1
grmgr: 2020/08/16 23:30:14.681903 Looping..... 2
grmgr: 2020/08/16 23:30:14.682082 Looping..... 3
grmgr: 2020/08/16 23:30:14.682257 Looping..... 4
grmgr: 2020/08/16 23:30:14.682432 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:30:14.682443 goroutine about to start 8 cUID,pUID   tGbMJWLNQD+FLw1hKdGtZQ==  zf/EKesnSJyGy7bEPnGWkQ==  
rdfLoader: 2020/08/16 23:30:14.682449 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 23:30:14.682820 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:30:14.685158 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.506238ms
DB: 2020/08/16 23:30:14.688072 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.88425ms
DB: 2020/08/16 23:30:14.691699 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.570472ms
DB: 2020/08/16 23:30:14.696025 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.142489ms
AttachNode: main 2020/08/16 23:30:14.696039 FetchForUpdate: for parent    zf/EKesnSJyGy7bEPnGWkQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:30:14.696044 ** Cache FetchForUpdate Cache Key Value: [zf/EKesnSJyGy7bEPnGWkQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:30:14.696050 +++  Cache FetchItems for sortk A#G#:S UID: [zf/EKesnSJyGy7bEPnGWkQ==] 
FetchNode: 2020/08/16 23:30:14.696055  node: zf/EKesnSJyGy7bEPnGWkQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:30:14.696258 FetchForUpdate: for child    tGbMJWLNQD+FLw1hKdGtZQ==
FetchForUpdate: 2020/08/16 23:30:14.696267 ** Cache FetchForUpdate Cache Key Value: [tGbMJWLNQD+FLw1hKdGtZQ==]   sortk: A#
fetchItems: 2020/08/16 23:30:14.696274 +++  Cache FetchItems for sortk A# UID: [tGbMJWLNQD+FLw1hKdGtZQ==] 
FetchNode: 2020/08/16 23:30:14.696307  node: tGbMJWLNQD+FLw1hKdGtZQ== subKey: A#
DB: 2020/08/16 23:30:14.698663 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.575203ms
DB: 2020/08/16 23:30:14.699742 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.387811ms
DB: 2020/08/16 23:30:14.702567 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.609828ms
DB: 2020/08/16 23:30:14.706476 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.57622ms
DB: 2020/08/16 23:30:14.710352 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.570082ms
DB: 2020/08/16 23:30:14.715995 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.364399ms
DB: 2020/08/16 23:30:14.719582 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.415669ms
Cache: 2020/08/16 23:30:14.719598 In SetUpredAvailable: pUid, tUID:  zf/EKesnSJyGy7bEPnGWkQ== zf/EKesnSJyGy7bEPnGWkQ== A#G#:S
Cache: 2020/08/16 23:30:14.719603 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:30:14.723413 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.767595ms
Unlock: 2020/08/16 23:30:14.723423 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:30:14.723428 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:30:14.727760 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.276231ms
grmgr: 2020/08/16 23:30:14.727779 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 23:30:14.727785 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 23:30:14.727792 11.....
rdfLoader: 2020/08/16 23:30:14.727800 22.....error cnt: 0
rdfuuid: 2020/08/16 23:30:14.727807 Powering down...
errlog: 2020/08/16 23:30:14.727832 Powering down...
grmgr: 2020/08/16 23:30:14.727836 Powering down...
anmgr: 2020/08/16 23:30:14.727841 Powering down...
rdfLoader: 2020/08/16 23:30:14.727845 loader exists.....
DB:2020/08/16 23:31:32 log.go:18: ===============================================================================
anmgr: 2020/08/16 23:31:32.540838 Powering on...
rdfLoader: 2020/08/16 23:31:32.540869 saveNode started......
rdfLoader: 2020/08/16 23:31:32.540875 define saveNode limiter......
rdfuuid: 2020/08/16 23:31:32.540879 Powering on...
grmgr: 2020/08/16 23:31:32.540897 Powering on...
errlog: 2020/08/16 23:31:32.540912 Powering on...
rdfLoader: 2020/08/16 23:31:32.540931  principle goroutines started 
RDFreader: 2020/08/16 23:31:32.540949 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 23:31:32.540964 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 23:31:32.540970 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 23:31:32.540976 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 23:31:32.540982 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 23:31:32.540987 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 23:31:32.540992 spo read:      
RDFreader: 2020/08/16 23:31:32.540996 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 23:31:32.541002 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 23:31:32.541007 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 23:31:32.541011 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 23:31:32.541016 spo read:      
RDFreader: 2020/08/16 23:31:32.541021 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 23:31:32.541026 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 23:31:32.541031 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 23:31:32.541036 spo read:  b  Age  "58"
RDFreader: 2020/08/16 23:31:32.541041 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 23:31:32.541046 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 23:31:32.541052 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 23:31:32.541056 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 23:31:32.541061 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 23:31:32.541065 spo read:      
RDFreader: 2020/08/16 23:31:32.541070 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 23:31:32.541074 Send node batch on channel verifyCh
RDFreader: 2020/08/16 23:31:32.541081 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 23:31:32.541085 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 23:31:32.541090 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 23:31:32.541138 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 23:31:32.541146 spo read:  c  Age  "67"
RDFreader: 2020/08/16 23:31:32.541151 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 23:31:32.541156 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 23:31:32.541161 spo read:  c  Friends  _:abc
RDFreader: 2020/08/16 23:31:32.541165 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 23:31:32.541172 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 23:31:32.541177 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 23:31:32.541193 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 23:31:32.541197 spo read:      
RDFreader: 2020/08/16 23:31:32.541202 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 23:31:32.541206 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 23:31:32.541210 spo read:  d  Friends  _:abc
RDFreader: 2020/08/16 23:31:32.541215 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 23:31:32.541219 spo read:  d  Age  "36"
RDFreader: 2020/08/16 23:31:32.541224 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 23:31:32.541230 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 23:31:32.541234 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 23:31:32.541240 close verify channel
rdfLoader: 2020/08/16 23:31:32.541244 verify started....
rdfLoader: 2020/08/16 23:31:32.541248 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 23:31:32.541252 .  getType..
rdfLoader: 2020/08/16 23:31:32.541262 node.TyName : [Person]
DB: 2020/08/16 23:31:32.611656 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 70.324684ms
grmgr: 2020/08/16 23:31:32.611798 Looping..... 0
grmgr: 2020/08/16 23:31:32.612150 Looping..... 1
grmgr: 2020/08/16 23:31:32.612325 Looping..... 2
grmgr: 2020/08/16 23:31:32.612510 Looping..... 3
grmgr: 2020/08/16 23:31:32.612684 Looping..... 4
grmgr: 2020/08/16 23:31:32.612869 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 23:31:32.612880 .  getType..
rdfLoader: 2020/08/16 23:31:32.612884 node.TyName : [Person]
grmgr: 2020/08/16 23:31:32.612890 Looping..... 0
unmarshalRDF: 2020/08/16 23:31:32.612903 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:31:32.612913 Looping..... 1
grmgr: 2020/08/16 23:31:32.612918 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 23:31:32.612922 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 23:31:32.612929 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 23:31:32.612932 .  getType..
rdfLoader: 2020/08/16 23:31:32.612936 node.TyName : [Person]
grmgr: 2020/08/16 23:31:32.612941 Looping..... 0
rdfLoader: 2020/08/16 23:31:32.612951 Add to SS . [Honda]
rdfLoader: 2020/08/16 23:31:32.612955 Add to SS . [Alfa]
anmgr 2020/08/16 23:31:32.612995 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.613003 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:31:32.613048 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", C:"", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", C:"", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", C:"", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:31:32.613055 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 23:31:32.613065 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:31:32.613097 Looping..... 1
grmgr: 2020/08/16 23:31:32.613104 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 23:31:32.613108 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 23:31:32.613124 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 23:31:32.613129 Looping..... 0
rdfLoader: 2020/08/16 23:31:32.613136 Add to SS . [Honda]
rdfLoader: 2020/08/16 23:31:32.613140 Add to SS . [VW Golf]
anmgr 2020/08/16 23:31:32.613153 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.613158 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:31:32.613203 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", C:"", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", C:"", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", C:"", Value:58}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:31:32.613209 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 23:31:32.613214 .  getType..
rdfLoader: 2020/08/16 23:31:32.613218 node.TyName : [Person]
unmarshalRDF: 2020/08/16 23:31:32.613226 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:31:32.613255 Looping..... 1
rdfLoader: 2020/08/16 23:31:32.613265 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 23:31:32.613269 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 23:31:32.613273 Add to SS . [Honda]
anmgr 2020/08/16 23:31:32.613286 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:32.613291 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:31:32.613317 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", C:"", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", C:"", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", C:"", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", C:"C", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:31:32.613321 Exit  unmarshalRDF. 
anmgr 2020/08/16 23:31:32.613326 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/16 23:31:32.613336 Looping..... 2
grmgr: 2020/08/16 23:31:32.613441 Looping..... 3
grmgr: 2020/08/16 23:31:32.613616 Looping..... 4
grmgr: 2020/08/16 23:31:32.613791 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 23:31:32.613798 Looping..... 0
grmgr: 2020/08/16 23:31:32.613831 Looping..... 1
SaveRDFNode: xxx 2020/08/16 23:31:32.613841 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.613847 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", C:"", Value:62}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.613854 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.613860 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", C:"", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.613865 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", C:"", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.613871 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.613876 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:31:32.613880 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:31:32.613892 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000754120)}
SaveRDFNode: 2020/08/16 23:31:32.613896 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:31:32.613908 UID received  : 93CE6iDfRW+GvGjG6/MBmQ==
grmgr: 2020/08/16 23:31:32.614197 Looping..... 2
grmgr: 2020/08/16 23:31:32.614359 Looping..... 3
grmgr: 2020/08/16 23:31:32.614534 Looping..... 4
grmgr: 2020/08/16 23:31:32.614723 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 23:31:32.614733 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 23:31:32.614737 Looping..... 0
unmarshalRDF: 2020/08/16 23:31:32.614752 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:31:32.614762 Looping..... 1
rdfLoader: 2020/08/16 23:31:32.614770 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 23:31:32.614806 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", C:"", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", C:"", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", C:"", Value:"17 June 1976"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:31:32.614811 Exit  unmarshalRDF. 
anmgr 2020/08/16 23:31:32.614817 received on EdgeSnCn. anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
grmgr: 2020/08/16 23:31:32.614827 Looping..... 2
grmgr: 2020/08/16 23:31:32.614900 Looping..... 3
grmgr: 2020/08/16 23:31:32.615078 Looping..... 4
grmgr: 2020/08/16 23:31:32.615252 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 23:31:32.615261 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 23:31:32.615265 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 23:31:32.615273 Looping..... 0
grmgr: 2020/08/16 23:31:32.615302 Looping..... 1
grmgr: 2020/08/16 23:31:32.615306 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 23:31:32.615310 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 23:31:32.615319 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.615328 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.615334 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", C:"", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.615340 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", C:"", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.615345 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", C:"", Value:58}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.615351 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.615356 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:31:32.615360 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:31:32.615365 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000754360)}
SaveRDFNode: 2020/08/16 23:31:32.615369 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:31:32.615377 UID received  : NwJGzF7kR1yy4r09/s9kaw==
DB: 2020/08/16 23:31:32.620935 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.997694ms
DB: 2020/08/16 23:31:32.624460 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.048674ms
DB: 2020/08/16 23:31:32.627942 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.435787ms
DB: 2020/08/16 23:31:32.631439 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.326322ms
DB: 2020/08/16 23:31:32.634840 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.368573ms
DB: 2020/08/16 23:31:32.638217 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.333593ms
SaveRDFNode: 2020/08/16 23:31:32.638231 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000754360)}
SaveRDFNode: 2020/08/16 23:31:32.638239 Received UID: X18=
SaveRDFNode: 2020/08/16 23:31:32.638252 a: = db.Item{PKey:[]uint8{0x37, 0x2, 0x46, 0xcc, 0x5e, 0xe4, 0x47, 0x5c, 0xb2, 0xe2, 0xbd, 0x3d, 0xfe, 0xcf, 0x64, 0x6b}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:31:32.638901 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 17.931866ms
DB: 2020/08/16 23:31:32.641516 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.229529ms
SaveRDFNode: 2020/08/16 23:31:32.641529 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000754360)}
SaveRDFNode: 2020/08/16 23:31:32.641536 Received UID: X18=
SaveRDFNode: 2020/08/16 23:31:32.641546 a: = db.Item{PKey:[]uint8{0x37, 0x2, 0x46, 0xcc, 0x5e, 0xe4, 0x47, 0x5c, 0xb2, 0xe2, 0xbd, 0x3d, 0xfe, 0xcf, 0x64, 0x6b}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:31:32.642396 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.463989ms
DB: 2020/08/16 23:31:32.645055 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.4454ms
DB: 2020/08/16 23:31:32.645591 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.041891ms
DB: 2020/08/16 23:31:32.648532 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.354871ms
DB: 2020/08/16 23:31:32.648869 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.217582ms
SaveRDFNode: 2020/08/16 23:31:32.648881 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000754120)}
SaveRDFNode: 2020/08/16 23:31:32.648888 Received UID: X18=
SaveRDFNode: 2020/08/16 23:31:32.648903 a: = db.Item{PKey:[]uint8{0xf7, 0x70, 0x84, 0xea, 0x20, 0xdf, 0x45, 0x6f, 0x86, 0xbc, 0x68, 0xc6, 0xeb, 0xf3, 0x1, 0x99}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:31:32.651844 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.281267ms
DB: 2020/08/16 23:31:32.652205 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.273348ms
SaveRDFNode: 2020/08/16 23:31:32.652218 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000754120)}
SaveRDFNode: 2020/08/16 23:31:32.652225 Received UID: X18=
SaveRDFNode: 2020/08/16 23:31:32.652235 a: = db.Item{PKey:[]uint8{0xf7, 0x70, 0x84, 0xea, 0x20, 0xdf, 0x45, 0x6f, 0x86, 0xbc, 0x68, 0xc6, 0xeb, 0xf3, 0x1, 0x99}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:31:32.655237 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.357935ms
SaveRDFNode: 2020/08/16 23:31:32.655248 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:31:32.655259 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 23:31:32.655265 Send ack to waiting saveNode...
grmgr: 2020/08/16 23:31:32.655274 Looping..... 0
grmgr: 2020/08/16 23:31:32.655341 Looping..... 1
grmgr: 2020/08/16 23:31:32.655356 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 23:31:32.655360 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 23:31:32.655380 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.655387 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", C:"", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.655407 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", C:"", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.655413 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", C:"", Value:67}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.655438 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", C:"C", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.655446 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.655452 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:31:32.655456 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:31:32.655462 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000348240)}
SaveRDFNode: 2020/08/16 23:31:32.655466 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:31:32.655486 UID received  : yOOzWZ6HQ0KY51Cyao69eQ==
DB: 2020/08/16 23:31:32.655749 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.483164ms
DB: 2020/08/16 23:31:32.658769 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 2.990626ms
DB: 2020/08/16 23:31:32.659198 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.683996ms
DB: 2020/08/16 23:31:32.661897 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 2.95397ms
DB: 2020/08/16 23:31:32.662613 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.383803ms
DB: 2020/08/16 23:31:32.665142 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.071911ms
SaveRDFNode: 2020/08/16 23:31:32.665154 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:31:32.665163 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 23:31:32.665168 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 23:31:32.665200 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.665207 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", C:"", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.665213 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", C:"", Value:36}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.665221 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.665227 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", C:"", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.665233 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:31:32.665239 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:31:32.665244 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:31:32.665250 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000349260)}
SaveRDFNode: 2020/08/16 23:31:32.665254 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:31:32.665264 UID received  : jhW19/h2T+24mVMtYye/eg==
grmgr: 2020/08/16 23:31:32.665481 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 23:31:32.666064 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.417615ms
DB: 2020/08/16 23:31:32.668317 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.007221ms
DB: 2020/08/16 23:31:32.669454 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.354867ms
DB: 2020/08/16 23:31:32.671417 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.063557ms
DB: 2020/08/16 23:31:32.672809 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.320857ms
SaveRDFNode: 2020/08/16 23:31:32.672822 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000348240)}
SaveRDFNode: 2020/08/16 23:31:32.672829 Received UID: X18=
SaveRDFNode: 2020/08/16 23:31:32.672841 a: = db.Item{PKey:[]uint8{0xc8, 0xe3, 0xb3, 0x59, 0x9e, 0x87, 0x43, 0x42, 0x98, 0xe7, 0x50, 0xb2, 0x6a, 0x8e, 0xbd, 0x79}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:31:32.677240 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 5.790948ms
DB: 2020/08/16 23:31:32.677826 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.94883ms
SaveRDFNode: 2020/08/16 23:31:32.677840 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000348240)}
SaveRDFNode: 2020/08/16 23:31:32.677849 Received UID: X18=
SaveRDFNode: 2020/08/16 23:31:32.677872 a: = db.Item{PKey:[]uint8{0xc8, 0xe3, 0xb3, 0x59, 0x9e, 0x87, 0x43, 0x42, 0x98, 0xe7, 0x50, 0xb2, 0x6a, 0x8e, 0xbd, 0x79}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:31:32.680622 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.16671ms
DB: 2020/08/16 23:31:32.681363 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.460597ms
DB: 2020/08/16 23:31:32.683697 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.038175ms
SaveRDFNode: 2020/08/16 23:31:32.683709 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000349260)}
SaveRDFNode: 2020/08/16 23:31:32.683716 Received UID: X18=
SaveRDFNode: 2020/08/16 23:31:32.683727 a: = db.Item{PKey:[]uint8{0x8e, 0x15, 0xb5, 0xf7, 0xf8, 0x76, 0x4f, 0xed, 0xb8, 0x99, 0x53, 0x2d, 0x63, 0x27, 0xbf, 0x7a}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:31:32.684744 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.351392ms
DB: 2020/08/16 23:31:32.686792 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.036872ms
SaveRDFNode: 2020/08/16 23:31:32.686806 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000349260)}
SaveRDFNode: 2020/08/16 23:31:32.686813 Received UID: X18=
SaveRDFNode: 2020/08/16 23:31:32.686827 a: = db.Item{PKey:[]uint8{0x8e, 0x15, 0xb5, 0xf7, 0xf8, 0x76, 0x4f, 0xed, 0xb8, 0x99, 0x53, 0x2d, 0x63, 0x27, 0xbf, 0x7a}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:31:32.688156 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.371175ms
DB: 2020/08/16 23:31:32.690203 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.338582ms
DB: 2020/08/16 23:31:32.691529 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.330851ms
DB: 2020/08/16 23:31:32.693592 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.351984ms
DB: 2020/08/16 23:31:32.694826 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.262152ms
SaveRDFNode: 2020/08/16 23:31:32.694854 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:31:32.694865 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 23:31:32.696808 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.012153ms
SaveRDFNode: 2020/08/16 23:31:32.696819 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 23:31:32.696826 saveNode finished waiting...exiting
grmgr: 2020/08/16 23:31:32.696833 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 23:31:32.696847 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.712349 About to run AttachNodeCh: abc  b  93CE6iDfRW+GvGjG6/MBmQ== NwJGzF7kR1yy4r09/s9kaw==
anmgr 2020/08/16 23:31:32.712376 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:31:32.712385 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 23:31:32.712392 Looping..... 0
grmgr: 2020/08/16 23:31:32.712414 Looping..... 1
grmgr: 2020/08/16 23:31:32.712587 Looping..... 2
grmgr: 2020/08/16 23:31:32.712765 Looping..... 3
grmgr: 2020/08/16 23:31:32.712939 Looping..... 4
grmgr: 2020/08/16 23:31:32.713158 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:31:32.713169 goroutine about to start 1 cUID,pUID   93CE6iDfRW+GvGjG6/MBmQ==  NwJGzF7kR1yy4r09/s9kaw==  
grmgr: 2020/08/16 23:31:32.713466 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:31:32.715926 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.641355ms
DB: 2020/08/16 23:31:32.719038 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.081429ms
DB: 2020/08/16 23:31:32.722591 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.467995ms
anmgr 2020/08/16 23:31:32.728369 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:32.729954 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.290897ms
AttachNode: main 2020/08/16 23:31:32.729972 FetchForUpdate: for parent    NwJGzF7kR1yy4r09/s9kaw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:31:32.729978 ** Cache FetchForUpdate Cache Key Value: [NwJGzF7kR1yy4r09/s9kaw==]   sortk: A#G#:S
FetchNode: 2020/08/16 23:31:32.729985  node: NwJGzF7kR1yy4r09/s9kaw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:31:32.730157 FetchForUpdate: for child    93CE6iDfRW+GvGjG6/MBmQ==
FetchForUpdate: 2020/08/16 23:31:32.730181 ** Cache FetchForUpdate Cache Key Value: [93CE6iDfRW+GvGjG6/MBmQ==]   sortk: A#
FetchNode: 2020/08/16 23:31:32.730197  node: 93CE6iDfRW+GvGjG6/MBmQ== subKey: A#
DB: 2020/08/16 23:31:32.732454 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.433688ms
FetchForUpdate: 2020/08/16 23:31:32.732515 len(nb): 1
fetchItems: 2020/08/16 23:31:32.732524 +++  Cache FetchItems for sortk A#G#:S UID: [NwJGzF7kR1yy4r09/s9kaw==] 
FetchNode: 2020/08/16 23:31:32.732529  node: NwJGzF7kR1yy4r09/s9kaw== subKey: A#G#:S
DB: 2020/08/16 23:31:32.734972 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.407618ms
DB: 2020/08/16 23:31:32.739278 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.633485ms
anmgr 2020/08/16 23:31:32.743841 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:32.745631 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 15.374811ms
FetchForUpdate: 2020/08/16 23:31:32.745826 len(nb): 7
fetchItems: 2020/08/16 23:31:32.745835 +++  Cache FetchItems for sortk A# UID: [93CE6iDfRW+GvGjG6/MBmQ==] 
FetchNode: 2020/08/16 23:31:32.745840  node: 93CE6iDfRW+GvGjG6/MBmQ== subKey: A#
DB: 2020/08/16 23:31:32.749322 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.429346ms
anmgr 2020/08/16 23:31:32.759419 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:31:32.759746 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.660639ms
DB: 2020/08/16 23:31:32.763270 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.4749ms
DB: 2020/08/16 23:31:32.767173 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.572933ms
DB: 2020/08/16 23:31:32.773071 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.63109ms
anmgr 2020/08/16 23:31:32.774985 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:32.776669 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.293391ms
DB: 2020/08/16 23:31:32.780386 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.414674ms
DB: 2020/08/16 23:31:32.786611 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.93171ms
DB: 2020/08/16 23:31:32.790245 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.303893ms
anmgr 2020/08/16 23:31:32.790745 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:32.797582 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.029105ms
DB: 2020/08/16 23:31:32.801128 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.338702ms
Cache: 2020/08/16 23:31:32.801140 In SetUpredAvailable: pUid, tUID:  NwJGzF7kR1yy4r09/s9kaw== NwJGzF7kR1yy4r09/s9kaw== A#G#:S
Cache: 2020/08/16 23:31:32.801145 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:31:32.804583 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.400119ms
Unlock: 2020/08/16 23:31:32.804593 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:31:32.804598 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:31:32.806552 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:31:32.812046 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.33524ms
grmgr: 2020/08/16 23:31:32.812089 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:31:32.816894 ** received on attachDoneCh.... 2
anmgr 2020/08/16 23:31:32.816918 About to run AttachNodeCh: d  abc  jhW19/h2T+24mVMtYye/eg== 93CE6iDfRW+GvGjG6/MBmQ==
anmgr 2020/08/16 23:31:32.816926 for loop finished 1  8 
anmgr 2020/08/16 23:31:32.816933 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.816940 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.816945 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:31:32.816952 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 23:31:32.816957 Looping..... 0
grmgr: 2020/08/16 23:31:32.816971 Looping..... 1
grmgr: 2020/08/16 23:31:32.817066 Looping..... 2
grmgr: 2020/08/16 23:31:32.817236 Looping..... 3
grmgr: 2020/08/16 23:31:32.817462 Looping..... 4
grmgr: 2020/08/16 23:31:32.817636 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:31:32.817650 goroutine about to start 2 cUID,pUID   jhW19/h2T+24mVMtYye/eg==  93CE6iDfRW+GvGjG6/MBmQ==  
grmgr: 2020/08/16 23:31:32.818094 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:31:32.820340 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.434705ms
DB: 2020/08/16 23:31:32.823300 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.927871ms
DB: 2020/08/16 23:31:32.826944 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.556531ms
DB: 2020/08/16 23:31:32.831236 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.102635ms
AttachNode: main 2020/08/16 23:31:32.831250 FetchForUpdate: for parent    93CE6iDfRW+GvGjG6/MBmQ==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 23:31:32.831255 ** Cache FetchForUpdate Cache Key Value: [93CE6iDfRW+GvGjG6/MBmQ==]   sortk: A#G#:F
fetchItems: 2020/08/16 23:31:32.831262 +++  Cache FetchItems for sortk A#G#:F UID: [93CE6iDfRW+GvGjG6/MBmQ==] 
FetchNode: 2020/08/16 23:31:32.831287  node: 93CE6iDfRW+GvGjG6/MBmQ== subKey: A#G#:F
AttachNode: gr1 2020/08/16 23:31:32.831495 FetchForUpdate: for child    jhW19/h2T+24mVMtYye/eg==
FetchForUpdate: 2020/08/16 23:31:32.831504 ** Cache FetchForUpdate Cache Key Value: [jhW19/h2T+24mVMtYye/eg==]   sortk: A#
FetchNode: 2020/08/16 23:31:32.831521  node: jhW19/h2T+24mVMtYye/eg== subKey: A#
anmgr 2020/08/16 23:31:32.832437 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:32.834360 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.035502ms
DB: 2020/08/16 23:31:32.836193 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.615787ms
FetchForUpdate: 2020/08/16 23:31:32.836304 len(nb): 7
fetchItems: 2020/08/16 23:31:32.836312 +++  Cache FetchItems for sortk A# UID: [jhW19/h2T+24mVMtYye/eg==] 
FetchNode: 2020/08/16 23:31:32.836316  node: jhW19/h2T+24mVMtYye/eg== subKey: A#
DB: 2020/08/16 23:31:32.838551 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.923ms
DB: 2020/08/16 23:31:32.839056 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.697362ms
DB: 2020/08/16 23:31:32.845975 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.849673ms
anmgr 2020/08/16 23:31:32.848782 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:32.849292 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.249923ms
DB: 2020/08/16 23:31:32.852763 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.36838ms
DB: 2020/08/16 23:31:32.858765 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.729753ms
DB: 2020/08/16 23:31:32.862337 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.255152ms
anmgr 2020/08/16 23:31:32.864409 About to run AttachNodeCh: b  c  NwJGzF7kR1yy4r09/s9kaw== yOOzWZ6HQ0KY51Cyao69eQ==
anmgr 2020/08/16 23:31:32.864427 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/16 23:31:32.864436 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 23:31:32.864444 Looping..... 0
grmgr: 2020/08/16 23:31:32.864582 Looping..... 1
grmgr: 2020/08/16 23:31:32.864757 Looping..... 2
grmgr: 2020/08/16 23:31:32.864931 Looping..... 3
grmgr: 2020/08/16 23:31:32.865114 Looping..... 4
grmgr: 2020/08/16 23:31:32.865291 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:31:32.865302 goroutine about to start 3 cUID,pUID   NwJGzF7kR1yy4r09/s9kaw==  yOOzWZ6HQ0KY51Cyao69eQ==  
grmgr: 2020/08/16 23:31:32.865517 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 23:31:32.866124 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.480616ms
DB: 2020/08/16 23:31:32.867679 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.313816ms
DB: 2020/08/16 23:31:32.870703 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.981564ms
DB: 2020/08/16 23:31:32.872114 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.690636ms
DB: 2020/08/16 23:31:32.874503 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.71168ms
DB: 2020/08/16 23:31:32.875648 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.241588ms
DB: 2020/08/16 23:31:32.879357 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.645807ms
anmgr 2020/08/16 23:31:32.879886 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:32.882679 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.263208ms
Cache: 2020/08/16 23:31:32.882694 In SetUpredAvailable: pUid, tUID:  93CE6iDfRW+GvGjG6/MBmQ== 93CE6iDfRW+GvGjG6/MBmQ== A#G#:F
Cache: 2020/08/16 23:31:32.882699 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:31:32.882946 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.263347ms
AttachNode: main 2020/08/16 23:31:32.882958 FetchForUpdate: for parent    yOOzWZ6HQ0KY51Cyao69eQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:31:32.882963 ** Cache FetchForUpdate Cache Key Value: [yOOzWZ6HQ0KY51Cyao69eQ==]   sortk: A#G#:S
FetchNode: 2020/08/16 23:31:32.882970  node: yOOzWZ6HQ0KY51Cyao69eQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:31:32.883135 FetchForUpdate: for child    NwJGzF7kR1yy4r09/s9kaw==
FetchForUpdate: 2020/08/16 23:31:32.883144 ** Cache FetchForUpdate Cache Key Value: [NwJGzF7kR1yy4r09/s9kaw==]   sortk: A#
fetchItems: 2020/08/16 23:31:32.883154 +++  Cache FetchItems for sortk A# UID: [NwJGzF7kR1yy4r09/s9kaw==] 
FetchNode: 2020/08/16 23:31:32.883169  node: NwJGzF7kR1yy4r09/s9kaw== subKey: A#
DB: 2020/08/16 23:31:32.885431 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.42917ms
FetchForUpdate: 2020/08/16 23:31:32.885495 len(nb): 1
fetchItems: 2020/08/16 23:31:32.885503 +++  Cache FetchItems for sortk A#G#:S UID: [yOOzWZ6HQ0KY51Cyao69eQ==] 
FetchNode: 2020/08/16 23:31:32.885507  node: yOOzWZ6HQ0KY51Cyao69eQ== subKey: A#G#:S
DB: 2020/08/16 23:31:32.886197 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.458509ms
Unlock: 2020/08/16 23:31:32.886220 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:31:32.886226 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:31:32.889446 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 6.229976ms
fetchItems: 2020/08/16 23:31:32.889624 +++  Cache FetchItems for sortk A# UID: [NwJGzF7kR1yy4r09/s9kaw==] 
FetchNode: 2020/08/16 23:31:32.889632  node: NwJGzF7kR1yy4r09/s9kaw== subKey: A#
DB: 2020/08/16 23:31:32.891938 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.401428ms
DB: 2020/08/16 23:31:32.894226 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 7.936297ms
grmgr: 2020/08/16 23:31:32.894272 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 23:31:32.900116 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.900144 ** received on attachDoneCh.... 0
DB: 2020/08/16 23:31:32.907106 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 17.402919ms
DB: 2020/08/16 23:31:32.908027 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 13.232009ms
anmgr 2020/08/16 23:31:32.910596 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:32.910610 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:32.910615 for loop finished 2  8 
anmgr 2020/08/16 23:31:32.910629 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.910635 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.910640 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.926096 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:32.926491 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 16.717579ms
DB: 2020/08/16 23:31:32.930328 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.47016ms
DB: 2020/08/16 23:31:32.934570 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.651419ms
DB: 2020/08/16 23:31:32.940938 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.885057ms
anmgr 2020/08/16 23:31:32.941779 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.941803 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.941810 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:31:32.945071 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.480458ms
DB: 2020/08/16 23:31:32.948864 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.699626ms
DB: 2020/08/16 23:31:32.954805 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.878656ms
anmgr 2020/08/16 23:31:32.957184 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:32.958138 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.275452ms
DB: 2020/08/16 23:31:32.961855 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.635981ms
DB: 2020/08/16 23:31:32.965283 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.369417ms
Cache: 2020/08/16 23:31:32.965308 In SetUpredAvailable: pUid, tUID:  yOOzWZ6HQ0KY51Cyao69eQ== yOOzWZ6HQ0KY51Cyao69eQ== A#G#:S
Cache: 2020/08/16 23:31:32.965315 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:31:32.968859 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.502633ms
Unlock: 2020/08/16 23:31:32.968871 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:31:32.968877 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:31:32.972601 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:32.975232 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 6.267394ms
grmgr: 2020/08/16 23:31:32.975248 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:31:32.977844 ** received on attachDoneCh.... 1
anmgr 2020/08/16 23:31:32.983031 About to run AttachNodeCh: c  b  yOOzWZ6HQ0KY51Cyao69eQ== NwJGzF7kR1yy4r09/s9kaw==
anmgr 2020/08/16 23:31:32.983049 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:32.983057 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:32.983074 for loop finished 3  8 
anmgr 2020/08/16 23:31:32.983091 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.983097 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:32.983102 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:31:32.983110 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 23:31:32.983116 Looping..... 0
grmgr: 2020/08/16 23:31:32.983199 Looping..... 1
grmgr: 2020/08/16 23:31:32.983374 Looping..... 2
grmgr: 2020/08/16 23:31:32.983548 Looping..... 3
grmgr: 2020/08/16 23:31:32.983725 Looping..... 4
grmgr: 2020/08/16 23:31:32.983958 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:31:32.983969 goroutine about to start 4 cUID,pUID   yOOzWZ6HQ0KY51Cyao69eQ==  NwJGzF7kR1yy4r09/s9kaw==  
grmgr: 2020/08/16 23:31:32.984344 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:31:32.986677 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.499514ms
DB: 2020/08/16 23:31:32.989795 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.087358ms
DB: 2020/08/16 23:31:32.993717 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.804391ms
DB: 2020/08/16 23:31:32.998227 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.181912ms
AttachNode: main 2020/08/16 23:31:32.998240 FetchForUpdate: for parent    NwJGzF7kR1yy4r09/s9kaw==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:31:32.998245 ** Cache FetchForUpdate Cache Key Value: [NwJGzF7kR1yy4r09/s9kaw==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:31:32.998251 +++  Cache FetchItems for sortk A#G#:S UID: [NwJGzF7kR1yy4r09/s9kaw==] 
FetchNode: 2020/08/16 23:31:32.998256  node: NwJGzF7kR1yy4r09/s9kaw== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:31:32.998445 FetchForUpdate: for child    yOOzWZ6HQ0KY51Cyao69eQ==
FetchForUpdate: 2020/08/16 23:31:32.998454 ** Cache FetchForUpdate Cache Key Value: [yOOzWZ6HQ0KY51Cyao69eQ==]   sortk: A#
fetchItems: 2020/08/16 23:31:32.998460 +++  Cache FetchItems for sortk A# UID: [yOOzWZ6HQ0KY51Cyao69eQ==] 
FetchNode: 2020/08/16 23:31:32.998498  node: yOOzWZ6HQ0KY51Cyao69eQ== subKey: A#
anmgr 2020/08/16 23:31:32.998702 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:33.001323 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.032669ms
DB: 2020/08/16 23:31:33.002329 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.764469ms
fetchItems: 2020/08/16 23:31:33.002503 +++  Cache FetchItems for sortk A# UID: [yOOzWZ6HQ0KY51Cyao69eQ==] 
FetchNode: 2020/08/16 23:31:33.002511  node: yOOzWZ6HQ0KY51Cyao69eQ== subKey: A#
DB: 2020/08/16 23:31:33.005748 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.028846ms
DB: 2020/08/16 23:31:33.006348 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.807708ms
DB: 2020/08/16 23:31:33.012132 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.671738ms
anmgr 2020/08/16 23:31:33.014208 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.014222 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.014227 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:31:33.016340 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.728298ms
DB: 2020/08/16 23:31:33.020597 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.795183ms
DB: 2020/08/16 23:31:33.024320 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.382046ms
Cache: 2020/08/16 23:31:33.024498 In SetUpredAvailable: pUid, tUID:  NwJGzF7kR1yy4r09/s9kaw== NwJGzF7kR1yy4r09/s9kaw== A#G#:S
Cache: 2020/08/16 23:31:33.024508 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:31:33.028040 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.483227ms
Unlock: 2020/08/16 23:31:33.028050 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:31:33.028055 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:31:33.029879 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:33.032205 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.069583ms
grmgr: 2020/08/16 23:31:33.032219 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:31:33.035052 ** received on attachDoneCh.... 1
anmgr 2020/08/16 23:31:33.040292 About to run AttachNodeCh: c  abc  yOOzWZ6HQ0KY51Cyao69eQ== 93CE6iDfRW+GvGjG6/MBmQ==
anmgr 2020/08/16 23:31:33.040307 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.040314 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.040320 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.040325 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.040330 for loop finished 4  8 
anmgr 2020/08/16 23:31:33.040335 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.040340 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.040345 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:31:33.040352 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 23:31:33.040358 Looping..... 0
grmgr: 2020/08/16 23:31:33.040515 Looping..... 1
grmgr: 2020/08/16 23:31:33.040689 Looping..... 2
grmgr: 2020/08/16 23:31:33.040864 Looping..... 3
grmgr: 2020/08/16 23:31:33.041036 Looping..... 4
grmgr: 2020/08/16 23:31:33.041201 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:31:33.041212 goroutine about to start 5 cUID,pUID   yOOzWZ6HQ0KY51Cyao69eQ==  93CE6iDfRW+GvGjG6/MBmQ==  
grmgr: 2020/08/16 23:31:33.041407 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:31:33.044224 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.949164ms
DB: 2020/08/16 23:31:33.047105 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.852252ms
DB: 2020/08/16 23:31:33.050785 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.631607ms
DB: 2020/08/16 23:31:33.055170 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.082039ms
AttachNode: main 2020/08/16 23:31:33.055184 FetchForUpdate: for parent    93CE6iDfRW+GvGjG6/MBmQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:31:33.055189 ** Cache FetchForUpdate Cache Key Value: [93CE6iDfRW+GvGjG6/MBmQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:31:33.055195 +++  Cache FetchItems for sortk A#G#:S UID: [93CE6iDfRW+GvGjG6/MBmQ==] 
FetchNode: 2020/08/16 23:31:33.055199  node: 93CE6iDfRW+GvGjG6/MBmQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:31:33.055409 FetchForUpdate: for child    yOOzWZ6HQ0KY51Cyao69eQ==
FetchForUpdate: 2020/08/16 23:31:33.055424 ** Cache FetchForUpdate Cache Key Value: [yOOzWZ6HQ0KY51Cyao69eQ==]   sortk: A#
fetchItems: 2020/08/16 23:31:33.055430 +++  Cache FetchItems for sortk A# UID: [yOOzWZ6HQ0KY51Cyao69eQ==] 
FetchNode: 2020/08/16 23:31:33.055444  node: yOOzWZ6HQ0KY51Cyao69eQ== subKey: A#
anmgr 2020/08/16 23:31:33.056430 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:33.057715 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.462451ms
DB: 2020/08/16 23:31:33.059287 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.795051ms
DB: 2020/08/16 23:31:33.061922 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.819059ms
DB: 2020/08/16 23:31:33.068138 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.709797ms
DB: 2020/08/16 23:31:33.071930 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.540197ms
anmgr 2020/08/16 23:31:33.072766 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.072777 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.072799 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:31:33.076149 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.539175ms
DB: 2020/08/16 23:31:33.083066 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.812871ms
DB: 2020/08/16 23:31:33.086573 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.451349ms
anmgr 2020/08/16 23:31:33.088653 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.088668 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.088674 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.088681 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.088687 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.088693 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.088698 for loop finished 4  8 
anmgr 2020/08/16 23:31:33.088704 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.088710 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.088715 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:33.090137 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.486988ms
DB: 2020/08/16 23:31:33.095988 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.772273ms
DB: 2020/08/16 23:31:33.099356 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.308141ms
DB: 2020/08/16 23:31:33.103195 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.548129ms
anmgr 2020/08/16 23:31:33.104221 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:33.106806 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.426566ms
Cache: 2020/08/16 23:31:33.106819 In SetUpredAvailable: pUid, tUID:  93CE6iDfRW+GvGjG6/MBmQ== 93CE6iDfRW+GvGjG6/MBmQ== A#G#:S
Cache: 2020/08/16 23:31:33.106825 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:31:33.110319 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.454488ms
Unlock: 2020/08/16 23:31:33.110329 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:31:33.110334 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:31:33.114738 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.345313ms
grmgr: 2020/08/16 23:31:33.114753 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:31:33.119706 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.119721 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.119728 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.119749 ** received on attachDoneCh.... 0
anmgr 2020/08/16 23:31:33.130077 About to run AttachNodeCh: c  abc  yOOzWZ6HQ0KY51Cyao69eQ== 93CE6iDfRW+GvGjG6/MBmQ==
anmgr 2020/08/16 23:31:33.130093 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.130100 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.130105 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.130120 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.130126 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.130131 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.130135 for loop finished 5  8 
anmgr 2020/08/16 23:31:33.130140 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.130145 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.130150 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:31:33.130158 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 23:31:33.130164 Looping..... 0
grmgr: 2020/08/16 23:31:33.130243 Looping..... 1
grmgr: 2020/08/16 23:31:33.130416 Looping..... 2
grmgr: 2020/08/16 23:31:33.130589 Looping..... 3
grmgr: 2020/08/16 23:31:33.130762 Looping..... 4
grmgr: 2020/08/16 23:31:33.130940 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:31:33.130952 goroutine about to start 6 cUID,pUID   yOOzWZ6HQ0KY51Cyao69eQ==  93CE6iDfRW+GvGjG6/MBmQ==  
grmgr: 2020/08/16 23:31:33.131386 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:31:33.134212 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.007471ms
DB: 2020/08/16 23:31:33.137259 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.016697ms
DB: 2020/08/16 23:31:33.141349 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.012658ms
anmgr 2020/08/16 23:31:33.145613 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:33.145841 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.28271ms
AttachNode: main 2020/08/16 23:31:33.145862 FetchForUpdate: for parent    93CE6iDfRW+GvGjG6/MBmQ==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 23:31:33.145867 ** Cache FetchForUpdate Cache Key Value: [93CE6iDfRW+GvGjG6/MBmQ==]   sortk: A#G#:F
fetchItems: 2020/08/16 23:31:33.145875 +++  Cache FetchItems for sortk A#G#:F UID: [93CE6iDfRW+GvGjG6/MBmQ==] 
FetchNode: 2020/08/16 23:31:33.145880  node: 93CE6iDfRW+GvGjG6/MBmQ== subKey: A#G#:F
AttachNode: gr1 2020/08/16 23:31:33.146139 FetchForUpdate: for child    yOOzWZ6HQ0KY51Cyao69eQ==
FetchForUpdate: 2020/08/16 23:31:33.146148 ** Cache FetchForUpdate Cache Key Value: [yOOzWZ6HQ0KY51Cyao69eQ==]   sortk: A#
fetchItems: 2020/08/16 23:31:33.146155 +++  Cache FetchItems for sortk A# UID: [yOOzWZ6HQ0KY51Cyao69eQ==] 
FetchNode: 2020/08/16 23:31:33.146176  node: yOOzWZ6HQ0KY51Cyao69eQ== subKey: A#
DB: 2020/08/16 23:31:33.148717 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.760458ms
DB: 2020/08/16 23:31:33.149875 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.646223ms
DB: 2020/08/16 23:31:33.153048 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.868168ms
DB: 2020/08/16 23:31:33.156761 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.571824ms
DB: 2020/08/16 23:31:33.161026 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.598061ms
anmgr 2020/08/16 23:31:33.163064 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.163078 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.163083 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.163088 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.163093 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.163109 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.163114 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.163119 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.163124 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.163130 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.163134 for loop finished 5  8 
anmgr 2020/08/16 23:31:33.163139 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.163144 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.163149 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:33.165140 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.576105ms
DB: 2020/08/16 23:31:33.168927 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.507382ms
Cache: 2020/08/16 23:31:33.168941 In SetUpredAvailable: pUid, tUID:  93CE6iDfRW+GvGjG6/MBmQ== 93CE6iDfRW+GvGjG6/MBmQ== A#G#:F
Cache: 2020/08/16 23:31:33.168946 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:31:33.172548 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.565831ms
Unlock: 2020/08/16 23:31:33.172739 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:31:33.172750 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:31:33.176959 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.146596ms
grmgr: 2020/08/16 23:31:33.176975 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:31:33.178631 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.178643 ** received on attachDoneCh.... 0
anmgr 2020/08/16 23:31:33.188920 About to run AttachNodeCh: b  abc  NwJGzF7kR1yy4r09/s9kaw== 93CE6iDfRW+GvGjG6/MBmQ==
anmgr 2020/08/16 23:31:33.188942 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.188949 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.188956 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.188962 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.188968 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.188974 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.188979 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.188985 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.188991 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.188997 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.189002 for loop finished 6  8 
anmgr 2020/08/16 23:31:33.189008 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.189013 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.189020 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:31:33.189028 read from AttachNodeCh channel 7 now ASK limiter
grmgr: 2020/08/16 23:31:33.189035 Looping..... 0
grmgr: 2020/08/16 23:31:33.189227 Looping..... 1
grmgr: 2020/08/16 23:31:33.189402 Looping..... 2
grmgr: 2020/08/16 23:31:33.189611 Looping..... 3
grmgr: 2020/08/16 23:31:33.189822 Looping..... 4
grmgr: 2020/08/16 23:31:33.189969 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:31:33.189980 goroutine about to start 7 cUID,pUID   NwJGzF7kR1yy4r09/s9kaw==  93CE6iDfRW+GvGjG6/MBmQ==  
grmgr: 2020/08/16 23:31:33.190219 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:31:33.192416 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.350107ms
DB: 2020/08/16 23:31:33.195344 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.895075ms
DB: 2020/08/16 23:31:33.198861 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.437644ms
anmgr 2020/08/16 23:31:33.204571 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.204606 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.204613 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.204619 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.204626 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.204633 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.204638 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.204645 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.204651 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.204656 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.204662 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.204668 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.204673 for loop finished 6  8 
anmgr 2020/08/16 23:31:33.204679 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.204685 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.204691 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:33.204939 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.733937ms
AttachNode: main 2020/08/16 23:31:33.204952 FetchForUpdate: for parent    93CE6iDfRW+GvGjG6/MBmQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:31:33.204958 ** Cache FetchForUpdate Cache Key Value: [93CE6iDfRW+GvGjG6/MBmQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:31:33.204965 +++  Cache FetchItems for sortk A#G#:S UID: [93CE6iDfRW+GvGjG6/MBmQ==] 
FetchNode: 2020/08/16 23:31:33.204969  node: 93CE6iDfRW+GvGjG6/MBmQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:31:33.205204 FetchForUpdate: for child    NwJGzF7kR1yy4r09/s9kaw==
FetchForUpdate: 2020/08/16 23:31:33.205213 ** Cache FetchForUpdate Cache Key Value: [NwJGzF7kR1yy4r09/s9kaw==]   sortk: A#
fetchItems: 2020/08/16 23:31:33.205219 +++  Cache FetchItems for sortk A# UID: [NwJGzF7kR1yy4r09/s9kaw==] 
FetchNode: 2020/08/16 23:31:33.205234  node: NwJGzF7kR1yy4r09/s9kaw== subKey: A#
DB: 2020/08/16 23:31:33.207650 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.645252ms
DB: 2020/08/16 23:31:33.208771 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.481637ms
DB: 2020/08/16 23:31:33.211639 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.549847ms
DB: 2020/08/16 23:31:33.215802 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.6188ms
DB: 2020/08/16 23:31:33.219974 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.675505ms
anmgr 2020/08/16 23:31:33.220812 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.220825 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.220830 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.220844 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.220848 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.220854 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.220858 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.220872 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.220877 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.220881 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.220886 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.220891 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.220896 for loop finished 6  8 
anmgr 2020/08/16 23:31:33.220900 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.220905 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.220909 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:33.224196 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.596824ms
DB: 2020/08/16 23:31:33.227950 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.44035ms
Cache: 2020/08/16 23:31:33.227963 In SetUpredAvailable: pUid, tUID:  93CE6iDfRW+GvGjG6/MBmQ== 93CE6iDfRW+GvGjG6/MBmQ== A#G#:S
Cache: 2020/08/16 23:31:33.227968 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:31:33.234277 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.884723ms
Unlock: 2020/08/16 23:31:33.234288 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:31:33.234293 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:31:33.238633 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.238646 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.238652 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.238657 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.238663 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.238668 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.238673 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.238678 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.238683 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.238687 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.238692 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.238697 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.238703 for loop finished 6  8 
anmgr 2020/08/16 23:31:33.238708 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.238712 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.238717 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:31:33.239583 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.23127ms
grmgr: 2020/08/16 23:31:33.239599 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:31:33.243881 ** received on attachDoneCh.... 1
anmgr 2020/08/16 23:31:33.249063 About to run AttachNodeCh: abc  c  93CE6iDfRW+GvGjG6/MBmQ== yOOzWZ6HQ0KY51Cyao69eQ==
anmgr 2020/08/16 23:31:33.249079 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.249118 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.249124 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.249129 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.249134 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.249139 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.249144 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.249149 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.249153 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.249199 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:31:33.249217 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.249222 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:31:33.249227 for loop finished 7  8 
attachNode: 2020/08/16 23:31:33.249234 read from AttachNodeCh channel 8 now ASK limiter
grmgr: 2020/08/16 23:31:33.249240 Looping..... 0
grmgr: 2020/08/16 23:31:33.249265 Looping..... 1
grmgr: 2020/08/16 23:31:33.249442 Looping..... 2
grmgr: 2020/08/16 23:31:33.249614 Looping..... 3
grmgr: 2020/08/16 23:31:33.249842 Looping..... 4
grmgr: 2020/08/16 23:31:33.250013 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:31:33.250030 goroutine about to start 8 cUID,pUID   93CE6iDfRW+GvGjG6/MBmQ==  yOOzWZ6HQ0KY51Cyao69eQ==  
rdfLoader: 2020/08/16 23:31:33.250037 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 23:31:33.250274 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:31:33.252401 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.279175ms
DB: 2020/08/16 23:31:33.255444 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.007091ms
DB: 2020/08/16 23:31:33.258939 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.44381ms
DB: 2020/08/16 23:31:33.262955 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.947191ms
AttachNode: main 2020/08/16 23:31:33.262971 FetchForUpdate: for parent    yOOzWZ6HQ0KY51Cyao69eQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:31:33.262977 ** Cache FetchForUpdate Cache Key Value: [yOOzWZ6HQ0KY51Cyao69eQ==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:31:33.262984 +++  Cache FetchItems for sortk A#G#:S UID: [yOOzWZ6HQ0KY51Cyao69eQ==] 
FetchNode: 2020/08/16 23:31:33.262989  node: yOOzWZ6HQ0KY51Cyao69eQ== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:31:33.263175 FetchForUpdate: for child    93CE6iDfRW+GvGjG6/MBmQ==
FetchForUpdate: 2020/08/16 23:31:33.263185 ** Cache FetchForUpdate Cache Key Value: [93CE6iDfRW+GvGjG6/MBmQ==]   sortk: A#
fetchItems: 2020/08/16 23:31:33.263191 +++  Cache FetchItems for sortk A# UID: [93CE6iDfRW+GvGjG6/MBmQ==] 
FetchNode: 2020/08/16 23:31:33.263212  node: 93CE6iDfRW+GvGjG6/MBmQ== subKey: A#
DB: 2020/08/16 23:31:33.265659 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.635524ms
DB: 2020/08/16 23:31:33.267098 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 13  Duration: 3.842551ms
DB: 2020/08/16 23:31:33.269356 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.536484ms
DB: 2020/08/16 23:31:33.273292 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.869559ms
DB: 2020/08/16 23:31:33.276793 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.431991ms
DB: 2020/08/16 23:31:33.280832 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.949947ms
DB: 2020/08/16 23:31:33.284212 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.307853ms
Cache: 2020/08/16 23:31:33.284226 In SetUpredAvailable: pUid, tUID:  yOOzWZ6HQ0KY51Cyao69eQ== yOOzWZ6HQ0KY51Cyao69eQ== A#G#:S
Cache: 2020/08/16 23:31:33.284231 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:31:33.287561 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.293304ms
Unlock: 2020/08/16 23:31:33.287571 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:31:33.287576 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:31:33.291744 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.110843ms
grmgr: 2020/08/16 23:31:33.291764 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 23:31:33.291770 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 23:31:33.291778 11.....
rdfLoader: 2020/08/16 23:31:33.291785 22.....error cnt: 0
rdfuuid: 2020/08/16 23:31:33.291793 Powering down...
errlog: 2020/08/16 23:31:33.291798 Powering down...
grmgr: 2020/08/16 23:31:33.291803 Powering down...
anmgr: 2020/08/16 23:31:33.291808 Powering down...
rdfLoader: 2020/08/16 23:31:33.291812 loader exists.....
DB:2020/08/16 23:51:58 log.go:18: ===============================================================================
anmgr: 2020/08/16 23:51:58.148267 Powering on...
rdfLoader: 2020/08/16 23:51:58.148296 saveNode started......
rdfLoader: 2020/08/16 23:51:58.148302 define saveNode limiter......
rdfuuid: 2020/08/16 23:51:58.148306 Powering on...
grmgr: 2020/08/16 23:51:58.148323 Powering on...
errlog: 2020/08/16 23:51:58.148337 Powering on...
rdfLoader: 2020/08/16 23:51:58.148365  principle goroutines started 
RDFreader: 2020/08/16 23:51:58.148387 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 23:51:58.148402 spo read:  abc  __type  "Person"
RDFreader: 2020/08/16 23:51:58.148408 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/16 23:51:58.148414 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/16 23:51:58.148419 spo read:  abc  Age  "62"
RDFreader: 2020/08/16 23:51:58.148424 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/16 23:51:58.148429 spo read:      
RDFreader: 2020/08/16 23:51:58.148434 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/16 23:51:58.148439 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/16 23:51:58.148444 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/16 23:51:58.148449 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/16 23:51:58.148453 spo read:      
RDFreader: 2020/08/16 23:51:58.148458 spo read:  b  __type  "Person"
RDFreader: 2020/08/16 23:51:58.148463 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/16 23:51:58.148469 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/16 23:51:58.148474 spo read:  b  Age  "58"
RDFreader: 2020/08/16 23:51:58.148479 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/16 23:51:58.148484 spo read:  b  Siblings  _:c
RDFreader: 2020/08/16 23:51:58.148489 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/16 23:51:58.148494 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/16 23:51:58.148499 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/16 23:51:58.148503 spo read:      
RDFreader: 2020/08/16 23:51:58.148525 spo read:  c  __type  "Person"
rdfLoader: 2020/08/16 23:51:58.148531 Send node batch on channel verifyCh
RDFreader: 2020/08/16 23:51:58.148539 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/16 23:51:58.148544 spo read:  c  __type  "Person"
RDFreader: 2020/08/16 23:51:58.148549 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/16 23:51:58.148557 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/16 23:51:58.148563 spo read:  c  Age  "67"
RDFreader: 2020/08/16 23:51:58.148568 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/16 23:51:58.148578 spo read:  c  Siblings  _:b
RDFreader: 2020/08/16 23:51:58.148583 spo read:  c  Friends  _:abc
RDFreader: 2020/08/16 23:51:58.148588 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/16 23:51:58.148594 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/16 23:51:58.148599 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/16 23:51:58.148604 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/16 23:51:58.148608 spo read:      
RDFreader: 2020/08/16 23:51:58.148612 spo read:  d  __type  "Person"
RDFreader: 2020/08/16 23:51:58.148617 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/16 23:51:58.148622 spo read:  d  Friends  _:abc
RDFreader: 2020/08/16 23:51:58.148626 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/16 23:51:58.148631 spo read:  d  Age  "36"
RDFreader: 2020/08/16 23:51:58.148635 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/16 23:51:58.148642 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/16 23:51:58.148645 Send node batch on channel verifyCh
rdfLoader: 2020/08/16 23:51:58.148651 close verify channel
rdfLoader: 2020/08/16 23:51:58.148655 verify started....
rdfLoader: 2020/08/16 23:51:58.148660 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 23:51:58.148663 .  getType..
rdfLoader: 2020/08/16 23:51:58.148690 node.TyName : [Person]
DB: 2020/08/16 23:51:58.229361 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 80.603409ms
grmgr: 2020/08/16 23:51:58.229532 Looping..... 0
grmgr: 2020/08/16 23:51:58.229824 Looping..... 1
grmgr: 2020/08/16 23:51:58.230011 Looping..... 2
grmgr: 2020/08/16 23:51:58.230204 Looping..... 3
grmgr: 2020/08/16 23:51:58.230364 Looping..... 4
grmgr: 2020/08/16 23:51:58.230542 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 23:51:58.230554 .  getType..
rdfLoader: 2020/08/16 23:51:58.230558 node.TyName : [Person]
grmgr: 2020/08/16 23:51:58.230564 Looping..... 0
unmarshalRDF: 2020/08/16 23:51:58.230579 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:51:58.230600 Looping..... 1
grmgr: 2020/08/16 23:51:58.230605 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 23:51:58.230609 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/16 23:51:58.230629 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/16 23:51:58.230634 .  getType..
rdfLoader: 2020/08/16 23:51:58.230638 node.TyName : [Person]
grmgr: 2020/08/16 23:51:58.230643 Looping..... 0
rdfLoader: 2020/08/16 23:51:58.230653 Add to SS . [Honda]
rdfLoader: 2020/08/16 23:51:58.230658 Add to SS . [Alfa]
anmgr 2020/08/16 23:51:58.230711 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.230720 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:51:58.230758 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", C:"", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", C:"", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", C:"", Value:"13 March 1958"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:51:58.230764 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/16 23:51:58.230774 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:51:58.230836 Looping..... 1
grmgr: 2020/08/16 23:51:58.230844 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/16 23:51:58.230849 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 23:51:58.230854 Looping..... 0
rdfLoader: 2020/08/16 23:51:58.230863 Add to SS . [Honda]
rdfLoader: 2020/08/16 23:51:58.230868 Add to SS . [VW Golf]
anmgr 2020/08/16 23:51:58.230883 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.230900 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:51:58.230933 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", C:"", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", C:"", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", C:"", Value:58}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:51:58.230937 Exit  unmarshalRDF. 
rdfLoader: 2020/08/16 23:51:58.230943 .  getType..
rdfLoader: 2020/08/16 23:51:58.230961 node.TyName : [Person]
unmarshalRDF: 2020/08/16 23:51:58.230971 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:51:58.231000 Looping..... 1
rdfLoader: 2020/08/16 23:51:58.231009 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/16 23:51:58.231014 Add to SS . [Ford Laser]
rdfLoader: 2020/08/16 23:51:58.231018 Add to SS . [Honda]
anmgr 2020/08/16 23:51:58.231033 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.231039 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/16 23:51:58.231071 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", C:"", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", C:"C", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", C:"", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", C:"", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:51:58.231075 Exit  unmarshalRDF. 
anmgr 2020/08/16 23:51:58.231080 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/16 23:51:58.231090 Looping..... 2
grmgr: 2020/08/16 23:51:58.231179 Looping..... 3
grmgr: 2020/08/16 23:51:58.231365 Looping..... 4
grmgr: 2020/08/16 23:51:58.231529 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 23:51:58.231537 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 23:51:58.231542 Looping..... 0
grmgr: 2020/08/16 23:51:58.231576 Looping..... 1
SaveRDFNode: xxx 2020/08/16 23:51:58.231586 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.231593 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", C:"", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.231598 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", C:"", Value:62}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.231606 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.231611 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", C:"", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.231617 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.231623 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:51:58.231627 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:51:58.231638 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000346180)}
SaveRDFNode: 2020/08/16 23:51:58.231643 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:51:58.231661 UID received  : vxOD+kLaQg+5LdgPW5ACEg==
grmgr: 2020/08/16 23:51:58.231941 Looping..... 2
grmgr: 2020/08/16 23:51:58.232121 Looping..... 3
grmgr: 2020/08/16 23:51:58.232302 Looping..... 4
grmgr: 2020/08/16 23:51:58.232474 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/16 23:51:58.232482 Looping..... 0
unmarshalRDF: 2020/08/16 23:51:58.232496 Entered unmarshalRDF. 
grmgr: 2020/08/16 23:51:58.232508 Looping..... 1
rdfLoader: 2020/08/16 23:51:58.232516 Add to SS . [Bentley]
unmarshalRDF: 2020/08/16 23:51:58.232553 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", C:"", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", C:"", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", C:"", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/16 23:51:58.232560 Exit  unmarshalRDF. 
anmgr 2020/08/16 23:51:58.232578 received on EdgeSnCn. anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
grmgr: 2020/08/16 23:51:58.232588 Looping..... 2
grmgr: 2020/08/16 23:51:58.232650 Looping..... 3
grmgr: 2020/08/16 23:51:58.232879 Looping..... 4
grmgr: 2020/08/16 23:51:58.233018 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/16 23:51:58.233027 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/16 23:51:58.233032 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/16 23:51:58.233037 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/16 23:51:58.233045 Looping..... 0
grmgr: 2020/08/16 23:51:58.233075 Looping..... 1
grmgr: 2020/08/16 23:51:58.233080 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 23:51:58.233084 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 23:51:58.233093 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.233101 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.233106 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", C:"", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.233111 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", C:"", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.233117 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", C:"", Value:58}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.233123 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.233128 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:51:58.233132 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:51:58.233138 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0003463c0)}
SaveRDFNode: 2020/08/16 23:51:58.233161 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:51:58.233171 UID received  : s7rBu3ZoQnSNEsw+pV1YVA==
DB: 2020/08/16 23:51:58.242247 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.537536ms
DB: 2020/08/16 23:51:58.246038 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.732978ms
DB: 2020/08/16 23:51:58.250077 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.818737ms
DB: 2020/08/16 23:51:58.253720 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.588204ms
DB: 2020/08/16 23:51:58.257346 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 24.144451ms
DB: 2020/08/16 23:51:58.257761 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.985877ms
SaveRDFNode: 2020/08/16 23:51:58.257775 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346180)}
SaveRDFNode: 2020/08/16 23:51:58.257784 Received UID: X18=
SaveRDFNode: 2020/08/16 23:51:58.257799 a: = db.Item{PKey:[]uint8{0xbf, 0x13, 0x83, 0xfa, 0x42, 0xda, 0x42, 0xf, 0xb9, 0x2d, 0xd8, 0xf, 0x5b, 0x90, 0x2, 0x12}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:51:58.261199 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.811446ms
DB: 2020/08/16 23:51:58.261734 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.902072ms
SaveRDFNode: 2020/08/16 23:51:58.261929 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000346180)}
SaveRDFNode: 2020/08/16 23:51:58.261941 Received UID: X18=
SaveRDFNode: 2020/08/16 23:51:58.261952 a: = db.Item{PKey:[]uint8{0xbf, 0x13, 0x83, 0xfa, 0x42, 0xda, 0x42, 0xf, 0xb9, 0x2d, 0xd8, 0xf, 0x5b, 0x90, 0x2, 0x12}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:51:58.265290 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.059542ms
DB: 2020/08/16 23:51:58.265647 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.66524ms
DB: 2020/08/16 23:51:58.269514 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.834236ms
DB: 2020/08/16 23:51:58.269782 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.461144ms
DB: 2020/08/16 23:51:58.273294 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.748381ms
DB: 2020/08/16 23:51:58.273666 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.852825ms
SaveRDFNode: 2020/08/16 23:51:58.273678 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003463c0)}
SaveRDFNode: 2020/08/16 23:51:58.273686 Received UID: X18=
SaveRDFNode: 2020/08/16 23:51:58.273701 a: = db.Item{PKey:[]uint8{0xb3, 0xba, 0xc1, 0xbb, 0x76, 0x68, 0x42, 0x74, 0x8d, 0x12, 0xcc, 0x3e, 0xa5, 0x5d, 0x58, 0x54}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:51:58.277601 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.860517ms
SaveRDFNode: 2020/08/16 23:51:58.277772 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003463c0)}
SaveRDFNode: 2020/08/16 23:51:58.277785 Received UID: X18=
SaveRDFNode: 2020/08/16 23:51:58.277795 a: = db.Item{PKey:[]uint8{0xb3, 0xba, 0xc1, 0xbb, 0x76, 0x68, 0x42, 0x74, 0x8d, 0x12, 0xcc, 0x3e, 0xa5, 0x5d, 0x58, 0x54}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:51:58.281940 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.114062ms
DB: 2020/08/16 23:51:58.285556 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 12.23133ms
SaveRDFNode: 2020/08/16 23:51:58.285567 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:51:58.285578 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 23:51:58.285584 Send ack to waiting saveNode...
grmgr: 2020/08/16 23:51:58.285592 Looping..... 0
grmgr: 2020/08/16 23:51:58.285633 Looping..... 1
grmgr: 2020/08/16 23:51:58.285639 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/16 23:51:58.285655 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/16 23:51:58.285676 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.285683 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", C:"", Value:67}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.285691 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", C:"C", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.285697 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", C:"", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.285703 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", C:"", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.285709 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.285715 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:51:58.285719 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:51:58.285725 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000238360)}
SaveRDFNode: 2020/08/16 23:51:58.285729 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:51:58.285740 UID received  : /ryNrijBS6u2Qj2ztovmiA==
DB: 2020/08/16 23:51:58.286118 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.142689ms
DB: 2020/08/16 23:51:58.289443 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.677398ms
DB: 2020/08/16 23:51:58.290290 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.144579ms
DB: 2020/08/16 23:51:58.293304 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.82669ms
DB: 2020/08/16 23:51:58.294307 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.986622ms
SaveRDFNode: 2020/08/16 23:51:58.294319 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:51:58.294326 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/16 23:51:58.294331 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/16 23:51:58.294361 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.294368 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", C:"", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.294374 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", C:"", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.294380 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", C:"", Value:36}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.294387 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.294411 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/16 23:51:58.294419 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/16 23:51:58.294423 SaveRDFNode : 7 
SaveRDFNode: 2020/08/16 23:51:58.294429 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000238d20)}
SaveRDFNode: 2020/08/16 23:51:58.294433 Waiting for UID ......................
SaveRDFNode: 2020/08/16 23:51:58.294443 UID received  : 86CsS9ufSbapezO47CUNDg==
grmgr: 2020/08/16 23:51:58.294624 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/16 23:51:58.297454 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.676104ms
DB: 2020/08/16 23:51:58.298859 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.387591ms
DB: 2020/08/16 23:51:58.301144 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.62502ms
DB: 2020/08/16 23:51:58.302879 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.978398ms
DB: 2020/08/16 23:51:58.305268 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.092073ms
SaveRDFNode: 2020/08/16 23:51:58.305282 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000238360)}
SaveRDFNode: 2020/08/16 23:51:58.305290 Received UID: X18=
SaveRDFNode: 2020/08/16 23:51:58.305301 a: = db.Item{PKey:[]uint8{0xfe, 0xbc, 0x8d, 0xae, 0x28, 0xc1, 0x4b, 0xab, 0xb6, 0x42, 0x3d, 0xb3, 0xb6, 0x8b, 0xe6, 0x88}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:51:58.306835 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.924539ms
DB: 2020/08/16 23:51:58.309220 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.885274ms
SaveRDFNode: 2020/08/16 23:51:58.309396 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000238360)}
SaveRDFNode: 2020/08/16 23:51:58.309409 Received UID: X18=
SaveRDFNode: 2020/08/16 23:51:58.309420 a: = db.Item{PKey:[]uint8{0xfe, 0xbc, 0x8d, 0xae, 0x28, 0xc1, 0x4b, 0xab, 0xb6, 0x42, 0x3d, 0xb3, 0xb6, 0x8b, 0xe6, 0x88}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:51:58.310605 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.738277ms
DB: 2020/08/16 23:51:58.313773 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.317698ms
DB: 2020/08/16 23:51:58.314354 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.713728ms
SaveRDFNode: 2020/08/16 23:51:58.314368 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000238d20)}
SaveRDFNode: 2020/08/16 23:51:58.314375 Received UID: X18=
SaveRDFNode: 2020/08/16 23:51:58.314404 a: = db.Item{PKey:[]uint8{0xf3, 0xa0, 0xac, 0x4b, 0xdb, 0x9f, 0x49, 0xb6, 0xa9, 0x7b, 0x33, 0xb8, 0xec, 0x25, 0xd, 0xe}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:51:58.318082 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.276872ms
DB: 2020/08/16 23:51:58.318569 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.135521ms
SaveRDFNode: 2020/08/16 23:51:58.318581 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000238d20)}
SaveRDFNode: 2020/08/16 23:51:58.318588 Received UID: X18=
SaveRDFNode: 2020/08/16 23:51:58.318601 a: = db.Item{PKey:[]uint8{0xf3, 0xa0, 0xac, 0x4b, 0xdb, 0x9f, 0x49, 0xb6, 0xa9, 0x7b, 0x33, 0xb8, 0xec, 0x25, 0xd, 0xe}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/16 23:51:58.321873 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.75884ms
DB: 2020/08/16 23:51:58.322453 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.823441ms
DB: 2020/08/16 23:51:58.325499 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.591461ms
DB: 2020/08/16 23:51:58.326664 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.180197ms
DB: 2020/08/16 23:51:58.329195 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.660032ms
SaveRDFNode: 2020/08/16 23:51:58.329208 Returned.+++++++++++ No error
grmgr: 2020/08/16 23:51:58.329219 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/16 23:51:58.330488 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.793077ms
SaveRDFNode: 2020/08/16 23:51:58.330509 Returned.+++++++++++ No error
rdfLoader: 2020/08/16 23:51:58.330517 saveNode finished waiting...exiting
grmgr: 2020/08/16 23:51:58.330523 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/16 23:51:58.330537 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.345985 About to run AttachNodeCh: abc  b  vxOD+kLaQg+5LdgPW5ACEg== s7rBu3ZoQnSNEsw+pV1YVA==
anmgr 2020/08/16 23:51:58.346029 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:51:58.346042 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/16 23:51:58.346051 Looping..... 0
grmgr: 2020/08/16 23:51:58.346490 Looping..... 1
grmgr: 2020/08/16 23:51:58.346519 Looping..... 2
grmgr: 2020/08/16 23:51:58.346702 Looping..... 3
grmgr: 2020/08/16 23:51:58.346852 Looping..... 4
grmgr: 2020/08/16 23:51:58.347028 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:51:58.347039 goroutine about to start 1 cUID,pUID   vxOD+kLaQg+5LdgPW5ACEg==  s7rBu3ZoQnSNEsw+pV1YVA==  
grmgr: 2020/08/16 23:51:58.347362 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:51:58.350209 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.075821ms
DB: 2020/08/16 23:51:58.353238 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.991198ms
DB: 2020/08/16 23:51:58.357586 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.26371ms
anmgr 2020/08/16 23:51:58.361524 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.365581 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 7.22376ms
AttachNode: main 2020/08/16 23:51:58.365601 FetchForUpdate: for parent    s7rBu3ZoQnSNEsw+pV1YVA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:51:58.365607 ** Cache FetchForUpdate Cache Key Value: [s7rBu3ZoQnSNEsw+pV1YVA==]   sortk: A#G#:S
FetchNode: 2020/08/16 23:51:58.365614  node: s7rBu3ZoQnSNEsw+pV1YVA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:51:58.365827 FetchForUpdate: for child    vxOD+kLaQg+5LdgPW5ACEg==
FetchForUpdate: 2020/08/16 23:51:58.365836 ** Cache FetchForUpdate Cache Key Value: [vxOD+kLaQg+5LdgPW5ACEg==]   sortk: A#
FetchNode: 2020/08/16 23:51:58.365870  node: vxOD+kLaQg+5LdgPW5ACEg== subKey: A#
DB: 2020/08/16 23:51:58.369068 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.142315ms
FetchForUpdate: 2020/08/16 23:51:58.369240 len(nb): 7
fetchItems: 2020/08/16 23:51:58.369254 +++  Cache FetchItems for sortk A# UID: [vxOD+kLaQg+5LdgPW5ACEg==] 
FetchNode: 2020/08/16 23:51:58.369259  node: vxOD+kLaQg+5LdgPW5ACEg== subKey: A#
DB: 2020/08/16 23:51:58.370037 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.38553ms
FetchForUpdate: 2020/08/16 23:51:58.370067 len(nb): 1
fetchItems: 2020/08/16 23:51:58.370073 +++  Cache FetchItems for sortk A#G#:S UID: [s7rBu3ZoQnSNEsw+pV1YVA==] 
FetchNode: 2020/08/16 23:51:58.370078  node: s7rBu3ZoQnSNEsw+pV1YVA== subKey: A#G#:S
DB: 2020/08/16 23:51:58.372419 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.112161ms
DB: 2020/08/16 23:51:58.374728 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.601049ms
anmgr 2020/08/16 23:51:58.376985 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.380261 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.446997ms
DB: 2020/08/16 23:51:58.387008 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.413069ms
DB: 2020/08/16 23:51:58.391146 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.955248ms
anmgr 2020/08/16 23:51:58.392624 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:51:58.395846 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.314375ms
DB: 2020/08/16 23:51:58.402718 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.570217ms
DB: 2020/08/16 23:51:58.407452 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.276935ms
anmgr 2020/08/16 23:51:58.408785 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.411968 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.167182ms
DB: 2020/08/16 23:51:58.418828 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.540885ms
DB: 2020/08/16 23:51:58.423115 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.960343ms
anmgr 2020/08/16 23:51:58.424493 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.427497 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.064158ms
DB: 2020/08/16 23:51:58.431779 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.095847ms
Cache: 2020/08/16 23:51:58.431796 In SetUpredAvailable: pUid, tUID:  s7rBu3ZoQnSNEsw+pV1YVA== s7rBu3ZoQnSNEsw+pV1YVA== A#G#:S
Cache: 2020/08/16 23:51:58.431803 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:51:58.436068 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.229965ms
Unlock: 2020/08/16 23:51:58.436080 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:51:58.436085 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:51:58.439948 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:51:58.440378 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.216096ms
grmgr: 2020/08/16 23:51:58.440392 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:51:58.445123 ** received on attachDoneCh.... 1
anmgr 2020/08/16 23:51:58.450292 About to run AttachNodeCh: d  abc  86CsS9ufSbapezO47CUNDg== vxOD+kLaQg+5LdgPW5ACEg==
anmgr 2020/08/16 23:51:58.450305 for loop finished 1  8 
anmgr 2020/08/16 23:51:58.450313 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.450320 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.450324 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:51:58.450332 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/16 23:51:58.450338 Looping..... 0
grmgr: 2020/08/16 23:51:58.450492 Looping..... 1
grmgr: 2020/08/16 23:51:58.450705 Looping..... 2
grmgr: 2020/08/16 23:51:58.450861 Looping..... 3
grmgr: 2020/08/16 23:51:58.451045 Looping..... 4
grmgr: 2020/08/16 23:51:58.451220 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:51:58.451230 goroutine about to start 2 cUID,pUID   86CsS9ufSbapezO47CUNDg==  vxOD+kLaQg+5LdgPW5ACEg==  
grmgr: 2020/08/16 23:51:58.451452 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:51:58.454069 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.760932ms
DB: 2020/08/16 23:51:58.457006 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.888187ms
DB: 2020/08/16 23:51:58.462553 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.498318ms
anmgr 2020/08/16 23:51:58.466104 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.467090 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.336229ms
AttachNode: main 2020/08/16 23:51:58.467103 FetchForUpdate: for parent    vxOD+kLaQg+5LdgPW5ACEg==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 23:51:58.467108 ** Cache FetchForUpdate Cache Key Value: [vxOD+kLaQg+5LdgPW5ACEg==]   sortk: A#G#:F
fetchItems: 2020/08/16 23:51:58.467114 +++  Cache FetchItems for sortk A#G#:F UID: [vxOD+kLaQg+5LdgPW5ACEg==] 
FetchNode: 2020/08/16 23:51:58.467119  node: vxOD+kLaQg+5LdgPW5ACEg== subKey: A#G#:F
AttachNode: gr1 2020/08/16 23:51:58.467298 FetchForUpdate: for child    86CsS9ufSbapezO47CUNDg==
FetchForUpdate: 2020/08/16 23:51:58.467321 ** Cache FetchForUpdate Cache Key Value: [86CsS9ufSbapezO47CUNDg==]   sortk: A#
FetchNode: 2020/08/16 23:51:58.467361  node: 86CsS9ufSbapezO47CUNDg== subKey: A#
DB: 2020/08/16 23:51:58.470140 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.973251ms
DB: 2020/08/16 23:51:58.470718 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.305832ms
FetchForUpdate: 2020/08/16 23:51:58.470841 len(nb): 7
fetchItems: 2020/08/16 23:51:58.470850 +++  Cache FetchItems for sortk A# UID: [86CsS9ufSbapezO47CUNDg==] 
FetchNode: 2020/08/16 23:51:58.470854  node: 86CsS9ufSbapezO47CUNDg== subKey: A#
DB: 2020/08/16 23:51:58.474070 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.175536ms
DB: 2020/08/16 23:51:58.475847 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.285923ms
anmgr 2020/08/16 23:51:58.482347 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.483117 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.905452ms
DB: 2020/08/16 23:51:58.487289 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.996423ms
DB: 2020/08/16 23:51:58.491810 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.157512ms
DB: 2020/08/16 23:51:58.497851 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.718358ms
anmgr 2020/08/16 23:51:58.498326 About to run AttachNodeCh: b  c  s7rBu3ZoQnSNEsw+pV1YVA== /ryNrijBS6u2Qj2ztovmiA==
anmgr 2020/08/16 23:51:58.498359 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/16 23:51:58.498368 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/16 23:51:58.498381 Looping..... 0
grmgr: 2020/08/16 23:51:58.498396 Looping..... 1
grmgr: 2020/08/16 23:51:58.498477 Looping..... 2
grmgr: 2020/08/16 23:51:58.498505 Looping..... 3
grmgr: 2020/08/16 23:51:58.498651 Looping..... 4
grmgr: 2020/08/16 23:51:58.498848 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:51:58.498861 goroutine about to start 3 cUID,pUID   s7rBu3ZoQnSNEsw+pV1YVA==  /ryNrijBS6u2Qj2ztovmiA==  
grmgr: 2020/08/16 23:51:58.499221 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/16 23:51:58.502122 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.967683ms
DB: 2020/08/16 23:51:58.506379 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.323569ms
DB: 2020/08/16 23:51:58.506610 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.415112ms
DB: 2020/08/16 23:51:58.509018 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.605514ms
DB: 2020/08/16 23:51:58.512279 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.601524ms
DB: 2020/08/16 23:51:58.513027 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.955062ms
anmgr 2020/08/16 23:51:58.513783 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.516659 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.100562ms
DB: 2020/08/16 23:51:58.519170 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.955438ms
AttachNode: main 2020/08/16 23:51:58.519184 FetchForUpdate: for parent    /ryNrijBS6u2Qj2ztovmiA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:51:58.519188 ** Cache FetchForUpdate Cache Key Value: [/ryNrijBS6u2Qj2ztovmiA==]   sortk: A#G#:S
FetchNode: 2020/08/16 23:51:58.519195  node: /ryNrijBS6u2Qj2ztovmiA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:51:58.519392 FetchForUpdate: for child    s7rBu3ZoQnSNEsw+pV1YVA==
FetchForUpdate: 2020/08/16 23:51:58.519401 ** Cache FetchForUpdate Cache Key Value: [s7rBu3ZoQnSNEsw+pV1YVA==]   sortk: A#
fetchItems: 2020/08/16 23:51:58.519407 +++  Cache FetchItems for sortk A# UID: [s7rBu3ZoQnSNEsw+pV1YVA==] 
FetchNode: 2020/08/16 23:51:58.519442  node: s7rBu3ZoQnSNEsw+pV1YVA== subKey: A#
DB: 2020/08/16 23:51:58.521028 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.020016ms
DB: 2020/08/16 23:51:58.521940 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.710805ms
FetchForUpdate: 2020/08/16 23:51:58.521979 len(nb): 1
fetchItems: 2020/08/16 23:51:58.521985 +++  Cache FetchItems for sortk A#G#:S UID: [/ryNrijBS6u2Qj2ztovmiA==] 
FetchNode: 2020/08/16 23:51:58.521989  node: /ryNrijBS6u2Qj2ztovmiA== subKey: A#G#:S
DB: 2020/08/16 23:51:58.524525 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 5.023042ms
fetchItems: 2020/08/16 23:51:58.524706 +++  Cache FetchItems for sortk A# UID: [s7rBu3ZoQnSNEsw+pV1YVA==] 
FetchNode: 2020/08/16 23:51:58.524713  node: s7rBu3ZoQnSNEsw+pV1YVA== subKey: A#
DB: 2020/08/16 23:51:58.530658 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 9.406943ms
Cache: 2020/08/16 23:51:58.530902 In SetUpredAvailable: pUid, tUID:  vxOD+kLaQg+5LdgPW5ACEg== vxOD+kLaQg+5LdgPW5ACEg== A#G#:F
Cache: 2020/08/16 23:51:58.530913 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 23:51:58.531251 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.531636 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 9.606614ms
DB: 2020/08/16 23:51:58.534470 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 9.728175ms
DB: 2020/08/16 23:51:58.536903 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.162613ms
DB: 2020/08/16 23:51:58.554990 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 24.013578ms
Unlock: 2020/08/16 23:51:58.555024 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:51:58.555030 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:51:58.557420 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.557449 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.557455 for loop finished 1  8 
anmgr 2020/08/16 23:51:58.557460 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.557466 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.557471 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.557894 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 17.791445ms
DB: 2020/08/16 23:51:58.561838 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.864615ms
DB: 2020/08/16 23:51:58.566792 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.460875ms
DB: 2020/08/16 23:51:58.572716 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 17.601963ms
grmgr: 2020/08/16 23:51:58.572795 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/16 23:51:58.572815 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.572822 ** received on attachDoneCh.... 0
DB: 2020/08/16 23:51:58.573320 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.23172ms
DB: 2020/08/16 23:51:58.579706 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.077833ms
anmgr 2020/08/16 23:51:58.583102 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.583120 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.583125 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:51:58.585725 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.649581ms
DB: 2020/08/16 23:51:58.592327 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.280094ms
DB: 2020/08/16 23:51:58.596557 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.92371ms
anmgr 2020/08/16 23:51:58.598955 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.600680 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.037427ms
DB: 2020/08/16 23:51:58.604744 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.790454ms
Cache: 2020/08/16 23:51:58.604757 In SetUpredAvailable: pUid, tUID:  /ryNrijBS6u2Qj2ztovmiA== /ryNrijBS6u2Qj2ztovmiA== A#G#:S
Cache: 2020/08/16 23:51:58.604763 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:51:58.608719 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.915393ms
Unlock: 2020/08/16 23:51:58.608734 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:51:58.608741 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:51:58.613672 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.85161ms
grmgr: 2020/08/16 23:51:58.613695 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:51:58.614314 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.614325 ** received on attachDoneCh.... 0
anmgr 2020/08/16 23:51:58.624650 About to run AttachNodeCh: c  b  /ryNrijBS6u2Qj2ztovmiA== s7rBu3ZoQnSNEsw+pV1YVA==
anmgr 2020/08/16 23:51:58.624673 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.624681 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.624686 for loop finished 3  8 
anmgr 2020/08/16 23:51:58.624692 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.624698 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.624702 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:51:58.624711 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/16 23:51:58.624718 Looping..... 0
grmgr: 2020/08/16 23:51:58.624837 Looping..... 1
grmgr: 2020/08/16 23:51:58.624970 Looping..... 2
grmgr: 2020/08/16 23:51:58.625165 Looping..... 3
grmgr: 2020/08/16 23:51:58.625345 Looping..... 4
grmgr: 2020/08/16 23:51:58.625522 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:51:58.625533 goroutine about to start 4 cUID,pUID   /ryNrijBS6u2Qj2ztovmiA==  s7rBu3ZoQnSNEsw+pV1YVA==  
grmgr: 2020/08/16 23:51:58.626066 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:51:58.632322 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.477041ms
DB: 2020/08/16 23:51:58.636918 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.525094ms
anmgr 2020/08/16 23:51:58.640095 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.641663 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.686948ms
DB: 2020/08/16 23:51:58.646463 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.570121ms
AttachNode: main 2020/08/16 23:51:58.646483 FetchForUpdate: for parent    s7rBu3ZoQnSNEsw+pV1YVA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:51:58.646488 ** Cache FetchForUpdate Cache Key Value: [s7rBu3ZoQnSNEsw+pV1YVA==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:51:58.646494 +++  Cache FetchItems for sortk A#G#:S UID: [s7rBu3ZoQnSNEsw+pV1YVA==] 
FetchNode: 2020/08/16 23:51:58.646511  node: s7rBu3ZoQnSNEsw+pV1YVA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:51:58.646689 FetchForUpdate: for child    /ryNrijBS6u2Qj2ztovmiA==
FetchForUpdate: 2020/08/16 23:51:58.646698 ** Cache FetchForUpdate Cache Key Value: [/ryNrijBS6u2Qj2ztovmiA==]   sortk: A#
fetchItems: 2020/08/16 23:51:58.646720 +++  Cache FetchItems for sortk A# UID: [/ryNrijBS6u2Qj2ztovmiA==] 
FetchNode: 2020/08/16 23:51:58.646745  node: /ryNrijBS6u2Qj2ztovmiA== subKey: A#
DB: 2020/08/16 23:51:58.650466 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.919938ms
DB: 2020/08/16 23:51:58.654907 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.268778ms
anmgr 2020/08/16 23:51:58.656314 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.656327 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.656332 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:51:58.659021 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.07645ms
DB: 2020/08/16 23:51:58.659041 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.07645ms
DB: 2020/08/16 23:51:58.663849 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 17.051175ms
fetchItems: 2020/08/16 23:51:58.664033 +++  Cache FetchItems for sortk A# UID: [/ryNrijBS6u2Qj2ztovmiA==] 
FetchNode: 2020/08/16 23:51:58.664042  node: /ryNrijBS6u2Qj2ztovmiA== subKey: A#
DB: 2020/08/16 23:51:58.664538 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.454916ms
DB: 2020/08/16 23:51:58.664555 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.454916ms
DB: 2020/08/16 23:51:58.667546 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.471508ms
DB: 2020/08/16 23:51:58.668880 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.147119ms
anmgr 2020/08/16 23:51:58.671888 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.672992 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.958316ms
DB: 2020/08/16 23:51:58.679842 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.498631ms
DB: 2020/08/16 23:51:58.684320 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.272294ms
anmgr 2020/08/16 23:51:58.687326 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.687352 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.687358 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.687364 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.687369 for loop finished 3  8 
anmgr 2020/08/16 23:51:58.687374 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.687379 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.687386 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.688807 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.031164ms
DB: 2020/08/16 23:51:58.695396 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.300284ms
DB: 2020/08/16 23:51:58.699611 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.894293ms
anmgr 2020/08/16 23:51:58.702936 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.704010 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.068146ms
DB: 2020/08/16 23:51:58.710903 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.564017ms
DB: 2020/08/16 23:51:58.715098 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.862039ms
anmgr 2020/08/16 23:51:58.718373 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.718397 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.718404 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:51:58.719578 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.162415ms
DB: 2020/08/16 23:51:58.723806 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.979861ms
Cache: 2020/08/16 23:51:58.723819 In SetUpredAvailable: pUid, tUID:  s7rBu3ZoQnSNEsw+pV1YVA== Guce0SIeQQK3oLiwFUb/Pw== A#G#:S
Cache: 2020/08/16 23:51:58.723825 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:51:58.727823 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.96102ms
Unlock: 2020/08/16 23:51:58.727834 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:51:58.727839 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:51:58.731983 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.082933ms
grmgr: 2020/08/16 23:51:58.731999 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:51:58.733938 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.733955 ** received on attachDoneCh.... 0
anmgr 2020/08/16 23:51:58.744293 About to run AttachNodeCh: c  abc  /ryNrijBS6u2Qj2ztovmiA== vxOD+kLaQg+5LdgPW5ACEg==
anmgr 2020/08/16 23:51:58.744310 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.744317 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.744322 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.744327 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.744332 for loop finished 4  8 
anmgr 2020/08/16 23:51:58.744337 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.744342 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.744347 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:51:58.744353 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/16 23:51:58.744369 Looping..... 0
grmgr: 2020/08/16 23:51:58.744460 Looping..... 1
grmgr: 2020/08/16 23:51:58.744632 Looping..... 2
grmgr: 2020/08/16 23:51:58.744840 Looping..... 3
grmgr: 2020/08/16 23:51:58.744989 Looping..... 4
grmgr: 2020/08/16 23:51:58.745171 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:51:58.745182 goroutine about to start 5 cUID,pUID   /ryNrijBS6u2Qj2ztovmiA==  vxOD+kLaQg+5LdgPW5ACEg==  
grmgr: 2020/08/16 23:51:58.745455 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:51:58.747953 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.680427ms
DB: 2020/08/16 23:51:58.751613 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.629195ms
DB: 2020/08/16 23:51:58.756830 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.41933ms
anmgr 2020/08/16 23:51:58.759759 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.761273 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.24694ms
AttachNode: main 2020/08/16 23:51:58.761286 FetchForUpdate: for parent    vxOD+kLaQg+5LdgPW5ACEg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:51:58.761291 ** Cache FetchForUpdate Cache Key Value: [vxOD+kLaQg+5LdgPW5ACEg==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:51:58.761297 +++  Cache FetchItems for sortk A#G#:S UID: [vxOD+kLaQg+5LdgPW5ACEg==] 
FetchNode: 2020/08/16 23:51:58.761302  node: vxOD+kLaQg+5LdgPW5ACEg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:51:58.761487 FetchForUpdate: for child    /ryNrijBS6u2Qj2ztovmiA==
FetchForUpdate: 2020/08/16 23:51:58.761495 ** Cache FetchForUpdate Cache Key Value: [/ryNrijBS6u2Qj2ztovmiA==]   sortk: A#
fetchItems: 2020/08/16 23:51:58.761501 +++  Cache FetchItems for sortk A# UID: [/ryNrijBS6u2Qj2ztovmiA==] 
FetchNode: 2020/08/16 23:51:58.761544  node: /ryNrijBS6u2Qj2ztovmiA== subKey: A#
DB: 2020/08/16 23:51:58.764128 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.792345ms
DB: 2020/08/16 23:51:58.765031 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.435161ms
DB: 2020/08/16 23:51:58.768391 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.024742ms
DB: 2020/08/16 23:51:58.775151 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.384573ms
anmgr 2020/08/16 23:51:58.776358 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.776371 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.776376 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:51:58.778994 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.671904ms
DB: 2020/08/16 23:51:58.783351 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.972152ms
DB: 2020/08/16 23:51:58.790048 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.201485ms
anmgr 2020/08/16 23:51:58.791871 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.791885 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.791890 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.791895 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.791901 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.791906 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.791910 for loop finished 4  8 
anmgr 2020/08/16 23:51:58.791916 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.791931 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.791936 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.797724 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.598342ms
DB: 2020/08/16 23:51:58.802004 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.193606ms
anmgr 2020/08/16 23:51:58.807559 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.808333 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.26343ms
DB: 2020/08/16 23:51:58.812930 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.530397ms
DB: 2020/08/16 23:51:58.817293 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.292105ms
DB: 2020/08/16 23:51:58.821148 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.800596ms
Cache: 2020/08/16 23:51:58.821160 In SetUpredAvailable: pUid, tUID:  vxOD+kLaQg+5LdgPW5ACEg== vxOD+kLaQg+5LdgPW5ACEg== A#G#:S
Cache: 2020/08/16 23:51:58.821166 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/16 23:51:58.823086 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.823100 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.823106 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/16 23:51:58.824987 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.788046ms
Unlock: 2020/08/16 23:51:58.824997 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:51:58.825002 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:51:58.829608 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.543717ms
grmgr: 2020/08/16 23:51:58.829626 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:51:58.833298 ** received on attachDoneCh.... 2
anmgr 2020/08/16 23:51:58.833316 About to run AttachNodeCh: c  abc  /ryNrijBS6u2Qj2ztovmiA== vxOD+kLaQg+5LdgPW5ACEg==
anmgr 2020/08/16 23:51:58.833325 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.833332 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.833337 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.833342 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.833347 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.833353 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.833357 for loop finished 5  8 
anmgr 2020/08/16 23:51:58.833363 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.833368 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.833373 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:51:58.833380 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/16 23:51:58.833386 Looping..... 0
grmgr: 2020/08/16 23:51:58.833401 Looping..... 1
grmgr: 2020/08/16 23:51:58.833475 Looping..... 2
grmgr: 2020/08/16 23:51:58.833670 Looping..... 3
grmgr: 2020/08/16 23:51:58.833865 Looping..... 4
grmgr: 2020/08/16 23:51:58.834059 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:51:58.834069 goroutine about to start 6 cUID,pUID   /ryNrijBS6u2Qj2ztovmiA==  vxOD+kLaQg+5LdgPW5ACEg==  
grmgr: 2020/08/16 23:51:58.834282 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:51:58.836890 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.75687ms
DB: 2020/08/16 23:51:58.840036 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.06257ms
DB: 2020/08/16 23:51:58.844300 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.195565ms
anmgr 2020/08/16 23:51:58.848808 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.848901 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.425728ms
AttachNode: main 2020/08/16 23:51:58.848913 FetchForUpdate: for parent    vxOD+kLaQg+5LdgPW5ACEg==  sortk: A#G#:F
FetchForUpdate: 2020/08/16 23:51:58.848945 ** Cache FetchForUpdate Cache Key Value: [vxOD+kLaQg+5LdgPW5ACEg==]   sortk: A#G#:F
fetchItems: 2020/08/16 23:51:58.848953 +++  Cache FetchItems for sortk A#G#:F UID: [vxOD+kLaQg+5LdgPW5ACEg==] 
FetchNode: 2020/08/16 23:51:58.848959  node: vxOD+kLaQg+5LdgPW5ACEg== subKey: A#G#:F
AttachNode: gr1 2020/08/16 23:51:58.849163 FetchForUpdate: for child    /ryNrijBS6u2Qj2ztovmiA==
FetchForUpdate: 2020/08/16 23:51:58.849173 ** Cache FetchForUpdate Cache Key Value: [/ryNrijBS6u2Qj2ztovmiA==]   sortk: A#
fetchItems: 2020/08/16 23:51:58.849179 +++  Cache FetchItems for sortk A# UID: [/ryNrijBS6u2Qj2ztovmiA==] 
FetchNode: 2020/08/16 23:51:58.849193  node: /ryNrijBS6u2Qj2ztovmiA== subKey: A#
DB: 2020/08/16 23:51:58.852096 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.101922ms
DB: 2020/08/16 23:51:58.853254 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.959235ms
DB: 2020/08/16 23:51:58.856483 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.012754ms
DB: 2020/08/16 23:51:58.860281 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.764798ms
DB: 2020/08/16 23:51:58.860297 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.764798ms
DB: 2020/08/16 23:51:58.863983 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.644923ms
DB: 2020/08/16 23:51:58.863999 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.644923ms
anmgr 2020/08/16 23:51:58.864427 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.864440 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.864445 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.864451 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.864456 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.864461 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.864466 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.864472 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.864477 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.864482 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.864486 for loop finished 5  8 
anmgr 2020/08/16 23:51:58.864492 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.864497 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.864502 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.868324 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.237775ms
DB: 2020/08/16 23:51:58.872768 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.342549ms
DB: 2020/08/16 23:51:58.879238 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.374584ms
anmgr 2020/08/16 23:51:58.879985 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.883352 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.921369ms
DB: 2020/08/16 23:51:58.887840 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.125993ms
DB: 2020/08/16 23:51:58.894483 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.383833ms
anmgr 2020/08/16 23:51:58.895451 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.895477 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.895482 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.895487 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.895492 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.895497 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.895502 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.895507 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.895512 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.895516 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.895521 for loop finished 5  8 
anmgr 2020/08/16 23:51:58.895525 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.895530 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.895534 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.898539 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.711908ms
DB: 2020/08/16 23:51:58.905939 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.027806ms
anmgr 2020/08/16 23:51:58.911021 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.912454 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.217974ms
DB: 2020/08/16 23:51:58.916719 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.929404ms
DB: 2020/08/16 23:51:58.921830 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.776047ms
anmgr 2020/08/16 23:51:58.926462 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.926478 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.926484 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.926491 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.926498 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.926504 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.926510 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.926516 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.926522 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.926528 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.926534 for loop finished 5  8 
anmgr 2020/08/16 23:51:58.926540 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.926546 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.926562 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.927002 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.817367ms
Cache: 2020/08/16 23:51:58.927014 In SetUpredAvailable: pUid, tUID:  vxOD+kLaQg+5LdgPW5ACEg== kcRyxN7dTwCWl8T8Pk9L0w== A#G#:F
Cache: 2020/08/16 23:51:58.927019 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:51:58.930947 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.874641ms
Unlock: 2020/08/16 23:51:58.930958 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:51:58.930963 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:51:58.935377 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.337348ms
grmgr: 2020/08/16 23:51:58.935391 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:51:58.936782 ** received on attachDoneCh.... 2
anmgr 2020/08/16 23:51:58.936798 About to run AttachNodeCh: abc  c  vxOD+kLaQg+5LdgPW5ACEg== /ryNrijBS6u2Qj2ztovmiA==
anmgr 2020/08/16 23:51:58.936807 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/16 23:51:58.936813 read from AttachNodeCh channel 7 now ASK limiter
grmgr: 2020/08/16 23:51:58.936819 Looping..... 0
grmgr: 2020/08/16 23:51:58.936845 Looping..... 1
grmgr: 2020/08/16 23:51:58.936943 Looping..... 2
grmgr: 2020/08/16 23:51:58.937137 Looping..... 3
grmgr: 2020/08/16 23:51:58.937315 Looping..... 4
grmgr: 2020/08/16 23:51:58.937512 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:51:58.937522 goroutine about to start 7 cUID,pUID   vxOD+kLaQg+5LdgPW5ACEg==  /ryNrijBS6u2Qj2ztovmiA==  
grmgr: 2020/08/16 23:51:58.937728 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:51:58.941120 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.539334ms
DB: 2020/08/16 23:51:58.943841 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.664723ms
DB: 2020/08/16 23:51:58.948000 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.971027ms
anmgr 2020/08/16 23:51:58.952029 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.952041 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.952047 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.952053 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.952058 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.952063 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.952068 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.952073 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.952078 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.952084 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.952088 for loop finished 6  8 
anmgr 2020/08/16 23:51:58.952093 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.952098 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.952103 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.952108 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.952112 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.952354 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.076615ms
AttachNode: main 2020/08/16 23:51:58.952378 FetchForUpdate: for parent    /ryNrijBS6u2Qj2ztovmiA==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:51:58.952383 ** Cache FetchForUpdate Cache Key Value: [/ryNrijBS6u2Qj2ztovmiA==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:51:58.952390 +++  Cache FetchItems for sortk A#G#:S UID: [/ryNrijBS6u2Qj2ztovmiA==] 
FetchNode: 2020/08/16 23:51:58.952394  node: /ryNrijBS6u2Qj2ztovmiA== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:51:58.952582 FetchForUpdate: for child    vxOD+kLaQg+5LdgPW5ACEg==
FetchForUpdate: 2020/08/16 23:51:58.952590 ** Cache FetchForUpdate Cache Key Value: [vxOD+kLaQg+5LdgPW5ACEg==]   sortk: A#
fetchItems: 2020/08/16 23:51:58.952596 +++  Cache FetchItems for sortk A# UID: [vxOD+kLaQg+5LdgPW5ACEg==] 
FetchNode: 2020/08/16 23:51:58.952639  node: vxOD+kLaQg+5LdgPW5ACEg== subKey: A#
DB: 2020/08/16 23:51:58.956538 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 13  Duration: 3.835465ms
DB: 2020/08/16 23:51:58.958546 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 6.117068ms
DB: 2020/08/16 23:51:58.967952 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.028913ms
anmgr 2020/08/16 23:51:58.968587 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.968600 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.968606 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.968612 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.968617 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.968622 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.968627 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.968632 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.968637 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.968642 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.968646 for loop finished 6  8 
anmgr 2020/08/16 23:51:58.968651 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.968656 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.968661 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.968665 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.968670 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.975739 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.747371ms
DB: 2020/08/16 23:51:58.975766 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.747371ms
DB: 2020/08/16 23:51:58.979672 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.872612ms
DB: 2020/08/16 23:51:58.979687 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.872612ms
anmgr 2020/08/16 23:51:58.983863 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.983878 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.983884 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.983890 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.983896 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.983902 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.983907 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.983923 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.983929 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.983934 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.983939 for loop finished 6  8 
anmgr 2020/08/16 23:51:58.983944 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.983951 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.983956 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.983961 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.983967 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:58.984229 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.468767ms
DB: 2020/08/16 23:51:58.988956 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.66058ms
DB: 2020/08/16 23:51:58.995678 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.347246ms
anmgr 2020/08/16 23:51:58.999878 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.999895 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.999902 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.999908 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.999914 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.999920 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.999926 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.999932 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.999938 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.999945 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:58.999950 for loop finished 6  8 
anmgr 2020/08/16 23:51:58.999958 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.999964 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.999970 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.999977 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:58.999982 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:59.000070 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.207454ms
DB: 2020/08/16 23:51:59.004310 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.125164ms
DB: 2020/08/16 23:51:59.011679 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.04171ms
DB: 2020/08/16 23:51:59.015482 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.735435ms
anmgr 2020/08/16 23:51:59.015793 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.015805 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.015810 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.015816 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.015821 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.015826 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.015844 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.015860 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.015866 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.015871 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.015875 for loop finished 6  8 
anmgr 2020/08/16 23:51:59.015881 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.015886 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.015891 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.015896 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.015900 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:59.020108 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.523274ms
DB: 2020/08/16 23:51:59.027560 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.355925ms
anmgr 2020/08/16 23:51:59.031247 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.031266 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.031273 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.031279 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.031285 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.031292 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.031297 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.031303 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.031310 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.031316 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.031322 for loop finished 6  8 
anmgr 2020/08/16 23:51:59.031328 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.031335 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.031341 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.031346 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.031369 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:59.031470 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.800198ms
DB: 2020/08/16 23:51:59.035983 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.432823ms
DB: 2020/08/16 23:51:59.039920 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.851373ms
Cache: 2020/08/16 23:51:59.039942 In SetUpredAvailable: pUid, tUID:  /ryNrijBS6u2Qj2ztovmiA== fkbGT+DVR+Kyw+7iosQZyg== A#G#:S
Cache: 2020/08/16 23:51:59.039948 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:51:59.043957 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.965645ms
Unlock: 2020/08/16 23:51:59.043969 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:51:59.043974 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/16 23:51:59.046702 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.046715 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.046721 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.046727 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.046732 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.046748 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.046753 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.046758 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.046763 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.046768 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.046772 for loop finished 6  8 
anmgr 2020/08/16 23:51:59.046778 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.046783 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.046787 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.046792 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.046797 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/16 23:51:59.048381 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.346821ms
grmgr: 2020/08/16 23:51:59.048396 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/16 23:51:59.051856 ** received on attachDoneCh.... 1
anmgr 2020/08/16 23:51:59.056968 About to run AttachNodeCh: b  abc  s7rBu3ZoQnSNEsw+pV1YVA== vxOD+kLaQg+5LdgPW5ACEg==
anmgr 2020/08/16 23:51:59.056991 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.056999 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.057005 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.057011 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.057018 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.057024 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.057029 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.057035 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/16 23:51:59.057041 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.057047 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/16 23:51:59.057052 for loop finished 7  8 
attachNode: 2020/08/16 23:51:59.057059 read from AttachNodeCh channel 8 now ASK limiter
grmgr: 2020/08/16 23:51:59.057066 Looping..... 0
grmgr: 2020/08/16 23:51:59.057081 Looping..... 1
grmgr: 2020/08/16 23:51:59.057141 Looping..... 2
grmgr: 2020/08/16 23:51:59.057320 Looping..... 3
grmgr: 2020/08/16 23:51:59.057510 Looping..... 4
grmgr: 2020/08/16 23:51:59.057697 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/16 23:51:59.057709 goroutine about to start 8 cUID,pUID   s7rBu3ZoQnSNEsw+pV1YVA==  vxOD+kLaQg+5LdgPW5ACEg==  
rdfLoader: 2020/08/16 23:51:59.057716 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/16 23:51:59.057977 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/16 23:51:59.061367 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.551476ms
DB: 2020/08/16 23:51:59.064565 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.166157ms
DB: 2020/08/16 23:51:59.068640 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.020606ms
DB: 2020/08/16 23:51:59.072801 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.033882ms
AttachNode: main 2020/08/16 23:51:59.072819 FetchForUpdate: for parent    vxOD+kLaQg+5LdgPW5ACEg==  sortk: A#G#:S
FetchForUpdate: 2020/08/16 23:51:59.072825 ** Cache FetchForUpdate Cache Key Value: [vxOD+kLaQg+5LdgPW5ACEg==]   sortk: A#G#:S
fetchItems: 2020/08/16 23:51:59.072845 +++  Cache FetchItems for sortk A#G#:S UID: [vxOD+kLaQg+5LdgPW5ACEg==] 
FetchNode: 2020/08/16 23:51:59.072850  node: vxOD+kLaQg+5LdgPW5ACEg== subKey: A#G#:S
AttachNode: gr1 2020/08/16 23:51:59.073046 FetchForUpdate: for child    s7rBu3ZoQnSNEsw+pV1YVA==
FetchForUpdate: 2020/08/16 23:51:59.073071 ** Cache FetchForUpdate Cache Key Value: [s7rBu3ZoQnSNEsw+pV1YVA==]   sortk: A#
fetchItems: 2020/08/16 23:51:59.073100 +++  Cache FetchItems for sortk A# UID: [s7rBu3ZoQnSNEsw+pV1YVA==] 
FetchNode: 2020/08/16 23:51:59.073120  node: s7rBu3ZoQnSNEsw+pV1YVA== subKey: A#
DB: 2020/08/16 23:51:59.076081 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.192271ms
DB: 2020/08/16 23:51:59.077273 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.107519ms
DB: 2020/08/16 23:51:59.080508 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.064736ms
DB: 2020/08/16 23:51:59.084317 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.7725ms
DB: 2020/08/16 23:51:59.084337 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.7725ms
DB: 2020/08/16 23:51:59.088272 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.901024ms
DB: 2020/08/16 23:51:59.088287 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.901024ms
DB: 2020/08/16 23:51:59.092886 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.240892ms
DB: 2020/08/16 23:51:59.097102 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.141519ms
DB: 2020/08/16 23:51:59.103291 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.091176ms
DB: 2020/08/16 23:51:59.107276 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.929736ms
DB: 2020/08/16 23:51:59.111456 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.070873ms
DB: 2020/08/16 23:51:59.118325 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.55872ms
DB: 2020/08/16 23:51:59.122544 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.904837ms
DB: 2020/08/16 23:51:59.127333 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.481147ms
DB: 2020/08/16 23:51:59.133969 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.323948ms
DB: 2020/08/16 23:51:59.138097 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.795719ms
DB: 2020/08/16 23:51:59.142504 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.090362ms
DB: 2020/08/16 23:51:59.146648 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.95223ms
Cache: 2020/08/16 23:51:59.146666 In SetUpredAvailable: pUid, tUID:  vxOD+kLaQg+5LdgPW5ACEg== 9hk60J8rS+Orw0w8NfFsMw== A#G#:S
Cache: 2020/08/16 23:51:59.146672 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/16 23:51:59.150635 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.92518ms
Unlock: 2020/08/16 23:51:59.150654 ******* IN UNLOCK NC ********************
Unlock: 2020/08/16 23:51:59.150660 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/16 23:51:59.155022 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.298355ms
grmgr: 2020/08/16 23:51:59.155054 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/16 23:51:59.155060 saveNode finished waiting...exiting
rdfLoader: 2020/08/16 23:51:59.155068 11.....
rdfLoader: 2020/08/16 23:51:59.155075 22.....error cnt: 0
rdfuuid: 2020/08/16 23:51:59.155083 Powering down...
errlog: 2020/08/16 23:51:59.155088 Powering down...
grmgr: 2020/08/16 23:51:59.155093 Powering down...
anmgr: 2020/08/16 23:51:59.155098 Powering down...
rdfLoader: 2020/08/16 23:51:59.155122 loader exists.....
DB:2020/08/21 01:04:19 log.go:18: ===============================================================================
anmgr: 2020/08/21 01:04:19.954133 Powering on...
rdfLoader: 2020/08/21 01:04:19.954173 saveNode started......
rdfLoader: 2020/08/21 01:04:19.954179 define saveNode limiter......
rdfuuid: 2020/08/21 01:04:19.954183 Powering on...
grmgr: 2020/08/21 01:04:19.954199 Powering on...
errlog: 2020/08/21 01:04:19.954214 Powering on...
rdfLoader: 2020/08/21 01:04:19.954220  principle goroutines started 
RDFreader: 2020/08/21 01:04:19.954242 reader: batch size -= %!(EXTRA int=2)
rdfLoader: 2020/08/21 01:04:19.954497 verify started....
RDFreader: 2020/08/21 01:04:19.954716 spo read:  abc  __type  "Person"
RDFreader: 2020/08/21 01:04:19.954727 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/21 01:04:19.954733 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/21 01:04:19.954738 spo read:  abc  Age  "62"
RDFreader: 2020/08/21 01:04:19.954743 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/21 01:04:19.954748 spo read:      
RDFreader: 2020/08/21 01:04:19.954753 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/21 01:04:19.954758 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/21 01:04:19.954763 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/21 01:04:19.954768 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/21 01:04:19.954772 spo read:      
RDFreader: 2020/08/21 01:04:19.954777 spo read:  b  __type  "Person"
RDFreader: 2020/08/21 01:04:19.954782 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/21 01:04:19.954787 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/21 01:04:19.954792 spo read:  b  Age  "58"
RDFreader: 2020/08/21 01:04:19.954797 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/21 01:04:19.954802 spo read:  b  Siblings  _:c
RDFreader: 2020/08/21 01:04:19.954807 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/21 01:04:19.954812 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/21 01:04:19.954817 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/21 01:04:19.954821 spo read:      
RDFreader: 2020/08/21 01:04:19.954826 spo read:  c  __type  "Person"
rdfLoader: 2020/08/21 01:04:19.954830 Send node batch on channel verifyCh
RDFreader: 2020/08/21 01:04:19.954840 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/21 01:04:19.954844 spo read:  c  __type  "Person"
RDFreader: 2020/08/21 01:04:19.954851 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/21 01:04:19.954857 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/21 01:04:19.954862 spo read:  c  Age  "67"
RDFreader: 2020/08/21 01:04:19.954867 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/21 01:04:19.954872 spo read:  c  Siblings  _:b
RDFreader: 2020/08/21 01:04:19.954877 spo read:  c  Friends  _:abc
RDFreader: 2020/08/21 01:04:19.954881 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/21 01:04:19.954888 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/21 01:04:19.954893 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/21 01:04:19.954898 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/21 01:04:19.954902 spo read:      
RDFreader: 2020/08/21 01:04:19.954918 spo read:  d  __type  "Person"
RDFreader: 2020/08/21 01:04:19.954923 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/21 01:04:19.954928 spo read:  d  Friends  _:abc
RDFreader: 2020/08/21 01:04:19.954933 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/21 01:04:19.954937 spo read:  d  Age  "36"
RDFreader: 2020/08/21 01:04:19.954942 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/21 01:04:19.954961 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/21 01:04:19.954964 Send node batch on channel verifyCh
rdfLoader: 2020/08/21 01:04:19.954975 close verify channel
rdfLoader: 2020/08/21 01:04:19.954980 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/21 01:04:19.954984 .  getType..
rdfLoader: 2020/08/21 01:04:19.954987 node.TyName : [Person]
DB: 2020/08/21 01:04:20.027003 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 71.953369ms
grmgr: 2020/08/21 01:04:20.027670 Looping..... 0
grmgr: 2020/08/21 01:04:20.028723 Looping..... 1
grmgr: 2020/08/21 01:04:20.028898 Looping..... 2
grmgr: 2020/08/21 01:04:20.029074 Looping..... 3
grmgr: 2020/08/21 01:04:20.029250 Looping..... 4
grmgr: 2020/08/21 01:04:20.029427 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/21 01:04:20.029438 .  getType..
rdfLoader: 2020/08/21 01:04:20.029442 node.TyName : [Person]
grmgr: 2020/08/21 01:04:20.029448 Looping..... 0
unmarshalRDF: 2020/08/21 01:04:20.029460 Entered unmarshalRDF. 
grmgr: 2020/08/21 01:04:20.029469 Looping..... 1
grmgr: 2020/08/21 01:04:20.029474 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/21 01:04:20.029478 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/21 01:04:20.029485 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/21 01:04:20.029489 .  getType..
rdfLoader: 2020/08/21 01:04:20.029492 node.TyName : [Person]
grmgr: 2020/08/21 01:04:20.029497 Looping..... 0
rdfLoader: 2020/08/21 01:04:20.029507 Add to SS . [Honda]
rdfLoader: 2020/08/21 01:04:20.029511 Add to SS . [Alfa]
anmgr 2020/08/21 01:04:20.029551 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.029558 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/21 01:04:20.029600 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", C:"", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", C:"", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", C:"", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/21 01:04:20.029606 Exit  unmarshalRDF. 
unmarshalRDF: 2020/08/21 01:04:20.029615 Entered unmarshalRDF. 
grmgr: 2020/08/21 01:04:20.029639 Looping..... 1
grmgr: 2020/08/21 01:04:20.029645 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/21 01:04:20.029649 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/21 01:04:20.029654 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/21 01:04:20.029658 Looping..... 0
rdfLoader: 2020/08/21 01:04:20.029666 Add to SS . [Honda]
rdfLoader: 2020/08/21 01:04:20.029670 Add to SS . [VW Golf]
anmgr 2020/08/21 01:04:20.029683 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.029689 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/21 01:04:20.029716 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", C:"", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", C:"", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", C:"", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/21 01:04:20.029720 Exit  unmarshalRDF. 
rdfLoader: 2020/08/21 01:04:20.029725 .  getType..
rdfLoader: 2020/08/21 01:04:20.029729 node.TyName : [Person]
unmarshalRDF: 2020/08/21 01:04:20.029746 Entered unmarshalRDF. 
grmgr: 2020/08/21 01:04:20.029757 Looping..... 1
rdfLoader: 2020/08/21 01:04:20.029765 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/21 01:04:20.029769 Add to SS . [Ford Laser]
rdfLoader: 2020/08/21 01:04:20.029773 Add to SS . [Honda]
anmgr 2020/08/21 01:04:20.029806 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.029813 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
unmarshalRDF: 2020/08/21 01:04:20.029841 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", C:"", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", C:"", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", C:"C", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", C:"", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/21 01:04:20.029845 Exit  unmarshalRDF. 
anmgr 2020/08/21 01:04:20.029850 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/21 01:04:20.029875 Looping..... 2
grmgr: 2020/08/21 01:04:20.030055 Looping..... 3
grmgr: 2020/08/21 01:04:20.030230 Looping..... 4
grmgr: 2020/08/21 01:04:20.030406 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/21 01:04:20.030414 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/21 01:04:20.030419 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/21 01:04:20.030423 Looping..... 0
grmgr: 2020/08/21 01:04:20.030455 Looping..... 1
SaveRDFNode: xxx 2020/08/21 01:04:20.030465 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.030471 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", C:"", Value:62}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.030477 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.030483 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", C:"", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.030489 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", C:"", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.030494 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.030500 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/21 01:04:20.030503 SaveRDFNode : 7 
SaveRDFNode: 2020/08/21 01:04:20.030511 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000340000)}
SaveRDFNode: 2020/08/21 01:04:20.030515 Waiting for UID ......................
SaveRDFNode: 2020/08/21 01:04:20.030526 UID received  : YPhQLW+3T3mniSh9t5M9BQ==
grmgr: 2020/08/21 01:04:20.030796 Looping..... 2
grmgr: 2020/08/21 01:04:20.030963 Looping..... 3
grmgr: 2020/08/21 01:04:20.031144 Looping..... 4
grmgr: 2020/08/21 01:04:20.031325 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/21 01:04:20.031333 Looping..... 0
unmarshalRDF: 2020/08/21 01:04:20.031345 Entered unmarshalRDF. 
grmgr: 2020/08/21 01:04:20.031355 Looping..... 1
rdfLoader: 2020/08/21 01:04:20.031363 Add to SS . [Bentley]
unmarshalRDF: 2020/08/21 01:04:20.031397 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", C:"", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", C:"", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", C:"", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", C:"", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}}
unmarshalRDF: 2020/08/21 01:04:20.031406 Exit  unmarshalRDF. 
anmgr 2020/08/21 01:04:20.031413 received on EdgeSnCn. anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
grmgr: 2020/08/21 01:04:20.031423 Looping..... 2
grmgr: 2020/08/21 01:04:20.031502 Looping..... 3
grmgr: 2020/08/21 01:04:20.031679 Looping..... 4
grmgr: 2020/08/21 01:04:20.031857 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/21 01:04:20.031865 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/21 01:04:20.031873 Looping..... 0
grmgr: 2020/08/21 01:04:20.031899 Looping..... 1
grmgr: 2020/08/21 01:04:20.031903 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/21 01:04:20.031907 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/21 01:04:20.031926 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.031932 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", C:"", Value:58}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.031951 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.031957 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", C:"", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.031962 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", C:"", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.031968 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.031974 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/21 01:04:20.031977 SaveRDFNode : 7 
SaveRDFNode: 2020/08/21 01:04:20.031983 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc0003402a0)}
SaveRDFNode: 2020/08/21 01:04:20.031987 Waiting for UID ......................
SaveRDFNode: 2020/08/21 01:04:20.031995 UID received  : 0dRZtBX0T66BvG0t/3jvYQ==
DB: 2020/08/21 01:04:20.044947 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 14.386624ms
DB: 2020/08/21 01:04:20.051987 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 6.994651ms
DB: 2020/08/21 01:04:20.056806 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.775821ms
DB: 2020/08/21 01:04:20.059619 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 27.587268ms
DB: 2020/08/21 01:04:20.061341 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.498626ms
DB: 2020/08/21 01:04:20.064536 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.883801ms
DB: 2020/08/21 01:04:20.065870 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.498162ms
SaveRDFNode: 2020/08/21 01:04:20.065884 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000340000)}
SaveRDFNode: 2020/08/21 01:04:20.065893 Received UID: X18=
SaveRDFNode: 2020/08/21 01:04:20.065911 a: = db.Item{PKey:[]uint8{0x60, 0xf8, 0x50, 0x2d, 0x6f, 0xb7, 0x4f, 0x79, 0xa7, 0x89, 0x28, 0x7d, 0xb7, 0x93, 0x3d, 0x5}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/21 01:04:20.069335 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.764493ms
DB: 2020/08/21 01:04:20.070246 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.301617ms
SaveRDFNode: 2020/08/21 01:04:20.070257 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000340000)}
SaveRDFNode: 2020/08/21 01:04:20.070264 Received UID: X18=
SaveRDFNode: 2020/08/21 01:04:20.070275 a: = db.Item{PKey:[]uint8{0x60, 0xf8, 0x50, 0x2d, 0x6f, 0xb7, 0x4f, 0x79, 0xa7, 0x89, 0x28, 0x7d, 0xb7, 0x93, 0x3d, 0x5}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/21 01:04:20.073975 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.598655ms
DB: 2020/08/21 01:04:20.075063 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.75945ms
DB: 2020/08/21 01:04:20.078432 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.409335ms
SaveRDFNode: 2020/08/21 01:04:20.078447 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003402a0)}
SaveRDFNode: 2020/08/21 01:04:20.078455 Received UID: X18=
SaveRDFNode: 2020/08/21 01:04:20.078466 a: = db.Item{PKey:[]uint8{0xd1, 0xd4, 0x59, 0xb4, 0x15, 0xf4, 0x4f, 0xae, 0x81, 0xbc, 0x6d, 0x2d, 0xff, 0x78, 0xef, 0x61}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/21 01:04:20.079550 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.456523ms
DB: 2020/08/21 01:04:20.083117 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.62013ms
SaveRDFNode: 2020/08/21 01:04:20.083130 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003402a0)}
SaveRDFNode: 2020/08/21 01:04:20.083137 Received UID: X18=
SaveRDFNode: 2020/08/21 01:04:20.083147 a: = db.Item{PKey:[]uint8{0xd1, 0xd4, 0x59, 0xb4, 0x15, 0xf4, 0x4f, 0xae, 0x81, 0xbc, 0x6d, 0x2d, 0xff, 0x78, 0xef, 0x61}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/21 01:04:20.084091 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.508957ms
DB: 2020/08/21 01:04:20.087823 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.646914ms
DB: 2020/08/21 01:04:20.088607 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.486404ms
SaveRDFNode: 2020/08/21 01:04:20.088618 Returned.+++++++++++ No error
grmgr: 2020/08/21 01:04:20.088628 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/21 01:04:20.088633 Send ack to waiting saveNode...
grmgr: 2020/08/21 01:04:20.088641 Looping..... 0
grmgr: 2020/08/21 01:04:20.088678 Looping..... 1
grmgr: 2020/08/21 01:04:20.088683 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/21 01:04:20.088687 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/21 01:04:20.088696 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.088702 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", C:"", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.088709 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", C:"", Value:67}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.088717 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", C:"C", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.088723 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", C:"", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.088743 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.088750 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/21 01:04:20.088763 SaveRDFNode : 7 
SaveRDFNode: 2020/08/21 01:04:20.088769 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc00020e180)}
SaveRDFNode: 2020/08/21 01:04:20.088773 Waiting for UID ......................
SaveRDFNode: 2020/08/21 01:04:20.088785 UID received  : Pbi0RpLdQZKrRG7B3XbrLA==
DB: 2020/08/21 01:04:20.092638 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.777986ms
DB: 2020/08/21 01:04:20.093361 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.547506ms
DB: 2020/08/21 01:04:20.097062 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.393748ms
DB: 2020/08/21 01:04:20.097972 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.580875ms
DB: 2020/08/21 01:04:20.101850 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.755984ms
SaveRDFNode: 2020/08/21 01:04:20.101861 Returned.+++++++++++ No error
grmgr: 2020/08/21 01:04:20.101869 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/21 01:04:20.101874 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/21 01:04:20.101906 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", C:"", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.101912 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", C:"", Value:36}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.101920 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", C:"C", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.101926 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", C:"", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.101950 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", C:"", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.101957 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/21 01:04:20.101963 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", C:"", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/21 01:04:20.101967 SaveRDFNode : 7 
SaveRDFNode: 2020/08/21 01:04:20.101973 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc00020eb40)}
SaveRDFNode: 2020/08/21 01:04:20.101977 Waiting for UID ......................
SaveRDFNode: 2020/08/21 01:04:20.101988 UID received  : 9/K0X/n3RaK4uM59JkKiRg==
grmgr: 2020/08/21 01:04:20.102188 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/21 01:04:20.102365 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.361768ms
DB: 2020/08/21 01:04:20.106801 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.775875ms
DB: 2020/08/21 01:04:20.107071 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.673658ms
DB: 2020/08/21 01:04:20.111425 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.582606ms
DB: 2020/08/21 01:04:20.111776 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.674195ms
SaveRDFNode: 2020/08/21 01:04:20.111789 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00020e180)}
SaveRDFNode: 2020/08/21 01:04:20.111796 Received UID: X18=
SaveRDFNode: 2020/08/21 01:04:20.111808 a: = db.Item{PKey:[]uint8{0x3d, 0xb8, 0xb4, 0x46, 0x92, 0xdd, 0x41, 0x92, 0xab, 0x44, 0x6e, 0xc1, 0xdd, 0x76, 0xeb, 0x2c}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/21 01:04:20.118760 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.923452ms
SaveRDFNode: 2020/08/21 01:04:20.118785 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00020e180)}
SaveRDFNode: 2020/08/21 01:04:20.118792 Received UID: X18=
SaveRDFNode: 2020/08/21 01:04:20.118803 a: = db.Item{PKey:[]uint8{0x3d, 0xb8, 0xb4, 0x46, 0x92, 0xdd, 0x41, 0x92, 0xab, 0x44, 0x6e, 0xc1, 0xdd, 0x76, 0xeb, 0x2c}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/21 01:04:20.119076 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.610302ms
DB: 2020/08/21 01:04:20.123587 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.755022ms
DB: 2020/08/21 01:04:20.124021 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.916598ms
DB: 2020/08/21 01:04:20.128163 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.53164ms
DB: 2020/08/21 01:04:20.128831 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.764511ms
SaveRDFNode: 2020/08/21 01:04:20.128843 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00020eb40)}
SaveRDFNode: 2020/08/21 01:04:20.128850 Received UID: X18=
SaveRDFNode: 2020/08/21 01:04:20.128861 a: = db.Item{PKey:[]uint8{0xf7, 0xf2, 0xb4, 0x5f, 0xf9, 0xf7, 0x45, 0xa2, 0xb8, 0xb8, 0xce, 0x7d, 0x26, 0x42, 0xa2, 0x46}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/21 01:04:20.132707 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.512974ms
DB: 2020/08/21 01:04:20.134648 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.745619ms
SaveRDFNode: 2020/08/21 01:04:20.134660 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc00020eb40)}
SaveRDFNode: 2020/08/21 01:04:20.134667 Received UID: X18=
SaveRDFNode: 2020/08/21 01:04:20.134677 a: = db.Item{PKey:[]uint8{0xf7, 0xf2, 0xb4, 0x5f, 0xf9, 0xf7, 0x45, 0xa2, 0xb8, 0xb8, 0xce, 0x7d, 0x26, 0x42, 0xa2, 0x46}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/21 01:04:20.137422 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.685123ms
DB: 2020/08/21 01:04:20.140364 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.65912ms
DB: 2020/08/21 01:04:20.142218 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.7639ms
SaveRDFNode: 2020/08/21 01:04:20.142228 Returned.+++++++++++ No error
grmgr: 2020/08/21 01:04:20.142236 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/21 01:04:20.144846 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.452739ms
DB: 2020/08/21 01:04:20.149623 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.743245ms
SaveRDFNode: 2020/08/21 01:04:20.149634 Returned.+++++++++++ No error
rdfLoader: 2020/08/21 01:04:20.149641 saveNode finished waiting...exiting
grmgr: 2020/08/21 01:04:20.149647 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/21 01:04:20.149660 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.165165 About to run AttachNodeCh: abc  b  YPhQLW+3T3mniSh9t5M9BQ== 0dRZtBX0T66BvG0t/3jvYQ==
anmgr 2020/08/21 01:04:20.165183 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
attachNode: 2020/08/21 01:04:20.165190 read from AttachNodeCh channel 1 now ASK limiter
grmgr: 2020/08/21 01:04:20.165195 Looping..... 0
grmgr: 2020/08/21 01:04:20.165338 Looping..... 1
grmgr: 2020/08/21 01:04:20.165516 Looping..... 2
grmgr: 2020/08/21 01:04:20.165693 Looping..... 3
grmgr: 2020/08/21 01:04:20.165870 Looping..... 4
grmgr: 2020/08/21 01:04:20.166047 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/21 01:04:20.166079 goroutine about to start 1 cUID,pUID   YPhQLW+3T3mniSh9t5M9BQ==  0dRZtBX0T66BvG0t/3jvYQ==  
grmgr: 2020/08/21 01:04:20.166295 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/21 01:04:20.170812 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.663209ms
DB: 2020/08/21 01:04:20.174233 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.390919ms
DB: 2020/08/21 01:04:20.179021 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.737466ms
anmgr 2020/08/21 01:04:20.180612 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.190702 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 11.612569ms
AttachNode: main 2020/08/21 01:04:20.190718 FetchForUpdate: for parent    0dRZtBX0T66BvG0t/3jvYQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/21 01:04:20.190723 ** Cache FetchForUpdate Cache Key Value: [0dRZtBX0T66BvG0t/3jvYQ==]   sortk: A#G#:S
FetchNode: 2020/08/21 01:04:20.190729  node: 0dRZtBX0T66BvG0t/3jvYQ== subKey: A#G#:S
AttachNode: gr1 2020/08/21 01:04:20.190913 FetchForUpdate: for child    YPhQLW+3T3mniSh9t5M9BQ==
FetchForUpdate: 2020/08/21 01:04:20.190922 ** Cache FetchForUpdate Cache Key Value: [YPhQLW+3T3mniSh9t5M9BQ==]   sortk: A#
FetchNode: 2020/08/21 01:04:20.190939  node: YPhQLW+3T3mniSh9t5M9BQ== subKey: A#
DB: 2020/08/21 01:04:20.195083 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.321013ms
FetchForUpdate: 2020/08/21 01:04:20.195164 len(nb): 1
fetchItems: 2020/08/21 01:04:20.195172 +++  Cache FetchItems for sortk A#G#:S UID: [0dRZtBX0T66BvG0t/3jvYQ==] 
FetchNode: 2020/08/21 01:04:20.195176  node: 0dRZtBX0T66BvG0t/3jvYQ== subKey: A#G#:S
DB: 2020/08/21 01:04:20.195639 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.644606ms
FetchForUpdate: 2020/08/21 01:04:20.195743 len(nb): 7
fetchItems: 2020/08/21 01:04:20.195751 +++  Cache FetchItems for sortk A# UID: [YPhQLW+3T3mniSh9t5M9BQ==] 
FetchNode: 2020/08/21 01:04:20.195755  node: YPhQLW+3T3mniSh9t5M9BQ== subKey: A#
anmgr 2020/08/21 01:04:20.196289 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.198733 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.528961ms
DB: 2020/08/21 01:04:20.200220 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 4.437222ms
DB: 2020/08/21 01:04:20.204215 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.891758ms
DB: 2020/08/21 01:04:20.211876 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.189018ms
anmgr 2020/08/21 01:04:20.213649 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.216673 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.745384ms
DB: 2020/08/21 01:04:20.221939 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.166857ms
DB: 2020/08/21 01:04:20.228350 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.344995ms
anmgr 2020/08/21 01:04:20.229144 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.232814 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.406855ms
DB: 2020/08/21 01:04:20.238577 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.809072ms
anmgr 2020/08/21 01:04:20.245024 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.245590 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.904447ms
DB: 2020/08/21 01:04:20.250350 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.449433ms
DB: 2020/08/21 01:04:20.255479 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.849517ms
anmgr 2020/08/21 01:04:20.260486 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.262409 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.685371ms
Cache: 2020/08/21 01:04:20.262420 In SetUpredAvailable: pUid, tUID:  0dRZtBX0T66BvG0t/3jvYQ== 0dRZtBX0T66BvG0t/3jvYQ== A#G#:S
Cache: 2020/08/21 01:04:20.262425 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/21 01:04:20.268032 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.573866ms
Unlock: 2020/08/21 01:04:20.268042 ******* IN UNLOCK NC ********************
Unlock: 2020/08/21 01:04:20.268047 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/21 01:04:20.273314 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.215867ms
grmgr: 2020/08/21 01:04:20.273328 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/21 01:04:20.275995 for loop finished 0  8 
anmgr 2020/08/21 01:04:20.276008 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.276014 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.276019 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.276024 ** received on attachDoneCh.... 0
anmgr 2020/08/21 01:04:20.286385 About to run AttachNodeCh: abc  c  YPhQLW+3T3mniSh9t5M9BQ== Pbi0RpLdQZKrRG7B3XbrLA==
anmgr 2020/08/21 01:04:20.286408 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/21 01:04:20.286429 read from AttachNodeCh channel 2 now ASK limiter
grmgr: 2020/08/21 01:04:20.286435 Looping..... 0
grmgr: 2020/08/21 01:04:20.286549 Looping..... 1
grmgr: 2020/08/21 01:04:20.286753 Looping..... 2
grmgr: 2020/08/21 01:04:20.286931 Looping..... 3
grmgr: 2020/08/21 01:04:20.287122 Looping..... 4
grmgr: 2020/08/21 01:04:20.287288 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/21 01:04:20.287297 goroutine about to start 2 cUID,pUID   YPhQLW+3T3mniSh9t5M9BQ==  Pbi0RpLdQZKrRG7B3XbrLA==  
grmgr: 2020/08/21 01:04:20.287495 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/21 01:04:20.291417 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.854942ms
DB: 2020/08/21 01:04:20.295807 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.355961ms
DB: 2020/08/21 01:04:20.300785 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.878708ms
anmgr 2020/08/21 01:04:20.301999 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.307447 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.871454ms
AttachNode: main 2020/08/21 01:04:20.307462 FetchForUpdate: for parent    Pbi0RpLdQZKrRG7B3XbrLA==  sortk: A#G#:S
FetchForUpdate: 2020/08/21 01:04:20.307467 ** Cache FetchForUpdate Cache Key Value: [Pbi0RpLdQZKrRG7B3XbrLA==]   sortk: A#G#:S
FetchNode: 2020/08/21 01:04:20.307473  node: Pbi0RpLdQZKrRG7B3XbrLA== subKey: A#G#:S
AttachNode: gr1 2020/08/21 01:04:20.307710 FetchForUpdate: for child    YPhQLW+3T3mniSh9t5M9BQ==
FetchForUpdate: 2020/08/21 01:04:20.307720 ** Cache FetchForUpdate Cache Key Value: [YPhQLW+3T3mniSh9t5M9BQ==]   sortk: A#
fetchItems: 2020/08/21 01:04:20.307726 +++  Cache FetchItems for sortk A# UID: [YPhQLW+3T3mniSh9t5M9BQ==] 
FetchNode: 2020/08/21 01:04:20.307743  node: YPhQLW+3T3mniSh9t5M9BQ== subKey: A#
DB: 2020/08/21 01:04:20.311461 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.95232ms
FetchForUpdate: 2020/08/21 01:04:20.311527 len(nb): 1
fetchItems: 2020/08/21 01:04:20.311550 +++  Cache FetchItems for sortk A#G#:S UID: [Pbi0RpLdQZKrRG7B3XbrLA==] 
FetchNode: 2020/08/21 01:04:20.311556  node: Pbi0RpLdQZKrRG7B3XbrLA== subKey: A#G#:S
DB: 2020/08/21 01:04:20.313023 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 5.212229ms
DB: 2020/08/21 01:04:20.316384 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.798863ms
anmgr 2020/08/21 01:04:20.317630 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.322199 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.268203ms
DB: 2020/08/21 01:04:20.328752 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.221184ms
anmgr 2020/08/21 01:04:20.333014 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.334330 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.379732ms
DB: 2020/08/21 01:04:20.339747 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.805788ms
DB: 2020/08/21 01:04:20.346571 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.358985ms
anmgr 2020/08/21 01:04:20.348445 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.351711 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.653604ms
DB: 2020/08/21 01:04:20.360058 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.269641ms
anmgr 2020/08/21 01:04:20.365008 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.366608 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.253611ms
DB: 2020/08/21 01:04:20.372043 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.128698ms
DB: 2020/08/21 01:04:20.378843 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.476622ms
anmgr 2020/08/21 01:04:20.380471 for loop finished 1  8 
anmgr 2020/08/21 01:04:20.380510 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.380518 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.380523 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.380528 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.380534 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.383589 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.56817ms
Cache: 2020/08/21 01:04:20.383601 In SetUpredAvailable: pUid, tUID:  Pbi0RpLdQZKrRG7B3XbrLA== Pbi0RpLdQZKrRG7B3XbrLA== A#G#:S
Cache: 2020/08/21 01:04:20.383606 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/21 01:04:20.388361 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.719053ms
Unlock: 2020/08/21 01:04:20.388371 ******* IN UNLOCK NC ********************
Unlock: 2020/08/21 01:04:20.388376 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/21 01:04:20.393729 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.278518ms
grmgr: 2020/08/21 01:04:20.393743 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/21 01:04:20.396042 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.396062 ** received on attachDoneCh.... 0
anmgr 2020/08/21 01:04:20.406415 About to run AttachNodeCh: b  c  0dRZtBX0T66BvG0t/3jvYQ== Pbi0RpLdQZKrRG7B3XbrLA==
anmgr 2020/08/21 01:04:20.406431 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/21 01:04:20.406438 read from AttachNodeCh channel 3 now ASK limiter
grmgr: 2020/08/21 01:04:20.406444 Looping..... 0
grmgr: 2020/08/21 01:04:20.406584 Looping..... 1
grmgr: 2020/08/21 01:04:20.406786 Looping..... 2
grmgr: 2020/08/21 01:04:20.406975 Looping..... 3
grmgr: 2020/08/21 01:04:20.407163 Looping..... 4
grmgr: 2020/08/21 01:04:20.407334 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/21 01:04:20.407344 goroutine about to start 3 cUID,pUID   0dRZtBX0T66BvG0t/3jvYQ==  Pbi0RpLdQZKrRG7B3XbrLA==  
grmgr: 2020/08/21 01:04:20.407743 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/21 01:04:20.410623 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.058532ms
DB: 2020/08/21 01:04:20.414245 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.593271ms
DB: 2020/08/21 01:04:20.419195 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.881551ms
anmgr 2020/08/21 01:04:20.421939 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.424500 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.026779ms
AttachNode: main 2020/08/21 01:04:20.424512 FetchForUpdate: for parent    Pbi0RpLdQZKrRG7B3XbrLA==  sortk: A#G#:S
FetchForUpdate: 2020/08/21 01:04:20.424518 ** Cache FetchForUpdate Cache Key Value: [Pbi0RpLdQZKrRG7B3XbrLA==]   sortk: A#G#:S
fetchItems: 2020/08/21 01:04:20.424523 +++  Cache FetchItems for sortk A#G#:S UID: [Pbi0RpLdQZKrRG7B3XbrLA==] 
FetchNode: 2020/08/21 01:04:20.424528  node: Pbi0RpLdQZKrRG7B3XbrLA== subKey: A#G#:S
AttachNode: gr1 2020/08/21 01:04:20.424705 FetchForUpdate: for child    0dRZtBX0T66BvG0t/3jvYQ==
FetchForUpdate: 2020/08/21 01:04:20.424714 ** Cache FetchForUpdate Cache Key Value: [0dRZtBX0T66BvG0t/3jvYQ==]   sortk: A#
fetchItems: 2020/08/21 01:04:20.424719 +++  Cache FetchItems for sortk A# UID: [0dRZtBX0T66BvG0t/3jvYQ==] 
FetchNode: 2020/08/21 01:04:20.424767  node: 0dRZtBX0T66BvG0t/3jvYQ== subKey: A#
DB: 2020/08/21 01:04:20.428212 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.400206ms
fetchItems: 2020/08/21 01:04:20.428395 +++  Cache FetchItems for sortk A# UID: [0dRZtBX0T66BvG0t/3jvYQ==] 
FetchNode: 2020/08/21 01:04:20.428404  node: 0dRZtBX0T66BvG0t/3jvYQ== subKey: A#
DB: 2020/08/21 01:04:20.428823 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.263714ms
DB: 2020/08/21 01:04:20.431966 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.51915ms
DB: 2020/08/21 01:04:20.434161 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.863345ms
anmgr 2020/08/21 01:04:20.438644 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.438855 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.663907ms
DB: 2020/08/21 01:04:20.438870 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.663907ms
DB: 2020/08/21 01:04:20.443475 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.576251ms
DB: 2020/08/21 01:04:20.443489 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.576251ms
DB: 2020/08/21 01:04:20.448627 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.938527ms
DB: 2020/08/21 01:04:20.454016 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.175396ms
anmgr 2020/08/21 01:04:20.454765 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.460631 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.069765ms
DB: 2020/08/21 01:04:20.465447 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.522505ms
anmgr 2020/08/21 01:04:20.470313 About to run AttachNodeCh: d  abc  9/K0X/n3RaK4uM59JkKiRg== YPhQLW+3T3mniSh9t5M9BQ==
anmgr 2020/08/21 01:04:20.470325 for loop finished 2  8 
anmgr 2020/08/21 01:04:20.470334 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.470340 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.470345 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.470350 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.470354 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/21 01:04:20.470361 read from AttachNodeCh channel 4 now ASK limiter
grmgr: 2020/08/21 01:04:20.470368 Looping..... 0
grmgr: 2020/08/21 01:04:20.470499 Looping..... 1
grmgr: 2020/08/21 01:04:20.470679 Looping..... 2
grmgr: 2020/08/21 01:04:20.470854 Looping..... 3
DB: 2020/08/21 01:04:20.470932 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.918657ms
grmgr: 2020/08/21 01:04:20.471573 Looping..... 4
grmgr: 2020/08/21 01:04:20.471608 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/21 01:04:20.471618 goroutine about to start 4 cUID,pUID   9/K0X/n3RaK4uM59JkKiRg==  YPhQLW+3T3mniSh9t5M9BQ==  
grmgr: 2020/08/21 01:04:20.471809 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/21 01:04:20.475988 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.308508ms
DB: 2020/08/21 01:04:20.479520 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 8.11505ms
DB: 2020/08/21 01:04:20.480222 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.200496ms
DB: 2020/08/21 01:04:20.484946 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.999868ms
DB: 2020/08/21 01:04:20.485773 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.500587ms
anmgr 2020/08/21 01:04:20.486688 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.486700 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.486706 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.491554 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.809209ms
DB: 2020/08/21 01:04:20.492226 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.047561ms
AttachNode: main 2020/08/21 01:04:20.492238 FetchForUpdate: for parent    YPhQLW+3T3mniSh9t5M9BQ==  sortk: A#G#:F
FetchForUpdate: 2020/08/21 01:04:20.492243 ** Cache FetchForUpdate Cache Key Value: [YPhQLW+3T3mniSh9t5M9BQ==]   sortk: A#G#:F
fetchItems: 2020/08/21 01:04:20.492249 +++  Cache FetchItems for sortk A#G#:F UID: [YPhQLW+3T3mniSh9t5M9BQ==] 
FetchNode: 2020/08/21 01:04:20.492254  node: YPhQLW+3T3mniSh9t5M9BQ== subKey: A#G#:F
AttachNode: gr1 2020/08/21 01:04:20.492416 FetchForUpdate: for child    9/K0X/n3RaK4uM59JkKiRg==
FetchForUpdate: 2020/08/21 01:04:20.492440 ** Cache FetchForUpdate Cache Key Value: [9/K0X/n3RaK4uM59JkKiRg==]   sortk: A#
FetchNode: 2020/08/21 01:04:20.492469  node: 9/K0X/n3RaK4uM59JkKiRg== subKey: A#
DB: 2020/08/21 01:04:20.496705 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.420931ms
DB: 2020/08/21 01:04:20.499572 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 7.960726ms
DB: 2020/08/21 01:04:20.500825 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 8.290522ms
FetchForUpdate: 2020/08/21 01:04:20.500941 len(nb): 7
fetchItems: 2020/08/21 01:04:20.500950 +++  Cache FetchItems for sortk A# UID: [9/K0X/n3RaK4uM59JkKiRg==] 
FetchNode: 2020/08/21 01:04:20.500954  node: 9/K0X/n3RaK4uM59JkKiRg== subKey: A#
anmgr 2020/08/21 01:04:20.502568 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.504646 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 7.613666ms
DB: 2020/08/21 01:04:20.505610 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.61955ms
DB: 2020/08/21 01:04:20.518814 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 17.827842ms
anmgr 2020/08/21 01:04:20.521334 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.526259 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 19.97435ms
DB: 2020/08/21 01:04:20.531532 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.00099ms
Cache: 2020/08/21 01:04:20.531546 In SetUpredAvailable: pUid, tUID:  Pbi0RpLdQZKrRG7B3XbrLA== VyhfSYWkQeG07OtzDb7wKA== A#G#:S
Cache: 2020/08/21 01:04:20.531551 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/21 01:04:20.536976 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.38835ms
Unlock: 2020/08/21 01:04:20.536986 ******* IN UNLOCK NC ********************
Unlock: 2020/08/21 01:04:20.536991 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/21 01:04:20.537228 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.537274 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.537284 for loop finished 2  8 
anmgr 2020/08/21 01:04:20.537290 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.537295 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.537300 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.537305 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.537310 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.539509 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 20.344375ms
DB: 2020/08/21 01:04:20.544080 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.292442ms
DB: 2020/08/21 01:04:20.546065 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 8.998629ms
grmgr: 2020/08/21 01:04:20.546085 EndCh received for nodeAttach. rCnt = 1 
anmgr 2020/08/21 01:04:20.548916 ** received on attachDoneCh.... 2
anmgr 2020/08/21 01:04:20.548933 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.548939 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.548944 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.553671 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.684267ms
DB: 2020/08/21 01:04:20.559775 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.041352ms
DB: 2020/08/21 01:04:20.564070 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.235468ms
anmgr 2020/08/21 01:04:20.564514 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.568766 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.622183ms
DB: 2020/08/21 01:04:20.574698 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.862994ms
DB: 2020/08/21 01:04:20.579145 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.159896ms
anmgr 2020/08/21 01:04:20.580374 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.583849 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.424892ms
DB: 2020/08/21 01:04:20.588483 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.443434ms
Cache: 2020/08/21 01:04:20.588496 In SetUpredAvailable: pUid, tUID:  YPhQLW+3T3mniSh9t5M9BQ== YPhQLW+3T3mniSh9t5M9BQ== A#G#:F
Cache: 2020/08/21 01:04:20.588500 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/21 01:04:20.592869 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.335295ms
Unlock: 2020/08/21 01:04:20.592879 ******* IN UNLOCK NC ********************
Unlock: 2020/08/21 01:04:20.592884 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/21 01:04:20.595828 About to run AttachNodeCh: c  b  Pbi0RpLdQZKrRG7B3XbrLA== 0dRZtBX0T66BvG0t/3jvYQ==
anmgr 2020/08/21 01:04:20.595843 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.595849 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.595854 for loop finished 3  8 
anmgr 2020/08/21 01:04:20.595859 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.595865 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.595870 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.595875 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.595880 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/21 01:04:20.595886 read from AttachNodeCh channel 5 now ASK limiter
grmgr: 2020/08/21 01:04:20.595892 Looping..... 0
grmgr: 2020/08/21 01:04:20.596002 Looping..... 1
grmgr: 2020/08/21 01:04:20.596180 Looping..... 2
grmgr: 2020/08/21 01:04:20.596365 Looping..... 3
grmgr: 2020/08/21 01:04:20.596542 Looping..... 4
grmgr: 2020/08/21 01:04:20.596722 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/21 01:04:20.596735 goroutine about to start 5 cUID,pUID   Pbi0RpLdQZKrRG7B3XbrLA==  0dRZtBX0T66BvG0t/3jvYQ==  
grmgr: 2020/08/21 01:04:20.597151 StartCh received for nodeAttach. rCnt = 2 
DB: 2020/08/21 01:04:20.600570 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.57165ms
DB: 2020/08/21 01:04:20.602608 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 9.631523ms
grmgr: 2020/08/21 01:04:20.602620 EndCh received for nodeAttach. rCnt = 1 
DB: 2020/08/21 01:04:20.603864 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.265394ms
anmgr 2020/08/21 01:04:20.606113 ** received on attachDoneCh.... 2
anmgr 2020/08/21 01:04:20.606128 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.606134 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.606139 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.608460 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.529817ms
DB: 2020/08/21 01:04:20.618656 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 9.921232ms
AttachNode: main 2020/08/21 01:04:20.618680 FetchForUpdate: for parent    0dRZtBX0T66BvG0t/3jvYQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/21 01:04:20.618685 ** Cache FetchForUpdate Cache Key Value: [0dRZtBX0T66BvG0t/3jvYQ==]   sortk: A#G#:S
fetchItems: 2020/08/21 01:04:20.618691 +++  Cache FetchItems for sortk A#G#:S UID: [0dRZtBX0T66BvG0t/3jvYQ==] 
FetchNode: 2020/08/21 01:04:20.618696  node: 0dRZtBX0T66BvG0t/3jvYQ== subKey: A#G#:S
AttachNode: gr1 2020/08/21 01:04:20.618954 FetchForUpdate: for child    Pbi0RpLdQZKrRG7B3XbrLA==
FetchForUpdate: 2020/08/21 01:04:20.618964 ** Cache FetchForUpdate Cache Key Value: [Pbi0RpLdQZKrRG7B3XbrLA==]   sortk: A#
fetchItems: 2020/08/21 01:04:20.618985 +++  Cache FetchItems for sortk A# UID: [Pbi0RpLdQZKrRG7B3XbrLA==] 
FetchNode: 2020/08/21 01:04:20.618999  node: Pbi0RpLdQZKrRG7B3XbrLA== subKey: A#
anmgr 2020/08/21 01:04:20.621584 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.622172 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.382254ms
DB: 2020/08/21 01:04:20.623320 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.27022ms
DB: 2020/08/21 01:04:20.627398 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.676728ms
DB: 2020/08/21 01:04:20.632011 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.580988ms
DB: 2020/08/21 01:04:20.632026 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.580988ms
DB: 2020/08/21 01:04:20.636579 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.521562ms
DB: 2020/08/21 01:04:20.636594 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.521562ms
anmgr 2020/08/21 01:04:20.637405 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.637416 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.637422 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.637427 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.637432 for loop finished 4  8 
anmgr 2020/08/21 01:04:20.637437 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.637442 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.637447 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.637452 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.637456 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.641629 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.843266ms
DB: 2020/08/21 01:04:20.646348 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.532708ms
anmgr 2020/08/21 01:04:20.652857 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.652869 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.652875 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.653885 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.451403ms
DB: 2020/08/21 01:04:20.658450 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.322059ms
DB: 2020/08/21 01:04:20.663939 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.789352ms
anmgr 2020/08/21 01:04:20.668359 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.670645 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.209818ms
DB: 2020/08/21 01:04:20.676566 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.450172ms
DB: 2020/08/21 01:04:20.681777 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.706217ms
anmgr 2020/08/21 01:04:20.683802 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.683815 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.683820 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.683826 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.683831 for loop finished 4  8 
anmgr 2020/08/21 01:04:20.683836 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.683841 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.683846 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.683851 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.683856 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.688219 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.015385ms
DB: 2020/08/21 01:04:20.692974 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.316304ms
anmgr 2020/08/21 01:04:20.699284 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.699297 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.699303 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.699620 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.151784ms
DB: 2020/08/21 01:04:20.704562 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.682342ms
Cache: 2020/08/21 01:04:20.704574 In SetUpredAvailable: pUid, tUID:  0dRZtBX0T66BvG0t/3jvYQ== ZfrHmTOMRM6NLPd/W+/lwA== A#G#:S
Cache: 2020/08/21 01:04:20.704579 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/21 01:04:20.709221 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.608594ms
Unlock: 2020/08/21 01:04:20.709230 ******* IN UNLOCK NC ********************
Unlock: 2020/08/21 01:04:20.709235 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/21 01:04:20.714416 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.127985ms
grmgr: 2020/08/21 01:04:20.714431 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/21 01:04:20.714823 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.714832 ** received on attachDoneCh.... 0
anmgr 2020/08/21 01:04:20.725059 About to run AttachNodeCh: c  abc  Pbi0RpLdQZKrRG7B3XbrLA== YPhQLW+3T3mniSh9t5M9BQ==
anmgr 2020/08/21 01:04:20.725075 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.725082 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.725086 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.725092 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.725096 for loop finished 5  8 
anmgr 2020/08/21 01:04:20.725101 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.725106 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.725111 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.725116 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.725130 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
attachNode: 2020/08/21 01:04:20.725138 read from AttachNodeCh channel 6 now ASK limiter
grmgr: 2020/08/21 01:04:20.725144 Looping..... 0
grmgr: 2020/08/21 01:04:20.725231 Looping..... 1
grmgr: 2020/08/21 01:04:20.725408 Looping..... 2
grmgr: 2020/08/21 01:04:20.725602 Looping..... 3
grmgr: 2020/08/21 01:04:20.725795 Looping..... 4
grmgr: 2020/08/21 01:04:20.725990 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/21 01:04:20.725999 goroutine about to start 6 cUID,pUID   Pbi0RpLdQZKrRG7B3XbrLA==  YPhQLW+3T3mniSh9t5M9BQ==  
grmgr: 2020/08/21 01:04:20.726224 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/21 01:04:20.729035 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.962882ms
DB: 2020/08/21 01:04:20.732010 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.943819ms
DB: 2020/08/21 01:04:20.736932 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.860731ms
anmgr 2020/08/21 01:04:20.740546 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.740558 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.740563 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.742163 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.96413ms
AttachNode: main 2020/08/21 01:04:20.742175 FetchForUpdate: for parent    YPhQLW+3T3mniSh9t5M9BQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/21 01:04:20.742179 ** Cache FetchForUpdate Cache Key Value: [YPhQLW+3T3mniSh9t5M9BQ==]   sortk: A#G#:S
fetchItems: 2020/08/21 01:04:20.742185 +++  Cache FetchItems for sortk A#G#:S UID: [YPhQLW+3T3mniSh9t5M9BQ==] 
FetchNode: 2020/08/21 01:04:20.742189  node: YPhQLW+3T3mniSh9t5M9BQ== subKey: A#G#:S
AttachNode: gr1 2020/08/21 01:04:20.742375 FetchForUpdate: for child    Pbi0RpLdQZKrRG7B3XbrLA==
FetchForUpdate: 2020/08/21 01:04:20.742383 ** Cache FetchForUpdate Cache Key Value: [Pbi0RpLdQZKrRG7B3XbrLA==]   sortk: A#
fetchItems: 2020/08/21 01:04:20.742388 +++  Cache FetchItems for sortk A# UID: [Pbi0RpLdQZKrRG7B3XbrLA==] 
FetchNode: 2020/08/21 01:04:20.742412  node: Pbi0RpLdQZKrRG7B3XbrLA== subKey: A#
DB: 2020/08/21 01:04:20.745812 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.591386ms
DB: 2020/08/21 01:04:20.747041 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.550776ms
DB: 2020/08/21 01:04:20.750721 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.57198ms
anmgr 2020/08/21 01:04:20.756674 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.756689 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.756695 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.756701 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.756706 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.756711 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.756716 for loop finished 5  8 
anmgr 2020/08/21 01:04:20.756721 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.756726 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.756730 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.756735 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.756740 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.757305 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.034389ms
DB: 2020/08/21 01:04:20.761841 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.490256ms
DB: 2020/08/21 01:04:20.766861 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.903723ms
anmgr 2020/08/21 01:04:20.772640 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.772654 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.772661 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.772909 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.985302ms
DB: 2020/08/21 01:04:20.777489 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.526978ms
DB: 2020/08/21 01:04:20.782982 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.041819ms
anmgr 2020/08/21 01:04:20.788819 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.788833 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.788838 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.788847 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.788853 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.788858 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.788862 for loop finished 5  8 
anmgr 2020/08/21 01:04:20.788867 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.788874 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.788884 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.788889 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.788894 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/21 01:04:20.789756 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.302257ms
DB: 2020/08/21 01:04:20.794577 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.376439ms
DB: 2020/08/21 01:04:20.799916 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.806292ms
anmgr 2020/08/21 01:04:20.804378 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.804391 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.804397 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.805051 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.860141ms
Cache: 2020/08/21 01:04:20.805062 In SetUpredAvailable: pUid, tUID:  YPhQLW+3T3mniSh9t5M9BQ== YPhQLW+3T3mniSh9t5M9BQ== A#G#:S
Cache: 2020/08/21 01:04:20.805067 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/21 01:04:20.809910 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.808525ms
Unlock: 2020/08/21 01:04:20.809920 ******* IN UNLOCK NC ********************
Unlock: 2020/08/21 01:04:20.809925 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/21 01:04:20.815117 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.138177ms
grmgr: 2020/08/21 01:04:20.815143 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/21 01:04:20.819941 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.819955 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.819971 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.819976 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.819981 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.819986 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.819991 for loop finished 5  8 
anmgr 2020/08/21 01:04:20.819996 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.820001 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.820005 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.820010 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.820015 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.820020 ** received on attachDoneCh.... 0
anmgr 2020/08/21 01:04:20.830365 About to run AttachNodeCh: b  abc  0dRZtBX0T66BvG0t/3jvYQ== YPhQLW+3T3mniSh9t5M9BQ==
anmgr 2020/08/21 01:04:20.830378 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.830384 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.830388 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
attachNode: 2020/08/21 01:04:20.830394 read from AttachNodeCh channel 7 now ASK limiter
grmgr: 2020/08/21 01:04:20.830400 Looping..... 0
grmgr: 2020/08/21 01:04:20.830532 Looping..... 1
grmgr: 2020/08/21 01:04:20.830763 Looping..... 2
grmgr: 2020/08/21 01:04:20.830916 Looping..... 3
grmgr: 2020/08/21 01:04:20.831089 Looping..... 4
grmgr: 2020/08/21 01:04:20.831264 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/21 01:04:20.831275 goroutine about to start 7 cUID,pUID   0dRZtBX0T66BvG0t/3jvYQ==  YPhQLW+3T3mniSh9t5M9BQ==  
grmgr: 2020/08/21 01:04:20.831529 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/21 01:04:20.834339 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.991615ms
DB: 2020/08/21 01:04:20.838302 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.933396ms
DB: 2020/08/21 01:04:20.843048 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.673511ms
anmgr 2020/08/21 01:04:20.846396 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846410 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846415 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846421 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846426 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.846431 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.846453 for loop finished 6  8 
anmgr 2020/08/21 01:04:20.846460 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846466 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846471 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846481 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846486 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846491 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846496 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846501 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.846505 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.853668 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.623448ms
AttachNode: main 2020/08/21 01:04:20.853683 FetchForUpdate: for parent    YPhQLW+3T3mniSh9t5M9BQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/21 01:04:20.853688 ** Cache FetchForUpdate Cache Key Value: [YPhQLW+3T3mniSh9t5M9BQ==]   sortk: A#G#:S
fetchItems: 2020/08/21 01:04:20.853694 +++  Cache FetchItems for sortk A#G#:S UID: [YPhQLW+3T3mniSh9t5M9BQ==] 
FetchNode: 2020/08/21 01:04:20.853699  node: YPhQLW+3T3mniSh9t5M9BQ== subKey: A#G#:S
AttachNode: gr1 2020/08/21 01:04:20.853872 FetchForUpdate: for child    0dRZtBX0T66BvG0t/3jvYQ==
FetchForUpdate: 2020/08/21 01:04:20.853881 ** Cache FetchForUpdate Cache Key Value: [0dRZtBX0T66BvG0t/3jvYQ==]   sortk: A#
fetchItems: 2020/08/21 01:04:20.853887 +++  Cache FetchItems for sortk A# UID: [0dRZtBX0T66BvG0t/3jvYQ==] 
FetchNode: 2020/08/21 01:04:20.853900  node: 0dRZtBX0T66BvG0t/3jvYQ== subKey: A#
DB: 2020/08/21 01:04:20.858219 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.276976ms
DB: 2020/08/21 01:04:20.859152 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.409401ms
anmgr 2020/08/21 01:04:20.862064 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862077 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862082 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862087 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862092 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.862097 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.862101 for loop finished 6  8 
anmgr 2020/08/21 01:04:20.862106 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862111 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862116 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862120 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862125 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862129 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862134 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862138 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.862142 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.864913 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.305501ms
DB: 2020/08/21 01:04:20.869433 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.484724ms
DB: 2020/08/21 01:04:20.869449 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.484724ms
DB: 2020/08/21 01:04:20.873963 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.450136ms
DB: 2020/08/21 01:04:20.873990 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.450136ms
anmgr 2020/08/21 01:04:20.878416 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878429 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878446 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878453 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878458 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.878472 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.878476 for loop finished 6  8 
anmgr 2020/08/21 01:04:20.878481 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878486 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878490 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878495 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878500 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878504 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878509 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878513 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.878518 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.878864 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.802659ms
DB: 2020/08/21 01:04:20.883589 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.622267ms
DB: 2020/08/21 01:04:20.889811 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.099512ms
anmgr 2020/08/21 01:04:20.894370 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894384 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894390 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894395 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894400 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.894405 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.894409 for loop finished 6  8 
anmgr 2020/08/21 01:04:20.894414 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894419 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894424 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894429 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894434 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894439 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894443 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894448 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.894453 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.895584 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.722341ms
DB: 2020/08/21 01:04:20.900388 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.706332ms
DB: 2020/08/21 01:04:20.906414 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.961621ms
anmgr 2020/08/21 01:04:20.909886 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909899 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909904 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909909 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909914 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.909920 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.909924 for loop finished 6  8 
anmgr 2020/08/21 01:04:20.909929 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909944 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909949 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909954 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909962 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909966 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909971 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909976 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.909981 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.910923 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.448518ms
DB: 2020/08/21 01:04:20.915841 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.850099ms
DB: 2020/08/21 01:04:20.921936 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.996331ms
anmgr 2020/08/21 01:04:20.925435 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925448 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925454 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925460 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925465 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.925470 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.925475 for loop finished 6  8 
anmgr 2020/08/21 01:04:20.925480 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925485 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925490 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925495 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925500 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925505 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925510 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925514 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.925519 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.927524 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.290961ms
DB: 2020/08/21 01:04:20.932430 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.583226ms
DB: 2020/08/21 01:04:20.937167 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.67854ms
Cache: 2020/08/21 01:04:20.937179 In SetUpredAvailable: pUid, tUID:  YPhQLW+3T3mniSh9t5M9BQ== tav3zIIXQU+FIFt1QeeylA== A#G#:S
Cache: 2020/08/21 01:04:20.937184 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/21 01:04:20.940948 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.940961 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.940966 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.940971 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.940976 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.940981 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.940996 for loop finished 6  8 
anmgr 2020/08/21 01:04:20.941002 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.941007 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.941012 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.941017 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.941022 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.941027 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.941032 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.941037 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.941042 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:F"}
DB: 2020/08/21 01:04:20.941727 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.5051ms
Unlock: 2020/08/21 01:04:20.941736 ******* IN UNLOCK NC ********************
Unlock: 2020/08/21 01:04:20.941740 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/21 01:04:20.947041 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.247159ms
grmgr: 2020/08/21 01:04:20.947057 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/21 01:04:20.951368 ** received on attachDoneCh.... 2
anmgr 2020/08/21 01:04:20.951387 About to run AttachNodeCh: c  abc  Pbi0RpLdQZKrRG7B3XbrLA== YPhQLW+3T3mniSh9t5M9BQ==
anmgr 2020/08/21 01:04:20.951397 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.951403 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.951408 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.951413 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/21 01:04:20.951418 for loop: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.951423 running or done: e = anmgr.EdgeSn{CSn:"d", PSn:"abc", Sortk:"A#G#:F"}
anmgr 2020/08/21 01:04:20.951428 for loop finished 7  8 
attachNode: 2020/08/21 01:04:20.951433 read from AttachNodeCh channel 8 now ASK limiter
grmgr: 2020/08/21 01:04:20.951439 Looping..... 0
grmgr: 2020/08/21 01:04:20.951452 Looping..... 1
grmgr: 2020/08/21 01:04:20.951544 Looping..... 2
grmgr: 2020/08/21 01:04:20.951728 Looping..... 3
grmgr: 2020/08/21 01:04:20.951893 Looping..... 4
grmgr: 2020/08/21 01:04:20.952073 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
AttachNode: 2020/08/21 01:04:20.952083 goroutine about to start 8 cUID,pUID   Pbi0RpLdQZKrRG7B3XbrLA==  YPhQLW+3T3mniSh9t5M9BQ==  
rdfLoader: 2020/08/21 01:04:20.952090 saveNode  waiting on AttachNode to finish
grmgr: 2020/08/21 01:04:20.952318 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/21 01:04:20.955475 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.318789ms
DB: 2020/08/21 01:04:20.959420 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.913858ms
DB: 2020/08/21 01:04:20.967132 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 7.651497ms
DB: 2020/08/21 01:04:20.972586 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.207699ms
AttachNode: main 2020/08/21 01:04:20.972607 FetchForUpdate: for parent    YPhQLW+3T3mniSh9t5M9BQ==  sortk: A#G#:F
FetchForUpdate: 2020/08/21 01:04:20.972633 ** Cache FetchForUpdate Cache Key Value: [YPhQLW+3T3mniSh9t5M9BQ==]   sortk: A#G#:F
fetchItems: 2020/08/21 01:04:20.972640 +++  Cache FetchItems for sortk A#G#:F UID: [YPhQLW+3T3mniSh9t5M9BQ==] 
FetchNode: 2020/08/21 01:04:20.972644  node: YPhQLW+3T3mniSh9t5M9BQ== subKey: A#G#:F
AttachNode: gr1 2020/08/21 01:04:20.972870 FetchForUpdate: for child    Pbi0RpLdQZKrRG7B3XbrLA==
FetchForUpdate: 2020/08/21 01:04:20.972879 ** Cache FetchForUpdate Cache Key Value: [Pbi0RpLdQZKrRG7B3XbrLA==]   sortk: A#
fetchItems: 2020/08/21 01:04:20.972885 +++  Cache FetchItems for sortk A# UID: [Pbi0RpLdQZKrRG7B3XbrLA==] 
FetchNode: 2020/08/21 01:04:20.972915  node: Pbi0RpLdQZKrRG7B3XbrLA== subKey: A#
DB: 2020/08/21 01:04:20.977002 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.01527ms
DB: 2020/08/21 01:04:20.978115 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 5.421328ms
DB: 2020/08/21 01:04:20.983113 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.633167ms
DB: 2020/08/21 01:04:20.987612 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.46355ms
DB: 2020/08/21 01:04:20.987628 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.46355ms
DB: 2020/08/21 01:04:20.991980 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.317723ms
DB: 2020/08/21 01:04:20.991999 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.317723ms
DB: 2020/08/21 01:04:20.997048 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.848636ms
DB: 2020/08/21 01:04:21.001997 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.734188ms
DB: 2020/08/21 01:04:21.008633 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.051494ms
DB: 2020/08/21 01:04:21.014015 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.097383ms
DB: 2020/08/21 01:04:21.019364 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.790877ms
DB: 2020/08/21 01:04:21.025733 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.903667ms
DB: 2020/08/21 01:04:21.030906 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.757944ms
DB: 2020/08/21 01:04:21.036780 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.389653ms
DB: 2020/08/21 01:04:21.043594 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.375967ms
DB: 2020/08/21 01:04:21.048453 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.453327ms
DB: 2020/08/21 01:04:21.054042 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.140652ms
DB: 2020/08/21 01:04:21.059591 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.304462ms
Cache: 2020/08/21 01:04:21.059604 In SetUpredAvailable: pUid, tUID:  YPhQLW+3T3mniSh9t5M9BQ== FUk8jgIXRCGEFcQrtm4riw== A#G#:F
Cache: 2020/08/21 01:04:21.059610 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/21 01:04:21.064551 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.908326ms
Unlock: 2020/08/21 01:04:21.064561 ******* IN UNLOCK NC ********************
Unlock: 2020/08/21 01:04:21.064565 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/21 01:04:21.069984 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.363286ms
grmgr: 2020/08/21 01:04:21.070002 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/21 01:04:21.070008 saveNode finished waiting...exiting
rdfLoader: 2020/08/21 01:04:21.070015 11.....
rdfLoader: 2020/08/21 01:04:21.070022 22.....error cnt: 0
rdfuuid: 2020/08/21 01:04:21.070039 Powering down...
errlog: 2020/08/21 01:04:21.070044 Powering down...
grmgr: 2020/08/21 01:04:21.070048 Powering down...
anmgr: 2020/08/21 01:04:21.070053 Powering down...
rdfLoader: 2020/08/21 01:04:21.070057 loader exists.....

DB:2020/08/15 06:21:18 log.go:18: ===============================================================================
anmgr: 2020/08/15 06:21:18.695213 Powering on...
rdfLoader: 2020/08/15 06:21:18.695245 saveNode started......
rdfLoader: 2020/08/15 06:21:18.695250 define saveNode limiter......
rdfuuid: 2020/08/15 06:21:18.695254 Powering on...
grmgr: 2020/08/15 06:21:18.695271 Powering on...
errlog: 2020/08/15 06:21:18.695280 Powering on...
rdfLoader: 2020/08/15 06:21:18.695286  principle goroutines started 
RDFreader: 2020/08/15 06:21:18.695308 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 06:21:18.695323 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 06:21:18.695329 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 06:21:18.695335 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 06:21:18.695340 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 06:21:18.695345 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 06:21:18.695349 spo read:      
RDFreader: 2020/08/15 06:21:18.695365 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 06:21:18.695370 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 06:21:18.695375 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 06:21:18.695379 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 06:21:18.695383 spo read:      
RDFreader: 2020/08/15 06:21:18.695388 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 06:21:18.695393 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 06:21:18.695398 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 06:21:18.695403 spo read:  b  Age  "58"
RDFreader: 2020/08/15 06:21:18.695408 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 06:21:18.695412 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 06:21:18.695417 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 06:21:18.695422 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 06:21:18.695427 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 06:21:18.695430 spo read:      
RDFreader: 2020/08/15 06:21:18.695435 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 06:21:18.695439 Send node batch on channel verifyCh
RDFreader: 2020/08/15 06:21:18.695444 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 06:21:18.695448 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 06:21:18.695453 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 06:21:18.695460 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 06:21:18.695465 spo read:  c  Age  "67"
RDFreader: 2020/08/15 06:21:18.695470 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 06:21:18.695474 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 06:21:18.695479 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 06:21:18.695484 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 06:21:18.695490 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 06:21:18.695495 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 06:21:18.695499 spo read:      
RDFreader: 2020/08/15 06:21:18.695504 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 06:21:18.695509 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 06:21:18.695513 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 06:21:18.695518 spo read:  d  Age  "36"
RDFreader: 2020/08/15 06:21:18.695523 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 06:21:18.695529 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 06:21:18.695533 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 06:21:18.695536 close verify channel
rdfLoader: 2020/08/15 06:21:18.695540 wait for goroutines to end
rdfLoader: 2020/08/15 06:21:18.695544 verify started....
rdfLoader: 2020/08/15 06:21:18.695548 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 06:21:18.695552 .  getType..
rdfLoader: 2020/08/15 06:21:18.695556 node.TyName : [Person]
DB: 2020/08/15 06:21:18.793752 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 98.12178ms
grmgr: 2020/08/15 06:21:18.793874 Looping..... 0
grmgr: 2020/08/15 06:21:18.795189 Looping..... 1
grmgr: 2020/08/15 06:21:18.795215 Looping..... 2
grmgr: 2020/08/15 06:21:18.795369 Looping..... 3
grmgr: 2020/08/15 06:21:18.795546 Looping..... 4
grmgr: 2020/08/15 06:21:18.795712 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 06:21:18.795724 .  getType..
rdfLoader: 2020/08/15 06:21:18.795729 node.TyName : [Person]
grmgr: 2020/08/15 06:21:18.795735 Looping..... 0
unmarshalRDF2020/08/15 06:21:18.795747 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:21:18.795757 Looping..... 1
grmgr: 2020/08/15 06:21:18.795762 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 06:21:18.795766 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 06:21:18.795773 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 06:21:18.795777 .  getType..
rdfLoader: 2020/08/15 06:21:18.795781 node.TyName : [Person]
grmgr: 2020/08/15 06:21:18.795786 Looping..... 0
rdfLoader: 2020/08/15 06:21:18.795796 Add to SS . [Honda]
rdfLoader: 2020/08/15 06:21:18.795801 Add to SS . [Alfa]
uuidAttach: 2020/08/15 06:21:18.795866 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:18.795876 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 06:21:18.795912 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:21:18.795918 Exit  unmarshalRDF. 
unmarshalRDF2020/08/15 06:21:18.795928 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:21:18.795954 Looping..... 1
grmgr: 2020/08/15 06:21:18.795960 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 06:21:18.795964 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 06:21:18.795969 Looping..... 0
rdfLoader: 2020/08/15 06:21:18.795977 Add to SS . [Honda]
rdfLoader: 2020/08/15 06:21:18.795982 Add to SS . [VW Golf]
uuidAttach: 2020/08/15 06:21:18.795996 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:18.796013 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 06:21:18.796039 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:21:18.796044 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 06:21:18.796049 .  getType..
rdfLoader: 2020/08/15 06:21:18.796053 node.TyName : [Person]
unmarshalRDF2020/08/15 06:21:18.796061 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:21:18.796071 Looping..... 1
rdfLoader: 2020/08/15 06:21:18.796078 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 06:21:18.796083 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 06:21:18.796087 Add to SS . [Honda]
uuidAttach: 2020/08/15 06:21:18.796107 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:18.796113 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 06:21:18.796139 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:21:18.796148 Exit  unmarshalRDF. 
grmgr: 2020/08/15 06:21:18.796171 Looping..... 2
grmgr: 2020/08/15 06:21:18.796396 Looping..... 3
grmgr: 2020/08/15 06:21:18.796424 Looping..... 4
grmgr: 2020/08/15 06:21:18.796445 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 06:21:18.796458 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/15 06:21:18.796468 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 06:21:18.796478 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/15 06:21:18.796487 Looping..... 0
grmgr: 2020/08/15 06:21:18.796594 Looping..... 1
SaveRDFNode: xxx 2020/08/15 06:21:18.796618 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.796631 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.796645 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.796657 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.796669 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.796681 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.796693 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:21:18.796701 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:21:18.796716 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017740)}
SaveRDFNode: 2020/08/15 06:21:18.796725 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:21:18.796763 UID received  : j2ZFuHw6QGeYya5BMyF+lQ==
grmgr: 2020/08/15 06:21:18.797014 Looping..... 2
grmgr: 2020/08/15 06:21:18.797189 Looping..... 3
grmgr: 2020/08/15 06:21:18.797358 Looping..... 4
grmgr: 2020/08/15 06:21:18.797536 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 06:21:18.797555 Looping..... 0
unmarshalRDF2020/08/15 06:21:18.797569 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:21:18.797580 Looping..... 1
rdfLoader: 2020/08/15 06:21:18.797589 Add to SS . [Bentley]
unmarshalRDF2020/08/15 06:21:18.797622 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:21:18.797626 Exit  unmarshalRDF. 
grmgr: 2020/08/15 06:21:18.797636 Looping..... 2
grmgr: 2020/08/15 06:21:18.797712 Looping..... 3
grmgr: 2020/08/15 06:21:18.797886 Looping..... 4
grmgr: 2020/08/15 06:21:18.798061 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 06:21:18.798070 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/15 06:21:18.798079 Looping..... 0
grmgr: 2020/08/15 06:21:18.798102 Looping..... 1
grmgr: 2020/08/15 06:21:18.798107 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 06:21:18.798116 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 06:21:18.798125 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.798133 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.798138 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.798144 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.798161 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.798166 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.798172 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:21:18.798189 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:21:18.798194 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017e60)}
SaveRDFNode: 2020/08/15 06:21:18.798198 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:21:18.798232 UID received  : +viQJ0NOTC2/N5hV+kD1RQ==
DB: 2020/08/15 06:21:18.804466 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 7.649225ms
DB: 2020/08/15 06:21:18.808187 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.685735ms
DB: 2020/08/15 06:21:18.811880 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.65711ms
DB: 2020/08/15 06:21:18.820456 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.42943ms
DB: 2020/08/15 06:21:18.821143 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 22.884572ms
DB: 2020/08/15 06:21:18.824106 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.615231ms
SaveRDFNode: 2020/08/15 06:21:18.824133 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017740)}
SaveRDFNode: 2020/08/15 06:21:18.824141 Received UID: X18=
SaveRDFNode: 2020/08/15 06:21:18.824158 a: = db.Item{PKey:[]uint8{0x8f, 0x66, 0x45, 0xb8, 0x7c, 0x3a, 0x40, 0x67, 0x98, 0xc9, 0xae, 0x41, 0x33, 0x21, 0x7e, 0x95}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:21:18.824443 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.263605ms
DB: 2020/08/15 06:21:18.827785 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.301147ms
DB: 2020/08/15 06:21:18.829575 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.386826ms
SaveRDFNode: 2020/08/15 06:21:18.829588 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017740)}
SaveRDFNode: 2020/08/15 06:21:18.829596 Received UID: X18=
SaveRDFNode: 2020/08/15 06:21:18.829607 a: = db.Item{PKey:[]uint8{0x8f, 0x66, 0x45, 0xb8, 0x7c, 0x3a, 0x40, 0x67, 0x98, 0xc9, 0xae, 0x41, 0x33, 0x21, 0x7e, 0x95}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:21:18.831059 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.116294ms
DB: 2020/08/15 06:21:18.832872 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.234398ms
SaveRDFNode: 2020/08/15 06:21:18.832883 Returned.+++++++++++ No error
grmgr: 2020/08/15 06:21:18.832894 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 06:21:18.832899 Send ack to waiting saveNode...
grmgr: 2020/08/15 06:21:18.832915 Looping..... 0
grmgr: 2020/08/15 06:21:18.832952 Looping..... 1
grmgr: 2020/08/15 06:21:18.832958 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 06:21:18.832979 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 06:21:18.832989 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.832995 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.833001 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.833012 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.833017 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.833023 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.833029 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:21:18.833033 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:21:18.833038 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0004923c0)}
SaveRDFNode: 2020/08/15 06:21:18.833042 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:21:18.833052 UID received  : mMYRRH5ZS4K768lGh3yNRA==
DB: 2020/08/15 06:21:18.834233 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.144623ms
SaveRDFNode: 2020/08/15 06:21:18.834245 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017e60)}
SaveRDFNode: 2020/08/15 06:21:18.834252 Received UID: X18=
SaveRDFNode: 2020/08/15 06:21:18.834265 a: = db.Item{PKey:[]uint8{0xfa, 0xf8, 0x90, 0x27, 0x43, 0x4e, 0x4c, 0x2d, 0xbf, 0x37, 0x98, 0x55, 0xfa, 0x40, 0xf5, 0x45}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:21:18.836476 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.398171ms
DB: 2020/08/15 06:21:18.837853 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.550098ms
SaveRDFNode: 2020/08/15 06:21:18.837884 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017e60)}
SaveRDFNode: 2020/08/15 06:21:18.837895 Received UID: X18=
SaveRDFNode: 2020/08/15 06:21:18.837913 a: = db.Item{PKey:[]uint8{0xfa, 0xf8, 0x90, 0x27, 0x43, 0x4e, 0x4c, 0x2d, 0xbf, 0x37, 0x98, 0x55, 0xfa, 0x40, 0xf5, 0x45}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:21:18.840255 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.748075ms
DB: 2020/08/15 06:21:18.841908 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.918307ms
SaveRDFNode: 2020/08/15 06:21:18.841919 Returned.+++++++++++ No error
grmgr: 2020/08/15 06:21:18.841926 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 06:21:18.841931 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/15 06:21:18.841958 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.841965 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.841970 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.841976 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.841983 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.842018 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:21:18.842024 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:21:18.842028 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:21:18.842034 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000016f00)}
SaveRDFNode: 2020/08/15 06:21:18.842038 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:21:18.842049 UID received  : KdSpZnzgQX+rkIiOor0RQQ==
grmgr: 2020/08/15 06:21:18.842240 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 06:21:18.843716 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.428448ms
DB: 2020/08/15 06:21:18.845258 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.182635ms
DB: 2020/08/15 06:21:18.847299 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.440473ms
DB: 2020/08/15 06:21:18.848652 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.361915ms
DB: 2020/08/15 06:21:18.850606 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.278299ms
SaveRDFNode: 2020/08/15 06:21:18.850617 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0004923c0)}
SaveRDFNode: 2020/08/15 06:21:18.850624 Received UID: X18=
SaveRDFNode: 2020/08/15 06:21:18.850635 a: = db.Item{PKey:[]uint8{0x98, 0xc6, 0x11, 0x44, 0x7e, 0x59, 0x4b, 0x82, 0xbb, 0xeb, 0xc9, 0x46, 0x87, 0x7c, 0x8d, 0x44}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:21:18.852003 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.32222ms
DB: 2020/08/15 06:21:18.854080 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.417813ms
SaveRDFNode: 2020/08/15 06:21:18.854092 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0004923c0)}
SaveRDFNode: 2020/08/15 06:21:18.854099 Received UID: X18=
SaveRDFNode: 2020/08/15 06:21:18.854108 a: = db.Item{PKey:[]uint8{0x98, 0xc6, 0x11, 0x44, 0x7e, 0x59, 0x4b, 0x82, 0xbb, 0xeb, 0xc9, 0x46, 0x87, 0x7c, 0x8d, 0x44}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:21:18.855259 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.224443ms
DB: 2020/08/15 06:21:18.857436 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.299331ms
SaveRDFNode: 2020/08/15 06:21:18.857528 Returned.+++++++++++ No error
grmgr: 2020/08/15 06:21:18.857558 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 06:21:18.858745 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.456155ms
SaveRDFNode: 2020/08/15 06:21:18.858756 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016f00)}
SaveRDFNode: 2020/08/15 06:21:18.858763 Received UID: X18=
SaveRDFNode: 2020/08/15 06:21:18.858773 a: = db.Item{PKey:[]uint8{0x29, 0xd4, 0xa9, 0x66, 0x7c, 0xe0, 0x41, 0x7f, 0xab, 0x90, 0x88, 0x8e, 0xa2, 0xbd, 0x11, 0x41}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:21:18.862324 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.507098ms
SaveRDFNode: 2020/08/15 06:21:18.862451 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016f00)}
SaveRDFNode: 2020/08/15 06:21:18.862463 Received UID: X18=
SaveRDFNode: 2020/08/15 06:21:18.862473 a: = db.Item{PKey:[]uint8{0x29, 0xd4, 0xa9, 0x66, 0x7c, 0xe0, 0x41, 0x7f, 0xab, 0x90, 0x88, 0x8e, 0xa2, 0xbd, 0x11, 0x41}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:21:18.865738 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.227728ms
SaveRDFNode: 2020/08/15 06:21:18.865748 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 06:21:18.865753 saveNode finished waiting...exiting
grmgr: 2020/08/15 06:21:18.865759 EndCh received for saveNode. rCnt = 0 
uuidAttach: 2020/08/15 06:21:18.865770 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:18.881245 About to run AttachNodeCh: abc  b  j2ZFuHw6QGeYya5BMyF+lQ== +viQJ0NOTC2/N5hV+kD1RQ==
uuidAttach: 2020/08/15 06:21:18.881261 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:21:18.881269 Looping..... 0
grmgr: 2020/08/15 06:21:18.881378 Looping..... 1
grmgr: 2020/08/15 06:21:18.881559 Looping..... 2
grmgr: 2020/08/15 06:21:18.881578 Looping..... 3
grmgr: 2020/08/15 06:21:18.881768 Looping..... 4
grmgr: 2020/08/15 06:21:18.881788 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:21:18.882012 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:21:18.884220 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.366764ms
DB: 2020/08/15 06:21:18.887215 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.908495ms
DB: 2020/08/15 06:21:18.890920 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.641857ms
uuidAttach: 2020/08/15 06:21:18.896580 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:18.897875 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 6.8803ms
AttachNode: main 2020/08/15 06:21:18.897902 FetchForUpdate: for parent    +viQJ0NOTC2/N5hV+kD1RQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:21:18.897913 ** Cache FetchForUpdate Cache Key Value: [+viQJ0NOTC2/N5hV+kD1RQ==]   sortk: A#G#:S
FetchNode: 2020/08/15 06:21:18.897925  node: +viQJ0NOTC2/N5hV+kD1RQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:21:18.898202 FetchForUpdate: for child    j2ZFuHw6QGeYya5BMyF+lQ==
FetchForUpdate: 2020/08/15 06:21:18.898215 ** Cache FetchForUpdate Cache Key Value: [j2ZFuHw6QGeYya5BMyF+lQ==]   sortk: A#
FetchNode: 2020/08/15 06:21:18.898228  node: j2ZFuHw6QGeYya5BMyF+lQ== subKey: A#
DB: 2020/08/15 06:21:18.900995 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.728041ms
FetchForUpdate: 2020/08/15 06:21:18.901135 len(nb): 7
fetchItems: 2020/08/15 06:21:18.901144 +++  Cache FetchItems for sortk A# UID: [j2ZFuHw6QGeYya5BMyF+lQ==] 
FetchNode: 2020/08/15 06:21:18.901149  node: j2ZFuHw6QGeYya5BMyF+lQ== subKey: A#
DB: 2020/08/15 06:21:18.903522 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 5.542404ms
FetchForUpdate: 2020/08/15 06:21:18.903554 len(nb): 1
fetchItems: 2020/08/15 06:21:18.903560 +++  Cache FetchItems for sortk A#G#:S UID: [+viQJ0NOTC2/N5hV+kD1RQ==] 
FetchNode: 2020/08/15 06:21:18.903564  node: +viQJ0NOTC2/N5hV+kD1RQ== subKey: A#G#:S
DB: 2020/08/15 06:21:18.904297 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.120994ms
DB: 2020/08/15 06:21:18.906962 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.369578ms
DB: 2020/08/15 06:21:18.911145 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.577988ms
uuidAttach: 2020/08/15 06:21:18.912904 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:18.916904 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.605959ms
DB: 2020/08/15 06:21:18.920558 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.604681ms
DB: 2020/08/15 06:21:18.924212 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.524827ms
uuidAttach: 2020/08/15 06:21:18.928375 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:18.929864 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.592604ms
DB: 2020/08/15 06:21:18.933419 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.500314ms
DB: 2020/08/15 06:21:18.937037 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.553745ms
DB: 2020/08/15 06:21:18.942864 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.765156ms
uuidAttach: 2020/08/15 06:21:18.944208 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:18.946336 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.414652ms
DB: 2020/08/15 06:21:18.950103 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.702832ms
DB: 2020/08/15 06:21:18.953661 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.504307ms
Cache: 2020/08/15 06:21:18.953673 In SetUpredAvailable: pUid, tUID:  +viQJ0NOTC2/N5hV+kD1RQ== +viQJ0NOTC2/N5hV+kD1RQ== A#G#:S
Cache: 2020/08/15 06:21:18.953678 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:21:18.957327 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.606613ms
Unlock: 2020/08/15 06:21:18.957338 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:21:18.957343 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 06:21:18.959706 for loop finished 0  6 
uuidAttach: 2020/08/15 06:21:18.959738 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:18.959754 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:18.959765 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:18.961474 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.073531ms
grmgr: 2020/08/15 06:21:18.961491 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 06:21:18.964953 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 06:21:18.970129 About to run AttachNodeCh: abc  c  j2ZFuHw6QGeYya5BMyF+lQ== mMYRRH5ZS4K768lGh3yNRA==
uuidAttach: 2020/08/15 06:21:18.970148 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:21:18.970157 Looping..... 0
grmgr: 2020/08/15 06:21:18.970298 Looping..... 1
grmgr: 2020/08/15 06:21:18.970472 Looping..... 2
grmgr: 2020/08/15 06:21:18.970671 Looping..... 3
grmgr: 2020/08/15 06:21:18.970846 Looping..... 4
grmgr: 2020/08/15 06:21:18.971037 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:21:18.971412 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:21:18.973626 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.394874ms
DB: 2020/08/15 06:21:18.976367 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.711656ms
DB: 2020/08/15 06:21:18.980128 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.689842ms
DB: 2020/08/15 06:21:18.984451 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.142959ms
AttachNode: main 2020/08/15 06:21:18.984464 FetchForUpdate: for parent    mMYRRH5ZS4K768lGh3yNRA==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:21:18.984469 ** Cache FetchForUpdate Cache Key Value: [mMYRRH5ZS4K768lGh3yNRA==]   sortk: A#G#:S
FetchNode: 2020/08/15 06:21:18.984482  node: mMYRRH5ZS4K768lGh3yNRA== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:21:18.984656 FetchForUpdate: for child    j2ZFuHw6QGeYya5BMyF+lQ==
FetchForUpdate: 2020/08/15 06:21:18.984665 ** Cache FetchForUpdate Cache Key Value: [j2ZFuHw6QGeYya5BMyF+lQ==]   sortk: A#
fetchItems: 2020/08/15 06:21:18.984675 +++  Cache FetchItems for sortk A# UID: [j2ZFuHw6QGeYya5BMyF+lQ==] 
FetchNode: 2020/08/15 06:21:18.984686  node: j2ZFuHw6QGeYya5BMyF+lQ== subKey: A#
uuidAttach: 2020/08/15 06:21:18.985647 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:18.986957 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.442832ms
FetchForUpdate: 2020/08/15 06:21:18.986998 len(nb): 1
fetchItems: 2020/08/15 06:21:18.987026 +++  Cache FetchItems for sortk A#G#:S UID: [mMYRRH5ZS4K768lGh3yNRA==] 
FetchNode: 2020/08/15 06:21:18.987031  node: mMYRRH5ZS4K768lGh3yNRA== subKey: A#G#:S
DB: 2020/08/15 06:21:18.987798 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.067179ms
DB: 2020/08/15 06:21:18.989797 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.737937ms
DB: 2020/08/15 06:21:18.996064 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.030499ms
uuidAttach: 2020/08/15 06:21:19.001086 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.001633 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.228167ms
DB: 2020/08/15 06:21:19.007431 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.620028ms
DB: 2020/08/15 06:21:19.011493 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.69873ms
uuidAttach: 2020/08/15 06:21:19.016502 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.017311 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.517895ms
DB: 2020/08/15 06:21:19.020903 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.292262ms
DB: 2020/08/15 06:21:19.024819 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.617679ms
DB: 2020/08/15 06:21:19.030544 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.423132ms
uuidAttach: 2020/08/15 06:21:19.032014 for loop finished 1  6 
uuidAttach: 2020/08/15 06:21:19.032031 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.032039 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.032044 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.032050 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.032055 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.034007 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.402914ms
DB: 2020/08/15 06:21:19.037811 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.73543ms
DB: 2020/08/15 06:21:19.041245 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.378726ms
Cache: 2020/08/15 06:21:19.041257 In SetUpredAvailable: pUid, tUID:  mMYRRH5ZS4K768lGh3yNRA== mMYRRH5ZS4K768lGh3yNRA== A#G#:S
Cache: 2020/08/15 06:21:19.041262 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:21:19.045159 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.862889ms
Unlock: 2020/08/15 06:21:19.045179 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:21:19.045184 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 06:21:19.047538 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.049648 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.412534ms
grmgr: 2020/08/15 06:21:19.049668 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 06:21:19.052726 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 06:21:19.057906 About to run AttachNodeCh: b  c  +viQJ0NOTC2/N5hV+kD1RQ== mMYRRH5ZS4K768lGh3yNRA==
uuidAttach: 2020/08/15 06:21:19.057920 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:21:19.057928 Looping..... 0
grmgr: 2020/08/15 06:21:19.058076 Looping..... 1
grmgr: 2020/08/15 06:21:19.058250 Looping..... 2
grmgr: 2020/08/15 06:21:19.058430 Looping..... 3
grmgr: 2020/08/15 06:21:19.058605 Looping..... 4
grmgr: 2020/08/15 06:21:19.058781 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:21:19.059029 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:21:19.061216 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.366036ms
DB: 2020/08/15 06:21:19.063191 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 1.945932ms
DB: 2020/08/15 06:21:19.067056 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.803058ms
DB: 2020/08/15 06:21:19.071187 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.934424ms
AttachNode: main 2020/08/15 06:21:19.071219 FetchForUpdate: for parent    mMYRRH5ZS4K768lGh3yNRA==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:21:19.071225 ** Cache FetchForUpdate Cache Key Value: [mMYRRH5ZS4K768lGh3yNRA==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:21:19.071231 +++  Cache FetchItems for sortk A#G#:S UID: [mMYRRH5ZS4K768lGh3yNRA==] 
FetchNode: 2020/08/15 06:21:19.071236  node: mMYRRH5ZS4K768lGh3yNRA== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:21:19.071429 FetchForUpdate: for child    +viQJ0NOTC2/N5hV+kD1RQ==
FetchForUpdate: 2020/08/15 06:21:19.071437 ** Cache FetchForUpdate Cache Key Value: [+viQJ0NOTC2/N5hV+kD1RQ==]   sortk: A#
fetchItems: 2020/08/15 06:21:19.071442 +++  Cache FetchItems for sortk A# UID: [+viQJ0NOTC2/N5hV+kD1RQ==] 
FetchNode: 2020/08/15 06:21:19.071469  node: +viQJ0NOTC2/N5hV+kD1RQ== subKey: A#
uuidAttach: 2020/08/15 06:21:19.073381 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.073779 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.508991ms
DB: 2020/08/15 06:21:19.074722 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.189342ms
fetchItems: 2020/08/15 06:21:19.074881 +++  Cache FetchItems for sortk A# UID: [+viQJ0NOTC2/N5hV+kD1RQ==] 
FetchNode: 2020/08/15 06:21:19.074888  node: +viQJ0NOTC2/N5hV+kD1RQ== subKey: A#
DB: 2020/08/15 06:21:19.077558 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.627958ms
DB: 2020/08/15 06:21:19.078367 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.228655ms
DB: 2020/08/15 06:21:19.081517 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.11874ms
DB: 2020/08/15 06:21:19.081535 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.11874ms
DB: 2020/08/15 06:21:19.084932 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.358397ms
DB: 2020/08/15 06:21:19.084952 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.358397ms
uuidAttach: 2020/08/15 06:21:19.088917 for loop finished 2  6 
uuidAttach: 2020/08/15 06:21:19.088982 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.088997 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.089008 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.089019 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.089029 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.089235 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.091188ms
DB: 2020/08/15 06:21:19.094042 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.321005ms
DB: 2020/08/15 06:21:19.101743 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.020492ms
DB: 2020/08/15 06:21:19.105065 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.268393ms
uuidAttach: 2020/08/15 06:21:19.106615 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.106639 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.106651 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.108480 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.314679ms
DB: 2020/08/15 06:21:19.113981 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.439028ms
DB: 2020/08/15 06:21:19.117160 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.124991ms
DB: 2020/08/15 06:21:19.120863 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.641545ms
uuidAttach: 2020/08/15 06:21:19.122132 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.126574 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.643323ms
DB: 2020/08/15 06:21:19.129847 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.174254ms
DB: 2020/08/15 06:21:19.133619 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.457262ms
DB: 2020/08/15 06:21:19.137382 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.567803ms
Cache: 2020/08/15 06:21:19.137399 In SetUpredAvailable: pUid, tUID:  mMYRRH5ZS4K768lGh3yNRA== g5bIHqywSjWqKmyCcUhvrA== A#G#:S
Cache: 2020/08/15 06:21:19.137405 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
uuidAttach: 2020/08/15 06:21:19.137602 for loop finished 2  6 
uuidAttach: 2020/08/15 06:21:19.137628 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.137636 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.137642 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.137648 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.137653 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.141111 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.657484ms
Unlock: 2020/08/15 06:21:19.141131 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:21:19.141141 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 06:21:19.145314 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.077078ms
grmgr: 2020/08/15 06:21:19.145337 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 06:21:19.147994 ** received on attachDoneCh.... 2
uuidAttach: 2020/08/15 06:21:19.148009 About to run AttachNodeCh: b  abc  +viQJ0NOTC2/N5hV+kD1RQ== j2ZFuHw6QGeYya5BMyF+lQ==
uuidAttach: 2020/08/15 06:21:19.148017 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.148034 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.148039 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:21:19.148047 Looping..... 0
grmgr: 2020/08/15 06:21:19.148167 Looping..... 1
grmgr: 2020/08/15 06:21:19.148342 Looping..... 2
grmgr: 2020/08/15 06:21:19.148556 Looping..... 3
grmgr: 2020/08/15 06:21:19.148731 Looping..... 4
grmgr: 2020/08/15 06:21:19.148916 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:21:19.149127 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:21:19.151065 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.086944ms
DB: 2020/08/15 06:21:19.153212 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.108497ms
DB: 2020/08/15 06:21:19.156689 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.428928ms
DB: 2020/08/15 06:21:19.160757 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.891293ms
AttachNode: main 2020/08/15 06:21:19.160771 FetchForUpdate: for parent    j2ZFuHw6QGeYya5BMyF+lQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:21:19.160777 ** Cache FetchForUpdate Cache Key Value: [j2ZFuHw6QGeYya5BMyF+lQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:21:19.160782 +++  Cache FetchItems for sortk A#G#:S UID: [j2ZFuHw6QGeYya5BMyF+lQ==] 
FetchNode: 2020/08/15 06:21:19.160787  node: j2ZFuHw6QGeYya5BMyF+lQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:21:19.160972 FetchForUpdate: for child    +viQJ0NOTC2/N5hV+kD1RQ==
FetchForUpdate: 2020/08/15 06:21:19.160980 ** Cache FetchForUpdate Cache Key Value: [+viQJ0NOTC2/N5hV+kD1RQ==]   sortk: A#
fetchItems: 2020/08/15 06:21:19.160985 +++  Cache FetchItems for sortk A# UID: [+viQJ0NOTC2/N5hV+kD1RQ==] 
FetchNode: 2020/08/15 06:21:19.161032  node: +viQJ0NOTC2/N5hV+kD1RQ== subKey: A#
DB: 2020/08/15 06:21:19.163041 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.22269ms
uuidAttach: 2020/08/15 06:21:19.163791 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.164379 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.303047ms
DB: 2020/08/15 06:21:19.166739 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.459776ms
DB: 2020/08/15 06:21:19.172947 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.891483ms
uuidAttach: 2020/08/15 06:21:19.179304 for loop finished 3  6 
uuidAttach: 2020/08/15 06:21:19.179336 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.179350 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.179361 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.179372 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.179383 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.179393 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.179404 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.179416 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.179427 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.195045 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.210541 for loop finished 3  6 
uuidAttach: 2020/08/15 06:21:19.210560 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.210568 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.210574 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.210579 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.210585 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.210590 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.210596 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.210601 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.210606 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.223924 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 50.753937ms
uuidAttach: 2020/08/15 06:21:19.226054 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.227545 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.510878ms
DB: 2020/08/15 06:21:19.233312 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.702559ms
uuidAttach: 2020/08/15 06:21:19.241512 for loop finished 3  6 
uuidAttach: 2020/08/15 06:21:19.241526 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.241533 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.241538 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.241543 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.241548 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.241553 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.241557 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.241562 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.241567 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.243004 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 9.636232ms
DB: 2020/08/15 06:21:19.247306 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.237604ms
DB: 2020/08/15 06:21:19.252951 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.571795ms
DB: 2020/08/15 06:21:19.256327 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.319977ms
uuidAttach: 2020/08/15 06:21:19.257061 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.260468 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.069604ms
DB: 2020/08/15 06:21:19.264216 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.543699ms
Cache: 2020/08/15 06:21:19.264243 In SetUpredAvailable: pUid, tUID:  j2ZFuHw6QGeYya5BMyF+lQ== j2ZFuHw6QGeYya5BMyF+lQ== A#G#:S
Cache: 2020/08/15 06:21:19.264249 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:21:19.267451 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.145863ms
Unlock: 2020/08/15 06:21:19.267464 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:21:19.267479 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 06:21:19.271592 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.047646ms
grmgr: 2020/08/15 06:21:19.271692 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 06:21:19.272324 for loop finished 3  6 
uuidAttach: 2020/08/15 06:21:19.272335 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.272342 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.272348 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.272353 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.272358 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.272363 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.272367 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.272372 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.272377 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.272382 ** received on attachDoneCh.... 0
uuidAttach: 2020/08/15 06:21:19.282722 About to run AttachNodeCh: c  abc  mMYRRH5ZS4K768lGh3yNRA== j2ZFuHw6QGeYya5BMyF+lQ==
uuidAttach: 2020/08/15 06:21:19.282737 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:21:19.282745 Looping..... 0
grmgr: 2020/08/15 06:21:19.282765 Looping..... 1
grmgr: 2020/08/15 06:21:19.282944 Looping..... 2
grmgr: 2020/08/15 06:21:19.283119 Looping..... 3
grmgr: 2020/08/15 06:21:19.283309 Looping..... 4
grmgr: 2020/08/15 06:21:19.283510 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:21:19.283732 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:21:19.285886 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.286934ms
DB: 2020/08/15 06:21:19.288080 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.14741ms
DB: 2020/08/15 06:21:19.291541 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.403529ms
DB: 2020/08/15 06:21:19.295293 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.679161ms
AttachNode: main 2020/08/15 06:21:19.295306 FetchForUpdate: for parent    j2ZFuHw6QGeYya5BMyF+lQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:21:19.295312 ** Cache FetchForUpdate Cache Key Value: [j2ZFuHw6QGeYya5BMyF+lQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:21:19.295318 +++  Cache FetchItems for sortk A#G#:S UID: [j2ZFuHw6QGeYya5BMyF+lQ==] 
FetchNode: 2020/08/15 06:21:19.295322  node: j2ZFuHw6QGeYya5BMyF+lQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:21:19.295485 FetchForUpdate: for child    mMYRRH5ZS4K768lGh3yNRA==
FetchForUpdate: 2020/08/15 06:21:19.295493 ** Cache FetchForUpdate Cache Key Value: [mMYRRH5ZS4K768lGh3yNRA==]   sortk: A#
fetchItems: 2020/08/15 06:21:19.295498 +++  Cache FetchItems for sortk A# UID: [mMYRRH5ZS4K768lGh3yNRA==] 
FetchNode: 2020/08/15 06:21:19.295510  node: mMYRRH5ZS4K768lGh3yNRA== subKey: A#
DB: 2020/08/15 06:21:19.298270 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 2.707057ms
DB: 2020/08/15 06:21:19.298751 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.398062ms
uuidAttach: 2020/08/15 06:21:19.299389 for loop finished 4  6 
uuidAttach: 2020/08/15 06:21:19.299402 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.299408 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.299412 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.299424 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.299428 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.299433 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.299437 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.299441 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.299445 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.299450 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.299454 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.302198 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.303457ms
DB: 2020/08/15 06:21:19.305224 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 2.991591ms
DB: 2020/08/15 06:21:19.305240 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 2.991591ms
DB: 2020/08/15 06:21:19.308428 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.156994ms
DB: 2020/08/15 06:21:19.308443 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.156994ms
DB: 2020/08/15 06:21:19.312031 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.422993ms
uuidAttach: 2020/08/15 06:21:19.314882 for loop finished 4  6 
uuidAttach: 2020/08/15 06:21:19.314895 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.314902 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.314907 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.314913 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.314917 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.314922 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.314927 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.314934 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.314938 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.314943 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.314948 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.315401 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.220061ms
DB: 2020/08/15 06:21:19.320947 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.482799ms
DB: 2020/08/15 06:21:19.324089 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.089606ms
DB: 2020/08/15 06:21:19.327771 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.297559ms
uuidAttach: 2020/08/15 06:21:19.330419 for loop finished 4  6 
uuidAttach: 2020/08/15 06:21:19.330433 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.330439 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.330444 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.330450 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.330454 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.330468 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.330473 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.330478 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.330482 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.330487 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.330495 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.333651 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.580646ms
DB: 2020/08/15 06:21:19.337000 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.038339ms
DB: 2020/08/15 06:21:19.340539 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.241985ms
uuidAttach: 2020/08/15 06:21:19.346147 for loop finished 4  6 
uuidAttach: 2020/08/15 06:21:19.346161 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.346168 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.346173 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.346178 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.346183 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.346188 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.346192 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.346197 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.346202 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.346207 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.346211 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.346536 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.692493ms
DB: 2020/08/15 06:21:19.349954 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.135961ms
DB: 2020/08/15 06:21:19.353661 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.394749ms
DB: 2020/08/15 06:21:19.357596 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.707353ms
Cache: 2020/08/15 06:21:19.357609 In SetUpredAvailable: pUid, tUID:  j2ZFuHw6QGeYya5BMyF+lQ== WMvYsSv0T/KamXrAZj5loA== A#G#:S
Cache: 2020/08/15 06:21:19.357615 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:21:19.361229 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.543966ms
Unlock: 2020/08/15 06:21:19.361242 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:21:19.361247 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
uuidAttach: 2020/08/15 06:21:19.361630 for loop finished 4  6 
uuidAttach: 2020/08/15 06:21:19.361643 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.361650 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.361667 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.361672 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.361678 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.361683 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.361696 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.361701 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.361706 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.361711 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
uuidAttach: 2020/08/15 06:21:19.361715 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:21:19.365174 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 3.869042ms
grmgr: 2020/08/15 06:21:19.365189 EndCh received for nodeAttach. rCnt = 0 
uuidAttach: 2020/08/15 06:21:19.366866 ** received on attachDoneCh.... 1
uuidAttach: 2020/08/15 06:21:19.372035 About to run AttachNodeCh: c  b  mMYRRH5ZS4K768lGh3yNRA== +viQJ0NOTC2/N5hV+kD1RQ==
uuidAttach: 2020/08/15 06:21:19.372062 for loop finished 5  6 
grmgr: 2020/08/15 06:21:19.372070 Looping..... 0
grmgr: 2020/08/15 06:21:19.372091 Looping..... 1
grmgr: 2020/08/15 06:21:19.372266 Looping..... 2
grmgr: 2020/08/15 06:21:19.372289 Looping..... 3
grmgr: 2020/08/15 06:21:19.372464 Looping..... 4
grmgr: 2020/08/15 06:21:19.372663 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:21:19.372916 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:21:19.375491 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.756802ms
DB: 2020/08/15 06:21:19.378399 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.879191ms
DB: 2020/08/15 06:21:19.382252 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.802768ms
DB: 2020/08/15 06:21:19.386029 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.70292ms
AttachNode: main 2020/08/15 06:21:19.386042 FetchForUpdate: for parent    +viQJ0NOTC2/N5hV+kD1RQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:21:19.386047 ** Cache FetchForUpdate Cache Key Value: [+viQJ0NOTC2/N5hV+kD1RQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:21:19.386054 +++  Cache FetchItems for sortk A#G#:S UID: [+viQJ0NOTC2/N5hV+kD1RQ==] 
FetchNode: 2020/08/15 06:21:19.386058  node: +viQJ0NOTC2/N5hV+kD1RQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:21:19.386225 FetchForUpdate: for child    mMYRRH5ZS4K768lGh3yNRA==
FetchForUpdate: 2020/08/15 06:21:19.386248 ** Cache FetchForUpdate Cache Key Value: [mMYRRH5ZS4K768lGh3yNRA==]   sortk: A#
fetchItems: 2020/08/15 06:21:19.386255 +++  Cache FetchItems for sortk A# UID: [mMYRRH5ZS4K768lGh3yNRA==] 
FetchNode: 2020/08/15 06:21:19.386267  node: mMYRRH5ZS4K768lGh3yNRA== subKey: A#
DB: 2020/08/15 06:21:19.388882 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.791926ms
DB: 2020/08/15 06:21:19.389851 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.538152ms
DB: 2020/08/15 06:21:19.392582 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.305845ms
DB: 2020/08/15 06:21:19.395722 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.105513ms
DB: 2020/08/15 06:21:19.395737 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.105513ms
DB: 2020/08/15 06:21:19.398875 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.105264ms
DB: 2020/08/15 06:21:19.398889 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.105264ms
DB: 2020/08/15 06:21:19.402497 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.545803ms
DB: 2020/08/15 06:21:19.405945 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.381133ms
DB: 2020/08/15 06:21:19.411958 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.679894ms
DB: 2020/08/15 06:21:19.415775 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.63384ms
DB: 2020/08/15 06:21:19.420089 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.89633ms
DB: 2020/08/15 06:21:19.426328 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.654689ms
DB: 2020/08/15 06:21:19.429792 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.165978ms
DB: 2020/08/15 06:21:19.433520 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.419509ms
DB: 2020/08/15 06:21:19.439405 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.584792ms
DB: 2020/08/15 06:21:19.442941 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.221056ms
DB: 2020/08/15 06:21:19.446520 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.272772ms
DB: 2020/08/15 06:21:19.449779 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.076407ms
Cache: 2020/08/15 06:21:19.449792 In SetUpredAvailable: pUid, tUID:  +viQJ0NOTC2/N5hV+kD1RQ== UyX9va4mSJCd4BkkvgAr+g== A#G#:S
Cache: 2020/08/15 06:21:19.449797 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:21:19.453140 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.281695ms
Unlock: 2020/08/15 06:21:19.453150 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:21:19.453155 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 06:21:19.457297 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.067364ms
grmgr: 2020/08/15 06:21:19.457315 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/15 06:21:19.457321 saveNode finished waiting...exiting
rdfLoader: 2020/08/15 06:21:19.457327 cancel contexts
rdfLoader: 2020/08/15 06:21:19.457333 wait for autonomous goroutines to end
errlog: 2020/08/15 06:21:19.457338 Powering down...
grmgr: 2020/08/15 06:21:19.457343 Powering down...
rdfuuid: 2020/08/15 06:21:19.457347 Powering down...
rdfuuid: 2020/08/15 06:21:19.457352 Powering down...
rdfLoader: 2020/08/15 06:21:19.457357 loader exists.....
DB:2020/08/15 06:23:00 log.go:18: ===============================================================================
anmgr: 2020/08/15 06:23:00.457582 Powering on...
rdfLoader: 2020/08/15 06:23:00.457973 saveNode started......
rdfLoader: 2020/08/15 06:23:00.457984 define saveNode limiter......
rdfuuid: 2020/08/15 06:23:00.457989 Powering on...
grmgr: 2020/08/15 06:23:00.458019 Powering on...
errlog: 2020/08/15 06:23:00.458039 Powering on...
rdfLoader: 2020/08/15 06:23:00.458047  principle goroutines started 
RDFreader: 2020/08/15 06:23:00.458069 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 06:23:00.458102 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 06:23:00.458110 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 06:23:00.458116 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 06:23:00.458122 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 06:23:00.458127 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 06:23:00.458132 spo read:      
RDFreader: 2020/08/15 06:23:00.458137 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 06:23:00.458142 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 06:23:00.458147 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 06:23:00.458152 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 06:23:00.458161 spo read:      
RDFreader: 2020/08/15 06:23:00.458166 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 06:23:00.458171 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 06:23:00.458176 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 06:23:00.458181 spo read:  b  Age  "58"
RDFreader: 2020/08/15 06:23:00.458186 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 06:23:00.458190 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 06:23:00.458196 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 06:23:00.458200 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 06:23:00.458205 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 06:23:00.458209 spo read:      
RDFreader: 2020/08/15 06:23:00.458214 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 06:23:00.458217 Send node batch on channel verifyCh
RDFreader: 2020/08/15 06:23:00.458223 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 06:23:00.458227 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 06:23:00.458232 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 06:23:00.458239 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 06:23:00.458244 spo read:  c  Age  "67"
RDFreader: 2020/08/15 06:23:00.458257 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 06:23:00.458262 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 06:23:00.458267 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 06:23:00.458272 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 06:23:00.458278 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 06:23:00.458283 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 06:23:00.458287 spo read:      
RDFreader: 2020/08/15 06:23:00.458292 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 06:23:00.458297 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 06:23:00.458301 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 06:23:00.458306 spo read:  d  Age  "36"
RDFreader: 2020/08/15 06:23:00.458311 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 06:23:00.458317 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 06:23:00.458321 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 06:23:00.458325 close verify channel
rdfLoader: 2020/08/15 06:23:00.458329 wait for goroutines to end
rdfLoader: 2020/08/15 06:23:00.458333 verify started....
rdfLoader: 2020/08/15 06:23:00.458344 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 06:23:00.458348 .  getType..
rdfLoader: 2020/08/15 06:23:00.458352 node.TyName : [Person]
DB: 2020/08/15 06:23:00.537826 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 79.411205ms
grmgr: 2020/08/15 06:23:00.537964 Looping..... 0
grmgr: 2020/08/15 06:23:00.538256 Looping..... 1
grmgr: 2020/08/15 06:23:00.538405 Looping..... 2
grmgr: 2020/08/15 06:23:00.538582 Looping..... 3
grmgr: 2020/08/15 06:23:00.538759 Looping..... 4
grmgr: 2020/08/15 06:23:00.538938 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 06:23:00.538950 .  getType..
rdfLoader: 2020/08/15 06:23:00.538954 node.TyName : [Person]
grmgr: 2020/08/15 06:23:00.538960 Looping..... 0
unmarshalRDF2020/08/15 06:23:00.538973 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:23:00.538982 Looping..... 1
grmgr: 2020/08/15 06:23:00.538988 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 06:23:00.538992 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 06:23:00.539000 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 06:23:00.539004 .  getType..
rdfLoader: 2020/08/15 06:23:00.539008 node.TyName : [Person]
grmgr: 2020/08/15 06:23:00.539013 Looping..... 0
rdfLoader: 2020/08/15 06:23:00.539023 Add to SS . [Honda]
rdfLoader: 2020/08/15 06:23:00.539027 Add to SS . [Alfa]
anmgr 2020/08/15 06:23:00.539062 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.539070 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 06:23:00.539125 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:23:00.539132 Exit  unmarshalRDF. 
unmarshalRDF2020/08/15 06:23:00.539143 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:23:00.539168 Looping..... 1
grmgr: 2020/08/15 06:23:00.539173 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 06:23:00.539177 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 06:23:00.539183 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 06:23:00.539187 Looping..... 0
rdfLoader: 2020/08/15 06:23:00.539195 Add to SS . [Honda]
rdfLoader: 2020/08/15 06:23:00.539200 Add to SS . [VW Golf]
anmgr 2020/08/15 06:23:00.539215 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.539221 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 06:23:00.539248 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:23:00.539252 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 06:23:00.539257 .  getType..
rdfLoader: 2020/08/15 06:23:00.539261 node.TyName : [Person]
unmarshalRDF2020/08/15 06:23:00.539269 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:23:00.539280 Looping..... 1
rdfLoader: 2020/08/15 06:23:00.539289 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 06:23:00.539293 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 06:23:00.539297 Add to SS . [Honda]
anmgr 2020/08/15 06:23:00.539320 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.539326 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 06:23:00.539352 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:23:00.539356 Exit  unmarshalRDF. 
grmgr: 2020/08/15 06:23:00.539380 Looping..... 2
grmgr: 2020/08/15 06:23:00.539566 Looping..... 3
grmgr: 2020/08/15 06:23:00.539767 Looping..... 4
grmgr: 2020/08/15 06:23:00.539943 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 06:23:00.539951 Looping..... 0
grmgr: 2020/08/15 06:23:00.539982 Looping..... 1
SaveRDFNode: xxx 2020/08/15 06:23:00.539992 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.539998 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.540004 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.540015 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.540020 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.540026 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.540032 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:23:00.540036 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:23:00.540043 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc0003722a0)}
SaveRDFNode: 2020/08/15 06:23:00.540047 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:23:00.540059 UID received  : JPJqXFClTf6bLNK7gmlwiQ==
grmgr: 2020/08/15 06:23:00.540384 Looping..... 2
grmgr: 2020/08/15 06:23:00.540451 Looping..... 3
grmgr: 2020/08/15 06:23:00.540630 Looping..... 4
grmgr: 2020/08/15 06:23:00.540805 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 06:23:00.540814 Looping..... 0
unmarshalRDF2020/08/15 06:23:00.540828 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:23:00.540838 Looping..... 1
rdfLoader: 2020/08/15 06:23:00.540847 Add to SS . [Bentley]
unmarshalRDF2020/08/15 06:23:00.540881 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:23:00.540886 Exit  unmarshalRDF. 
grmgr: 2020/08/15 06:23:00.540895 Looping..... 2
grmgr: 2020/08/15 06:23:00.540996 Looping..... 3
grmgr: 2020/08/15 06:23:00.541170 Looping..... 4
grmgr: 2020/08/15 06:23:00.541351 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 06:23:00.541359 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/15 06:23:00.541364 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 06:23:00.541368 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/15 06:23:00.541377 Looping..... 0
grmgr: 2020/08/15 06:23:00.541402 Looping..... 1
grmgr: 2020/08/15 06:23:00.541408 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 06:23:00.541412 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 06:23:00.541420 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.541426 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.541433 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.541438 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.541444 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.541450 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.541455 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:23:00.541459 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:23:00.541465 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000372960)}
SaveRDFNode: 2020/08/15 06:23:00.541474 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:23:00.541483 UID received  : WfyfsGlxTGafbrkkXddxog==
DB: 2020/08/15 06:23:00.549766 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 9.677237ms
DB: 2020/08/15 06:23:00.554725 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 13.1704ms
DB: 2020/08/15 06:23:00.559834 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.934021ms
DB: 2020/08/15 06:23:00.564705 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.833597ms
DB: 2020/08/15 06:23:00.569458 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 19.658951ms
DB: 2020/08/15 06:23:00.569724 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.966926ms
DB: 2020/08/15 06:23:00.574178 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.686254ms
DB: 2020/08/15 06:23:00.574700 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.763154ms
SaveRDFNode: 2020/08/15 06:23:00.574742 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372960)}
SaveRDFNode: 2020/08/15 06:23:00.574756 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:00.574773 a: = db.Item{PKey:[]uint8{0x59, 0xfc, 0x9f, 0xb0, 0x69, 0x71, 0x4c, 0x66, 0x9f, 0x6e, 0xb9, 0x24, 0x5d, 0xd7, 0x71, 0xa2}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:00.579235 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.657877ms
DB: 2020/08/15 06:23:00.583912 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.645889ms
SaveRDFNode: 2020/08/15 06:23:00.583925 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003722a0)}
SaveRDFNode: 2020/08/15 06:23:00.583932 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:00.583943 a: = db.Item{PKey:[]uint8{0x24, 0xf2, 0x6a, 0x5c, 0x50, 0xa5, 0x4d, 0xfe, 0x9b, 0x2c, 0xd2, 0xbb, 0x82, 0x69, 0x70, 0x89}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:00.588510 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.537378ms
SaveRDFNode: 2020/08/15 06:23:00.588521 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0003722a0)}
SaveRDFNode: 2020/08/15 06:23:00.588528 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:00.588542 a: = db.Item{PKey:[]uint8{0x24, 0xf2, 0x6a, 0x5c, 0x50, 0xa5, 0x4d, 0xfe, 0x9b, 0x2c, 0xd2, 0xbb, 0x82, 0x69, 0x70, 0x89}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:00.593084 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.513543ms
SaveRDFNode: 2020/08/15 06:23:00.593097 Returned.+++++++++++ No error
grmgr: 2020/08/15 06:23:00.593107 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 06:23:00.593113 Send ack to waiting saveNode...
grmgr: 2020/08/15 06:23:00.593128 Looping..... 0
grmgr: 2020/08/15 06:23:00.593301 Looping..... 1
grmgr: 2020/08/15 06:23:00.593312 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 06:23:00.593327 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 06:23:00.593346 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.593355 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.593361 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.593375 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.593381 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.593386 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.593392 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:23:00.593396 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:23:00.593402 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc0002f61e0)}
SaveRDFNode: 2020/08/15 06:23:00.593406 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:23:00.593418 UID received  : S5zQ7+pqS/mZfiI/N8hNDw==
DB: 2020/08/15 06:23:00.598037 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.591411ms
DB: 2020/08/15 06:23:00.602244 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.174837ms
DB: 2020/08/15 06:23:00.606716 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.440808ms
DB: 2020/08/15 06:23:00.608110 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 33.308225ms
SaveRDFNode: 2020/08/15 06:23:00.608124 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000372960)}
SaveRDFNode: 2020/08/15 06:23:00.608132 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:00.608143 a: = db.Item{PKey:[]uint8{0x59, 0xfc, 0x9f, 0xb0, 0x69, 0x71, 0x4c, 0x66, 0x9f, 0x6e, 0xb9, 0x24, 0x5d, 0xd7, 0x71, 0xa2}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:00.611160 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.413215ms
DB: 2020/08/15 06:23:00.612679 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.506812ms
SaveRDFNode: 2020/08/15 06:23:00.612691 Returned.+++++++++++ No error
grmgr: 2020/08/15 06:23:00.612699 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 06:23:00.612704 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/15 06:23:00.612733 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.612739 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.612746 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.612752 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.612757 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.612763 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:00.612789 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:23:00.612793 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:23:00.612799 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0002f6f00)}
SaveRDFNode: 2020/08/15 06:23:00.612803 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:23:00.612814 UID received  : FGC5lk6fRaKqaCibVD/ffA==
grmgr: 2020/08/15 06:23:00.613000 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 06:23:00.615591 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.241195ms
SaveRDFNode: 2020/08/15 06:23:00.615611 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0002f61e0)}
SaveRDFNode: 2020/08/15 06:23:00.615618 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:00.615628 a: = db.Item{PKey:[]uint8{0x4b, 0x9c, 0xd0, 0xef, 0xea, 0x6a, 0x4b, 0xf9, 0x99, 0x7e, 0x22, 0x3f, 0x37, 0xc8, 0x4d, 0xf}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:00.617483 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.643317ms
DB: 2020/08/15 06:23:00.619862 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.204574ms
SaveRDFNode: 2020/08/15 06:23:00.619874 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0002f61e0)}
SaveRDFNode: 2020/08/15 06:23:00.619880 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:00.619891 a: = db.Item{PKey:[]uint8{0x4b, 0x9c, 0xd0, 0xef, 0xea, 0x6a, 0x4b, 0xf9, 0x99, 0x7e, 0x22, 0x3f, 0x37, 0xc8, 0x4d, 0xf}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:00.622464 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.94435ms
DB: 2020/08/15 06:23:00.624494 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.538031ms
SaveRDFNode: 2020/08/15 06:23:00.624505 Returned.+++++++++++ No error
grmgr: 2020/08/15 06:23:00.624513 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 06:23:00.628029 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.534298ms
DB: 2020/08/15 06:23:00.632681 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.393149ms
DB: 2020/08/15 06:23:00.637182 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.466948ms
SaveRDFNode: 2020/08/15 06:23:00.637196 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0002f6f00)}
SaveRDFNode: 2020/08/15 06:23:00.637203 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:00.637214 a: = db.Item{PKey:[]uint8{0x14, 0x60, 0xb9, 0x96, 0x4e, 0x9f, 0x45, 0xa2, 0xaa, 0x68, 0x28, 0x9b, 0x54, 0x3f, 0xdf, 0x7c}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:00.642081 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.833888ms
SaveRDFNode: 2020/08/15 06:23:00.642094 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0002f6f00)}
SaveRDFNode: 2020/08/15 06:23:00.642101 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:00.642113 a: = db.Item{PKey:[]uint8{0x14, 0x60, 0xb9, 0x96, 0x4e, 0x9f, 0x45, 0xa2, 0xaa, 0x68, 0x28, 0x9b, 0x54, 0x3f, 0xdf, 0x7c}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:00.646859 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.713387ms
SaveRDFNode: 2020/08/15 06:23:00.647017 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 06:23:00.647030 saveNode finished waiting...exiting
grmgr: 2020/08/15 06:23:00.647038 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/15 06:23:00.647052 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.662533 About to run AttachNodeCh: abc  b  JPJqXFClTf6bLNK7gmlwiQ== WfyfsGlxTGafbrkkXddxog==
anmgr 2020/08/15 06:23:00.662558 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:23:00.662569 Looping..... 0
grmgr: 2020/08/15 06:23:00.662719 Looping..... 1
grmgr: 2020/08/15 06:23:00.662898 Looping..... 2
grmgr: 2020/08/15 06:23:00.663075 Looping..... 3
grmgr: 2020/08/15 06:23:00.663264 Looping..... 4
grmgr: 2020/08/15 06:23:00.663441 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:00.664046 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:00.671358 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 6.935447ms
DB: 2020/08/15 06:23:00.675363 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.967906ms
anmgr 2020/08/15 06:23:00.679206 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.680504 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.087679ms
DB: 2020/08/15 06:23:00.688891 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.31413ms
AttachNode: main 2020/08/15 06:23:00.688906 FetchForUpdate: for parent    WfyfsGlxTGafbrkkXddxog==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:00.688912 ** Cache FetchForUpdate Cache Key Value: [WfyfsGlxTGafbrkkXddxog==]   sortk: A#G#:S
FetchNode: 2020/08/15 06:23:00.688918  node: WfyfsGlxTGafbrkkXddxog== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:00.689109 FetchForUpdate: for child    JPJqXFClTf6bLNK7gmlwiQ==
FetchForUpdate: 2020/08/15 06:23:00.689118 ** Cache FetchForUpdate Cache Key Value: [JPJqXFClTf6bLNK7gmlwiQ==]   sortk: A#
FetchNode: 2020/08/15 06:23:00.689130  node: JPJqXFClTf6bLNK7gmlwiQ== subKey: A#
DB: 2020/08/15 06:23:00.692533 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.581508ms
FetchForUpdate: 2020/08/15 06:23:00.692597 len(nb): 1
fetchItems: 2020/08/15 06:23:00.692606 +++  Cache FetchItems for sortk A#G#:S UID: [WfyfsGlxTGafbrkkXddxog==] 
FetchNode: 2020/08/15 06:23:00.692611  node: WfyfsGlxTGafbrkkXddxog== subKey: A#G#:S
anmgr 2020/08/15 06:23:00.694637 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.695671 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.030337ms
DB: 2020/08/15 06:23:00.701299 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.894243ms
DB: 2020/08/15 06:23:00.702056 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 12.87514ms
FetchForUpdate: 2020/08/15 06:23:00.702229 len(nb): 7
fetchItems: 2020/08/15 06:23:00.702239 +++  Cache FetchItems for sortk A# UID: [JPJqXFClTf6bLNK7gmlwiQ==] 
FetchNode: 2020/08/15 06:23:00.702243  node: JPJqXFClTf6bLNK7gmlwiQ== subKey: A#
DB: 2020/08/15 06:23:00.705587 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.314896ms
anmgr 2020/08/15 06:23:00.710122 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.712489 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.011077ms
DB: 2020/08/15 06:23:00.717203 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.53473ms
DB: 2020/08/15 06:23:00.722346 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.781518ms
anmgr 2020/08/15 06:23:00.725551 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.729062 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.037289ms
DB: 2020/08/15 06:23:00.733990 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.625626ms
DB: 2020/08/15 06:23:00.738576 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.519582ms
anmgr 2020/08/15 06:23:00.740996 for loop finished 0  6 
anmgr 2020/08/15 06:23:00.741011 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.741018 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.741023 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.744729 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.854651ms
DB: 2020/08/15 06:23:00.749575 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.526574ms
DB: 2020/08/15 06:23:00.754602 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.720681ms
anmgr 2020/08/15 06:23:00.756557 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.759404 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.615339ms
Cache: 2020/08/15 06:23:00.759416 In SetUpredAvailable: pUid, tUID:  WfyfsGlxTGafbrkkXddxog== WfyfsGlxTGafbrkkXddxog== A#G#:S
Cache: 2020/08/15 06:23:00.759421 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:23:00.763946 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.489787ms
Unlock: 2020/08/15 06:23:00.763959 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:00.763965 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/15 06:23:00.772046 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.773594 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 9.572277ms
grmgr: 2020/08/15 06:23:00.773608 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 06:23:00.777212 ** received on attachDoneCh.... 1
anmgr 2020/08/15 06:23:00.782409 About to run AttachNodeCh: b  c  WfyfsGlxTGafbrkkXddxog== S5zQ7+pqS/mZfiI/N8hNDw==
anmgr 2020/08/15 06:23:00.782427 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:23:00.782437 Looping..... 0
grmgr: 2020/08/15 06:23:00.782580 Looping..... 1
grmgr: 2020/08/15 06:23:00.782753 Looping..... 2
grmgr: 2020/08/15 06:23:00.782949 Looping..... 3
grmgr: 2020/08/15 06:23:00.783144 Looping..... 4
grmgr: 2020/08/15 06:23:00.783340 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:00.783587 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:00.786584 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.170275ms
DB: 2020/08/15 06:23:00.789385 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.767407ms
DB: 2020/08/15 06:23:00.793912 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.450356ms
anmgr 2020/08/15 06:23:00.797847 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.798864 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.749419ms
AttachNode: main 2020/08/15 06:23:00.798881 FetchForUpdate: for parent    S5zQ7+pqS/mZfiI/N8hNDw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:00.798886 ** Cache FetchForUpdate Cache Key Value: [S5zQ7+pqS/mZfiI/N8hNDw==]   sortk: A#G#:S
FetchNode: 2020/08/15 06:23:00.798892  node: S5zQ7+pqS/mZfiI/N8hNDw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:00.799095 FetchForUpdate: for child    WfyfsGlxTGafbrkkXddxog==
FetchForUpdate: 2020/08/15 06:23:00.799104 ** Cache FetchForUpdate Cache Key Value: [WfyfsGlxTGafbrkkXddxog==]   sortk: A#
fetchItems: 2020/08/15 06:23:00.799110 +++  Cache FetchItems for sortk A# UID: [WfyfsGlxTGafbrkkXddxog==] 
FetchNode: 2020/08/15 06:23:00.799123  node: WfyfsGlxTGafbrkkXddxog== subKey: A#
DB: 2020/08/15 06:23:00.802351 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.420607ms
FetchForUpdate: 2020/08/15 06:23:00.802410 len(nb): 1
fetchItems: 2020/08/15 06:23:00.802418 +++  Cache FetchItems for sortk A#G#:S UID: [S5zQ7+pqS/mZfiI/N8hNDw==] 
FetchNode: 2020/08/15 06:23:00.802423  node: S5zQ7+pqS/mZfiI/N8hNDw== subKey: A#G#:S
DB: 2020/08/15 06:23:00.802947 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.760995ms
fetchItems: 2020/08/15 06:23:00.803107 +++  Cache FetchItems for sortk A# UID: [WfyfsGlxTGafbrkkXddxog==] 
FetchNode: 2020/08/15 06:23:00.803113  node: WfyfsGlxTGafbrkkXddxog== subKey: A#
DB: 2020/08/15 06:23:00.806449 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.997635ms
DB: 2020/08/15 06:23:00.807670 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.524512ms
DB: 2020/08/15 06:23:00.811236 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.558052ms
anmgr 2020/08/15 06:23:00.814992 for loop finished 1  6 
anmgr 2020/08/15 06:23:00.815010 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.815018 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.815023 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.817460 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.874331ms
DB: 2020/08/15 06:23:00.821927 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.282618ms
DB: 2020/08/15 06:23:00.827374 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.048933ms
anmgr 2020/08/15 06:23:00.830427 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.833475 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.785775ms
DB: 2020/08/15 06:23:00.838035 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.267381ms
DB: 2020/08/15 06:23:00.843108 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.722252ms
anmgr 2020/08/15 06:23:00.845789 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.845805 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.845811 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.849075 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.683548ms
DB: 2020/08/15 06:23:00.853507 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.375016ms
DB: 2020/08/15 06:23:00.858475 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.669583ms
anmgr 2020/08/15 06:23:00.861258 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.863110 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.450787ms
Cache: 2020/08/15 06:23:00.863125 In SetUpredAvailable: pUid, tUID:  S5zQ7+pqS/mZfiI/N8hNDw== S5zQ7+pqS/mZfiI/N8hNDw== A#G#:S
Cache: 2020/08/15 06:23:00.863130 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:23:00.867536 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.368628ms
Unlock: 2020/08/15 06:23:00.867547 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:00.867552 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 06:23:00.872722 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.116947ms
grmgr: 2020/08/15 06:23:00.872736 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 06:23:00.876604 for loop finished 1  6 
anmgr 2020/08/15 06:23:00.876619 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.876626 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.876631 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.876645 ** received on attachDoneCh.... 0
anmgr 2020/08/15 06:23:00.886985 About to run AttachNodeCh: abc  c  JPJqXFClTf6bLNK7gmlwiQ== S5zQ7+pqS/mZfiI/N8hNDw==
anmgr 2020/08/15 06:23:00.887005 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:23:00.887015 Looping..... 0
grmgr: 2020/08/15 06:23:00.887165 Looping..... 1
grmgr: 2020/08/15 06:23:00.887338 Looping..... 2
grmgr: 2020/08/15 06:23:00.887360 Looping..... 3
grmgr: 2020/08/15 06:23:00.887532 Looping..... 4
grmgr: 2020/08/15 06:23:00.887732 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:00.887990 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:00.891908 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.096088ms
DB: 2020/08/15 06:23:00.895792 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.851168ms
DB: 2020/08/15 06:23:00.901399 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.529992ms
anmgr 2020/08/15 06:23:00.902566 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.902582 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.902589 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.906639 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.014565ms
AttachNode: main 2020/08/15 06:23:00.906655 FetchForUpdate: for parent    S5zQ7+pqS/mZfiI/N8hNDw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:00.906660 ** Cache FetchForUpdate Cache Key Value: [S5zQ7+pqS/mZfiI/N8hNDw==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:23:00.906667 +++  Cache FetchItems for sortk A#G#:S UID: [S5zQ7+pqS/mZfiI/N8hNDw==] 
FetchNode: 2020/08/15 06:23:00.906671  node: S5zQ7+pqS/mZfiI/N8hNDw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:00.906879 FetchForUpdate: for child    JPJqXFClTf6bLNK7gmlwiQ==
FetchForUpdate: 2020/08/15 06:23:00.906888 ** Cache FetchForUpdate Cache Key Value: [JPJqXFClTf6bLNK7gmlwiQ==]   sortk: A#
fetchItems: 2020/08/15 06:23:00.906894 +++  Cache FetchItems for sortk A# UID: [JPJqXFClTf6bLNK7gmlwiQ==] 
FetchNode: 2020/08/15 06:23:00.906925  node: JPJqXFClTf6bLNK7gmlwiQ== subKey: A#
DB: 2020/08/15 06:23:00.909913 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.205721ms
DB: 2020/08/15 06:23:00.910669 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.682733ms
DB: 2020/08/15 06:23:00.914744 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.68831ms
anmgr 2020/08/15 06:23:00.917966 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.918982 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.204971ms
DB: 2020/08/15 06:23:00.919014 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.204971ms
DB: 2020/08/15 06:23:00.923985 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.936157ms
DB: 2020/08/15 06:23:00.924004 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.936157ms
DB: 2020/08/15 06:23:00.928854 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.646215ms
anmgr 2020/08/15 06:23:00.933482 for loop finished 2  6 
anmgr 2020/08/15 06:23:00.933497 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.933504 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.933511 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.933526 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.933530 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.933677 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.650388ms
DB: 2020/08/15 06:23:00.939920 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.923676ms
DB: 2020/08/15 06:23:00.944459 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.332693ms
anmgr 2020/08/15 06:23:00.948789 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.948803 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.948809 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.949422 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.569649ms
DB: 2020/08/15 06:23:00.955721 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.236372ms
DB: 2020/08/15 06:23:00.960434 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.63467ms
anmgr 2020/08/15 06:23:00.964295 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.965177 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.64901ms
DB: 2020/08/15 06:23:00.971257 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.996771ms
DB: 2020/08/15 06:23:00.976035 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.704481ms
anmgr 2020/08/15 06:23:00.979703 for loop finished 2  6 
anmgr 2020/08/15 06:23:00.979725 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.979732 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.979737 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.979743 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.979748 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.980765 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.651823ms
DB: 2020/08/15 06:23:00.985761 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.941598ms
Cache: 2020/08/15 06:23:00.985775 In SetUpredAvailable: pUid, tUID:  S5zQ7+pqS/mZfiI/N8hNDw== nctPfgaBR6uXtKqxPp3Ebw== A#G#:S
Cache: 2020/08/15 06:23:00.985780 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:23:00.991191 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.374569ms
Unlock: 2020/08/15 06:23:00.991202 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:00.991207 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/15 06:23:00.995229 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.995246 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:00.995254 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:00.996957 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.685033ms
grmgr: 2020/08/15 06:23:00.996975 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 06:23:01.000398 ** received on attachDoneCh.... 1
anmgr 2020/08/15 06:23:01.005550 About to run AttachNodeCh: c  abc  S5zQ7+pqS/mZfiI/N8hNDw== JPJqXFClTf6bLNK7gmlwiQ==
anmgr 2020/08/15 06:23:01.005567 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:23:01.005577 Looping..... 0
grmgr: 2020/08/15 06:23:01.005721 Looping..... 1
grmgr: 2020/08/15 06:23:01.005896 Looping..... 2
grmgr: 2020/08/15 06:23:01.006089 Looping..... 3
grmgr: 2020/08/15 06:23:01.006281 Looping..... 4
grmgr: 2020/08/15 06:23:01.006475 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:01.006757 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:01.011345 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.78241ms
DB: 2020/08/15 06:23:01.014153 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.765941ms
DB: 2020/08/15 06:23:01.019783 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.563017ms
anmgr 2020/08/15 06:23:01.021020 for loop finished 3  6 
anmgr 2020/08/15 06:23:01.021036 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.021043 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.021048 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.021054 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.021059 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.024732 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.854185ms
AttachNode: main 2020/08/15 06:23:01.024753 FetchForUpdate: for parent    JPJqXFClTf6bLNK7gmlwiQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:01.024758 ** Cache FetchForUpdate Cache Key Value: [JPJqXFClTf6bLNK7gmlwiQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:23:01.024764 +++  Cache FetchItems for sortk A#G#:S UID: [JPJqXFClTf6bLNK7gmlwiQ==] 
FetchNode: 2020/08/15 06:23:01.024769  node: JPJqXFClTf6bLNK7gmlwiQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:01.024993 FetchForUpdate: for child    S5zQ7+pqS/mZfiI/N8hNDw==
FetchForUpdate: 2020/08/15 06:23:01.025002 ** Cache FetchForUpdate Cache Key Value: [S5zQ7+pqS/mZfiI/N8hNDw==]   sortk: A#
fetchItems: 2020/08/15 06:23:01.025008 +++  Cache FetchItems for sortk A# UID: [S5zQ7+pqS/mZfiI/N8hNDw==] 
FetchNode: 2020/08/15 06:23:01.025026  node: S5zQ7+pqS/mZfiI/N8hNDw== subKey: A#
DB: 2020/08/15 06:23:01.028877 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.800792ms
DB: 2020/08/15 06:23:01.029779 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.969367ms
DB: 2020/08/15 06:23:01.034773 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.766997ms
anmgr 2020/08/15 06:23:01.036504 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.036518 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.036523 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.036529 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.036534 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.041258 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.124252ms
DB: 2020/08/15 06:23:01.047883 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.409741ms
anmgr 2020/08/15 06:23:01.052012 for loop finished 3  6 
anmgr 2020/08/15 06:23:01.052031 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.052038 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.052044 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.052049 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.052054 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.054071 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.065465ms
DB: 2020/08/15 06:23:01.060092 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.961372ms
DB: 2020/08/15 06:23:01.067100 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.944142ms
anmgr 2020/08/15 06:23:01.067528 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.067543 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.067556 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.067562 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.067567 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.071964 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.775103ms
DB: 2020/08/15 06:23:01.077994 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.952872ms
DB: 2020/08/15 06:23:01.082622 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.556825ms
anmgr 2020/08/15 06:23:01.082992 for loop finished 3  6 
anmgr 2020/08/15 06:23:01.083006 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.083013 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.083018 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.083023 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.083028 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.087192 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.503937ms
DB: 2020/08/15 06:23:01.092039 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.783851ms
Cache: 2020/08/15 06:23:01.092054 In SetUpredAvailable: pUid, tUID:  JPJqXFClTf6bLNK7gmlwiQ== JPJqXFClTf6bLNK7gmlwiQ== A#G#:S
Cache: 2020/08/15 06:23:01.092060 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:23:01.096846 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.743923ms
Unlock: 2020/08/15 06:23:01.096857 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:01.096862 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/15 06:23:01.098454 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.098468 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.098473 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.098479 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.098484 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.101964 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.037723ms
grmgr: 2020/08/15 06:23:01.101981 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 06:23:01.103634 ** received on attachDoneCh.... 1
anmgr 2020/08/15 06:23:01.108830 About to run AttachNodeCh: c  b  S5zQ7+pqS/mZfiI/N8hNDw== WfyfsGlxTGafbrkkXddxog==
anmgr 2020/08/15 06:23:01.108847 for loop finished 4  6 
anmgr 2020/08/15 06:23:01.108858 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.108865 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.108870 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.108875 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.108890 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:23:01.108900 Looping..... 0
grmgr: 2020/08/15 06:23:01.108924 Looping..... 1
grmgr: 2020/08/15 06:23:01.109093 Looping..... 2
grmgr: 2020/08/15 06:23:01.109311 Looping..... 3
grmgr: 2020/08/15 06:23:01.109452 Looping..... 4
grmgr: 2020/08/15 06:23:01.109647 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:01.109911 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:01.112766 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.041133ms
DB: 2020/08/15 06:23:01.115865 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.068907ms
DB: 2020/08/15 06:23:01.120873 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.952764ms
anmgr 2020/08/15 06:23:01.124317 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.124333 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.124338 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.124344 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.124348 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.124354 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.124359 for loop finished 4  6 
anmgr 2020/08/15 06:23:01.124363 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.124369 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.124373 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.124378 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.124383 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.125950 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.993074ms
AttachNode: main 2020/08/15 06:23:01.125973 FetchForUpdate: for parent    WfyfsGlxTGafbrkkXddxog==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:01.125979 ** Cache FetchForUpdate Cache Key Value: [WfyfsGlxTGafbrkkXddxog==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:23:01.125993 +++  Cache FetchItems for sortk A#G#:S UID: [WfyfsGlxTGafbrkkXddxog==] 
FetchNode: 2020/08/15 06:23:01.125998  node: WfyfsGlxTGafbrkkXddxog== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:01.126246 FetchForUpdate: for child    S5zQ7+pqS/mZfiI/N8hNDw==
FetchForUpdate: 2020/08/15 06:23:01.126256 ** Cache FetchForUpdate Cache Key Value: [S5zQ7+pqS/mZfiI/N8hNDw==]   sortk: A#
fetchItems: 2020/08/15 06:23:01.126262 +++  Cache FetchItems for sortk A# UID: [S5zQ7+pqS/mZfiI/N8hNDw==] 
FetchNode: 2020/08/15 06:23:01.126274  node: S5zQ7+pqS/mZfiI/N8hNDw== subKey: A#
DB: 2020/08/15 06:23:01.130192 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.860478ms
DB: 2020/08/15 06:23:01.130611 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.560875ms
DB: 2020/08/15 06:23:01.135573 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.840124ms
anmgr 2020/08/15 06:23:01.139712 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.139730 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.139736 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.139743 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.139749 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.139755 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.139771 for loop finished 4  6 
anmgr 2020/08/15 06:23:01.139777 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.139783 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.139789 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.139795 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.139816 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.139925 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.314869ms
DB: 2020/08/15 06:23:01.139940 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.314869ms
DB: 2020/08/15 06:23:01.144456 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.482392ms
DB: 2020/08/15 06:23:01.144474 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.482392ms
DB: 2020/08/15 06:23:01.149736 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.060673ms
DB: 2020/08/15 06:23:01.155249 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.340197ms
anmgr 2020/08/15 06:23:01.157290 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.157307 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.157313 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.157319 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.157337 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.157344 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.157350 for loop finished 4  6 
anmgr 2020/08/15 06:23:01.157355 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.157362 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.157368 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.157374 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.157380 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.161672 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.162721ms
DB: 2020/08/15 06:23:01.166027 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.298169ms
DB: 2020/08/15 06:23:01.170727 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.578082ms
anmgr 2020/08/15 06:23:01.172818 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.172834 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.172840 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.172846 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.172851 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.172856 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.172861 for loop finished 4  6 
anmgr 2020/08/15 06:23:01.172866 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.172872 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.172877 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.172882 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.172895 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.177284 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.479685ms
DB: 2020/08/15 06:23:01.181855 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.508877ms
DB: 2020/08/15 06:23:01.187877 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.95032ms
anmgr 2020/08/15 06:23:01.188285 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.188299 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.188304 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.188310 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.188314 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.188320 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.188325 for loop finished 4  6 
anmgr 2020/08/15 06:23:01.188330 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.188335 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.188340 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.188345 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.188350 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.194928 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.158899ms
DB: 2020/08/15 06:23:01.199459 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.457526ms
anmgr 2020/08/15 06:23:01.203716 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.203734 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.203740 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.203746 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.203751 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.203756 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.203762 for loop finished 4  6 
anmgr 2020/08/15 06:23:01.203767 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.203772 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.203777 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.203783 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.203789 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:01.204542 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.008624ms
DB: 2020/08/15 06:23:01.208929 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.317709ms
Cache: 2020/08/15 06:23:01.208942 In SetUpredAvailable: pUid, tUID:  WfyfsGlxTGafbrkkXddxog== CoyKSK1wRlK40++UvwtZBw== A#G#:S
Cache: 2020/08/15 06:23:01.208948 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:23:01.213633 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.647105ms
Unlock: 2020/08/15 06:23:01.213648 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:01.213654 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 06:23:01.218949 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.21221ms
grmgr: 2020/08/15 06:23:01.218977 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 06:23:01.219516 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.219527 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.219532 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.219537 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.219542 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.219547 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.219552 for loop finished 4  6 
anmgr 2020/08/15 06:23:01.219557 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.219562 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.219566 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.219571 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.219576 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.219581 ** received on attachDoneCh.... 0
anmgr 2020/08/15 06:23:01.229938 About to run AttachNodeCh: b  abc  WfyfsGlxTGafbrkkXddxog== JPJqXFClTf6bLNK7gmlwiQ==
anmgr 2020/08/15 06:23:01.229975 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.229984 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.229990 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.229997 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.230003 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.230009 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:01.230016 for loop finished 5  6 
grmgr: 2020/08/15 06:23:01.230024 Looping..... 0
grmgr: 2020/08/15 06:23:01.230095 Looping..... 1
grmgr: 2020/08/15 06:23:01.230285 Looping..... 2
grmgr: 2020/08/15 06:23:01.230460 Looping..... 3
grmgr: 2020/08/15 06:23:01.230634 Looping..... 4
grmgr: 2020/08/15 06:23:01.230822 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:01.231129 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:01.235303 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.386954ms
DB: 2020/08/15 06:23:01.239341 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.99914ms
DB: 2020/08/15 06:23:01.244106 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.68055ms
DB: 2020/08/15 06:23:01.249256 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.928751ms
AttachNode: main 2020/08/15 06:23:01.249274 FetchForUpdate: for parent    JPJqXFClTf6bLNK7gmlwiQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:01.249280 ** Cache FetchForUpdate Cache Key Value: [JPJqXFClTf6bLNK7gmlwiQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:23:01.249287 +++  Cache FetchItems for sortk A#G#:S UID: [JPJqXFClTf6bLNK7gmlwiQ==] 
FetchNode: 2020/08/15 06:23:01.249292  node: JPJqXFClTf6bLNK7gmlwiQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:01.249482 FetchForUpdate: for child    WfyfsGlxTGafbrkkXddxog==
FetchForUpdate: 2020/08/15 06:23:01.249521 ** Cache FetchForUpdate Cache Key Value: [WfyfsGlxTGafbrkkXddxog==]   sortk: A#
fetchItems: 2020/08/15 06:23:01.249530 +++  Cache FetchItems for sortk A# UID: [WfyfsGlxTGafbrkkXddxog==] 
FetchNode: 2020/08/15 06:23:01.249544  node: WfyfsGlxTGafbrkkXddxog== subKey: A#
DB: 2020/08/15 06:23:01.253154 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.559116ms
DB: 2020/08/15 06:23:01.254141 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.813577ms
DB: 2020/08/15 06:23:01.259180 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.905775ms
DB: 2020/08/15 06:23:01.263606 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.387363ms
DB: 2020/08/15 06:23:01.263626 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.387363ms
DB: 2020/08/15 06:23:01.269667 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.996684ms
DB: 2020/08/15 06:23:01.269715 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.996684ms
DB: 2020/08/15 06:23:01.275015 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.087386ms
DB: 2020/08/15 06:23:01.280469 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.290802ms
DB: 2020/08/15 06:23:01.287048 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.221546ms
DB: 2020/08/15 06:23:01.291577 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.337581ms
DB: 2020/08/15 06:23:01.296726 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.744029ms
DB: 2020/08/15 06:23:01.303133 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.097944ms
DB: 2020/08/15 06:23:01.308027 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.560176ms
DB: 2020/08/15 06:23:01.313070 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.698986ms
DB: 2020/08/15 06:23:01.319966 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.482812ms
DB: 2020/08/15 06:23:01.324847 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.556881ms
DB: 2020/08/15 06:23:01.329956 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.800594ms
DB: 2020/08/15 06:23:01.335943 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.800295ms
Cache: 2020/08/15 06:23:01.335964 In SetUpredAvailable: pUid, tUID:  JPJqXFClTf6bLNK7gmlwiQ== 3UP6oGgDT5Clt8SnS13anw== A#G#:S
Cache: 2020/08/15 06:23:01.335971 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:23:01.340481 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.470408ms
Unlock: 2020/08/15 06:23:01.340494 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:01.340499 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 06:23:01.345853 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.29478ms
grmgr: 2020/08/15 06:23:01.345875 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/15 06:23:01.345881 saveNode finished waiting...exiting
rdfLoader: 2020/08/15 06:23:01.345887 cancel contexts
rdfLoader: 2020/08/15 06:23:01.345892 wait for autonomous goroutines to end
errlog: 2020/08/15 06:23:01.345897 Powering down...
grmgr: 2020/08/15 06:23:01.345902 Powering down...
anmgr: 2020/08/15 06:23:01.345907 Powering down...
rdfuuid: 2020/08/15 06:23:01.345912 Powering down...
rdfLoader: 2020/08/15 06:23:01.345917 loader exists.....
DB:2020/08/15 06:23:15 log.go:18: ===============================================================================
anmgr: 2020/08/15 06:23:15.280185 Powering on...
rdfLoader: 2020/08/15 06:23:15.280223 saveNode started......
rdfLoader: 2020/08/15 06:23:15.280233 define saveNode limiter......
rdfuuid: 2020/08/15 06:23:15.280237 Powering on...
grmgr: 2020/08/15 06:23:15.280255 Powering on...
errlog: 2020/08/15 06:23:15.280264 Powering on...
rdfLoader: 2020/08/15 06:23:15.280270  principle goroutines started 
RDFreader: 2020/08/15 06:23:15.280292 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 06:23:15.280305 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 06:23:15.280311 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 06:23:15.280317 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 06:23:15.280322 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 06:23:15.280327 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 06:23:15.280331 spo read:      
RDFreader: 2020/08/15 06:23:15.280336 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 06:23:15.280341 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 06:23:15.280346 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 06:23:15.280351 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 06:23:15.280355 spo read:      
RDFreader: 2020/08/15 06:23:15.280360 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 06:23:15.280365 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 06:23:15.280369 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 06:23:15.280374 spo read:  b  Age  "58"
RDFreader: 2020/08/15 06:23:15.280379 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 06:23:15.280384 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 06:23:15.280389 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 06:23:15.280394 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 06:23:15.280398 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 06:23:15.280402 spo read:      
RDFreader: 2020/08/15 06:23:15.280407 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 06:23:15.280411 Send node batch on channel verifyCh
RDFreader: 2020/08/15 06:23:15.280416 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 06:23:15.280420 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 06:23:15.280425 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 06:23:15.280431 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 06:23:15.280436 spo read:  c  Age  "67"
RDFreader: 2020/08/15 06:23:15.280441 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 06:23:15.280446 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 06:23:15.280451 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 06:23:15.280455 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 06:23:15.280462 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 06:23:15.280467 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 06:23:15.280471 spo read:      
RDFreader: 2020/08/15 06:23:15.280476 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 06:23:15.280480 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 06:23:15.280485 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 06:23:15.280490 spo read:  d  Age  "36"
RDFreader: 2020/08/15 06:23:15.280495 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 06:23:15.280501 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 06:23:15.280505 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 06:23:15.280509 close verify channel
rdfLoader: 2020/08/15 06:23:15.280512 wait for goroutines to end
rdfLoader: 2020/08/15 06:23:15.280516 verify started....
rdfLoader: 2020/08/15 06:23:15.280521 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 06:23:15.280524 .  getType..
rdfLoader: 2020/08/15 06:23:15.280528 node.TyName : [Person]
DB: 2020/08/15 06:23:15.351037 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 70.444247ms
grmgr: 2020/08/15 06:23:15.351721 Looping..... 0
grmgr: 2020/08/15 06:23:15.354025 Looping..... 1
grmgr: 2020/08/15 06:23:15.354196 Looping..... 2
grmgr: 2020/08/15 06:23:15.354370 Looping..... 3
grmgr: 2020/08/15 06:23:15.354546 Looping..... 4
grmgr: 2020/08/15 06:23:15.354776 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 06:23:15.354788 .  getType..
rdfLoader: 2020/08/15 06:23:15.354802 node.TyName : [Person]
grmgr: 2020/08/15 06:23:15.354808 Looping..... 0
unmarshalRDF2020/08/15 06:23:15.354820 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:23:15.354831 Looping..... 1
grmgr: 2020/08/15 06:23:15.354837 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 06:23:15.354841 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 06:23:15.354849 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 06:23:15.354853 .  getType..
rdfLoader: 2020/08/15 06:23:15.354856 node.TyName : [Person]
grmgr: 2020/08/15 06:23:15.354861 Looping..... 0
rdfLoader: 2020/08/15 06:23:15.354883 Add to SS . [Honda]
rdfLoader: 2020/08/15 06:23:15.354888 Add to SS . [Alfa]
anmgr 2020/08/15 06:23:15.354922 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.354930 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 06:23:15.354963 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:23:15.354969 Exit  unmarshalRDF. 
unmarshalRDF2020/08/15 06:23:15.354979 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:23:15.355005 Looping..... 1
grmgr: 2020/08/15 06:23:15.355011 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 06:23:15.355015 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 06:23:15.355020 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 06:23:15.355024 Looping..... 0
rdfLoader: 2020/08/15 06:23:15.355032 Add to SS . [Honda]
rdfLoader: 2020/08/15 06:23:15.355037 Add to SS . [VW Golf]
anmgr 2020/08/15 06:23:15.355052 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.355058 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 06:23:15.355086 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:23:15.355090 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 06:23:15.355096 .  getType..
rdfLoader: 2020/08/15 06:23:15.355100 node.TyName : [Person]
unmarshalRDF2020/08/15 06:23:15.355108 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:23:15.355119 Looping..... 1
rdfLoader: 2020/08/15 06:23:15.355127 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 06:23:15.355132 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 06:23:15.355136 Add to SS . [Honda]
anmgr 2020/08/15 06:23:15.355171 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.355177 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 06:23:15.355201 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:23:15.355210 Exit  unmarshalRDF. 
grmgr: 2020/08/15 06:23:15.355237 Looping..... 2
grmgr: 2020/08/15 06:23:15.355414 Looping..... 3
grmgr: 2020/08/15 06:23:15.355585 Looping..... 4
grmgr: 2020/08/15 06:23:15.355752 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 06:23:15.355762 Looping..... 0
grmgr: 2020/08/15 06:23:15.355789 Looping..... 1
SaveRDFNode: xxx 2020/08/15 06:23:15.355800 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.355807 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.355814 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.355820 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.355825 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.355831 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.355836 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:23:15.355840 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:23:15.355848 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000016b40)}
SaveRDFNode: 2020/08/15 06:23:15.355852 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:23:15.355864 UID received  : yhojQza6QqOWa106xE0Umw==
grmgr: 2020/08/15 06:23:15.356149 Looping..... 2
grmgr: 2020/08/15 06:23:15.356328 Looping..... 3
grmgr: 2020/08/15 06:23:15.356513 Looping..... 4
grmgr: 2020/08/15 06:23:15.356676 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 06:23:15.356685 Looping..... 0
unmarshalRDF2020/08/15 06:23:15.356699 Entered unmarshalRDF. 
grmgr: 2020/08/15 06:23:15.356709 Looping..... 1
rdfLoader: 2020/08/15 06:23:15.356718 Add to SS . [Bentley]
unmarshalRDF2020/08/15 06:23:15.356752 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 06:23:15.356756 Exit  unmarshalRDF. 
grmgr: 2020/08/15 06:23:15.356766 Looping..... 2
grmgr: 2020/08/15 06:23:15.356859 Looping..... 3
grmgr: 2020/08/15 06:23:15.357036 Looping..... 4
grmgr: 2020/08/15 06:23:15.357211 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 06:23:15.357220 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/15 06:23:15.357225 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 06:23:15.357229 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/15 06:23:15.357238 Looping..... 0
grmgr: 2020/08/15 06:23:15.357264 Looping..... 1
grmgr: 2020/08/15 06:23:15.357269 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 06:23:15.357273 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 06:23:15.357282 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.357288 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.357300 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.357306 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.357312 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.357317 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.357323 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:23:15.357327 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:23:15.357333 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017500)}
SaveRDFNode: 2020/08/15 06:23:15.357337 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:23:15.357345 UID received  : NZMhn6IPQBWm+dOnPfu7mQ==
DB: 2020/08/15 06:23:15.369059 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 13.160871ms
DB: 2020/08/15 06:23:15.373295 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.043012ms
DB: 2020/08/15 06:23:15.378114 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.807586ms
DB: 2020/08/15 06:23:15.379806 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 22.416392ms
DB: 2020/08/15 06:23:15.381983 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.8328ms
DB: 2020/08/15 06:23:15.384556 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.716725ms
DB: 2020/08/15 06:23:15.385763 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.748928ms
SaveRDFNode: 2020/08/15 06:23:15.385778 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016b40)}
SaveRDFNode: 2020/08/15 06:23:15.385787 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:15.385805 a: = db.Item{PKey:[]uint8{0xca, 0x1a, 0x23, 0x43, 0x36, 0xba, 0x42, 0xa3, 0x96, 0x6b, 0x5d, 0x3a, 0xc4, 0x4d, 0x14, 0x9b}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:15.388388 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.649595ms
DB: 2020/08/15 06:23:15.389773 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.938356ms
SaveRDFNode: 2020/08/15 06:23:15.389785 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000016b40)}
SaveRDFNode: 2020/08/15 06:23:15.389792 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:15.389803 a: = db.Item{PKey:[]uint8{0xca, 0x1a, 0x23, 0x43, 0x36, 0xba, 0x42, 0xa3, 0x96, 0x6b, 0x5d, 0x3a, 0xc4, 0x4d, 0x14, 0x9b}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:15.392010 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.591411ms
DB: 2020/08/15 06:23:15.393656 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.825471ms
SaveRDFNode: 2020/08/15 06:23:15.393666 Returned.+++++++++++ No error
grmgr: 2020/08/15 06:23:15.393675 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 06:23:15.393681 Send ack to waiting saveNode...
grmgr: 2020/08/15 06:23:15.393689 Looping..... 0
grmgr: 2020/08/15 06:23:15.393728 Looping..... 1
grmgr: 2020/08/15 06:23:15.393734 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 06:23:15.393739 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 06:23:15.393769 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.393776 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.393785 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.393791 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.393796 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.393821 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.393830 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:23:15.393834 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:23:15.393840 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000373920)}
SaveRDFNode: 2020/08/15 06:23:15.393844 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:23:15.393854 UID received  : ZyQR/7hLTJ60uH6VpfaR2A==
DB: 2020/08/15 06:23:15.395714 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.669761ms
SaveRDFNode: 2020/08/15 06:23:15.395726 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017500)}
SaveRDFNode: 2020/08/15 06:23:15.395733 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:15.395744 a: = db.Item{PKey:[]uint8{0x35, 0x93, 0x21, 0x9f, 0xa2, 0xf, 0x40, 0x15, 0xa6, 0xf9, 0xd3, 0xa7, 0x3d, 0xfb, 0xbb, 0x99}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:15.397731 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.851116ms
DB: 2020/08/15 06:23:15.399300 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.525004ms
SaveRDFNode: 2020/08/15 06:23:15.399312 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017500)}
SaveRDFNode: 2020/08/15 06:23:15.399319 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:15.399329 a: = db.Item{PKey:[]uint8{0x35, 0x93, 0x21, 0x9f, 0xa2, 0xf, 0x40, 0x15, 0xa6, 0xf9, 0xd3, 0xa7, 0x3d, 0xfb, 0xbb, 0x99}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:15.401674 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.912151ms
DB: 2020/08/15 06:23:15.402962 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.60462ms
SaveRDFNode: 2020/08/15 06:23:15.402974 Returned.+++++++++++ No error
grmgr: 2020/08/15 06:23:15.402981 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 06:23:15.402985 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/15 06:23:15.403010 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.403016 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.403022 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.403027 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.403034 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.403040 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 06:23:15.403076 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 06:23:15.403081 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 06:23:15.403087 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc000204480)}
SaveRDFNode: 2020/08/15 06:23:15.403091 Waiting for UID ......................
SaveRDFNode: 2020/08/15 06:23:15.403100 UID received  : SZ0UmxzxQ5K8/BYU/6vE6A==
grmgr: 2020/08/15 06:23:15.403289 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 06:23:15.405437 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.723599ms
DB: 2020/08/15 06:23:15.406582 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.456224ms
DB: 2020/08/15 06:23:15.409304 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.836898ms
DB: 2020/08/15 06:23:15.410231 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.619747ms
DB: 2020/08/15 06:23:15.413023 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.688208ms
SaveRDFNode: 2020/08/15 06:23:15.413036 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000373920)}
SaveRDFNode: 2020/08/15 06:23:15.413044 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:15.413055 a: = db.Item{PKey:[]uint8{0x67, 0x24, 0x11, 0xff, 0xb8, 0x4b, 0x4c, 0x9e, 0xb4, 0xb8, 0x7e, 0x95, 0xa5, 0xf6, 0x91, 0xd8}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:15.413944 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.683832ms
DB: 2020/08/15 06:23:15.416762 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.677702ms
SaveRDFNode: 2020/08/15 06:23:15.416776 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000373920)}
SaveRDFNode: 2020/08/15 06:23:15.416784 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:15.416795 a: = db.Item{PKey:[]uint8{0x67, 0x24, 0x11, 0xff, 0xb8, 0x4b, 0x4c, 0x9e, 0xb4, 0xb8, 0x7e, 0x95, 0xa5, 0xf6, 0x91, 0xd8}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:15.417471 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.492878ms
DB: 2020/08/15 06:23:15.420491 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.66715ms
SaveRDFNode: 2020/08/15 06:23:15.420504 Returned.+++++++++++ No error
grmgr: 2020/08/15 06:23:15.420512 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 06:23:15.421189 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.531607ms
SaveRDFNode: 2020/08/15 06:23:15.421201 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000204480)}
SaveRDFNode: 2020/08/15 06:23:15.421209 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:15.421220 a: = db.Item{PKey:[]uint8{0x49, 0x9d, 0x14, 0x9b, 0x1c, 0xf1, 0x43, 0x92, 0xbc, 0xfc, 0x16, 0x14, 0xff, 0xab, 0xc4, 0xe8}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:15.424876 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.62761ms
SaveRDFNode: 2020/08/15 06:23:15.424888 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000204480)}
SaveRDFNode: 2020/08/15 06:23:15.424895 Received UID: X18=
SaveRDFNode: 2020/08/15 06:23:15.424905 a: = db.Item{PKey:[]uint8{0x49, 0x9d, 0x14, 0x9b, 0x1c, 0xf1, 0x43, 0x92, 0xbc, 0xfc, 0x16, 0x14, 0xff, 0xab, 0xc4, 0xe8}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 06:23:15.428558 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.614495ms
SaveRDFNode: 2020/08/15 06:23:15.428577 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 06:23:15.428584 saveNode finished waiting...exiting
grmgr: 2020/08/15 06:23:15.428591 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/15 06:23:15.428603 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.444061 About to run AttachNodeCh: abc  b  yhojQza6QqOWa106xE0Umw== NZMhn6IPQBWm+dOnPfu7mQ==
anmgr 2020/08/15 06:23:15.444087 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:23:15.444097 Looping..... 0
grmgr: 2020/08/15 06:23:15.444267 Looping..... 1
grmgr: 2020/08/15 06:23:15.444442 Looping..... 2
grmgr: 2020/08/15 06:23:15.444616 Looping..... 3
grmgr: 2020/08/15 06:23:15.444791 Looping..... 4
grmgr: 2020/08/15 06:23:15.445008 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:15.445464 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:15.448536 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.394628ms
DB: 2020/08/15 06:23:15.451175 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.588658ms
DB: 2020/08/15 06:23:15.456098 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.845903ms
anmgr 2020/08/15 06:23:15.460456 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.461927 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.28766ms
AttachNode: main 2020/08/15 06:23:15.461941 FetchForUpdate: for parent    NZMhn6IPQBWm+dOnPfu7mQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:15.461947 ** Cache FetchForUpdate Cache Key Value: [NZMhn6IPQBWm+dOnPfu7mQ==]   sortk: A#G#:S
FetchNode: 2020/08/15 06:23:15.461953  node: NZMhn6IPQBWm+dOnPfu7mQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:15.462161 FetchForUpdate: for child    yhojQza6QqOWa106xE0Umw==
FetchForUpdate: 2020/08/15 06:23:15.462204 ** Cache FetchForUpdate Cache Key Value: [yhojQza6QqOWa106xE0Umw==]   sortk: A#
FetchNode: 2020/08/15 06:23:15.462219  node: yhojQza6QqOWa106xE0Umw== subKey: A#
DB: 2020/08/15 06:23:15.465464 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.195688ms
FetchForUpdate: 2020/08/15 06:23:15.465611 len(nb): 7
fetchItems: 2020/08/15 06:23:15.465621 +++  Cache FetchItems for sortk A# UID: [yhojQza6QqOWa106xE0Umw==] 
FetchNode: 2020/08/15 06:23:15.465626  node: yhojQza6QqOWa106xE0Umw== subKey: A#
DB: 2020/08/15 06:23:15.465945 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.960522ms
FetchForUpdate: 2020/08/15 06:23:15.465974 len(nb): 1
fetchItems: 2020/08/15 06:23:15.465980 +++  Cache FetchItems for sortk A#G#:S UID: [NZMhn6IPQBWm+dOnPfu7mQ==] 
FetchNode: 2020/08/15 06:23:15.465985  node: NZMhn6IPQBWm+dOnPfu7mQ== subKey: A#G#:S
DB: 2020/08/15 06:23:15.468607 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 2.951553ms
DB: 2020/08/15 06:23:15.470712 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.700447ms
DB: 2020/08/15 06:23:15.476199 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.894196ms
anmgr 2020/08/15 06:23:15.476896 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.482324 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.053468ms
DB: 2020/08/15 06:23:15.485858 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.485667ms
DB: 2020/08/15 06:23:15.489739 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.775938ms
anmgr 2020/08/15 06:23:15.492365 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.495852 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.035671ms
DB: 2020/08/15 06:23:15.499873 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.723863ms
DB: 2020/08/15 06:23:15.504059 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.828689ms
anmgr 2020/08/15 06:23:15.507822 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.510857 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.502421ms
DB: 2020/08/15 06:23:15.514747 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.596247ms
DB: 2020/08/15 06:23:15.518910 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.856019ms
DB: 2020/08/15 06:23:15.522823 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.732562ms
Cache: 2020/08/15 06:23:15.522836 In SetUpredAvailable: pUid, tUID:  NZMhn6IPQBWm+dOnPfu7mQ== NZMhn6IPQBWm+dOnPfu7mQ== A#G#:S
Cache: 2020/08/15 06:23:15.522841 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/15 06:23:15.523264 for loop finished 0  6 
anmgr 2020/08/15 06:23:15.523277 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.523283 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.523288 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.527113 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.237287ms
Unlock: 2020/08/15 06:23:15.527126 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:15.527131 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 06:23:15.532090 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.903321ms
grmgr: 2020/08/15 06:23:15.532109 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 06:23:15.533600 ** received on attachDoneCh.... 2
anmgr 2020/08/15 06:23:15.533617 About to run AttachNodeCh: abc  c  yhojQza6QqOWa106xE0Umw== ZyQR/7hLTJ60uH6VpfaR2A==
anmgr 2020/08/15 06:23:15.533629 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:23:15.533638 Looping..... 0
grmgr: 2020/08/15 06:23:15.533652 Looping..... 1
grmgr: 2020/08/15 06:23:15.533779 Looping..... 2
grmgr: 2020/08/15 06:23:15.533957 Looping..... 3
grmgr: 2020/08/15 06:23:15.534136 Looping..... 4
grmgr: 2020/08/15 06:23:15.534316 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:15.534679 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:15.537118 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.609975ms
DB: 2020/08/15 06:23:15.539706 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.555205ms
DB: 2020/08/15 06:23:15.543485 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.726536ms
DB: 2020/08/15 06:23:15.547777 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.116878ms
AttachNode: main 2020/08/15 06:23:15.547794 FetchForUpdate: for parent    ZyQR/7hLTJ60uH6VpfaR2A==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:15.547800 ** Cache FetchForUpdate Cache Key Value: [ZyQR/7hLTJ60uH6VpfaR2A==]   sortk: A#G#:S
FetchNode: 2020/08/15 06:23:15.547806  node: ZyQR/7hLTJ60uH6VpfaR2A== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:15.548005 FetchForUpdate: for child    yhojQza6QqOWa106xE0Umw==
FetchForUpdate: 2020/08/15 06:23:15.548015 ** Cache FetchForUpdate Cache Key Value: [yhojQza6QqOWa106xE0Umw==]   sortk: A#
fetchItems: 2020/08/15 06:23:15.548051 +++  Cache FetchItems for sortk A# UID: [yhojQza6QqOWa106xE0Umw==] 
FetchNode: 2020/08/15 06:23:15.548065  node: yhojQza6QqOWa106xE0Umw== subKey: A#
anmgr 2020/08/15 06:23:15.549067 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.550419 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.573129ms
FetchForUpdate: 2020/08/15 06:23:15.550484 len(nb): 1
fetchItems: 2020/08/15 06:23:15.550491 +++  Cache FetchItems for sortk A#G#:S UID: [ZyQR/7hLTJ60uH6VpfaR2A==] 
FetchNode: 2020/08/15 06:23:15.550496  node: ZyQR/7hLTJ60uH6VpfaR2A== subKey: A#G#:S
DB: 2020/08/15 06:23:15.551169 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.061897ms
DB: 2020/08/15 06:23:15.553402 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 2.857361ms
DB: 2020/08/15 06:23:15.557355 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.864843ms
DB: 2020/08/15 06:23:15.563465 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.041511ms
anmgr 2020/08/15 06:23:15.564516 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.567527 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.011114ms
DB: 2020/08/15 06:23:15.571425 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.795908ms
DB: 2020/08/15 06:23:15.577693 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.210407ms
anmgr 2020/08/15 06:23:15.579968 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.581571 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.822973ms
DB: 2020/08/15 06:23:15.585629 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.991798ms
DB: 2020/08/15 06:23:15.591824 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.132884ms
anmgr 2020/08/15 06:23:15.595414 for loop finished 1  6 
anmgr 2020/08/15 06:23:15.595428 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.595435 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.595440 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.595445 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.595451 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.595880 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.773207ms
DB: 2020/08/15 06:23:15.600127 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.898276ms
DB: 2020/08/15 06:23:15.604364 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.056762ms
Cache: 2020/08/15 06:23:15.604376 In SetUpredAvailable: pUid, tUID:  ZyQR/7hLTJ60uH6VpfaR2A== ZyQR/7hLTJ60uH6VpfaR2A== A#G#:S
Cache: 2020/08/15 06:23:15.604381 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:23:15.608133 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.718022ms
Unlock: 2020/08/15 06:23:15.608143 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:15.608148 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/15 06:23:15.610809 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.613012 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.773627ms
grmgr: 2020/08/15 06:23:15.613130 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 06:23:15.615952 ** received on attachDoneCh.... 1
anmgr 2020/08/15 06:23:15.621124 About to run AttachNodeCh: b  c  NZMhn6IPQBWm+dOnPfu7mQ== ZyQR/7hLTJ60uH6VpfaR2A==
anmgr 2020/08/15 06:23:15.621138 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:23:15.621146 Looping..... 0
grmgr: 2020/08/15 06:23:15.621295 Looping..... 1
grmgr: 2020/08/15 06:23:15.621472 Looping..... 2
grmgr: 2020/08/15 06:23:15.621666 Looping..... 3
grmgr: 2020/08/15 06:23:15.621861 Looping..... 4
grmgr: 2020/08/15 06:23:15.622057 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:15.622269 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:15.625121 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.991771ms
DB: 2020/08/15 06:23:15.627591 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.438654ms
DB: 2020/08/15 06:23:15.631436 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.772751ms
DB: 2020/08/15 06:23:15.636165 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 3.962795ms
AttachNode: main 2020/08/15 06:23:15.636179 FetchForUpdate: for parent    ZyQR/7hLTJ60uH6VpfaR2A==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:15.636184 ** Cache FetchForUpdate Cache Key Value: [ZyQR/7hLTJ60uH6VpfaR2A==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:23:15.636190 +++  Cache FetchItems for sortk A#G#:S UID: [ZyQR/7hLTJ60uH6VpfaR2A==] 
FetchNode: 2020/08/15 06:23:15.636194  node: ZyQR/7hLTJ60uH6VpfaR2A== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:15.636373 FetchForUpdate: for child    NZMhn6IPQBWm+dOnPfu7mQ==
FetchForUpdate: 2020/08/15 06:23:15.636381 ** Cache FetchForUpdate Cache Key Value: [NZMhn6IPQBWm+dOnPfu7mQ==]   sortk: A#
fetchItems: 2020/08/15 06:23:15.636387 +++  Cache FetchItems for sortk A# UID: [NZMhn6IPQBWm+dOnPfu7mQ==] 
FetchNode: 2020/08/15 06:23:15.636403  node: NZMhn6IPQBWm+dOnPfu7mQ== subKey: A#
anmgr 2020/08/15 06:23:15.636926 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.639741 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.295726ms
fetchItems: 2020/08/15 06:23:15.639889 +++  Cache FetchItems for sortk A# UID: [NZMhn6IPQBWm+dOnPfu7mQ==] 
FetchNode: 2020/08/15 06:23:15.639896  node: NZMhn6IPQBWm+dOnPfu7mQ== subKey: A#
DB: 2020/08/15 06:23:15.640262 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 4.036882ms
DB: 2020/08/15 06:23:15.643138 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.213535ms
DB: 2020/08/15 06:23:15.644408 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.833451ms
DB: 2020/08/15 06:23:15.647958 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.517973ms
DB: 2020/08/15 06:23:15.647977 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.517973ms
DB: 2020/08/15 06:23:15.651537 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.527718ms
DB: 2020/08/15 06:23:15.651552 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.527718ms
anmgr 2020/08/15 06:23:15.652410 for loop finished 2  6 
anmgr 2020/08/15 06:23:15.652424 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.652431 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.652436 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.652449 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.652454 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.655602 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.885031ms
DB: 2020/08/15 06:23:15.659517 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.713852ms
anmgr 2020/08/15 06:23:15.667909 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.667926 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.667932 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.670455 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 10.407835ms
DB: 2020/08/15 06:23:15.674553 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.821707ms
DB: 2020/08/15 06:23:15.678851 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.822476ms
anmgr 2020/08/15 06:23:15.683684 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.685420 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.097336ms
DB: 2020/08/15 06:23:15.689590 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.809362ms
DB: 2020/08/15 06:23:15.694153 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.165135ms
anmgr 2020/08/15 06:23:15.699189 for loop finished 2  6 
anmgr 2020/08/15 06:23:15.699207 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.699215 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.699220 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.699226 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.699232 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.700548 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.082317ms
DB: 2020/08/15 06:23:15.704355 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.738519ms
DB: 2020/08/15 06:23:15.708250 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.830148ms
DB: 2020/08/15 06:23:15.711986 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.67414ms
Cache: 2020/08/15 06:23:15.711998 In SetUpredAvailable: pUid, tUID:  ZyQR/7hLTJ60uH6VpfaR2A== SwGShRfiTdGybjhigUICEw== A#G#:S
Cache: 2020/08/15 06:23:15.712003 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/15 06:23:15.715039 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.715055 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.715061 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.715912 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.873945ms
Unlock: 2020/08/15 06:23:15.715923 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:15.715928 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 06:23:15.720202 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.216479ms
grmgr: 2020/08/15 06:23:15.720219 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 06:23:15.720232 ** received on attachDoneCh.... 1
anmgr 2020/08/15 06:23:15.725410 About to run AttachNodeCh: c  abc  ZyQR/7hLTJ60uH6VpfaR2A== yhojQza6QqOWa106xE0Umw==
anmgr 2020/08/15 06:23:15.725434 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:23:15.725441 Looping..... 0
grmgr: 2020/08/15 06:23:15.725584 Looping..... 1
grmgr: 2020/08/15 06:23:15.725760 Looping..... 2
grmgr: 2020/08/15 06:23:15.725937 Looping..... 3
grmgr: 2020/08/15 06:23:15.726114 Looping..... 4
grmgr: 2020/08/15 06:23:15.726292 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:15.726494 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:15.734307 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 7.953406ms
DB: 2020/08/15 06:23:15.736936 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.59203ms
DB: 2020/08/15 06:23:15.740671 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.686075ms
anmgr 2020/08/15 06:23:15.741029 for loop finished 3  6 
anmgr 2020/08/15 06:23:15.741041 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.741047 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.741053 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.741058 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.741068 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.744929 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.082661ms
AttachNode: main 2020/08/15 06:23:15.744941 FetchForUpdate: for parent    yhojQza6QqOWa106xE0Umw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:15.744946 ** Cache FetchForUpdate Cache Key Value: [yhojQza6QqOWa106xE0Umw==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:23:15.744952 +++  Cache FetchItems for sortk A#G#:S UID: [yhojQza6QqOWa106xE0Umw==] 
FetchNode: 2020/08/15 06:23:15.744956  node: yhojQza6QqOWa106xE0Umw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:15.745134 FetchForUpdate: for child    ZyQR/7hLTJ60uH6VpfaR2A==
FetchForUpdate: 2020/08/15 06:23:15.745143 ** Cache FetchForUpdate Cache Key Value: [ZyQR/7hLTJ60uH6VpfaR2A==]   sortk: A#
fetchItems: 2020/08/15 06:23:15.745164 +++  Cache FetchItems for sortk A# UID: [ZyQR/7hLTJ60uH6VpfaR2A==] 
FetchNode: 2020/08/15 06:23:15.745200  node: ZyQR/7hLTJ60uH6VpfaR2A== subKey: A#
DB: 2020/08/15 06:23:15.748553 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.305021ms
DB: 2020/08/15 06:23:15.749396 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.405782ms
DB: 2020/08/15 06:23:15.753929 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.330953ms
anmgr 2020/08/15 06:23:15.756497 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.756511 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.756519 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.756525 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.756529 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.760150 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.152001ms
DB: 2020/08/15 06:23:15.764134 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.936758ms
DB: 2020/08/15 06:23:15.768082 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.846334ms
anmgr 2020/08/15 06:23:15.771995 for loop finished 3  6 
anmgr 2020/08/15 06:23:15.772012 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.772019 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.772034 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.772040 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.772045 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.774274 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.13575ms
DB: 2020/08/15 06:23:15.778365 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.036726ms
DB: 2020/08/15 06:23:15.782923 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.284124ms
anmgr 2020/08/15 06:23:15.787489 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.787502 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.787507 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.787512 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.787517 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.788981 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.99671ms
DB: 2020/08/15 06:23:15.792651 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.60348ms
DB: 2020/08/15 06:23:15.796569 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.850272ms
DB: 2020/08/15 06:23:15.800381 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.64349ms
Cache: 2020/08/15 06:23:15.800393 In SetUpredAvailable: pUid, tUID:  yhojQza6QqOWa106xE0Umw== yhojQza6QqOWa106xE0Umw== A#G#:S
Cache: 2020/08/15 06:23:15.800398 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/15 06:23:15.803362 for loop finished 3  6 
anmgr 2020/08/15 06:23:15.803376 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.803382 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.803387 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.803392 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.803397 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.804266 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.832336ms
Unlock: 2020/08/15 06:23:15.804282 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:15.804287 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 06:23:15.808950 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.607928ms
grmgr: 2020/08/15 06:23:15.808968 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 06:23:15.813688 ** received on attachDoneCh.... 2
anmgr 2020/08/15 06:23:15.813708 About to run AttachNodeCh: b  abc  NZMhn6IPQBWm+dOnPfu7mQ== yhojQza6QqOWa106xE0Umw==
anmgr 2020/08/15 06:23:15.813717 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.813723 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.813728 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.813733 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.813738 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/15 06:23:15.813746 Looping..... 0
grmgr: 2020/08/15 06:23:15.813762 Looping..... 1
grmgr: 2020/08/15 06:23:15.813867 Looping..... 2
grmgr: 2020/08/15 06:23:15.814075 Looping..... 3
grmgr: 2020/08/15 06:23:15.814166 Looping..... 4
grmgr: 2020/08/15 06:23:15.814279 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:15.814544 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:15.816827 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.479691ms
DB: 2020/08/15 06:23:15.819953 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.095583ms
DB: 2020/08/15 06:23:15.824040 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.037245ms
DB: 2020/08/15 06:23:15.828293 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.19023ms
AttachNode: main 2020/08/15 06:23:15.828309 FetchForUpdate: for parent    yhojQza6QqOWa106xE0Umw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:15.828315 ** Cache FetchForUpdate Cache Key Value: [yhojQza6QqOWa106xE0Umw==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:23:15.828321 +++  Cache FetchItems for sortk A#G#:S UID: [yhojQza6QqOWa106xE0Umw==] 
FetchNode: 2020/08/15 06:23:15.828325  node: yhojQza6QqOWa106xE0Umw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:15.828490 FetchForUpdate: for child    NZMhn6IPQBWm+dOnPfu7mQ==
FetchForUpdate: 2020/08/15 06:23:15.828514 ** Cache FetchForUpdate Cache Key Value: [NZMhn6IPQBWm+dOnPfu7mQ==]   sortk: A#
fetchItems: 2020/08/15 06:23:15.828520 +++  Cache FetchItems for sortk A# UID: [NZMhn6IPQBWm+dOnPfu7mQ==] 
FetchNode: 2020/08/15 06:23:15.828544  node: NZMhn6IPQBWm+dOnPfu7mQ== subKey: A#
anmgr 2020/08/15 06:23:15.829472 for loop finished 4  6 
anmgr 2020/08/15 06:23:15.829485 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.829492 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.829512 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.829517 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.829522 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.829527 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.829532 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.829537 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.829542 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.829547 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.829551 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.831094 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.734555ms
DB: 2020/08/15 06:23:15.832555 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.965145ms
DB: 2020/08/15 06:23:15.835617 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.185061ms
DB: 2020/08/15 06:23:15.839945 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.286366ms
DB: 2020/08/15 06:23:15.840017 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.286366ms
DB: 2020/08/15 06:23:15.843805 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.727761ms
DB: 2020/08/15 06:23:15.843821 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.727761ms
anmgr 2020/08/15 06:23:15.845441 for loop finished 4  6 
anmgr 2020/08/15 06:23:15.845456 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.845463 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.845468 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.845482 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.845487 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.845492 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.845497 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.845502 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.845507 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.845512 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.845517 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.847784 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.899285ms
DB: 2020/08/15 06:23:15.851727 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.882823ms
DB: 2020/08/15 06:23:15.858440 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.641157ms
anmgr 2020/08/15 06:23:15.861032 for loop finished 4  6 
anmgr 2020/08/15 06:23:15.861048 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.861056 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.861061 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.861066 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.861071 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.861076 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.861081 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.861086 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.861091 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.861096 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.861101 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.862388 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.899588ms
DB: 2020/08/15 06:23:15.866243 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.752899ms
DB: 2020/08/15 06:23:15.872345 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.043082ms
DB: 2020/08/15 06:23:15.875997 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.599799ms
anmgr 2020/08/15 06:23:15.876900 for loop finished 4  6 
anmgr 2020/08/15 06:23:15.876915 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.876922 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.876927 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.876933 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.876938 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.876943 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.876948 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.876955 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.876959 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.876965 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.876969 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.879899 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.836568ms
DB: 2020/08/15 06:23:15.885862 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.891996ms
DB: 2020/08/15 06:23:15.889885 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.962286ms
anmgr 2020/08/15 06:23:15.892427 for loop finished 4  6 
anmgr 2020/08/15 06:23:15.892441 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.892448 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.892453 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.892458 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.892463 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.892468 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.892473 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.892478 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.892483 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.892488 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.892493 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 06:23:15.893992 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.023876ms
DB: 2020/08/15 06:23:15.897863 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.693717ms
Cache: 2020/08/15 06:23:15.897878 In SetUpredAvailable: pUid, tUID:  yhojQza6QqOWa106xE0Umw== gFOHfZyoRjepoA78OJinjA== A#G#:S
Cache: 2020/08/15 06:23:15.897883 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:23:15.901770 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.849532ms
Unlock: 2020/08/15 06:23:15.901780 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:15.901785 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 06:23:15.906046 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.193156ms
grmgr: 2020/08/15 06:23:15.906059 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 06:23:15.907764 for loop finished 4  6 
anmgr 2020/08/15 06:23:15.907776 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.907782 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.907787 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.907792 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.907797 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.907802 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.907807 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.907812 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.907817 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.907822 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.907826 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 06:23:15.907831 ** received on attachDoneCh.... 0
anmgr 2020/08/15 06:23:15.918164 About to run AttachNodeCh: c  b  ZyQR/7hLTJ60uH6VpfaR2A== NZMhn6IPQBWm+dOnPfu7mQ==
anmgr 2020/08/15 06:23:15.918189 for loop finished 5  6 
grmgr: 2020/08/15 06:23:15.918198 Looping..... 0
grmgr: 2020/08/15 06:23:15.918232 Looping..... 1
grmgr: 2020/08/15 06:23:15.918408 Looping..... 2
grmgr: 2020/08/15 06:23:15.918590 Looping..... 3
grmgr: 2020/08/15 06:23:15.918767 Looping..... 4
grmgr: 2020/08/15 06:23:15.918964 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 06:23:15.919223 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 06:23:15.921641 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.596782ms
DB: 2020/08/15 06:23:15.924165 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 2.491787ms
DB: 2020/08/15 06:23:15.928075 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.830724ms
DB: 2020/08/15 06:23:15.932435 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.064454ms
AttachNode: main 2020/08/15 06:23:15.932448 FetchForUpdate: for parent    NZMhn6IPQBWm+dOnPfu7mQ==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 06:23:15.932453 ** Cache FetchForUpdate Cache Key Value: [NZMhn6IPQBWm+dOnPfu7mQ==]   sortk: A#G#:S
fetchItems: 2020/08/15 06:23:15.932459 +++  Cache FetchItems for sortk A#G#:S UID: [NZMhn6IPQBWm+dOnPfu7mQ==] 
FetchNode: 2020/08/15 06:23:15.932463  node: NZMhn6IPQBWm+dOnPfu7mQ== subKey: A#G#:S
AttachNode: gr1 2020/08/15 06:23:15.932659 FetchForUpdate: for child    ZyQR/7hLTJ60uH6VpfaR2A==
FetchForUpdate: 2020/08/15 06:23:15.932668 ** Cache FetchForUpdate Cache Key Value: [ZyQR/7hLTJ60uH6VpfaR2A==]   sortk: A#
fetchItems: 2020/08/15 06:23:15.932674 +++  Cache FetchItems for sortk A# UID: [ZyQR/7hLTJ60uH6VpfaR2A==] 
FetchNode: 2020/08/15 06:23:15.932704  node: ZyQR/7hLTJ60uH6VpfaR2A== subKey: A#
DB: 2020/08/15 06:23:15.935327 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 2.82656ms
DB: 2020/08/15 06:23:15.936561 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.807396ms
DB: 2020/08/15 06:23:15.940007 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.979322ms
DB: 2020/08/15 06:23:15.943530 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.481933ms
DB: 2020/08/15 06:23:15.943545 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.481933ms
DB: 2020/08/15 06:23:15.947104 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.516113ms
DB: 2020/08/15 06:23:15.947119 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.516113ms
DB: 2020/08/15 06:23:15.952571 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.384194ms
DB: 2020/08/15 06:23:15.956367 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.727209ms
DB: 2020/08/15 06:23:15.962375 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.935161ms
DB: 2020/08/15 06:23:15.966216 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.671179ms
DB: 2020/08/15 06:23:15.970444 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.872529ms
DB: 2020/08/15 06:23:15.976862 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.117108ms
DB: 2020/08/15 06:23:15.981430 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.287119ms
DB: 2020/08/15 06:23:15.985650 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.914126ms
DB: 2020/08/15 06:23:15.991963 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.022355ms
DB: 2020/08/15 06:23:15.995834 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 3.57217ms
DB: 2020/08/15 06:23:16.000210 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.080566ms
DB: 2020/08/15 06:23:16.004198 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 3.807111ms
Cache: 2020/08/15 06:23:16.004210 In SetUpredAvailable: pUid, tUID:  NZMhn6IPQBWm+dOnPfu7mQ== dAj51AILQuWorzq7t+KXoQ== A#G#:S
Cache: 2020/08/15 06:23:16.004216 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 06:23:16.008082 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 3.830574ms
Unlock: 2020/08/15 06:23:16.008096 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 06:23:16.008102 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 06:23:16.012876 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.717038ms
grmgr: 2020/08/15 06:23:16.012895 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/15 06:23:16.012901 saveNode finished waiting...exiting
rdfLoader: 2020/08/15 06:23:16.012907 cancel contexts
rdfLoader: 2020/08/15 06:23:16.012931 wait for autonomous goroutines to end
errlog: 2020/08/15 06:23:16.012937 Powering down...
grmgr: 2020/08/15 06:23:16.012942 Powering down...
anmgr: 2020/08/15 06:23:16.012946 Powering down...
rdfuuid: 2020/08/15 06:23:16.012952 Powering down...
rdfLoader: 2020/08/15 06:23:16.012956 loader exists.....
DB:2020/08/15 08:06:21 log.go:18: ===============================================================================
anmgr: 2020/08/15 08:06:21.584267 Powering on...
rdfLoader: 2020/08/15 08:06:21.584303 saveNode started......
rdfLoader: 2020/08/15 08:06:21.584309 define saveNode limiter......
rdfuuid: 2020/08/15 08:06:21.584313 Powering on...
grmgr: 2020/08/15 08:06:21.584330 Powering on...
errlog: 2020/08/15 08:06:21.584339 Powering on...
rdfLoader: 2020/08/15 08:06:21.584346  principle goroutines started 
RDFreader: 2020/08/15 08:06:21.584367 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 08:06:21.584381 spo read:  abc  __type  "Person"
RDFreader: 2020/08/15 08:06:21.584387 spo read:  abc  Name  "Ross Payne"
RDFreader: 2020/08/15 08:06:21.584393 spo read:  abc  DOB  "13 March 1958"
RDFreader: 2020/08/15 08:06:21.584398 spo read:  abc  Age  "62"
RDFreader: 2020/08/15 08:06:21.584403 spo read:  abc  Siblings  _:b
RDFreader: 2020/08/15 08:06:21.584408 spo read:      
RDFreader: 2020/08/15 08:06:21.584413 spo read:  abc  Siblings  _:c
RDFreader: 2020/08/15 08:06:21.584418 spo read:  abc  Cars  "Fiat"
RDFreader: 2020/08/15 08:06:21.584427 spo read:  abc  Cars  "Honda"
RDFreader: 2020/08/15 08:06:21.584432 spo read:  abc  Cars  "Alfa"
RDFreader: 2020/08/15 08:06:21.584437 spo read:      
RDFreader: 2020/08/15 08:06:21.584442 spo read:  b  __type  "Person"
RDFreader: 2020/08/15 08:06:21.584447 spo read:  b  Name  "Paul Payne"
RDFreader: 2020/08/15 08:06:21.584452 spo read:  b  DOB  "2 June 1960"
RDFreader: 2020/08/15 08:06:21.584457 spo read:  b  Age  "58"
RDFreader: 2020/08/15 08:06:21.584462 spo read:  b  Siblings  _:abc
RDFreader: 2020/08/15 08:06:21.584467 spo read:  b  Siblings  _:c
RDFreader: 2020/08/15 08:06:21.584472 spo read:  b  Cars  "Holden Commodore"
RDFreader: 2020/08/15 08:06:21.584478 spo read:  b  Cars  "Honda"
RDFreader: 2020/08/15 08:06:21.584483 spo read:  b  Cars  "VW Golf"
RDFreader: 2020/08/15 08:06:21.584487 spo read:      
RDFreader: 2020/08/15 08:06:21.584492 spo read:  c  __type  "Person"
rdfLoader: 2020/08/15 08:06:21.584495 Send node batch on channel verifyCh
RDFreader: 2020/08/15 08:06:21.584501 reader: batch size -= %!(EXTRA int=2)
RDFreader: 2020/08/15 08:06:21.584504 spo read:  c  __type  "Person"
RDFreader: 2020/08/15 08:06:21.584510 spo read:  c  Name  "Ian Payne"
RDFreader: 2020/08/15 08:06:21.584521 spo read:  c  DOB  "29 Jan 1953"
RDFreader: 2020/08/15 08:06:21.584527 spo read:  c  Age  "67"
RDFreader: 2020/08/15 08:06:21.584531 spo read:  c  Siblings  _:abc
RDFreader: 2020/08/15 08:06:21.584536 spo read:  c  Siblings  _:b
RDFreader: 2020/08/15 08:06:21.584541 spo read:  c  Cars  "VW Passat"
RDFreader: 2020/08/15 08:06:21.584545 spo read:  c  Cars  "Mitsubishi"
RDFreader: 2020/08/15 08:06:21.584552 spo read:  c  Cars  "Ford Laser"
RDFreader: 2020/08/15 08:06:21.584556 spo read:  c  Cars  "Honda"
RDFreader: 2020/08/15 08:06:21.584560 spo read:      
RDFreader: 2020/08/15 08:06:21.584565 spo read:  d  __type  "Person"
RDFreader: 2020/08/15 08:06:21.584570 spo read:  d  Name  "Phil Smith"
RDFreader: 2020/08/15 08:06:21.584575 spo read:  d  DOB  "17 June 1976"
RDFreader: 2020/08/15 08:06:21.584579 spo read:  d  Age  "36"
RDFreader: 2020/08/15 08:06:21.584584 spo read:  d  Cars  "Roll Roycet"
RDFreader: 2020/08/15 08:06:21.584590 spo read:  d  Cars  "Bentley"
rdfLoader: 2020/08/15 08:06:21.584594 Send node batch on channel verifyCh
rdfLoader: 2020/08/15 08:06:21.584598 close verify channel
rdfLoader: 2020/08/15 08:06:21.584601 wait for goroutines to end
rdfLoader: 2020/08/15 08:06:21.584606 verify started....
rdfLoader: 2020/08/15 08:06:21.584610 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 08:06:21.584614 .  getType..
rdfLoader: 2020/08/15 08:06:21.584617 node.TyName : [Person]
DB: 2020/08/15 08:06:21.653080 FetchType: consumed capacity for Query: {
  CapacityUnits: 0.5,
  TableName: "DyGTypes"
},  Item Count: 9 Duration: 68.406123ms
grmgr: 2020/08/15 08:06:21.653221 Looping..... 0
grmgr: 2020/08/15 08:06:21.653480 Looping..... 1
grmgr: 2020/08/15 08:06:21.653500 Looping..... 2
grmgr: 2020/08/15 08:06:21.653660 Looping..... 3
grmgr: 2020/08/15 08:06:21.653838 Looping..... 4
grmgr: 2020/08/15 08:06:21.654018 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 08:06:21.654028 .  getType..
rdfLoader: 2020/08/15 08:06:21.654032 node.TyName : [Person]
grmgr: 2020/08/15 08:06:21.654038 Looping..... 0
unmarshalRDF2020/08/15 08:06:21.654062 Entered unmarshalRDF. 
grmgr: 2020/08/15 08:06:21.654071 Looping..... 1
grmgr: 2020/08/15 08:06:21.654076 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 08:06:21.654080 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
rdfLoader: 2020/08/15 08:06:21.654087 read from verifyCH : nodes_.n = 2
rdfLoader: 2020/08/15 08:06:21.654091 .  getType..
rdfLoader: 2020/08/15 08:06:21.654095 node.TyName : [Person]
grmgr: 2020/08/15 08:06:21.654099 Looping..... 0
rdfLoader: 2020/08/15 08:06:21.654109 Add to SS . [Honda]
rdfLoader: 2020/08/15 08:06:21.654113 Add to SS . [Alfa]
anmgr 2020/08/15 08:06:21.654146 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.654191 received on EdgeSnCn. anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 08:06:21.654241 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}, ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}, ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}, ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 08:06:21.654247 Exit  unmarshalRDF. 
unmarshalRDF2020/08/15 08:06:21.654257 Entered unmarshalRDF. 
grmgr: 2020/08/15 08:06:21.654282 Looping..... 1
grmgr: 2020/08/15 08:06:21.654288 CAUGHT - goroutine started by previous Ask for unmarshall
grmgr: 2020/08/15 08:06:21.654292 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 08:06:21.654297 Looping..... 0
rdfLoader: 2020/08/15 08:06:21.654305 Add to SS . [Honda]
rdfLoader: 2020/08/15 08:06:21.654309 Add to SS . [VW Golf]
anmgr 2020/08/15 08:06:21.654331 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.654337 received on EdgeSnCn. anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 08:06:21.654363 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}, ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}, ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}, ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 08:06:21.654368 Exit  unmarshalRDF. 
rdfLoader: 2020/08/15 08:06:21.654373 .  getType..
rdfLoader: 2020/08/15 08:06:21.654377 node.TyName : [Person]
unmarshalRDF2020/08/15 08:06:21.654385 Entered unmarshalRDF. 
grmgr: 2020/08/15 08:06:21.654396 Looping..... 1
rdfLoader: 2020/08/15 08:06:21.654404 Add to SS . [Mitsubishi]
rdfLoader: 2020/08/15 08:06:21.654408 Add to SS . [Ford Laser]
rdfLoader: 2020/08/15 08:06:21.654412 Add to SS . [Honda]
anmgr 2020/08/15 08:06:21.654434 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.654441 received on EdgeSnCn. anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
unmarshalRDF2020/08/15 08:06:21.654466 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}, ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}, ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}, ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 08:06:21.654471 Exit  unmarshalRDF. 
grmgr: 2020/08/15 08:06:21.654494 Looping..... 2
grmgr: 2020/08/15 08:06:21.654676 Looping..... 3
grmgr: 2020/08/15 08:06:21.654854 Looping..... 4
grmgr: 2020/08/15 08:06:21.655031 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 08:06:21.655039 Looping..... 0
grmgr: 2020/08/15 08:06:21.655068 Looping..... 1
SaveRDFNode: xxx 2020/08/15 08:06:21.655078 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"abc", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.655085 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"abc", Name:"Cars", DT:"SS", Value:[]string{"Fiat", "Honda", "Alfa"}}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.655090 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"abc", Name:"DOB", DT:"S", Value:"13 March 1958"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.655095 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"abc", Name:"Name", DT:"S", Value:"Ross Payne"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.655100 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"abc", Name:"Age", DT:"I", Value:62}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.655106 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.655111 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 08:06:21.655115 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 08:06:21.655131 UID request  : uuid.Request{SName:"abc", RespCh:(chan util.UID)(0xc000017740)}
SaveRDFNode: 2020/08/15 08:06:21.655136 Waiting for UID ......................
SaveRDFNode: 2020/08/15 08:06:21.655146 UID received  : uJnW/Er7Tturjde2chlDng==
grmgr: 2020/08/15 08:06:21.655392 Looping..... 2
grmgr: 2020/08/15 08:06:21.655572 Looping..... 3
grmgr: 2020/08/15 08:06:21.655773 Looping..... 4
grmgr: 2020/08/15 08:06:21.655958 has ASKed. Under cnt limit. Send ACK on routine channel..unmarshall
grmgr: 2020/08/15 08:06:21.655967 Looping..... 0
unmarshalRDF2020/08/15 08:06:21.655981 Entered unmarshalRDF. 
grmgr: 2020/08/15 08:06:21.655990 Looping..... 1
rdfLoader: 2020/08/15 08:06:21.655999 Add to SS . [Bentley]
unmarshalRDF2020/08/15 08:06:21.656030 send on saveCh: nv: []ds.NV{ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}, ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}, ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}, ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}, ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}, ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}, ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}}
unmarshalRDF2020/08/15 08:06:21.656035 Exit  unmarshalRDF. 
grmgr: 2020/08/15 08:06:21.656044 Looping..... 2
grmgr: 2020/08/15 08:06:21.656136 Looping..... 3
grmgr: 2020/08/15 08:06:21.656310 Looping..... 4
grmgr: 2020/08/15 08:06:21.656485 has ASKed. Under cnt limit. Send ACK on routine channel..saveNode
grmgr: 2020/08/15 08:06:21.656493 EndCh received for unmarshall. rCnt = 3 
grmgr: 2020/08/15 08:06:21.656498 EndCh received for unmarshall. rCnt = 2 
grmgr: 2020/08/15 08:06:21.656503 EndCh received for unmarshall. rCnt = 1 
grmgr: 2020/08/15 08:06:21.656507 EndCh received for unmarshall. rCnt = 0 
grmgr: 2020/08/15 08:06:21.656516 Looping..... 0
grmgr: 2020/08/15 08:06:21.656542 Looping..... 1
grmgr: 2020/08/15 08:06:21.656547 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 08:06:21.656551 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 08:06:21.656559 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"b", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.656567 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"b", Name:"Cars", DT:"SS", Value:[]string{"Holden Commodore", "Honda", "VW Golf"}}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.656572 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"b", Name:"DOB", DT:"S", Value:"2 June 1960"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.656578 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"b", Name:"Name", DT:"S", Value:"Paul Payne"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.656583 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"b", Name:"Age", DT:"I", Value:58}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.656589 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.656595 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 08:06:21.656598 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 08:06:21.656604 UID request  : uuid.Request{SName:"b", RespCh:(chan util.UID)(0xc000017e60)}
SaveRDFNode: 2020/08/15 08:06:21.656608 Waiting for UID ......................
SaveRDFNode: 2020/08/15 08:06:21.656616 UID received  : AJ2XnL5oRTmJ+9BLGN3aXg==
DB: 2020/08/15 08:06:21.663236 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 8.060773ms
DB: 2020/08/15 08:06:21.666734 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 10.076615ms
DB: 2020/08/15 08:06:21.670465 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.196753ms
DB: 2020/08/15 08:06:21.674099 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 3.587331ms
DB: 2020/08/15 08:06:21.678382 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.247297ms
DB: 2020/08/15 08:06:21.688232 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 21.454735ms
DB: 2020/08/15 08:06:21.693439 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.21648ms
DB: 2020/08/15 08:06:21.697283 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 18.868089ms
SaveRDFNode: 2020/08/15 08:06:21.697297 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017740)}
SaveRDFNode: 2020/08/15 08:06:21.697305 Received UID: X18=
SaveRDFNode: 2020/08/15 08:06:21.697319 a: = db.Item{PKey:[]uint8{0xb8, 0x99, 0xd6, 0xfc, 0x4a, 0xfb, 0x4e, 0xdb, 0xab, 0x8d, 0xd7, 0xb6, 0x72, 0x19, 0x43, 0x9e}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 08:06:21.697646 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.173483ms
DB: 2020/08/15 08:06:21.701609 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.258264ms
SaveRDFNode: 2020/08/15 08:06:21.701622 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017740)}
SaveRDFNode: 2020/08/15 08:06:21.701629 Received UID: X18=
SaveRDFNode: 2020/08/15 08:06:21.701640 a: = db.Item{PKey:[]uint8{0xb8, 0x99, 0xd6, 0xfc, 0x4a, 0xfb, 0x4e, 0xdb, 0xab, 0x8d, 0xd7, 0xb6, 0x72, 0x19, 0x43, 0x9e}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 08:06:21.701923 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.245348ms
SaveRDFNode: 2020/08/15 08:06:21.701935 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017e60)}
SaveRDFNode: 2020/08/15 08:06:21.701941 Received UID: X18=
SaveRDFNode: 2020/08/15 08:06:21.701952 a: = db.Item{PKey:[]uint8{0x0, 0x9d, 0x97, 0x9c, 0xbe, 0x68, 0x45, 0x39, 0x89, 0xfb, 0xd0, 0x4b, 0x18, 0xdd, 0xda, 0x5e}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 08:06:21.705896 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.225055ms
SaveRDFNode: 2020/08/15 08:06:21.706078 Returned.+++++++++++ No error
grmgr: 2020/08/15 08:06:21.706107 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 08:06:21.706114 Send ack to waiting saveNode...
grmgr: 2020/08/15 08:06:21.706122 Looping..... 0
grmgr: 2020/08/15 08:06:21.706156 Looping..... 1
grmgr: 2020/08/15 08:06:21.706162 CAUGHT - goroutine started by previous Ask for saveNode
grmgr: 2020/08/15 08:06:21.706167 has ASKed. Cnt is above limit. Mark saveNode as waiting
SaveRDFNode: xxx 2020/08/15 08:06:21.706177 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"c", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.706183 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"c", Name:"Age", DT:"I", Value:67}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.706192 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"c", Name:"Cars", DT:"SS", Value:[]string{"VW Passat", "Mitsubishi", "Ford Laser", "Honda"}}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.706198 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"c", Name:"DOB", DT:"S", Value:"29 Jan 1953"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.706207 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"c", Name:"Name", DT:"S", Value:"Ian Payne"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.706230 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.706237 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 08:06:21.706241 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 08:06:21.706246 UID request  : uuid.Request{SName:"c", RespCh:(chan util.UID)(0xc000017680)}
SaveRDFNode: 2020/08/15 08:06:21.706250 Waiting for UID ......................
SaveRDFNode: 2020/08/15 08:06:21.706261 UID received  : 9PZEZgg/SgqOpnHERpuiVw==
DB: 2020/08/15 08:06:21.706536 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.556103ms
SaveRDFNode: 2020/08/15 08:06:21.706571 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017e60)}
SaveRDFNode: 2020/08/15 08:06:21.706579 Received UID: X18=
SaveRDFNode: 2020/08/15 08:06:21.706588 a: = db.Item{PKey:[]uint8{0x0, 0x9d, 0x97, 0x9c, 0xbe, 0x68, 0x45, 0x39, 0x89, 0xfb, 0xd0, 0x4b, 0x18, 0xdd, 0xda, 0x5e}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 08:06:21.710671 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.380082ms
DB: 2020/08/15 08:06:21.710969 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.332782ms
SaveRDFNode: 2020/08/15 08:06:21.710978 Returned.+++++++++++ No error
grmgr: 2020/08/15 08:06:21.710986 EndCh received for saveNode. rCnt = 1 
grmgr: 2020/08/15 08:06:21.710991 Send ack to waiting saveNode...
SaveRDFNode: xxx 2020/08/15 08:06:21.711015 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#T", SName:"d", Name:"", DT:"ty", Value:"Person"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.711021 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:A", SName:"d", Name:"Age", DT:"I", Value:36}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.711028 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:C", SName:"d", Name:"Cars", DT:"SS", Value:[]string{"Roll Roycet", "Bentley"}}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.711033 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:D", SName:"d", Name:"DOB", DT:"S", Value:"17 June 1976"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.711044 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#:N", SName:"d", Name:"Name", DT:"S", Value:"Phil Smith"}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.711050 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:F", SName:"__", Name:"Friends", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: xxx 2020/08/15 08:06:21.711056 +++++++++++++++++ SaveRDFNode:ds.NV{Sortk:"A#G#:S", SName:"__", Name:"Siblings", DT:"Nd", Value:[]string{"__"}}
 
SaveRDFNode: 2020/08/15 08:06:21.711060 SaveRDFNode : 7 
SaveRDFNode: 2020/08/15 08:06:21.711065 UID request  : uuid.Request{SName:"d", RespCh:(chan util.UID)(0xc0001cc2a0)}
SaveRDFNode: 2020/08/15 08:06:21.711069 Waiting for UID ......................
SaveRDFNode: 2020/08/15 08:06:21.711078 UID received  : kzfEo4T5SJ6yBual4DJf/A==
grmgr: 2020/08/15 08:06:21.711247 StartCh received for saveNode. rCnt = 2 
DB: 2020/08/15 08:06:21.715131 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.427952ms
DB: 2020/08/15 08:06:21.715887 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.784556ms
DB: 2020/08/15 08:06:21.719478 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.314964ms
DB: 2020/08/15 08:06:21.720257 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.340025ms
DB: 2020/08/15 08:06:21.723761 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.250977ms
DB: 2020/08/15 08:06:21.724570 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.279243ms
DB: 2020/08/15 08:06:21.728211 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.276324ms
SaveRDFNode: 2020/08/15 08:06:21.728224 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
SaveRDFNode: 2020/08/15 08:06:21.728231 Received UID: X18=
SaveRDFNode: 2020/08/15 08:06:21.728241 a: = db.Item{PKey:[]uint8{0xf4, 0xf6, 0x44, 0x66, 0x8, 0x3f, 0x4a, 0xa, 0x8e, 0xa6, 0x71, 0xc4, 0x46, 0x9b, 0xa2, 0x57}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 08:06:21.728937 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.335197ms
DB: 2020/08/15 08:06:21.732505 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.232797ms
SaveRDFNode: 2020/08/15 08:06:21.732524 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc000017680)}
SaveRDFNode: 2020/08/15 08:06:21.732532 Received UID: X18=
SaveRDFNode: 2020/08/15 08:06:21.732542 a: = db.Item{PKey:[]uint8{0xf4, 0xf6, 0x44, 0x66, 0x8, 0x3f, 0x4a, 0xa, 0x8e, 0xa6, 0x71, 0xc4, 0x46, 0x9b, 0xa2, 0x57}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 08:06:21.733096 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 2,
  TableName: "DyGraph"
}. Duration: 4.128622ms
SaveRDFNode: 2020/08/15 08:06:21.733119 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001cc2a0)}
SaveRDFNode: 2020/08/15 08:06:21.733126 Received UID: X18=
SaveRDFNode: 2020/08/15 08:06:21.733136 a: = db.Item{PKey:[]uint8{0x93, 0x37, 0xc4, 0xa3, 0x84, 0xf9, 0x48, 0x9e, 0xb2, 0x6, 0xe6, 0xa5, 0xe0, 0x32, 0x5f, 0xfc}, SortK:"A#G#:F", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 08:06:21.736874 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.287055ms
SaveRDFNode: 2020/08/15 08:06:21.736884 Returned.+++++++++++ No error
grmgr: 2020/08/15 08:06:21.736891 EndCh received for saveNode. rCnt = 1 
DB: 2020/08/15 08:06:21.737285 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.121528ms
SaveRDFNode: 2020/08/15 08:06:21.737297 UID Nd request  : uuid.Request{SName:"__", RespCh:(chan util.UID)(0xc0001cc2a0)}
SaveRDFNode: 2020/08/15 08:06:21.737310 Received UID: X18=
SaveRDFNode: 2020/08/15 08:06:21.737321 a: = db.Item{PKey:[]uint8{0x93, 0x37, 0xc4, 0xa3, 0x84, 0xf9, 0x48, 0x9e, 0xb2, 0x6, 0xe6, 0xa5, 0xe0, 0x32, 0x5f, 0xfc}, SortK:"A#G#:S", Nd:[][]uint8{[]uint8{0x5f, 0x5f}}, XF:[]int{1}, Id:[]int{0}}
DB: 2020/08/15 08:06:21.745358 SaveRDFNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 7.986175ms
SaveRDFNode: 2020/08/15 08:06:21.745500 Returned.+++++++++++ No error
rdfLoader: 2020/08/15 08:06:21.745514 saveNode finished waiting...exiting
grmgr: 2020/08/15 08:06:21.745521 EndCh received for saveNode. rCnt = 0 
anmgr 2020/08/15 08:06:21.745546 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.761023 About to run AttachNodeCh: abc  b  uJnW/Er7Tturjde2chlDng== AJ2XnL5oRTmJ+9BLGN3aXg==
anmgr 2020/08/15 08:06:21.761040 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
grmgr: 2020/08/15 08:06:21.761049 Looping..... 0
grmgr: 2020/08/15 08:06:21.761171 Looping..... 1
grmgr: 2020/08/15 08:06:21.761201 Looping..... 2
grmgr: 2020/08/15 08:06:21.761385 Looping..... 3
grmgr: 2020/08/15 08:06:21.761563 Looping..... 4
grmgr: 2020/08/15 08:06:21.761753 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 08:06:21.761977 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 08:06:21.765705 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.880902ms
DB: 2020/08/15 08:06:21.769158 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.42364ms
DB: 2020/08/15 08:06:21.773723 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.490619ms
anmgr 2020/08/15 08:06:21.776554 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.782724 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 8.423833ms
AttachNode: main 2020/08/15 08:06:21.782739 FetchForUpdate: for parent    AJ2XnL5oRTmJ+9BLGN3aXg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 08:06:21.782745 ** Cache FetchForUpdate Cache Key Value: [AJ2XnL5oRTmJ+9BLGN3aXg==]   sortk: A#G#:S
FetchNode: 2020/08/15 08:06:21.782751  node: AJ2XnL5oRTmJ+9BLGN3aXg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 08:06:21.782981 FetchForUpdate: for child    uJnW/Er7Tturjde2chlDng==
FetchForUpdate: 2020/08/15 08:06:21.782998 ** Cache FetchForUpdate Cache Key Value: [uJnW/Er7Tturjde2chlDng==]   sortk: A#
FetchNode: 2020/08/15 08:06:21.783011  node: uJnW/Er7Tturjde2chlDng== subKey: A#
DB: 2020/08/15 08:06:21.786721 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.934914ms
FetchForUpdate: 2020/08/15 08:06:21.786779 len(nb): 1
fetchItems: 2020/08/15 08:06:21.786786 +++  Cache FetchItems for sortk A#G#:S UID: [AJ2XnL5oRTmJ+9BLGN3aXg==] 
FetchNode: 2020/08/15 08:06:21.786791  node: AJ2XnL5oRTmJ+9BLGN3aXg== subKey: A#G#:S
DB: 2020/08/15 08:06:21.790708 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 3.868432ms
anmgr 2020/08/15 08:06:21.792188 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.796119 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.640655ms
DB: 2020/08/15 08:06:21.802598 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 19.548216ms
FetchForUpdate: 2020/08/15 08:06:21.802704 len(nb): 7
fetchItems: 2020/08/15 08:06:21.802712 +++  Cache FetchItems for sortk A# UID: [uJnW/Er7Tturjde2chlDng==] 
FetchNode: 2020/08/15 08:06:21.802717  node: uJnW/Er7Tturjde2chlDng== subKey: A#
DB: 2020/08/15 08:06:21.806602 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 7  Duration: 3.857935ms
anmgr 2020/08/15 08:06:21.808041 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.812895 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.119021ms
DB: 2020/08/15 08:06:21.818021 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.943001ms
anmgr 2020/08/15 08:06:21.823972 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.824234 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.853721ms
DB: 2020/08/15 08:06:21.831420 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.954548ms
DB: 2020/08/15 08:06:21.837040 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.279608ms
anmgr 2020/08/15 08:06:21.839404 for loop finished 0  6 
anmgr 2020/08/15 08:06:21.839417 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.839423 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.839427 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.842544 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.206595ms
DB: 2020/08/15 08:06:21.848894 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.061058ms
DB: 2020/08/15 08:06:21.853827 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.645133ms
anmgr 2020/08/15 08:06:21.854962 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.859041 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.856458ms
DB: 2020/08/15 08:06:21.863805 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.572226ms
Cache: 2020/08/15 08:06:21.863817 In SetUpredAvailable: pUid, tUID:  AJ2XnL5oRTmJ+9BLGN3aXg== AJ2XnL5oRTmJ+9BLGN3aXg== A#G#:S
Cache: 2020/08/15 08:06:21.863822 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 08:06:21.868603 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.747853ms
Unlock: 2020/08/15 08:06:21.868616 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 08:06:21.868622 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/15 08:06:21.870460 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.878208 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 9.423604ms
grmgr: 2020/08/15 08:06:21.878222 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 08:06:21.880800 ** received on attachDoneCh.... 2
anmgr 2020/08/15 08:06:21.880828 About to run AttachNodeCh: b  c  AJ2XnL5oRTmJ+9BLGN3aXg== 9PZEZgg/SgqOpnHERpuiVw==
anmgr 2020/08/15 08:06:21.880849 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 08:06:21.880856 Looping..... 0
grmgr: 2020/08/15 08:06:21.880972 Looping..... 1
grmgr: 2020/08/15 08:06:21.881157 Looping..... 2
grmgr: 2020/08/15 08:06:21.881332 Looping..... 3
grmgr: 2020/08/15 08:06:21.881507 Looping..... 4
grmgr: 2020/08/15 08:06:21.881682 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 08:06:21.882266 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 08:06:21.885286 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.418813ms
DB: 2020/08/15 08:06:21.889623 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.303125ms
DB: 2020/08/15 08:06:21.894433 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.761615ms
anmgr 2020/08/15 08:06:21.896289 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.899849 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.79671ms
AttachNode: main 2020/08/15 08:06:21.899860 FetchForUpdate: for parent    9PZEZgg/SgqOpnHERpuiVw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 08:06:21.899865 ** Cache FetchForUpdate Cache Key Value: [9PZEZgg/SgqOpnHERpuiVw==]   sortk: A#G#:S
FetchNode: 2020/08/15 08:06:21.899870  node: 9PZEZgg/SgqOpnHERpuiVw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 08:06:21.900040 FetchForUpdate: for child    AJ2XnL5oRTmJ+9BLGN3aXg==
FetchForUpdate: 2020/08/15 08:06:21.900048 ** Cache FetchForUpdate Cache Key Value: [AJ2XnL5oRTmJ+9BLGN3aXg==]   sortk: A#
fetchItems: 2020/08/15 08:06:21.900053 +++  Cache FetchItems for sortk A# UID: [AJ2XnL5oRTmJ+9BLGN3aXg==] 
FetchNode: 2020/08/15 08:06:21.900068  node: AJ2XnL5oRTmJ+9BLGN3aXg== subKey: A#
DB: 2020/08/15 08:06:21.903882 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.773476ms
fetchItems: 2020/08/15 08:06:21.904225 +++  Cache FetchItems for sortk A# UID: [AJ2XnL5oRTmJ+9BLGN3aXg==] 
FetchNode: 2020/08/15 08:06:21.904236  node: AJ2XnL5oRTmJ+9BLGN3aXg== subKey: A#
DB: 2020/08/15 08:06:21.904849 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.950007ms
FetchForUpdate: 2020/08/15 08:06:21.904878 len(nb): 1
fetchItems: 2020/08/15 08:06:21.904884 +++  Cache FetchItems for sortk A#G#:S UID: [9PZEZgg/SgqOpnHERpuiVw==] 
FetchNode: 2020/08/15 08:06:21.904888  node: 9PZEZgg/SgqOpnHERpuiVw== subKey: A#G#:S
DB: 2020/08/15 08:06:21.909748 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 5.484708ms
DB: 2020/08/15 08:06:21.911154 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 6.237834ms
anmgr 2020/08/15 08:06:21.912264 for loop finished 1  6 
anmgr 2020/08/15 08:06:21.912284 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.912291 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.912296 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.920749 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.890718ms
DB: 2020/08/15 08:06:21.927210 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.118ms
anmgr 2020/08/15 08:06:21.927690 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.932569 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.165174ms
DB: 2020/08/15 08:06:21.939042 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 6.126318ms
anmgr 2020/08/15 08:06:21.943368 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.943381 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.943386 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.945283 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.929509ms
DB: 2020/08/15 08:06:21.950011 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.477281ms
DB: 2020/08/15 08:06:21.954972 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.679336ms
anmgr 2020/08/15 08:06:21.958885 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.961354 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.075388ms
DB: 2020/08/15 08:06:21.966212 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.558467ms
DB: 2020/08/15 08:06:21.971295 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.773497ms
anmgr 2020/08/15 08:06:21.974359 for loop finished 1  6 
anmgr 2020/08/15 08:06:21.974378 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.974385 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.974404 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:21.975949 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.485621ms
Cache: 2020/08/15 08:06:21.975960 In SetUpredAvailable: pUid, tUID:  9PZEZgg/SgqOpnHERpuiVw== 9PZEZgg/SgqOpnHERpuiVw== A#G#:S
Cache: 2020/08/15 08:06:21.975965 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 08:06:21.980566 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.565986ms
Unlock: 2020/08/15 08:06:21.980576 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 08:06:21.980581 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 08:06:21.985437 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.802899ms
grmgr: 2020/08/15 08:06:21.985452 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 08:06:21.989750 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:21.989764 ** received on attachDoneCh.... 0
anmgr 2020/08/15 08:06:22.000116 About to run AttachNodeCh: b  abc  AJ2XnL5oRTmJ+9BLGN3aXg== uJnW/Er7Tturjde2chlDng==
anmgr 2020/08/15 08:06:22.000131 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.000137 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.000142 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
grmgr: 2020/08/15 08:06:22.000149 Looping..... 0
grmgr: 2020/08/15 08:06:22.000274 Looping..... 1
grmgr: 2020/08/15 08:06:22.000461 Looping..... 2
grmgr: 2020/08/15 08:06:22.000629 Looping..... 3
grmgr: 2020/08/15 08:06:22.000805 Looping..... 4
grmgr: 2020/08/15 08:06:22.000983 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 08:06:22.001208 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 08:06:22.005112 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.060993ms
DB: 2020/08/15 08:06:22.009928 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.771249ms
DB: 2020/08/15 08:06:22.014805 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.791812ms
anmgr 2020/08/15 08:06:22.015674 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.020007 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 5.017896ms
AttachNode: main 2020/08/15 08:06:22.020034 FetchForUpdate: for parent    uJnW/Er7Tturjde2chlDng==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 08:06:22.020039 ** Cache FetchForUpdate Cache Key Value: [uJnW/Er7Tturjde2chlDng==]   sortk: A#G#:S
fetchItems: 2020/08/15 08:06:22.020045 +++  Cache FetchItems for sortk A#G#:S UID: [uJnW/Er7Tturjde2chlDng==] 
FetchNode: 2020/08/15 08:06:22.020050  node: uJnW/Er7Tturjde2chlDng== subKey: A#G#:S
AttachNode: gr1 2020/08/15 08:06:22.020279 FetchForUpdate: for child    AJ2XnL5oRTmJ+9BLGN3aXg==
FetchForUpdate: 2020/08/15 08:06:22.020293 ** Cache FetchForUpdate Cache Key Value: [AJ2XnL5oRTmJ+9BLGN3aXg==]   sortk: A#
fetchItems: 2020/08/15 08:06:22.020298 +++  Cache FetchItems for sortk A# UID: [AJ2XnL5oRTmJ+9BLGN3aXg==] 
FetchNode: 2020/08/15 08:06:22.020310  node: AJ2XnL5oRTmJ+9BLGN3aXg== subKey: A#
DB: 2020/08/15 08:06:22.024028 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 3.662175ms
DB: 2020/08/15 08:06:22.024617 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 1  Duration: 4.534699ms
DB: 2020/08/15 08:06:22.030897 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.239975ms
anmgr 2020/08/15 08:06:22.031494 for loop finished 2  6 
anmgr 2020/08/15 08:06:22.031511 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.031518 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.031524 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.036909 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.932357ms
DB: 2020/08/15 08:06:22.041535 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.572575ms
DB: 2020/08/15 08:06:22.046399 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.759792ms
anmgr 2020/08/15 08:06:22.047093 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.047108 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.047114 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.047120 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.047126 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.052397 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.923457ms
DB: 2020/08/15 08:06:22.057060 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.583194ms
DB: 2020/08/15 08:06:22.061852 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.72003ms
anmgr 2020/08/15 08:06:22.062581 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.068090 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.950197ms
DB: 2020/08/15 08:06:22.072941 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.560087ms
DB: 2020/08/15 08:06:22.078251 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.010986ms
anmgr 2020/08/15 08:06:22.078612 for loop finished 2  6 
anmgr 2020/08/15 08:06:22.078625 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.078637 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.078643 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.085326 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 6.891324ms
Cache: 2020/08/15 08:06:22.085342 In SetUpredAvailable: pUid, tUID:  uJnW/Er7Tturjde2chlDng== uJnW/Er7Tturjde2chlDng== A#G#:S
Cache: 2020/08/15 08:06:22.085348 tuid=puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 08:06:22.090020 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.638299ms
Unlock: 2020/08/15 08:06:22.090030 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 08:06:22.090034 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/15 08:06:22.094096 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.094108 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.094113 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.094118 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.094124 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.095120 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.035279ms
grmgr: 2020/08/15 08:06:22.095133 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 08:06:22.099300 ** received on attachDoneCh.... 1
anmgr 2020/08/15 08:06:22.104506 About to run AttachNodeCh: c  abc  9PZEZgg/SgqOpnHERpuiVw== uJnW/Er7Tturjde2chlDng==
anmgr 2020/08/15 08:06:22.104524 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/15 08:06:22.104533 Looping..... 0
grmgr: 2020/08/15 08:06:22.104665 Looping..... 1
grmgr: 2020/08/15 08:06:22.104846 Looping..... 2
grmgr: 2020/08/15 08:06:22.105021 Looping..... 3
grmgr: 2020/08/15 08:06:22.105196 Looping..... 4
grmgr: 2020/08/15 08:06:22.105372 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 08:06:22.105590 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 08:06:22.108590 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.149661ms
DB: 2020/08/15 08:06:22.112108 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.482601ms
DB: 2020/08/15 08:06:22.116953 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.771115ms
anmgr 2020/08/15 08:06:22.119924 for loop finished 3  6 
anmgr 2020/08/15 08:06:22.119944 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.119952 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.119958 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.122136 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.973086ms
AttachNode: main 2020/08/15 08:06:22.122151 FetchForUpdate: for parent    uJnW/Er7Tturjde2chlDng==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 08:06:22.122157 ** Cache FetchForUpdate Cache Key Value: [uJnW/Er7Tturjde2chlDng==]   sortk: A#G#:S
fetchItems: 2020/08/15 08:06:22.122163 +++  Cache FetchItems for sortk A#G#:S UID: [uJnW/Er7Tturjde2chlDng==] 
FetchNode: 2020/08/15 08:06:22.122168  node: uJnW/Er7Tturjde2chlDng== subKey: A#G#:S
AttachNode: gr1 2020/08/15 08:06:22.122402 FetchForUpdate: for child    9PZEZgg/SgqOpnHERpuiVw==
FetchForUpdate: 2020/08/15 08:06:22.122412 ** Cache FetchForUpdate Cache Key Value: [9PZEZgg/SgqOpnHERpuiVw==]   sortk: A#
fetchItems: 2020/08/15 08:06:22.122418 +++  Cache FetchItems for sortk A# UID: [9PZEZgg/SgqOpnHERpuiVw==] 
FetchNode: 2020/08/15 08:06:22.122447  node: 9PZEZgg/SgqOpnHERpuiVw== subKey: A#
DB: 2020/08/15 08:06:22.125536 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.332119ms
DB: 2020/08/15 08:06:22.126653 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.155862ms
fetchItems: 2020/08/15 08:06:22.126998 +++  Cache FetchItems for sortk A# UID: [9PZEZgg/SgqOpnHERpuiVw==] 
FetchNode: 2020/08/15 08:06:22.127009  node: 9PZEZgg/SgqOpnHERpuiVw== subKey: A#
DB: 2020/08/15 08:06:22.131165 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.182417ms
DB: 2020/08/15 08:06:22.131699 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.661549ms
anmgr 2020/08/15 08:06:22.135418 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.135436 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.135442 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.135448 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.135454 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.135461 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.135466 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.135856 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.658352ms
DB: 2020/08/15 08:06:22.135872 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.658352ms
DB: 2020/08/15 08:06:22.141197 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.290509ms
DB: 2020/08/15 08:06:22.141213 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.290509ms
DB: 2020/08/15 08:06:22.146577 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 5.182718ms
anmgr 2020/08/15 08:06:22.150898 for loop finished 3  6 
anmgr 2020/08/15 08:06:22.150918 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.150926 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.150931 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.151636 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.856506ms
DB: 2020/08/15 08:06:22.158203 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.229996ms
DB: 2020/08/15 08:06:22.163208 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.709373ms
anmgr 2020/08/15 08:06:22.166427 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.166444 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.166450 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.166456 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.166461 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.166467 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.166473 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.168645 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.826158ms
DB: 2020/08/15 08:06:22.175790 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.650454ms
DB: 2020/08/15 08:06:22.180950 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.73713ms
anmgr 2020/08/15 08:06:22.181969 for loop finished 3  6 
anmgr 2020/08/15 08:06:22.181986 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.181994 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.182000 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.186333 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.786115ms
DB: 2020/08/15 08:06:22.193101 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.491507ms
anmgr 2020/08/15 08:06:22.197455 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.197468 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.197473 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.197478 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.197483 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.197500 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.197504 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.199190 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 6.001649ms
DB: 2020/08/15 08:06:22.204010 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.756082ms
DB: 2020/08/15 08:06:22.208746 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.676919ms
Cache: 2020/08/15 08:06:22.208758 In SetUpredAvailable: pUid, tUID:  uJnW/Er7Tturjde2chlDng== j13wtKlASRCgKsrA75AMTA== A#G#:S
Cache: 2020/08/15 08:06:22.208764 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
anmgr 2020/08/15 08:06:22.212845 for loop finished 3  6 
anmgr 2020/08/15 08:06:22.212859 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.212866 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.212871 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.213585 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.782738ms
Unlock: 2020/08/15 08:06:22.213594 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 08:06:22.213599 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 08:06:22.218537 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 4.882498ms
grmgr: 2020/08/15 08:06:22.218556 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 08:06:22.223160 ** received on attachDoneCh.... 2
anmgr 2020/08/15 08:06:22.223180 About to run AttachNodeCh: abc  c  uJnW/Er7Tturjde2chlDng== 9PZEZgg/SgqOpnHERpuiVw==
anmgr 2020/08/15 08:06:22.223189 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.223207 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.223212 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.223218 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.223222 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.223227 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.223232 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
grmgr: 2020/08/15 08:06:22.223241 Looping..... 0
grmgr: 2020/08/15 08:06:22.223263 Looping..... 1
grmgr: 2020/08/15 08:06:22.223458 Looping..... 2
grmgr: 2020/08/15 08:06:22.223640 Looping..... 3
grmgr: 2020/08/15 08:06:22.223819 Looping..... 4
grmgr: 2020/08/15 08:06:22.224019 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 08:06:22.224243 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 08:06:22.227599 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.481571ms
DB: 2020/08/15 08:06:22.231752 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.119876ms
DB: 2020/08/15 08:06:22.236606 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.783135ms
anmgr 2020/08/15 08:06:22.238650 for loop finished 4  6 
anmgr 2020/08/15 08:06:22.238667 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.238674 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.238679 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.238684 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.238690 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.238695 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.238700 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.238705 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.238709 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.238715 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.238719 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.241728 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.959944ms
AttachNode: main 2020/08/15 08:06:22.241742 FetchForUpdate: for parent    9PZEZgg/SgqOpnHERpuiVw==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 08:06:22.241747 ** Cache FetchForUpdate Cache Key Value: [9PZEZgg/SgqOpnHERpuiVw==]   sortk: A#G#:S
fetchItems: 2020/08/15 08:06:22.241752 +++  Cache FetchItems for sortk A#G#:S UID: [9PZEZgg/SgqOpnHERpuiVw==] 
FetchNode: 2020/08/15 08:06:22.241757  node: 9PZEZgg/SgqOpnHERpuiVw== subKey: A#G#:S
AttachNode: gr1 2020/08/15 08:06:22.241951 FetchForUpdate: for child    uJnW/Er7Tturjde2chlDng==
FetchForUpdate: 2020/08/15 08:06:22.241960 ** Cache FetchForUpdate Cache Key Value: [uJnW/Er7Tturjde2chlDng==]   sortk: A#
fetchItems: 2020/08/15 08:06:22.241965 +++  Cache FetchItems for sortk A# UID: [uJnW/Er7Tturjde2chlDng==] 
FetchNode: 2020/08/15 08:06:22.241995  node: uJnW/Er7Tturjde2chlDng== subKey: A#
DB: 2020/08/15 08:06:22.245191 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.397453ms
DB: 2020/08/15 08:06:22.246530 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.490111ms
DB: 2020/08/15 08:06:22.250307 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.949459ms
anmgr 2020/08/15 08:06:22.254480 for loop finished 4  6 
anmgr 2020/08/15 08:06:22.254515 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.254532 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.254544 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.254556 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.254569 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.254582 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.254593 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.254623 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.254650 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.254663 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.254675 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.254915 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.574328ms
DB: 2020/08/15 08:06:22.254933 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.574328ms
DB: 2020/08/15 08:06:22.259742 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.777351ms
DB: 2020/08/15 08:06:22.259756 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.777351ms
DB: 2020/08/15 08:06:22.264752 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.920481ms
DB: 2020/08/15 08:06:22.269826 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.007522ms
anmgr 2020/08/15 08:06:22.270707 for loop finished 4  6 
anmgr 2020/08/15 08:06:22.270723 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.270730 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.270740 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.270746 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.270752 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.270758 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.270771 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.270777 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.270783 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.270788 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.270794 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.276540 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.038306ms
DB: 2020/08/15 08:06:22.281436 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.64559ms
DB: 2020/08/15 08:06:22.287343 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.338655ms
anmgr 2020/08/15 08:06:22.288173 for loop finished 4  6 
anmgr 2020/08/15 08:06:22.288187 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.288199 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.288204 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.288210 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.288215 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.288220 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.288225 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.288230 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.288235 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.288240 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.288245 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.294448 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.466363ms
DB: 2020/08/15 08:06:22.300152 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.639278ms
anmgr 2020/08/15 08:06:22.304373 for loop finished 4  6 
anmgr 2020/08/15 08:06:22.304388 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.304395 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.304400 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.304405 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.304410 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.304415 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.304437 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.304443 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.304459 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.304466 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.304470 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.305681 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.434419ms
DB: 2020/08/15 08:06:22.312619 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.858779ms
DB: 2020/08/15 08:06:22.317200 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.494295ms
anmgr 2020/08/15 08:06:22.320236 for loop finished 4  6 
anmgr 2020/08/15 08:06:22.320252 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.320260 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.320266 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.320271 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.320277 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.320282 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.320288 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.320294 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.320299 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.320304 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.320310 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.322371 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.09808ms
DB: 2020/08/15 08:06:22.327059 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.616563ms
Cache: 2020/08/15 08:06:22.327072 In SetUpredAvailable: pUid, tUID:  9PZEZgg/SgqOpnHERpuiVw== ecSNMDDDThqK7pCUL0dkzQ== A#G#:S
Cache: 2020/08/15 08:06:22.327078 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 08:06:22.332654 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.538346ms
Unlock: 2020/08/15 08:06:22.332665 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 08:06:22.332671 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
anmgr 2020/08/15 08:06:22.335681 for loop finished 4  6 
anmgr 2020/08/15 08:06:22.335696 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.335702 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"b", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.335707 for loop: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.335712 running or done: e = anmgr.EdgeSn{CSn:"abc", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.335726 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.335731 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.335736 for loop: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.335752 running or done: e = anmgr.EdgeSn{CSn:"b", PSn:"c", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.335758 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.335762 running or done: e = anmgr.EdgeSn{CSn:"c", PSn:"abc", Sortk:"A#G#:S"}
anmgr 2020/08/15 08:06:22.335767 for loop: e = anmgr.EdgeSn{CSn:"c", PSn:"b", Sortk:"A#G#:S"}
DB: 2020/08/15 08:06:22.338116 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.392343ms
grmgr: 2020/08/15 08:06:22.338134 EndCh received for nodeAttach. rCnt = 0 
anmgr 2020/08/15 08:06:22.340930 ** received on attachDoneCh.... 1
anmgr 2020/08/15 08:06:22.346022 About to run AttachNodeCh: c  b  9PZEZgg/SgqOpnHERpuiVw== AJ2XnL5oRTmJ+9BLGN3aXg==
anmgr 2020/08/15 08:06:22.346034 for loop finished 5  6 
grmgr: 2020/08/15 08:06:22.346040 Looping..... 0
grmgr: 2020/08/15 08:06:22.346193 Looping..... 1
grmgr: 2020/08/15 08:06:22.346368 Looping..... 2
grmgr: 2020/08/15 08:06:22.346561 Looping..... 3
grmgr: 2020/08/15 08:06:22.346753 Looping..... 4
grmgr: 2020/08/15 08:06:22.346947 has ASKed. Under cnt limit. Send ACK on routine channel..nodeAttach
grmgr: 2020/08/15 08:06:22.347171 StartCh received for nodeAttach. rCnt = 1 
DB: 2020/08/15 08:06:22.350059 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 3.041955ms
DB: 2020/08/15 08:06:22.354671 NodeExists: consumed capacity for GetItem: {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}  Duration: 4.583136ms
DB: 2020/08/15 08:06:22.359408 EdgeExists: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.683939ms
DB: 2020/08/15 08:06:22.364354 LogEvent for AttachNode: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}. Duration: 4.876394ms
AttachNode: main 2020/08/15 08:06:22.364377 FetchForUpdate: for parent    AJ2XnL5oRTmJ+9BLGN3aXg==  sortk: A#G#:S
FetchForUpdate: 2020/08/15 08:06:22.364382 ** Cache FetchForUpdate Cache Key Value: [AJ2XnL5oRTmJ+9BLGN3aXg==]   sortk: A#G#:S
fetchItems: 2020/08/15 08:06:22.364388 +++  Cache FetchItems for sortk A#G#:S UID: [AJ2XnL5oRTmJ+9BLGN3aXg==] 
FetchNode: 2020/08/15 08:06:22.364393  node: AJ2XnL5oRTmJ+9BLGN3aXg== subKey: A#G#:S
AttachNode: gr1 2020/08/15 08:06:22.364606 FetchForUpdate: for child    9PZEZgg/SgqOpnHERpuiVw==
FetchForUpdate: 2020/08/15 08:06:22.364630 ** Cache FetchForUpdate Cache Key Value: [9PZEZgg/SgqOpnHERpuiVw==]   sortk: A#
fetchItems: 2020/08/15 08:06:22.364636 +++  Cache FetchItems for sortk A# UID: [9PZEZgg/SgqOpnHERpuiVw==] 
FetchNode: 2020/08/15 08:06:22.364652  node: 9PZEZgg/SgqOpnHERpuiVw== subKey: A#
DB: 2020/08/15 08:06:22.367844 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 4  Duration: 3.418772ms
DB: 2020/08/15 08:06:22.368803 FetchNode:consumed capacity for Query  {
  CapacityUnits: 0.5,
  TableName: "DyGraph"
}. ItemCount 10  Duration: 4.107505ms
DB: 2020/08/15 08:06:22.372966 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.720726ms
DB: 2020/08/15 08:06:22.377368 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.366044ms
DB: 2020/08/15 08:06:22.377384 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.366044ms
DB: 2020/08/15 08:06:22.382010 MakeOverflowBlock: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.594639ms
DB: 2020/08/15 08:06:22.382025 MakeOverflowBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.594639ms
DB: 2020/08/15 08:06:22.386908 SaveChildUIDtoOvflBlock: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.807482ms
DB: 2020/08/15 08:06:22.391922 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.866237ms
DB: 2020/08/15 08:06:22.398746 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 6.498034ms
DB: 2020/08/15 08:06:22.404255 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 5.321635ms
DB: 2020/08/15 08:06:22.409454 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.834224ms
DB: 2020/08/15 08:06:22.415729 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.976096ms
DB: 2020/08/15 08:06:22.420704 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.689881ms
DB: 2020/08/15 08:06:22.425757 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.757983ms
DB: 2020/08/15 08:06:22.431930 PropagateChildData:consumed capacity for UpdateItem  <nil>.  Duration: 5.835402ms
DB: 2020/08/15 08:06:22.436943 createPropagationScalarItem: consumed capacity for PutItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}. Duration: 4.728714ms
DB: 2020/08/15 08:06:22.442616 PropagateChildData:consumed capacity for UpdateItem  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 5.380495ms
DB: 2020/08/15 08:06:22.447694 AddReverseEdge: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGraph"
}, Duration: 4.788879ms
Cache: 2020/08/15 08:06:22.447707 In SetUpredAvailable: pUid, tUID:  AJ2XnL5oRTmJ+9BLGN3aXg== q4mSWO58Qs2dfssCdUnRvQ== A#G#:S
Cache: 2020/08/15 08:06:22.447713 tuid != puid: ABOUT TO SET UID_PREP AS AVAILABLE. in db
DB: 2020/08/15 08:06:22.452663 SaveUpredState:consumed capacity for Query  {
  CapacityUnits: 1,
  TableName: "DyGraph"
}.  Duration: 4.914844ms
Unlock: 2020/08/15 08:06:22.452673 ******* IN UNLOCK NC ********************
Unlock: 2020/08/15 08:06:22.452677 ******* IN UNLOCK NC ********************  ON cUID for AttachNode second goroutine..
DB: 2020/08/15 08:06:22.457784 UpdateEvent: consumed updateitem capacity: {
  CapacityUnits: 1,
  TableName: "DyGEvent"
}, Duration: 5.04706ms
grmgr: 2020/08/15 08:06:22.457803 EndCh received for nodeAttach. rCnt = 0 
rdfLoader: 2020/08/15 08:06:22.457809 saveNode finished waiting...exiting
rdfLoader: 2020/08/15 08:06:22.457815 cancel contexts
rdfLoader: 2020/08/15 08:06:22.457820 wait for autonomous goroutines to end
errlog: 2020/08/15 08:06:22.457826 Powering down...
grmgr: 2020/08/15 08:06:22.457830 Powering down...
anmgr: 2020/08/15 08:06:22.457835 Powering down...
rdfuuid: 2020/08/15 08:06:22.457840 Powering down...
rdfLoader: 2020/08/15 08:06:22.457845 loader exists.....
